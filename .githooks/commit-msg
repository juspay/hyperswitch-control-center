#!/bin/sh

echo "*****~~~~~ Commit hook initiated ~~~~~~*****"

commit_msg_file=$1
commit_msg=$(cat "$commit_msg_file")

# For formatting your code
echo
echo "*****~~~~~ Formatting - Check for unformatted files ~~~~~~*****"

# Check for unformatted JavaScript and JSON files using Prettier
unformatted_js_files=$(git ls-files | grep '\.js\|\.json' | xargs npx prettier --list-different)

# If there are unformatted JavaScript, TypeScript, or JSON files, print an error message and exit with a non-zero status code
if [ -n "$unformatted_js_files" ]; then
  echo "Error: Unformatted JavaScript, YML or JSON files found. Please run 'npx prettier --write .' for formatting whole repository or 'npx prettier --write' on the following files:"
  echo "$unformatted_js_files"
  exit 1
fi

# Check for unformatted ReScript files
npm run re:format

echo
echo "*****~~~~~ All files are formatted. ~~~~~~*****"
echo

echo
echo "*****~~~~~ Commit message validation! ~~~~~*****"
echo
# Define your commit message convention (e.g., starts with "feat:", "fix:", etc.)
commit_regex="^(Merge branch|(feat|fix|chore|refactor|docs|test|style|enhancement):).+"



if ! echo "$commit_msg" | grep -Ei "$commit_regex" ; then
    echo "Aborting commit. Your commit message does not follow the conventional format."
    echo "The commit message should begin with one of the following keywords followed by a colon: 'feat', 'fix', 'chore', 'refactor', 'docs', 'test' or 'style'. For example, it should be formatted like this: 'feat: <subject> - <description>'"
    exit 1
fi

# If the commit message matches the convention, the script exits successfully.
echo
echo "*****~~~~~ Commit hook completed ~~~~~~*****"
echo
exit 0
