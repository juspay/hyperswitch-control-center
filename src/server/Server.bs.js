// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Http from "http";
import * as ConfigMjs from "./config.mjs";
import * as HealthMjs from "./health.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ServeHandler from "serve-handler";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var appName = process.env["appName"];

var serverPath = "dist/hyperswitch";

function configHandler(prim0, prim1, prim2, prim3, prim4) {
  ConfigMjs.configHandler(prim0, prim1, prim2, prim3, prim4);
}

function healthHandler(prim0, prim1) {
  HealthMjs.healthHandler(prim0, prim1);
}

function healthReadinessHandler(prim0, prim1) {
  HealthMjs.healthReadinessHandler(prim0, prim1);
}

var ServerHandler = {};

if (appName === "hyperswitch") {
  var htmlInFs = Fs.readFileSync("dist/hyperswitch/index.html", {
    encoding: "utf8",
  });
  Fs.writeFileSync("dist/hyperswitch/hyperswitch.html", htmlInFs);
}

var currentCommitHash = Core__Option.getOr(GIT_COMMIT_HASH, "no-commit-hash");

function serverHandler(request, response) {
  var arr = request.url.toString().split("?");
  var domain = Core__Option.getOr(
    Core__Option.getOr(arr[1], "domain=default").split("=")[1],
    "default",
  );
  var path = Core__Option.getOr(arr[0], "")
    .replace(/^\/\//, "/")
    .replace(/^\/v4\//, "/");
  if (path.includes("/config/merchant-config") && request.method === "GET") {
    var path$1 = Core__Option.getOr(
      process.env["configPath"],
      "dist/server/config/config.toml",
    );
    return new Promise(function (resolve, _reject) {
      configHandler(request, response, true, domain, path$1);
      var __x;
      resolve(__x);
    });
  }
  if (path === "/health" && request.method === "GET") {
    return new Promise(function (resolve, _reject) {
      HealthMjs.healthHandler(request, response);
      var __x;
      resolve(__x);
    });
  }
  if (path === "/health/ready" && request.method === "GET") {
    return new Promise(function (resolve, _reject) {
      HealthMjs.healthReadinessHandler(request, response);
      var __x;
      resolve(__x);
    });
  }
  var cache = request.url.toString().endsWith(".svg")
    ? "max-age=3600, must-revalidate"
    : "no-cache";
  var newRequest_headers = request.headers;
  var newRequest_method = request.method;
  var newRequest_on = request.on;
  var newRequest_read = request.read;
  var newRequest = {
    url: path,
    headers: newRequest_headers,
    method: newRequest_method,
    on: newRequest_on,
    read: newRequest_read,
  };
  var headers = [
    {
      key: "X-Deployment-Id",
      value: currentCommitHash,
    },
    {
      key: "Cache-Control",
      value: cache,
    },
    {
      key: "Access-Control-Allow-Origin",
      value: "*",
    },
    {
      key: "Access-Control-Allow-Headers",
      value: "*",
    },
    {
      key: "ETag",
      value: '"' + currentCommitHash + '"',
    },
  ];
  return ServeHandler(newRequest, response, {
    public: serverPath,
    rewrites: [
      {
        source: "**",
        destination: "/index.html",
      },
    ],
    headers: [
      {
        source: "**",
        headers: headers,
      },
    ],
  });
}

function serverHandlerWrapper(req, res) {
  try {
    return serverHandler(req, res);
  } catch (raw_err) {
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    var err$1 = Core__Option.getOr(
      Core__Option.flatMap(Caml_js_exceptions.as_js_exn(err), function (msg) {
        return msg.message;
      }),
      "Error Found",
    );
    res.writeHead(200, {
      "Content-Type": "text/plain",
    });
    (function (__x) {
      res.write(__x);
    })("Error : " + err$1);
    res.end();
    return Promise.resolve();
  }
}

var server = Http.createServer(serverHandlerWrapper);

server.listen(9000, function () {
  var portStr = (9000).toString();
  console.log("Running at http://localhost:" + portStr + "/");
});

var port = 9000;

export {
  appName,
  serverPath,
  port,
  configHandler,
  healthHandler,
  healthReadinessHandler,
  ServerHandler,
  currentCommitHash,
  serverHandler,
  serverHandlerWrapper,
  server,
};
/* appName Not a pure module */
