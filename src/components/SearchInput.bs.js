// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Lottie from "../libraries/Lottie.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as PopUpState from "../hooks/PopUpState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LottieFiles from "./custom-icons/LottieFiles.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as ReactSuspenseWrapper from "../context/ReactSuspenseWrapper.bs.js";

function SearchInput(props) {
  var __onKeyDown = props.onKeyDown;
  var __bgColor = props.bgColor;
  var __placeholderCss = props.placeholderCss;
  var __shouldSubmitForm = props.shouldSubmitForm;
  var __heightClass = props.heightClass;
  var __widthClass = props.widthClass;
  var __roundedBorder = props.roundedBorder;
  var __placeholder = props.placeholder;
  var __autoFocus = props.autoFocus;
  var inputText = props.inputText;
  var onChange = props.onChange;
  var autoFocus = __autoFocus !== undefined ? __autoFocus : true;
  var placeholder = __placeholder !== undefined ? __placeholder : "";
  var roundedBorder = __roundedBorder !== undefined ? __roundedBorder : true;
  var widthClass = __widthClass !== undefined ? __widthClass : "w-full";
  var heightClass = __heightClass !== undefined ? __heightClass : "h-8";
  var shouldSubmitForm =
    __shouldSubmitForm !== undefined ? __shouldSubmitForm : true;
  var placeholderCss =
    __placeholderCss !== undefined
      ? __placeholderCss
      : "bg-transparent text-fs-14";
  var bgColor =
    __bgColor !== undefined
      ? __bgColor
      : "bg-white border-jp-gray-600 border-opacity-75 focus-within:border-blue-500";
  var onKeyDown = __onKeyDown !== undefined ? __onKeyDown : function (param) {};
  var match = React.useState(function () {
    return "";
  });
  var setPrevVal = match[1];
  var prevVal = match[0];
  var showPopUp = PopUpState.useShowPopUp();
  var defaultRef = React.useRef(null);
  var searchRef = Core__Option.getOr(props.searchRef, defaultRef);
  var handleSearch = function (e) {
    setPrevVal(function (param) {
      return inputText;
    });
    var value = e.target.value;
    if (value.includes("<script>") || value.includes("</script>")) {
      showPopUp({
        heading: "Script Tags are not allowed",
        description: "Input cannot contain <script>, </script> tags",
        popUpType: ["Warning", "WithIcon"],
        handleConfirm: {
          text: "OK",
        },
      });
    }
    var searchStr = value.replace("<script>", "").replace("</script>", "");
    onChange(searchStr);
  };
  var clearSearch = function (e) {
    e.stopPropagation();
    onChange("");
  };
  var form = shouldSubmitForm ? undefined : "fakeForm";
  var borderClass = roundedBorder
    ? "border rounded-md pl-1 pr-2"
    : "border-b-2 focus-within:border-b";
  var exitCross = LottieFiles.useLottieJson(LottieFiles.exitSearchCross);
  var enterCross = LottieFiles.useLottieJson(LottieFiles.enterSearchCross);
  return React.createElement(
    "div",
    {
      className:
        widthClass +
        " " +
        borderClass +
        " " +
        heightClass +
        " " +
        bgColor +
        " flex flex-row items-center justify-between\n    dark:bg-jp-gray-lightgray_background\n    dark:focus-within:border-blue-500 hover:border-opacity-100 \n    dark:border-jp-gray-850 dark:border-opacity-50 dark:hover:border-opacity-100",
    },
    React.createElement("input", {
      ref: Caml_option.some(searchRef),
      className: "rounded-md w-full pl-2 focus:outline-none " + placeholderCss,
      autoFocus: autoFocus,
      form: form,
      placeholder: placeholder,
      type: "text",
      value: inputText,
      onKeyDown: onKeyDown,
      onChange: handleSearch,
    }),
    React.createElement(AddDataAttributes.make, {
      attributes: [["data-icon", "searchExit"]],
      children: React.createElement(
        "div",
        {
          className: "h-6 my-auto w-6",
          onClick: clearSearch,
        },
        React.createElement(ReactSuspenseWrapper.make, {
          children: React.createElement(Lottie.make, {
            animationData:
              (LogicUtils.isNonEmptyString(prevVal) &&
                LogicUtils.isEmptyString(inputText)) ||
              (LogicUtils.isEmptyString(prevVal) &&
                LogicUtils.isEmptyString(inputText))
                ? exitCross
                : enterCross,
            autoplay: true,
            loop: false,
          }),
          loadingText: "",
        }),
      ),
    }),
  );
}

var make = SearchInput;

export { make };
/* react Not a pure module */
