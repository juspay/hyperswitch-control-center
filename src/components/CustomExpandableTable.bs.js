// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Table from "./Table.bs.js";
import * as React from "react";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as SelectBox from "./SelectBox.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as TableUtils from "./TableUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as CollapsableTableRow from "./CollapsableTableRow.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";

function CustomExpandableTable(props) {
  var __showSerial = props.showSerial;
  var getRowDetails = props.getRowDetails;
  var expandedRowIndexArray = props.expandedRowIndexArray;
  var onExpandIconClick = props.onExpandIconClick;
  var filterObj = props.filterObj;
  var setFilterObj = props.setFilterObj;
  var sortedObj = props.sortedObj;
  var setSortedObj = props.setSortedObj;
  var __showScrollBar = props.showScrollBar;
  var __fullWidth = props.fullWidth;
  var __offset = props.offset;
  var __heading = props.heading;
  var title = props.title;
  var heading = __heading !== undefined ? __heading : [];
  var offset = __offset !== undefined ? __offset : 0;
  var fullWidth = __fullWidth !== undefined ? __fullWidth : true;
  var showScrollBar = __showScrollBar !== undefined ? __showScrollBar : false;
  var showSerial = __showSerial !== undefined ? __showSerial : false;
  if (showSerial) {
    heading.unshift(
      Table.makeHeaderInfo(
        "serial_number",
        "S.No",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    );
  }
  var isMobileView = MatchMedia.useMobileChecker();
  var filterPresent = Core__Option.isSome(
    heading.find(function (head) {
      return head.showFilter;
    }),
  );
  var highlightEnabledFieldsArray = Core__Array.reduceWithIndex(
    heading,
    [],
    function (acc, item, index) {
      if (item.highlightCellOnHover) {
        acc.push(index);
      }
      return acc;
    },
  );
  var scrollBarClass = showScrollBar ? "show-scrollbar" : "";
  var a = props.rows.map(function (data, i) {
    if (showSerial) {
      data.unshift({
        TAG: "Text",
        _0: ((i + 1) | 0).toString(),
      });
    }
    return data;
  });
  var headingsLen = heading.length;
  var widthClass = fullWidth ? "min-w-full" : "";
  return React.createElement(
    "div",
    {
      className: "overflow " + scrollBarClass + " ",
      style: {
        minHeight: filterPresent ? "30rem" : "",
      },
    },
    React.createElement(AddDataAttributes.make, {
      attributes: [["data-expandable-table", title]],
      children: React.createElement(
        "table",
        {
          className:
            "table-auto " +
            widthClass +
            " h-full border border-jp-gray-500 dark:border-jp-gray-960 rounded",
          colSpan: 0,
        },
        React.createElement(RenderIf.make, {
          condition: heading.length !== 0 && !isMobileView,
          children: React.createElement(
            "thead",
            undefined,
            React.createElement(
              "tr",
              undefined,
              heading.map(function (item, i) {
                var isFirstCol = i === 0;
                var isLastCol = i === ((headingsLen - 1) | 0);
                var oldThemeRoundedClass = isFirstCol
                  ? "rounded-tl"
                  : isLastCol
                    ? "rounded-tr"
                    : "";
                var borderClass = isLastCol
                  ? ""
                  : "border-jp-gray-500 dark:border-jp-gray-960";
                var order =
                  sortedObj !== undefined && sortedObj.key === item.key
                    ? sortedObj.order
                    : "NONE";
                var handleSortClick = function (_ev) {
                  if (setSortedObj !== undefined) {
                    return setSortedObj(function (param) {
                      return {
                        key: item.key,
                        order: order === "DEC" ? "INC" : "DEC",
                      };
                    });
                  }
                };
                var tmp;
                if (item.showFilter) {
                  var match = Core__Option.getOr(
                    Core__Option.flatMap(filterObj, function (obj) {
                      var ele = obj[i];
                      return ele !== undefined
                        ? [ele.options, ele.selected]
                        : [[], []];
                    }),
                    [[], []],
                  );
                  var options = match[0];
                  if (options.length > 1) {
                    var filterInput_onBlur = function (_ev) {};
                    var filterInput_onChange = function (ev) {
                      if (setFilterObj !== undefined) {
                        return setFilterObj(function (prevFilterObj) {
                          return Core__Option.map(
                            prevFilterObj,
                            function (prevObj) {
                              return prevObj.map(function (obj) {
                                if (obj.key === i.toString()) {
                                  return {
                                    key: i.toString(),
                                    options: obj.options,
                                    selected: ev,
                                  };
                                } else {
                                  return obj;
                                }
                              });
                            },
                          );
                        });
                      }
                    };
                    var filterInput_onFocus = function (_ev) {};
                    var filterInput_value = match[1].map(function (prim) {
                      return prim;
                    });
                    var filterInput = {
                      name: "filterInput",
                      onBlur: filterInput_onBlur,
                      onChange: filterInput_onChange,
                      onFocus: filterInput_onFocus,
                      value: filterInput_value,
                      checked: true,
                    };
                    tmp = React.createElement(SelectBox.BaseDropdown.make, {
                      buttonText: "",
                      allowMultiSelect: true,
                      input: filterInput,
                      options: SelectBox.makeOptions(options),
                      hideMultiSelectButtons: true,
                      deselectDisable: false,
                      baseComponent: Caml_option.some(
                        React.createElement(Icon.make, {
                          name: "filter",
                          size: 12,
                          className: "align-middle text-gray-400",
                        }),
                      ),
                      autoApply: false,
                    });
                  } else {
                    tmp = null;
                  }
                } else {
                  tmp = null;
                }
                return JsxPPXReactSupportU.createElementWithKey(
                  i.toString(),
                  AddDataAttributes.make,
                  {
                    attributes: [["data-table-heading", item.title]],
                    children: React.createElement(
                      "th",
                      {
                        className: "p-0",
                      },
                      React.createElement(
                        "div",
                        {
                          className:
                            "flex flex-row " +
                            borderClass +
                            " justify-between items-center px-4 py-3 bg-gradient-to-b from-jp-gray-250 to-jp-gray-200 dark:from-jp-gray-950 dark:to-jp-gray-950 text-jp-gray-800 dark:text-jp-gray-text_darktheme dark:text-opacity-75 whitespace-pre " +
                            oldThemeRoundedClass,
                        },
                        React.createElement(
                          "div",
                          {
                            className: "font-bold text-sm",
                          },
                          item.title,
                        ),
                        React.createElement(RenderIf.make, {
                          condition: item.showFilter || item.showSort,
                          children: React.createElement(
                            "div",
                            {
                              className:
                                "flex flex-row items-center select-none",
                            },
                            React.createElement(RenderIf.make, {
                              condition: item.showSort,
                              children: React.createElement(
                                AddDataAttributes.make,
                                {
                                  attributes: [["data-table", "tableSort"]],
                                  children: React.createElement(
                                    "div",
                                    {
                                      className:
                                        "cursor-pointer text-gray-300 pl-4",
                                      onClick: handleSortClick,
                                    },
                                    React.createElement(
                                      TableUtils.SortIcons.make,
                                      {
                                        order: order,
                                        size: 13,
                                      },
                                    ),
                                  ),
                                },
                              ),
                            }),
                            tmp,
                          ),
                        }),
                      ),
                    ),
                  },
                );
              }),
            ),
          ),
        }),
        React.createElement(
          "tbody",
          undefined,
          a.map(function (item, rowIndex) {
            return JsxPPXReactSupportU.createElementWithKey(
              rowIndex.toString(),
              CollapsableTableRow.make,
              {
                item: item,
                rowIndex: rowIndex,
                offset: offset,
                highlightEnabledFieldsArray: highlightEnabledFieldsArray,
                expandedRowIndexArray: expandedRowIndexArray,
                onExpandIconClick: onExpandIconClick,
                getRowDetails: getRowDetails,
                heading: heading,
                title: title,
              },
            );
          }),
        ),
      ),
    }),
  );
}

var make = CustomExpandableTable;

export { make };
/* Icon Not a pure module */
