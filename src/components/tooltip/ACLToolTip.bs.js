// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as ToolTip from "./ToolTip.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as HSwitchUtils from "../../screens/HSwitchUtils.bs.js";

function ACLToolTip(props) {
  var __dismissable = props.dismissable;
  var __isRelative = props.isRelative;
  var __descriptionComponentClass = props.descriptionComponentClass;
  var __visibleOnClick = props.visibleOnClick;
  var __tooltipArrowSize = props.tooltipArrowSize;
  var __hoverOnToolTip = props.hoverOnToolTip;
  var __textStyle = props.textStyle;
  var __height = props.height;
  var __flexClass = props.flexClass;
  var __justifyClass = props.justifyClass;
  var __contentAlign = props.contentAlign;
  var __bgColor = props.bgColor;
  var __arrowBgClass = props.arrowBgClass;
  var __textStyleGap = props.textStyleGap;
  var __arrowCustomStyle = props.arrowCustomStyle;
  var __customStyle = props.customStyle;
  var __tooltipForWidthClass = props.tooltipForWidthClass;
  var __tooltipWidthClass = props.tooltipWidthClass;
  var __tooltipPositioning = props.tooltipPositioning;
  var __descriptionComponent = props.descriptionComponent;
  var __description = props.description;
  var __noAccessDescription = props.noAccessDescription;
  var noAccessDescription =
    __noAccessDescription !== undefined
      ? __noAccessDescription
      : HSwitchUtils.noAccessControlText;
  var description = __description !== undefined ? __description : "";
  var descriptionComponent =
    __descriptionComponent !== undefined
      ? Caml_option.valFromOption(__descriptionComponent)
      : null;
  var tooltipPositioning =
    __tooltipPositioning !== undefined ? __tooltipPositioning : "fixed";
  var tooltipWidthClass =
    __tooltipWidthClass !== undefined ? __tooltipWidthClass : "w-fit";
  var tooltipForWidthClass =
    __tooltipForWidthClass !== undefined ? __tooltipForWidthClass : "";
  var customStyle = __customStyle !== undefined ? __customStyle : "";
  var arrowCustomStyle =
    __arrowCustomStyle !== undefined ? __arrowCustomStyle : "";
  var textStyleGap = __textStyleGap !== undefined ? __textStyleGap : "";
  var arrowBgClass = __arrowBgClass !== undefined ? __arrowBgClass : "";
  var bgColor = __bgColor !== undefined ? __bgColor : "";
  var contentAlign = __contentAlign !== undefined ? __contentAlign : "Middle";
  var justifyClass =
    __justifyClass !== undefined ? __justifyClass : "justify-center";
  var flexClass = __flexClass !== undefined ? __flexClass : "flex-col";
  var height = __height !== undefined ? __height : "h-full";
  var textStyle = __textStyle !== undefined ? __textStyle : "text-fs-11";
  var hoverOnToolTip =
    __hoverOnToolTip !== undefined ? __hoverOnToolTip : false;
  var tooltipArrowSize =
    __tooltipArrowSize !== undefined ? __tooltipArrowSize : 5;
  var visibleOnClick =
    __visibleOnClick !== undefined ? __visibleOnClick : false;
  var descriptionComponentClass =
    __descriptionComponentClass !== undefined
      ? __descriptionComponentClass
      : "flex flex-row-reverse";
  var isRelative = __isRelative !== undefined ? __isRelative : true;
  var dismissable = __dismissable !== undefined ? __dismissable : false;
  var description$1 =
    props.access === "Access" ? description : noAccessDescription;
  return React.createElement(ToolTip.make, {
    description: description$1,
    descriptionComponent: Caml_option.some(descriptionComponent),
    tooltipPositioning: tooltipPositioning,
    toolTipFor: props.toolTipFor,
    tooltipWidthClass: tooltipWidthClass,
    tooltipForWidthClass: tooltipForWidthClass,
    toolTipPosition: props.toolTipPosition,
    customStyle: customStyle,
    arrowCustomStyle: arrowCustomStyle,
    textStyleGap: textStyleGap,
    arrowBgClass: arrowBgClass,
    bgColor: bgColor,
    contentAlign: contentAlign,
    justifyClass: justifyClass,
    flexClass: flexClass,
    height: height,
    textStyle: textStyle,
    hoverOnToolTip: hoverOnToolTip,
    tooltipArrowSize: tooltipArrowSize,
    visibleOnClick: visibleOnClick,
    descriptionComponentClass: descriptionComponentClass,
    isRelative: isRelative,
    dismissable: dismissable,
  });
}

var make = ACLToolTip;

export { make };
/* react Not a pure module */
