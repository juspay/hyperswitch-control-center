// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Lottie from "../../libraries/Lottie.bs.js";
import * as LottieFiles from "./LottieFiles.bs.js";
import * as LottieIcons from "./LottieIcons.bs.js";
import * as AddDataAttributes from "../AddDataAttributes.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as ReactSuspenseWrapper from "../../context/ReactSuspenseWrapper.bs.js";

function CheckBoxIcon(props) {
  var __stopPropagationNeeded = props.stopPropagationNeeded;
  var __isCheckboxSelectedClass = props.isCheckboxSelectedClass;
  var __checkboxDimension = props.checkboxDimension;
  var __isSelectedStateMinus = props.isSelectedStateMinus;
  var setIsSelected = props.setIsSelected;
  var __isDisabled = props.isDisabled;
  var isSelected = props.isSelected;
  var isDisabled = __isDisabled !== undefined ? __isDisabled : false;
  var isSelectedStateMinus =
    __isSelectedStateMinus !== undefined ? __isSelectedStateMinus : false;
  var checkboxDimension =
    __checkboxDimension !== undefined ? __checkboxDimension : "w-4 h-4";
  var isCheckboxSelectedClass =
    __isCheckboxSelectedClass !== undefined ? __isCheckboxSelectedClass : false;
  var stopPropagationNeeded =
    __stopPropagationNeeded !== undefined ? __stopPropagationNeeded : false;
  var onClick = function (ev) {
    if (stopPropagationNeeded) {
      ev.stopPropagation();
    }
    if (setIsSelected !== undefined) {
      return setIsSelected(!isSelected);
    }
  };
  var enterCheckBoxJson = LottieFiles.useLottieJson(LottieFiles.enterCheckBox);
  var exitCheckBoxJson = LottieFiles.useLottieJson(LottieFiles.exitCheckBox);
  var match = LottieIcons.useLottieIcon(
    isSelected,
    enterCheckBoxJson,
    exitCheckBoxJson,
  );
  var autoplay = match[1];
  var checkboxUpiClass = isCheckboxSelectedClass ? "border-2" : "border";
  var checkboxBorderClass =
    "rounded-md " + checkboxUpiClass + " border-gray-300 dark:border-gray-600";
  return React.createElement(AddDataAttributes.make, {
    attributes: [
      ["data-selected-checkbox", isSelected ? "Selected" : "NotSelected"],
    ],
    children: isDisabled
      ? isSelected
        ? React.createElement(
            "svg",
            {
              height: "16",
              width: "16",
              fill: "none",
              viewBox: "0 0 16 16",
              xmlns: "http://www.w3.org/2000/svg",
            },
            React.createElement("rect", {
              height: "16",
              width: "16",
              fill: "#b0b0b0",
              rx: "4",
            }),
            React.createElement("path", {
              clipRule: "evenodd",
              d: "M11.3135 5.29325C10.9225 4.90225 10.2895 4.90225 9.8995 5.29325L6.5355 8.65725L5.7065 7.82925C5.3165 7.43825 4.6835 7.43825 4.2925 7.82925C3.9025 8.21925 3.9025 8.85225 4.2925 9.24325L5.8285 10.7783C6.2185 11.1693 6.8515 11.1693 7.2425 10.7783L11.3135 6.70725C11.7045 6.31725 11.7045 5.68425 11.3135 5.29325Z",
              fill: "white",
              fillRule: "evenodd",
            }),
          )
        : React.createElement(
            "svg",
            {
              height: "16",
              width: "16",
              fill: "none",
              viewBox: "0 0 16 16",
              xmlns: "http://www.w3.org/2000/svg",
            },
            React.createElement("rect", {
              height: "16",
              width: "16",
              fill: "url(#paint0_linear)",
              rx: "4",
            }),
            React.createElement("rect", {
              height: "15",
              width: "15",
              rx: "3.5",
              stroke: "#CCD2E2",
              strokeOpacity: "0.75",
              x: "0.5",
              y: "0.5",
            }),
            React.createElement(
              "defs",
              undefined,
              React.createElement(
                "linearGradient",
                {
                  id: "paint0_linear",
                  gradientUnits: "userSpaceOnUse",
                  x1: "16",
                  x2: "16",
                  y1: "16",
                  y2: "0",
                },
                React.createElement("stop", {
                  stopColor: "#F1F5FA",
                }),
                React.createElement("stop", {
                  offset: "1",
                  stopColor: "#FDFEFF",
                }),
              ),
            ),
          )
      : isSelectedStateMinus
        ? isSelected
          ? React.createElement(
              "div",
              {
                className: checkboxDimension,
                onClick: onClick,
              },
              React.createElement(
                "svg",
                {
                  fill: "none",
                  viewBox: "0 0 16 17",
                  xmlns: "http://www.w3.org/2000/svg",
                },
                React.createElement("rect", {
                  height: "16",
                  width: "16",
                  fill: "#0EB025",
                  rx: "4",
                  y: "0.5",
                }),
                React.createElement("rect", {
                  height: "2",
                  width: "8",
                  fill: "white",
                  rx: "1",
                  x: "4",
                  y: "7.5",
                }),
              ),
            )
          : React.createElement("div", {
              className: checkboxDimension + " " + checkboxBorderClass,
              onClick: onClick,
            })
        : React.createElement(
            "div",
            {
              className:
                checkboxDimension +
                " " +
                (isSelected ? "" : checkboxBorderClass),
              onClick: onClick,
            },
            React.createElement(ReactSuspenseWrapper.make, {
              children: JsxPPXReactSupportU.createElementWithKey(
                autoplay ? "true" : "false",
                Lottie.make,
                {
                  animationData: match[0],
                  autoplay: autoplay,
                  loop: false,
                },
              ),
            }),
          ),
  });
}

var make = CheckBoxIcon;

export { make };
/* react Not a pure module */
