// Generated by ReScript, PLEASE EDIT WITH CARE

import Dayjs from "dayjs";
import * as React from "react";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DateTimeUtils from "../utils/DateTimeUtils.bs.js";
import * as ThemeProvider from "../context/ThemeProvider.bs.js";
import * as HeadlessUISelectBox from "./HeadlessUISelectBox.bs.js";

var textBoxClass =
  " font-inter-style text-fs-14 leading-5 font-normal text-jp-2-light-gray-2000";

function NewCalendarTimeInput$CustomInputBox(props) {
  var __maxLength = props.maxLength;
  var __borderClass = props.borderClass;
  var __fontClassName = props.fontClassName;
  var __widthClass = props.widthClass;
  var __autoFocus = props.autoFocus;
  var __inputMode = props.inputMode;
  var __type_ = props.type_;
  var __isDisabled = props.isDisabled;
  var input = props.input;
  var isDisabled = __isDisabled !== undefined ? __isDisabled : false;
  var type_ = __type_ !== undefined ? __type_ : "text";
  var inputMode = __inputMode !== undefined ? __inputMode : "text";
  var autoFocus = __autoFocus !== undefined ? __autoFocus : false;
  var widthClass = __widthClass !== undefined ? __widthClass : "w-full";
  var fontClassName =
    __fontClassName !== undefined
      ? __fontClassName
      : "text-jp-gray-900 text-body text-opacity-75";
  var borderClass =
    __borderClass !== undefined
      ? __borderClass
      : "h-10 pl-4 border-2 border-jp-gray-700 dark:border-jp-gray-800 border-opacity-25 focus:border-opacity-100 focus:border-blue-500 dark:focus:border-blue-500 rounded-md";
  var maxLength = __maxLength !== undefined ? __maxLength : 100;
  var cursorClass = isDisabled
    ? "cursor-not-allowed bg-jp-gray-400 dark:bg-jp-gray-950"
    : "bg-transparent";
  var placeholder = isDisabled ? "To be filled by customer" : props.placeholder;
  var className =
    widthClass +
    " " +
    cursorClass +
    "\n        placeholder-jp-gray-900 placeholder-opacity-50 dark:placeholder-jp-gray-700 dark:placeholder-opacity-50\n         " +
    borderClass +
    "\n        focus:text-opacity-100 focus:outline-none dark:text-jp-gray-text_darktheme dark:text-opacity-75 dark:focus:text-opacity-100  " +
    fontClassName;
  var str = Core__JSON.Decode.string(input.value);
  var value = str !== undefined ? str : "";
  return React.createElement(HeadlessUISelectBox.make, {
    value: {
      TAG: "String",
      _0: "",
    },
    setValue: props.setVal,
    options: DateTimeUtils.timeOptions.map(function (str) {
      return {
        label: str,
        value: str,
        isDisabled: false,
        leftIcon: "NoIcon",
        customTextStyle: undefined,
        customIconStyle: undefined,
        rightIcon: "NoIcon",
        description: undefined,
      };
    }),
    children: React.createElement("input", {
      className: className,
      autoFocus: autoFocus,
      disabled: isDisabled,
      inputMode: inputMode,
      maxLength: maxLength,
      name: input.name,
      placeholder: placeholder,
      type: type_,
      value: value,
      onFocus: input.onFocus,
      onBlur: input.onBlur,
      onChange: input.onChange,
    }),
    dropdownPosition: "Right",
    className: "",
    dropDownClass:
      "w-[216px] h-[296px] overflow-scroll !rounded-lg !shadow-jp-2-xs",
    textClass: textBoxClass,
    closeListOnClick: true,
  });
}

var CustomInputBox = {
  make: NewCalendarTimeInput$CustomInputBox,
};

function NewCalendarTimeInput(props) {
  var startTimeStr = props.startTimeStr;
  var setEndDate = props.setEndDate;
  var setStartDate = props.setStartDate;
  var isoStringToCustomTimeZone = props.isoStringToCustomTimeZone;
  var getTimeStringForValue = props.getTimeStringForValue;
  var localEndDate = props.localEndDate;
  var todayTime = props.todayTime;
  var todayDate = props.todayDate;
  var disableFutureDates = props.disableFutureDates;
  var localStartDate = props.localStartDate;
  var endDate = props.endDate;
  var startDate = props.startDate;
  var match = React.useContext(ThemeProvider.themeContext);
  var borderColor = match.globalUIConfig.border.borderColor;
  var todayDateTime = Dayjs();
  var time = todayDateTime.format("hh:mm:ss a");
  var defaultStartTime =
    endDate === todayDateTime.format("YYYY-MM-DD")
      ? time.toUpperCase()
      : Dayjs(endDate + " " + props.endTimeStr)
          .format("hh:mm:ss a")
          .toUpperCase();
  var match$1 = React.useState(function () {
    return Dayjs(startDate + " " + startTimeStr)
      .format("hh:mm:ss a")
      .toUpperCase();
  });
  var setFromTime = match$1[1];
  var fromTime = match$1[0];
  var match$2 = React.useState(function () {
    return defaultStartTime;
  });
  var settoTime = match$2[1];
  var toTime = match$2[0];
  var fromDateJs = Dayjs(startDate);
  var toDateJs = Dayjs(endDate);
  var inputFromDate_onBlur = function (param) {};
  var inputFromDate_onChange = function (ev) {
    var value = ev.target.value;
    setFromTime(function (param) {
      return value;
    });
  };
  var inputFromDate_onFocus = function (param) {};
  var inputFromDate = {
    name: "fromDate",
    onBlur: inputFromDate_onBlur,
    onChange: inputFromDate_onChange,
    onFocus: inputFromDate_onFocus,
    value: fromTime,
    checked: true,
  };
  var inputtoDate_onBlur = function (param) {};
  var inputtoDate_onChange = function (ev) {
    var value = ev.target.value;
    settoTime(function (param) {
      return value;
    });
  };
  var inputtoDate_onFocus = function (param) {};
  var inputtoDate = {
    name: "toDate",
    onBlur: inputtoDate_onBlur,
    onChange: inputtoDate_onChange,
    onFocus: inputtoDate_onFocus,
    value: toTime,
    checked: true,
  };
  var setFromTimeDropdown = function (val) {
    var fromTimeArr = val.split(" ");
    var fromTime =
      Core__Option.getOr(fromTimeArr[0], "12:00") +
      ":00 " +
      Core__Option.getOr(fromTimeArr[1], "AM");
    setFromTime(function (param) {
      return fromTime.toUpperCase();
    });
  };
  var setToTimeDropdown = function (val) {
    var toTimeArr = val.split(" ");
    var toTime =
      Core__Option.getOr(toTimeArr[0], "11:59") +
      ":00 " +
      Core__Option.getOr(toTimeArr[1], "PM");
    settoTime(function (param) {
      return toTime.toUpperCase();
    });
  };
  React.useEffect(
    function () {
      var endTime = getTimeStringForValue(
        localEndDate,
        isoStringToCustomTimeZone,
      );
      var startDateTime = Dayjs(startDate + " " + fromTime);
      if (startDateTime.isValid()) {
        var startTimeVal = startDateTime.format("HH:mm:ss");
        if (LogicUtils.isNonEmptyString(localStartDate)) {
          if (
            disableFutureDates &&
            startDate === todayDate &&
            startTimeVal > todayTime
          ) {
            setStartDate(startDate, todayTime);
          } else if (
            disableFutureDates &&
            startDate === endDate &&
            startTimeVal > endTime
          ) {
          } else {
            setStartDate(startDate, startTimeVal);
          }
        }
      }
    },
    [fromTime],
  );
  React.useEffect(
    function () {
      var startTime = getTimeStringForValue(
        localStartDate,
        isoStringToCustomTimeZone,
      );
      var endDateTime = Dayjs(endDate + " " + toTime);
      if (endDateTime.isValid()) {
        var endTimeVal = endDateTime.format("HH:mm:ss");
        if (LogicUtils.isNonEmptyString(localEndDate)) {
          if (
            disableFutureDates &&
            endDate === todayDate &&
            endTimeVal > todayTime
          ) {
            setEndDate(startDate, todayTime);
          } else if (
            disableFutureDates &&
            startDate === endDate &&
            endTimeVal < startTime
          ) {
          } else {
            setEndDate(endDate, endTimeVal);
          }
        }
      }
    },
    [toTime],
  );
  var updatedFromDate;
  if (fromDateJs.isValid()) {
    try {
      updatedFromDate = fromDateJs.format("dddd, MMMM DD, YYYY");
    } catch (_error) {
      updatedFromDate = "";
    }
  } else {
    updatedFromDate = "";
  }
  var updatedToDate;
  if (toDateJs.isValid()) {
    try {
      updatedToDate = toDateJs.format("dddd, MMMM DD, YYYY");
    } catch (_error$1) {
      updatedToDate = "";
    }
  } else {
    updatedToDate = "";
  }
  var dateClass =
    "text-jp-2-light-gray-1200 text-fs-16 font-normal leading-6 mb-4";
  return React.createElement(
    "div",
    {
      className: "w-[328px] px-6 font-inter-style mb-12 pt-4 ",
    },
    React.createElement(
      "div",
      {
        className: "mb-10",
      },
      React.createElement(
        "div",
        {
          className: dateClass,
        },
        updatedFromDate,
      ),
      React.createElement(
        "div",
        {
          className: "w-4/12",
        },
        React.createElement(NewCalendarTimeInput$CustomInputBox, {
          input: inputFromDate,
          placeholder: "09:00 AM",
          fontClassName: textBoxClass,
          borderClass:
            "h-10 pl-1 border-b border-jp-gray-lightmode_steelgray dark:border-jp-gray-700 border-opacity-75 focus:border-opacity-100 " +
            borderColor.primaryFocused +
            " dark:" +
            borderColor.primaryFocused,
          setVal: setFromTimeDropdown,
        }),
      ),
    ),
    React.createElement(
      "div",
      undefined,
      React.createElement(
        "div",
        {
          className: dateClass,
        },
        updatedToDate,
      ),
      React.createElement(
        "div",
        {
          className: "w-4/12",
        },
        React.createElement(NewCalendarTimeInput$CustomInputBox, {
          input: inputtoDate,
          placeholder: "11:00 PM",
          fontClassName: textBoxClass,
          borderClass:
            "h-10 pl-1 border-b border-jp-gray-lightmode_steelgray dark:border-jp-gray-700 border-opacity-75 focus:border-opacity-100 " +
            borderColor.primaryFocused +
            " dark:" +
            borderColor.primaryFocused,
          setVal: setToTimeDropdown,
        }),
      ),
    ),
  );
}

var make = NewCalendarTimeInput;

export { textBoxClass, CustomInputBox, make };
/* dayjs Not a pure module */
