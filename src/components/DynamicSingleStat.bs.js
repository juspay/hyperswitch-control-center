// Generated by ReScript, PLEASE EDIT WITH CARE

import Dayjs from "dayjs";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as AuthHooks from "../hooks/AuthHooks.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DynamicChart from "./DynamicChart.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as FilterContext from "../context/FilterContext.bs.js";
import * as AnalyticsUtils from "../screens/Analytics/AnalyticsUtils.bs.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as AnalyticsLogUtilsHook from "../screens/Hooks/AnalyticsLogUtilsHook.bs.js";
import * as HSwitchSingleStatWidget from "./HSwitchSingleStatWidget.bs.js";
import * as HSwitchSingleStatTableWidget from "./HSwitchSingleStatTableWidget.bs.js";

function generateDefaultStateColumns(arr) {
  return arr.map(function (col) {
    return {
      colType: col,
    };
  });
}

function singleStatBodyMake(singleStatBodyEntity) {
  return JSON.stringify([
    AnalyticsUtils.getFilterRequestBody(
      Caml_option.some(singleStatBodyEntity.granularity),
      undefined,
      Caml_option.some(singleStatBodyEntity.filter),
      Caml_option.some(singleStatBodyEntity.metrics),
      singleStatBodyEntity.delta,
      Caml_option.some(singleStatBodyEntity.prefix),
      undefined,
      singleStatBodyEntity.startDateTime,
      singleStatBodyEntity.endDateTime,
      undefined,
      Caml_option.some(singleStatBodyEntity.mode),
      singleStatBodyEntity.customFilter,
      singleStatBodyEntity.source,
      undefined,
    ),
  ]);
}

function deltaTimeRangeMapper(arrJson) {
  var emptyDict = {};
  arrJson.map(function (item) {
    var dict = LogicUtils.getDictFromJsonObject(item);
    var deltaTimeRange = LogicUtils.getDictFromJsonObject(
      LogicUtils.getJsonObjectFromDict(dict, "deltaTimeRange"),
    );
    var fromTime = LogicUtils.getString(deltaTimeRange, "startTime", "");
    var toTime = LogicUtils.getString(deltaTimeRange, "endTime", "");
    var timeRanges = {
      fromTime: fromTime,
      toTime: toTime,
    };
    if (Object.entries(deltaTimeRange).length > 0) {
      emptyDict["currentSr"] = timeRanges;
      return;
    }
  });
  return {
    currentSr: Core__Option.getOr(emptyDict["currentSr"], {
      fromTime: "",
      toTime: "",
    }),
  };
}

function DynamicSingleStat(props) {
  var formaPayload = props.formaPayload;
  var statThreshold = props.statThreshold;
  var statSentiment = props.statSentiment;
  var __filterNullVals = props.filterNullVals;
  var __defaultEndDate = props.defaultEndDate;
  var __defaultStartDate = props.defaultStartDate;
  var __isHomePage = props.isHomePage;
  var __chartAlignment = props.chartAlignment;
  var __moduleName = props.moduleName;
  var endTimeFilterKey = props.endTimeFilterKey;
  var startTimeFilterKey = props.startTimeFilterKey;
  var filterKeys = props.filterKeys;
  var modeKey = props.modeKey;
  var entity = props.entity;
  var moduleName = __moduleName !== undefined ? __moduleName : "";
  var chartAlignment =
    __chartAlignment !== undefined ? __chartAlignment : "column";
  var isHomePage = __isHomePage !== undefined ? __isHomePage : false;
  var defaultStartDate =
    __defaultStartDate !== undefined ? __defaultStartDate : "";
  var defaultEndDate = __defaultEndDate !== undefined ? __defaultEndDate : "";
  var filterNullVals =
    __filterNullVals !== undefined ? __filterNullVals : false;
  var match = React.useContext(FilterContext.filterContext);
  var filterValueJson = match.filterValueJson;
  var fetchApi = AuthHooks.useApiFetcher();
  var isMobileView = MatchMedia.useMobileChecker();
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowStats = match$1[1];
  var showStats = match$1[0];
  var getTopLevelFilter = React.useMemo(
    function () {
      return Object.fromEntries(
        Belt_Array.keepMap(Object.entries(filterValueJson), function (item) {
          var keyArr = item[0].split(".");
          var prefix = Core__Option.getOr(keyArr[0], "");
          if (prefix === moduleName && LogicUtils.isNonEmptyString(prefix)) {
            return;
          } else {
            return [prefix, item[1]];
          }
        }),
      );
    },
    [filterValueJson],
  );
  var mode =
    modeKey !== undefined
      ? LogicUtils.getString(getTopLevelFilter, modeKey, "")
      : "ORDER";
  var source = entity.source;
  var source$1 = source !== undefined ? source : "BATCH";
  var enableLoaders = Core__Option.getOr(entity.enableLoaders, true);
  var customFilterKey = entity.customFilterKey;
  var customFilterKey$1 = customFilterKey !== undefined ? customFilterKey : "";
  var allFilterKeys = [
    startTimeFilterKey,
    endTimeFilterKey,
    Core__Option.getOr(mode, ""),
  ].concat(filterKeys);
  var deltaItemToObjMapper = function (json) {
    return deltaTimeRangeMapper(
      LogicUtils.getArrayFromDict(
        LogicUtils.getDictFromJsonObject(json),
        "metaData",
        [],
      ),
    );
  };
  var match$2 = React.useMemo(
    function () {
      var filterSearchParam = Belt_Array.keepMap(
        Object.entries(getTopLevelFilter),
        function (entry) {
          var key = entry[0];
          if (!allFilterKeys.includes(key)) {
            return;
          }
          var str = Core__JSON.Classify.classify(entry[1]);
          if (typeof str !== "object") {
            return;
          }
          switch (str.TAG) {
            case "String":
              return key + "=" + str._0;
            case "Number":
              return key + "=" + String(str._0);
            case "Array":
              return key + "=[" + String(str._0) + "]";
            default:
              return;
          }
        },
      ).join("&");
      return [
        filterSearchParam,
        LogicUtils.getString(getTopLevelFilter, customFilterKey$1, ""),
      ];
    },
    [getTopLevelFilter],
  );
  var customFilter = match$2[1];
  var topFiltersToSearchParam = match$2[0];
  var filterValueFromUrl = React.useMemo(
    function () {
      return LogicUtils.getJsonFromArrayOfJson(
        Belt_Array.keepMap(
          Object.entries(getTopLevelFilter),
          function (entries) {
            var key = entries[0];
            if (filterKeys.includes(key)) {
              return [key, entries[1]];
            }
          },
        ),
      );
    },
    [topFiltersToSearchParam],
  );
  var startTimeFromUrl = React.useMemo(
    function () {
      return LogicUtils.getString(
        getTopLevelFilter,
        startTimeFilterKey,
        defaultStartDate,
      );
    },
    [topFiltersToSearchParam],
  );
  var endTimeFromUrl = React.useMemo(
    function () {
      return LogicUtils.getString(
        getTopLevelFilter,
        endTimeFilterKey,
        defaultEndDate,
      );
    },
    [topFiltersToSearchParam],
  );
  var homePageCss =
    isHomePage || chartAlignment === "row" ? "flex-col" : "flex-row";
  var wrapperClass = Core__Option.getOr(
    props.wrapperClass,
    "flex flex-col md:" +
      homePageCss +
      " flex-wrap justify-start items-stretch relative h-full",
  );
  var match$3 = React.useState(function () {});
  var setSingleStatData = match$3[1];
  var singleStatData = match$3[0];
  var match$4 = React.useState(function () {
    return "Shimmer";
  });
  var setShimmerType = match$4[1];
  var shimmerType = match$4[0];
  var match$5 = React.useState(function () {});
  var setSingleStatTimeData = match$5[1];
  var singleStatTimeData = match$5[0];
  var match$6 = React.useState(function () {
    return true;
  });
  var setSingleStatLoading = match$6[1];
  var singleStatLoading = match$6[0];
  var match$7 = React.useState(function () {
    return true;
  });
  var setSingleStatLoadingTimeSeries = match$7[1];
  var singleStatLoadingTimeSeries = match$7[0];
  var match$8 = React.useState(function () {
    return {
      singleStatData: singleStatData,
      singleStatTimeData: singleStatTimeData,
    };
  });
  var setSingleStatCombinedData = match$8[1];
  var singlestatDataCombined = match$8[0];
  React.useEffect(
    function () {
      if (!(singleStatLoading || singleStatLoadingTimeSeries)) {
        setSingleStatCombinedData(function (param) {
          return {
            singleStatData: singleStatData,
            singleStatTimeData: singleStatTimeData,
          };
        });
      }
    },
    [
      singleStatLoadingTimeSeries,
      singleStatLoading,
      singleStatTimeData,
      singleStatData,
    ],
  );
  var addLogsAroundFetch = AnalyticsLogUtilsHook.useAddLogsAroundFetch();
  React.useEffect(
    function () {
      if (singleStatData !== undefined && singleStatTimeData !== undefined) {
        setShimmerType(function (param) {
          return "SideLoader";
        });
      }
    },
    [singleStatData, singleStatTimeData],
  );
  React.useEffect(
    function () {
      if (
        LogicUtils.isNonEmptyString(startTimeFromUrl) &&
        LogicUtils.isNonEmptyString(endTimeFromUrl)
      ) {
        setSingleStatLoading(function (param) {
          return enableLoaders;
        });
        Promise.all(
          entity.urlConfig.map(function (urlConfig) {
            var uri = urlConfig.uri;
            var domain = Core__Option.getOr("/".split(uri)[4], "");
            var startTime =
              domain === "mandate"
                ? Dayjs(endTimeFromUrl)
                    .subtract(1, "hour")
                    .toDate()
                    .toISOString()
                : startTimeFromUrl;
            var getDelta = domain !== "mandate";
            var singleStatBodyEntity_metrics = urlConfig.metrics;
            var singleStatBodyEntity_delta = getDelta;
            var singleStatBodyEntity_customFilter = customFilter;
            var singleStatBodyEntity_source = source$1;
            var singleStatBodyEntity_prefix = urlConfig.prefix;
            var singleStatBodyEntity = {
              filter: filterValueFromUrl,
              metrics: singleStatBodyEntity_metrics,
              delta: singleStatBodyEntity_delta,
              startDateTime: startTime,
              endDateTime: endTimeFromUrl,
              mode: mode,
              customFilter: singleStatBodyEntity_customFilter,
              source: singleStatBodyEntity_source,
              prefix: singleStatBodyEntity_prefix,
            };
            var singleStatBodyMakerFn =
              formaPayload !== undefined ? formaPayload : singleStatBodyMake;
            var singleStatBody = singleStatBodyMakerFn(singleStatBodyEntity);
            return Core__Promise.$$catch(
              addLogsAroundFetch(
                undefined,
                "SingleStat Data Api",
                fetchApi(
                  uri,
                  singleStatBody,
                  undefined,
                  Object.fromEntries([["QueryType", "SingleStat"]]),
                  "Post",
                  undefined,
                  undefined,
                  undefined,
                ),
              ).then(function (json) {
                return Promise.resolve([
                  Core__Option.getOr(urlConfig.prefix, "") + uri,
                  json,
                ]);
              }),
              function (_err) {
                return Promise.resolve(["", {}]);
              },
            );
          }),
        ).then(function (dataArr) {
          var data = dataArr.map(function (item) {
            var json = item[1];
            var data = entity.getObjects(json);
            var deltaTime = deltaItemToObjMapper(json);
            return {
              sectionUrl: item[0],
              singleStatData: data,
              deltaTime: deltaTime,
            };
          });
          setSingleStatData(function (param) {
            return data;
          });
          setSingleStatLoading(function (param) {
            return false;
          });
        });
      }
    },
    [endTimeFromUrl, startTimeFromUrl, filterValueFromUrl, customFilter, mode],
  );
  React.useEffect(
    function () {
      if (
        LogicUtils.isNonEmptyString(startTimeFromUrl) &&
        LogicUtils.isNonEmptyString(endTimeFromUrl)
      ) {
        setSingleStatLoadingTimeSeries(function (param) {
          return enableLoaders;
        });
        Promise.all(
          entity.urlConfig.map(function (urlConfig) {
            var uri = urlConfig.uri;
            var domain = Core__Option.getOr("/".split(uri)[4], "");
            var startTime =
              domain === "mandate"
                ? Dayjs(endTimeFromUrl)
                    .subtract(1, "hour")
                    .toDate()
                    .toISOString()
                : startTimeFromUrl;
            var granularity = DynamicChart.getGranularity(
              startTime,
              endTimeFromUrl,
            ).map(function (item) {
              return DynamicChart.getGranularityString(item);
            });
            var singleStatBodyEntity_metrics = urlConfig.metrics;
            var singleStatBodyEntity_delta = false;
            var singleStatBodyEntity_granularity = granularity[0];
            var singleStatBodyEntity_customFilter = customFilter;
            var singleStatBodyEntity_source = source$1;
            var singleStatBodyEntity_prefix = urlConfig.prefix;
            var singleStatBodyEntity = {
              filter: filterValueFromUrl,
              metrics: singleStatBodyEntity_metrics,
              delta: singleStatBodyEntity_delta,
              startDateTime: startTime,
              endDateTime: endTimeFromUrl,
              granularity: singleStatBodyEntity_granularity,
              mode: mode,
              customFilter: singleStatBodyEntity_customFilter,
              source: singleStatBodyEntity_source,
              prefix: singleStatBodyEntity_prefix,
            };
            var singleStatBodyMakerFn =
              formaPayload !== undefined ? formaPayload : singleStatBodyMake;
            return Core__Promise.$$catch(
              addLogsAroundFetch(
                undefined,
                "SingleStatTimeseries Data Api",
                fetchApi(
                  uri,
                  singleStatBodyMakerFn(singleStatBodyEntity),
                  undefined,
                  Object.fromEntries([["QueryType", "SingleStatTimeseries"]]),
                  "Post",
                  undefined,
                  undefined,
                  undefined,
                ),
              ).then(function (json) {
                return Promise.resolve([
                  Core__Option.getOr(urlConfig.prefix, "") + uri,
                  json,
                ]);
              }),
              function (_err) {
                return Promise.resolve(["", {}]);
              },
            );
          }),
        ).then(function (timeSeriesArr) {
          var data = timeSeriesArr.map(function (item) {
            return [item[0], entity.getTimeSeriesObject(item[1])];
          });
          setSingleStatTimeData(function (param) {
            return data;
          });
          setSingleStatLoadingTimeSeries(function (param) {
            return false;
          });
        });
      }
    },
    [endTimeFromUrl, startTimeFromUrl, filterValueFromUrl, customFilter, mode],
  );
  return entity.defaultColumns.map(function (urlConfig, index) {
    var columns = urlConfig.columns;
    var fullWidth = columns.length === 1;
    var singleStateArr = columns.map(function (col, singleStatArrIndex) {
      var uri = entity.matrixUriMapper(col.colType);
      var timeSeriesData = Belt_Array.keepMap(
        Core__Option.getOr(singlestatDataCombined.singleStatTimeData, [
          ["--", []],
        ]),
        function (item) {
          if (item[0] === uri) {
            return item[1];
          }
        },
      );
      var timeSeriesData$1 = Caml_splice_call.spliceObjApply([], "concat", [
        timeSeriesData,
      ]);
      var match = Core__Option.getOr(col.chartType, "Default");
      if (match === "Default") {
        var sdata = singlestatDataCombined.singleStatData;
        if (sdata === undefined) {
          return JsxPPXReactSupportU.createElementWithKey(
            singleStatArrIndex.toString(),
            HSwitchSingleStatWidget.make,
            {
              title: "",
              tooltipText: "",
              deltaTooltipComponent: Caml_option.some(null),
              value: 0,
              data: [],
              statType: "",
              singleStatLoading:
                singleStatLoading || singleStatLoadingTimeSeries,
              loaderType: shimmerType,
              statChartColor: singleStatArrIndex % 2 === 0 ? "blue" : "grey",
              filterNullVals: filterNullVals,
              statSentiment: statSentiment,
              fullWidth: fullWidth,
            },
          );
        }
        var sectiondata = sdata.filter(function (item) {
          return item.sectionUrl === uri;
        })[0];
        if (sectiondata === undefined) {
          return JsxPPXReactSupportU.createElementWithKey(
            singleStatArrIndex.toString(),
            HSwitchSingleStatWidget.make,
            {
              title: "",
              tooltipText: "",
              deltaTooltipComponent: Caml_option.some(null),
              value: 0,
              data: [],
              statType: "",
              singleStatLoading:
                singleStatLoading || singleStatLoadingTimeSeries,
              loaderType: shimmerType,
              statChartColor: singleStatArrIndex % 2 === 0 ? "blue" : "grey",
              filterNullVals: filterNullVals,
              statSentiment: statSentiment,
              statThreshold: statThreshold,
              fullWidth: fullWidth,
            },
          );
        }
        var info = sectiondata.singleStatData.map(function (infoData) {
          return entity.getData(
            infoData,
            timeSeriesData$1,
            sectiondata.deltaTime,
            col.colType,
            Core__Option.getOr(mode, "ORDER"),
          );
        });
        var stateData = info[0];
        if (stateData !== undefined) {
          return JsxPPXReactSupportU.createElementWithKey(
            singleStatArrIndex.toString(),
            HSwitchSingleStatWidget.make,
            {
              title: stateData.title,
              tooltipText: stateData.tooltipText,
              deltaTooltipComponent: Caml_option.some(
                stateData.deltaTooltipComponent(stateData.statType),
              ),
              value: stateData.value,
              data: stateData.data,
              statType: stateData.statType,
              singleStatLoading:
                singleStatLoading || singleStatLoadingTimeSeries,
              showPercentage: stateData.showDelta,
              loaderType: shimmerType,
              statChartColor: singleStatArrIndex % 2 === 0 ? "blue" : "grey",
              filterNullVals: filterNullVals,
              statSentiment: statSentiment,
              statThreshold: statThreshold,
              fullWidth: fullWidth,
            },
          );
        } else {
          return JsxPPXReactSupportU.createElementWithKey(
            singleStatArrIndex.toString(),
            HSwitchSingleStatWidget.make,
            {
              title: "",
              tooltipText: "",
              deltaTooltipComponent: Caml_option.some(null),
              value: 0,
              data: [],
              statType: "",
              singleStatLoading:
                singleStatLoading || singleStatLoadingTimeSeries,
              loaderType: shimmerType,
              statChartColor: singleStatArrIndex % 2 === 0 ? "blue" : "grey",
              filterNullVals: filterNullVals,
              statSentiment: statSentiment,
              statThreshold: statThreshold,
              fullWidth: fullWidth,
            },
          );
        }
      }
      var sdata$1 = singlestatDataCombined.singleStatData;
      if (sdata$1 === undefined) {
        return JsxPPXReactSupportU.createElementWithKey(
          singleStatArrIndex.toString(),
          HSwitchSingleStatTableWidget.make,
          {
            deltaTooltipComponent: Caml_option.some(null),
            value: [],
            statType: "",
            singleStatLoading: singleStatLoading || singleStatLoadingTimeSeries,
            loaderType: shimmerType,
            statChartColor: singleStatArrIndex % 2 === 0 ? "blue" : "grey",
            filterNullVals: filterNullVals,
            statSentiment: statSentiment,
            fullWidth: fullWidth,
          },
        );
      }
      var sectiondata$1 = sdata$1.filter(function (item) {
        return item.sectionUrl === uri;
      })[0];
      var dict = Object.fromEntries([["queryData", [{}]]]);
      var item = entity.getObjects(dict)[0];
      var match$1;
      if (item !== undefined) {
        var info$1 = entity.getData(
          Caml_option.valFromOption(item),
          timeSeriesData$1,
          {
            currentSr: {
              fromTime: "",
              toTime: "",
            },
          },
          col.colType,
          Core__Option.getOr(mode, "ORDER"),
        );
        match$1 = [info$1.title, info$1.tooltipText, info$1.statType];
      } else {
        match$1 = ["", "", ""];
      }
      if (sectiondata$1 === undefined) {
        return JsxPPXReactSupportU.createElementWithKey(
          singleStatArrIndex.toString(),
          HSwitchSingleStatTableWidget.make,
          {
            deltaTooltipComponent: Caml_option.some(null),
            value: [],
            statType: "",
            singleStatLoading: singleStatLoading || singleStatLoadingTimeSeries,
            loaderType: shimmerType,
            statChartColor: singleStatArrIndex % 2 === 0 ? "blue" : "grey",
            filterNullVals: filterNullVals,
            statSentiment: statSentiment,
            statThreshold: statThreshold,
            fullWidth: fullWidth,
          },
        );
      }
      var info$2 = sectiondata$1.singleStatData.map(function (infoData) {
        return entity.getData(
          infoData,
          timeSeriesData$1,
          sectiondata$1.deltaTime,
          col.colType,
          Core__Option.getOr(mode, "ORDER"),
        );
      });
      var modifiedData = info$2.map(function (item) {
        return {
          rowLabel: Core__Option.getOr(item.label, "NA"),
          rowValue: item.value,
        };
      });
      modifiedData.sort(function (a, b) {
        var rowValue_a = a.rowValue;
        var rowValue_b = b.rowValue;
        if (rowValue_a <= rowValue_b) {
          return 1;
        } else {
          return -1;
        }
      });
      return JsxPPXReactSupportU.createElementWithKey(
        singleStatArrIndex.toString(),
        HSwitchSingleStatTableWidget.make,
        {
          value: modifiedData,
          title: match$1[0],
          tooltipText: match$1[1],
          statType: match$1[2],
          singleStatLoading: singleStatLoading || singleStatLoadingTimeSeries,
          loaderType: shimmerType,
          statChartColor: singleStatArrIndex % 2 === 0 ? "blue" : "grey",
          filterNullVals: filterNullVals,
          statSentiment: statSentiment,
          statThreshold: statThreshold,
          fullWidth: fullWidth,
        },
      );
    });
    return JsxPPXReactSupportU.createElementWithKey(
      index.toString(),
      AddDataAttributes.make,
      {
        attributes: [["data-dynamic-single-stats", "dynamic stats"]],
        children: React.createElement(
          "div",
          {
            className: wrapperClass,
          },
          isMobileView
            ? React.createElement(
                "div",
                {
                  className: "flex flex-col gap-2 items-center h-full",
                },
                React.createElement(
                  "div",
                  {
                    className: "flex flex-wrap w-full h-full",
                  },
                  singleStateArr.map(function (element, index) {
                    return JsxPPXReactSupportU.createElementWithKey(
                      index.toString(),
                      RenderIf.make,
                      {
                        condition: index < 4 || showStats,
                        children: React.createElement(
                          "div",
                          {
                            className: "w-full md:w-1/2",
                          },
                          element,
                        ),
                      },
                    );
                  }),
                ),
                React.createElement(
                  "div",
                  {
                    className: "w-full px-2",
                  },
                  React.createElement(Button.make, {
                    text: showStats ? "Hide All Stats" : "View All Stats",
                    buttonType: "Pagination",
                    onClick: function (param) {
                      setShowStats(function (prev) {
                        return !prev;
                      });
                    },
                    customButtonStyle: "w-full",
                  }),
                ),
              )
            : singleStateArr,
        ),
      },
    );
  });
}

var make = DynamicSingleStat;

export {
  generateDefaultStateColumns,
  singleStatBodyMake,
  deltaTimeRangeMapper,
  make,
};
/* dayjs Not a pure module */
