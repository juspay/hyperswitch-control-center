// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Modal from "../utils/Modal.bs.js";
import * as React from "react";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as MobileView from "./MobileView.bs.js";
import * as DesktopView from "./DesktopView.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";

function Accordion$SectionAccordion(props) {
  var __setShow = props.setShow;
  var __hideHeaderWeb = props.hideHeaderWeb;
  var __mobileRenderType = props.mobileRenderType;
  var __headingClass = props.headingClass;
  var __headerBg = props.headerBg;
  var children = props.children;
  var __subtext = props.subtext;
  var __title = props.title;
  var title = __title !== undefined ? __title : "";
  var subtext = __subtext !== undefined ? __subtext : "";
  var headerBg =
    __headerBg !== undefined
      ? __headerBg
      : "md:bg-jp-gray-100 dark:bg-transparent";
  var headingClass = __headingClass !== undefined ? __headingClass : "";
  var mobileRenderType =
    __mobileRenderType !== undefined ? __mobileRenderType : "Accordion";
  var hideHeaderWeb = __hideHeaderWeb !== undefined ? __hideHeaderWeb : false;
  var setShow = __setShow !== undefined ? __setShow : function (param) {};
  var isMobileView = MatchMedia.useMobileChecker();
  var match = React.useState(function () {
    return !isMobileView;
  });
  var setIsExpanded = match[1];
  var isExpanded = match[0];
  var tmp;
  tmp =
    mobileRenderType === "Modal"
      ? React.createElement(Modal.make, {
          showModal: isExpanded,
          setShowModal: setIsExpanded,
          children: React.createElement(
            "div",
            {
              className: "mx-4 mb-4",
            },
            children,
          ),
          modalHeading: title,
          childClass: "",
          borderBottom: true,
        })
      : React.createElement(
          "div",
          {
            className:
              (isExpanded ? "" : "hidden") +
              " border-t-2 dark:border-jp-gray-950 md:border-0",
          },
          children,
        );
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-section", title]],
    children: React.createElement(
      "div",
      {
        className: "border md:border-0 dark:border-jp-gray-950 " + headerBg,
      },
      React.createElement(
        DesktopView.make,
        {
          children: null,
        },
        React.createElement(RenderIf.make, {
          condition: !hideHeaderWeb,
          children: React.createElement(
            "h3",
            {
              className: "text-base " + headingClass,
            },
            title,
          ),
        }),
        React.createElement(
          "p",
          {
            className:
              "text-gray-900 text-opacity-50 dark:text-jp-gray-text_darktheme dark:text-opacity-50",
          },
          subtext,
        ),
        React.createElement(AddDataAttributes.make, {
          attributes: [["data-section", title]],
          children: children,
        }),
      ),
      React.createElement(
        MobileView.make,
        {
          children: null,
        },
        React.createElement(
          "div",
          {
            className:
              "md:font-bold font-semibold md:text-fs-16 text-fs-13 text-jp-gray-900 text-opacity-75 dark:text-white  dark:text-opacity-75 bg-white dark:bg-jp-gray-lightgray_background px-4 py-3 flex justify-start  text-jp-gray-900 text-opacity-75 ",
            onClick: function (param) {
              setIsExpanded(function (prev) {
                return !prev;
              });
              setShow(function (param) {
                return title;
              });
            },
          },
          React.createElement(
            "div",
            {
              className: "py-1 !text-lg",
            },
            title,
          ),
          React.createElement(
            "div",
            {
              className:
                "cursor-pointer flex  justify-center align-center text-jp-gray-900 text-right text-opacity-50 dark:text-jp-gray-text_darktheme dark:text-opacity-50 ml-auto",
            },
            React.createElement(Icon.make, {
              name: isExpanded ? "angle-down" : "angle-right",
              size: 15,
            }),
          ),
        ),
        tmp,
      ),
    ),
  });
}

var SectionAccordion = {
  make: Accordion$SectionAccordion,
};

function Accordion$AccordionInfo(props) {
  var __titleStyle = props.titleStyle;
  var __contentExpandCss = props.contentExpandCss;
  var __expanded = props.expanded;
  var __accordianBottomContainerCss = props.accordianBottomContainerCss;
  var __accordianTopContainerCss = props.accordianTopContainerCss;
  var __arrowPosition = props.arrowPosition;
  var __arrowFillColor = props.arrowFillColor;
  var accordion = props.accordion;
  var arrowFillColor = __arrowFillColor !== undefined ? __arrowFillColor : "";
  var arrowPosition = __arrowPosition !== undefined ? __arrowPosition : "Left";
  var accordianTopContainerCss =
    __accordianTopContainerCss !== undefined ? __accordianTopContainerCss : "";
  var accordianBottomContainerCss =
    __accordianBottomContainerCss !== undefined
      ? __accordianBottomContainerCss
      : "";
  var expanded = __expanded !== undefined ? __expanded : false;
  var contentExpandCss =
    __contentExpandCss !== undefined ? __contentExpandCss : "";
  var titleStyle = __titleStyle !== undefined ? __titleStyle : "";
  var match = React.useState(function () {
    return expanded;
  });
  var setIsExpanded = match[1];
  var isExpanded = match[0];
  var handleClick = function (_e) {
    setIsExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };
  var contentClasses = isExpanded
    ? "flex-wrap bg-white dark:bg-jp-gray-lightgray_background text-lg " +
      contentExpandCss
    : "hidden";
  var svgDeg = isExpanded ? "90" : "0";
  var ui = accordion.renderContentOnTop;
  return React.createElement(
    "div",
    {
      className:
        "overflow-hidden border bg-white  border-jp-gray-500 dark:border-jp-gray-960 dark:bg-jp-gray-950 " +
        accordianTopContainerCss,
    },
    React.createElement(
      "div",
      {
        className:
          "flex cursor-pointer items-center font-ibm-plex  bg-white hover:bg-jp-gray-100 dark:bg-jp-gray-950  dark:border-jp-gray-960 " +
          titleStyle +
          " " +
          accordianBottomContainerCss,
        onClick: handleClick,
      },
      arrowPosition === "Left"
        ? React.createElement(
            "svg",
            {
              height: "11",
              width: "7",
              fill: "none",
              transform: "rotate(" + svgDeg + ")",
              viewBox: "0 0 7 11",
              xmlns: "http://www.w3.org/2000/svg",
            },
            React.createElement("path", {
              clipRule: "evenodd",
              d: "M-0.000107288 0L6.01489 5.013L-0.000107288 10.025V0Z",
              fill: arrowFillColor,
              fillRule: "evenodd",
            }),
          )
        : null,
      ui !== undefined
        ? ui()
        : React.createElement(
            "div",
            {
              className: "ml-5",
            },
            accordion.title,
          ),
      arrowPosition === "Right"
        ? React.createElement(
            "svg",
            {
              height: "11",
              width: "7",
              fill: "none",
              transform: "rotate(" + svgDeg + ")",
              viewBox: "0 0 7 11",
              xmlns: "http://www.w3.org/2000/svg",
            },
            React.createElement("path", {
              clipRule: "evenodd",
              d: "M-0.000107288 0L6.01489 5.013L-0.000107288 10.025V0Z",
              fill: arrowFillColor,
              fillRule: "evenodd",
            }),
          )
        : null,
    ),
    React.createElement(
      "div",
      {
        className:
          "flex flex-col dark:border-jp-gray-960 border-t dark:hover:bg-jp-gray-900 dark:hover:bg-opacity-25 " +
          contentClasses,
      },
      accordion.renderContent(),
    ),
  );
}

var AccordionInfo = {
  make: Accordion$AccordionInfo,
};

function Accordion(props) {
  var __titleStyle = props.titleStyle;
  var __gapClass = props.gapClass;
  var __initialExpandedArray = props.initialExpandedArray;
  var __arrowPosition = props.arrowPosition;
  var __contentExpandCss = props.contentExpandCss;
  var __accordianBottomContainerCss = props.accordianBottomContainerCss;
  var __accordianTopContainerCss = props.accordianTopContainerCss;
  var __arrowFillColor = props.arrowFillColor;
  var arrowFillColor =
    __arrowFillColor !== undefined ? __arrowFillColor : "#CED0DA";
  var accordianTopContainerCss =
    __accordianTopContainerCss !== undefined
      ? __accordianTopContainerCss
      : "mt-5 rounded-lg";
  var accordianBottomContainerCss =
    __accordianBottomContainerCss !== undefined
      ? __accordianBottomContainerCss
      : "p-4";
  var contentExpandCss =
    __contentExpandCss !== undefined ? __contentExpandCss : "px-8 font-bold";
  var arrowPosition = __arrowPosition !== undefined ? __arrowPosition : "Left";
  var initialExpandedArray =
    __initialExpandedArray !== undefined ? __initialExpandedArray : [];
  var gapClass = __gapClass !== undefined ? __gapClass : "";
  var titleStyle =
    __titleStyle !== undefined
      ? __titleStyle
      : "font-bold text-lg text-jp-gray-700 dark:text-jp-gray-text_darktheme dark:text-opacity-50 hover:text-jp-gray-800 dark:hover:text-opacity-100";
  return React.createElement(
    "div",
    {
      className: "w-full " + gapClass,
    },
    props.accordion.map(function (accordion, i) {
      return JsxPPXReactSupportU.createElementWithKey(
        i.toString(),
        Accordion$AccordionInfo,
        {
          accordion: accordion,
          arrowFillColor: arrowFillColor,
          arrowPosition: arrowPosition,
          accordianTopContainerCss: accordianTopContainerCss,
          accordianBottomContainerCss: accordianBottomContainerCss,
          expanded: initialExpandedArray.includes(i),
          contentExpandCss: contentExpandCss,
          titleStyle: titleStyle,
        },
      );
    }),
  );
}

var make = Accordion;

export { SectionAccordion, AccordionInfo, make };
/* Icon Not a pure module */
