type customInputFn = (
  ~input: ReactFinalForm.fieldRenderPropsInput,
  ~placeholder: string,
) => React.element
type comboCustomInputFn = array<ReactFinalForm.fieldRenderProps> => React.element
type comboCustomInputRecord = {fn: comboCustomInputFn, names: array<string>}
let selectInput: (
  ~options: array<SelectBox.dropdownOption>,
  ~buttonText: string,
  ~deselectDisable: bool=?,
  ~isHorizontal: bool=?,
  ~disableSelect: bool=?,
  ~fullLength: bool=?,
  ~customButtonStyle: string=?,
  ~textStyle: string=?,
  ~marginTop: string=?,
  ~customStyle: string=?,
  ~searchable: bool=?,
  ~showBorder: bool=?,
  ~showToolTipOptions: bool=?,
  ~textEllipsisForDropDownOptions: bool=?,
  ~showCustomBtnAtEnd: bool=?,
  ~dropDownCustomBtnClick: bool=?,
  ~addDynamicValue: bool=?,
  ~showMatchingRecordsText: bool=?,
  ~fixedDropDownDirection: SelectBox.direction=?,
  ~customButton: React.element=?,
  ~buttonType: Button.buttonType=?,
  ~dropdownCustomWidth: string=?,
  ~allowButtonTextMinWidth: bool=?,
  ~setExtSearchString: ('a => string) => unit=?,
  ~textStyleClass: string=?,
  ~ellipsisOnly: bool=?,
  ~showBtnTextToolTip: bool=?,
  ~dropdownClassName: string=?,
  ~descriptionOnHover: bool=?,
) => (~input: ReactFinalForm.fieldRenderPropsInput, ~placeholder: 'b) => React.element
let infraSelectInput: (
  ~options: array<SelectBox.dropdownOption>,
  ~deselectDisable: bool=?,
  ~borderRadius: string=?,
  ~selectedClass: string=?,
  ~nonSelectedClass: string=?,
  ~showTickMark: bool=?,
  ~allowMultiSelect: bool=?,
) => (~input: ReactFinalForm.fieldRenderPropsInput, ~placeholder: 'a) => React.element
let filterMultiSelectInput: (
  ~options: array<FilterSelectBox.dropdownOption>,
  ~optionSize: CheckBoxIcon.size=?,
  ~buttonText: string,
  ~buttonSize: Button.buttonSize=?,
  ~hideMultiSelectButtons: bool=?,
  ~showSelectionAsChips: bool=?,
  ~showToggle: bool=?,
  ~isDropDown: bool=?,
  ~searchable: bool=?,
  ~showBorder: bool=?,
  ~optionRigthElement: React.element=?,
  ~customStyle: string=?,
  ~customMargin: string=?,
  ~customButtonStyle: string=?,
  ~hideBorder: bool=?,
  ~allSelectType: FilterSelectBox.allSelectType=?,
  ~showToolTip: bool=?,
  ~showNameAsToolTip: bool=?,
  ~buttonType: Button.buttonType=?,
  ~showSelectAll: bool=?,
  ~isHorizontal: bool=?,
  ~fullLength: bool=?,
  ~fixedDropDownDirection: FilterSelectBox.direction=?,
  ~dropdownCustomWidth: string=?,
  ~customMarginStyle: string=?,
  ~buttonTextWeight: string=?,
  ~marginTop: string=?,
  ~customButtonLeftIcon: Button.iconType=?,
  ~customButtonPaddingClass: string=?,
  ~customButtonIconMargin: string=?,
  ~customTextPaddingClass: string=?,
  ~listFlexDirection: string=?,
  ~buttonClickFn: string => unit=?,
  ~showDescriptionAsTool: bool=?,
  ~optionClass: string=?,
  ~selectClass: string=?,
  ~toggleProps: string=?,
  ~showSelectCountButton: bool=?,
  ~showAllSelectedOptions: bool=?,
  ~leftIcon: Button.iconType=?,
  ~customBackColor: string=?,
  ~customSelectAllStyle: string=?,
  ~onItemSelect: (JsxEventU.Mouse.t, string) => unit=?,
  ~wrapBasis: string=?,
  ~dropdownClassName: string=?,
  ~baseComponentMethod: bool => React.element=?,
  ~disableSelect: bool=?,
  unit,
) => (~input: ReactFinalForm.fieldRenderPropsInput, ~placeholder: 'a) => React.element
let multiSelectInput: (
  ~options: array<SelectBox.dropdownOption>,
  ~optionSize: CheckBoxIcon.size=?,
  ~buttonText: string,
  ~buttonSize: Button.buttonSize=?,
  ~hideMultiSelectButtons: bool=?,
  ~showSelectionAsChips: bool=?,
  ~showToggle: bool=?,
  ~isDropDown: bool=?,
  ~searchable: bool=?,
  ~showBorder: bool=?,
  ~optionRigthElement: React.element=?,
  ~customStyle: string=?,
  ~customMargin: string=?,
  ~customButtonStyle: string=?,
  ~hideBorder: bool=?,
  ~allSelectType: SelectBox.allSelectType=?,
  ~showToolTip: bool=?,
  ~showNameAsToolTip: bool=?,
  ~buttonType: Button.buttonType=?,
  ~showSelectAll: bool=?,
  ~isHorizontal: bool=?,
  ~fullLength: bool=?,
  ~fixedDropDownDirection: SelectBox.direction=?,
  ~dropdownCustomWidth: string=?,
  ~customMarginStyle: string=?,
  ~buttonTextWeight: string=?,
  ~marginTop: string=?,
  ~customButtonLeftIcon: Button.iconType=?,
  ~customButtonPaddingClass: string=?,
  ~customButtonIconMargin: string=?,
  ~customTextPaddingClass: string=?,
  ~listFlexDirection: string=?,
  ~buttonClickFn: string => unit=?,
  ~showDescriptionAsTool: bool=?,
  ~optionClass: string=?,
  ~selectClass: string=?,
  ~toggleProps: string=?,
  ~showSelectCountButton: bool=?,
  ~showAllSelectedOptions: bool=?,
  ~leftIcon: Button.iconType=?,
  ~customBackColor: string=?,
  ~customSelectAllStyle: string=?,
  ~onItemSelect: (JsxEventU.Mouse.t, string) => unit=?,
  ~wrapBasis: string=?,
  ~dropdownClassName: string=?,
  ~baseComponentMethod: bool => React.element=?,
  ~disableSelect: bool=?,
) => (~input: ReactFinalForm.fieldRenderPropsInput, ~placeholder: 'a) => React.element
let radioInput: (
  ~options: array<SelectBox.dropdownOption>,
  ~buttonText: string,
  ~disableSelect: bool=?,
  ~optionSize: CheckBoxIcon.size=?,
  ~isHorizontal: bool=?,
  ~deselectDisable: bool=?,
  ~customStyle: string=?,
  ~baseComponentCustomStyle: string=?,
  ~customSelectStyle: string=?,
  ~fill: string=?,
  ~maxHeight: string=?,
) => (~input: ReactFinalForm.fieldRenderPropsInput, ~placeholder: 'a) => React.element
let textInput: (
  ~description: string=?,
  ~isDisabled: bool=?,
  ~autoFocus: bool=?,
  ~type_: string=?,
  ~inputMode: string=?,
  ~pattern: string=?,
  ~autoComplete: string=?,
  ~maxLength: int=?,
  ~leftIcon: React.element=?,
  ~rightIcon: React.element=?,
  ~rightIconOnClick: JsxEventU.Mouse.t => unit=?,
  ~inputStyle: string=?,
  ~customStyle: string=?,
  ~customWidth: string=?,
  ~customPaddingClass: string=?,
  ~iconOpacity: string=?,
  ~rightIconCustomStyle: string=?,
  ~leftIconCustomStyle: string=?,
  ~customDashboardClass: string=?,
  ~onHoverCss: string=?,
  ~onDisabledStyle: string=?,
  ~onActiveStyle: string=?,
  ~customDarkBackground: string=?,
  ~phoneInput: bool=?,
  ~widthMatchwithPlaceholderLength: option<int>=?,
) => (~input: ReactFinalForm.fieldRenderPropsInput, ~placeholder: string) => React.element
let textTagInput: (
  ~input: ReactFinalForm.fieldRenderPropsInput,
  ~placeholder: string,
  ~name: string=?,
  ~customStyle: string=?,
  ~disabled: bool=?,
  ~seperateByComma: bool=?,
  ~seperateBySpace: bool=?,
  ~customButtonStyle: string=?,
) => React.element
let numericTextInput: (
  ~isDisabled: bool=?,
  ~customStyle: string=?,
  ~inputMode: string=?,
  ~precision: int=?,
  ~maxLength: int=?,
  ~removeLeadingZeroes: bool=?,
  ~leftIcon: React.element=?,
  ~rightIcon: React.element=?,
  ~customPaddingClass: string=?,
  ~rightIconCustomStyle: string=?,
  ~leftIconCustomStyle: string=?,
) => (~input: ReactFinalForm.fieldRenderPropsInput, ~placeholder: string) => React.element
let singleDatePickerInput: (
  ~disablePastDates: bool=?,
  ~disableFutureDates: bool=?,
  ~customDisabledFutureDays: float=?,
  ~format: string=?,
  ~currentDateHourFormat: string=?,
  ~currentDateMinuteFormat: string=?,
  ~currentDateSecondsFormat: string=?,
  ~customButtonStyle: string=?,
  ~newThemeCustomButtonStyle: string=?,
  ~calendarContaierStyle: string=?,
  ~buttonSize: Button.buttonSize=?,
  ~showTime: bool=?,
  ~fullLength: bool=?,
) => (~input: ReactFinalForm.fieldRenderPropsInput, ~placeholder: 'a) => React.element
let filterDateRangeField: (
  ~startKey: string,
  ~endKey: string,
  ~format: string,
  ~disablePastDates: bool=?,
  ~disableFutureDates: bool=?,
  ~showTime: bool=?,
  ~predefinedDays: array<DateRangeUtils.customDateRange>=?,
  ~disableApply: bool=?,
  ~numMonths: int=?,
  ~dateRangeLimit: int=?,
  ~removeFilterOption: bool=?,
  ~optFieldKey: 'a=?,
  ~showSeconds: bool=?,
  ~hideDate: bool=?,
  ~selectStandardTime: bool=?,
  ~isTooltipVisible: bool=?,
) => comboCustomInputRecord
let dateRangeField: (
  ~startKey: string,
  ~endKey: string,
  ~format: string,
  ~disablePastDates: bool=?,
  ~disableFutureDates: bool=?,
  ~showTime: bool=?,
  ~predefinedDays: array<DateRangeUtils.customDateRange>=?,
  ~disableApply: bool=?,
  ~numMonths: int=?,
  ~dateRangeLimit: int=?,
  ~removeFilterOption: bool=?,
  ~optFieldKey: 'a=?,
  ~showSeconds: bool=?,
  ~hideDate: bool=?,
  ~selectStandardTime: bool=?,
  ~customButtonStyle: string=?,
  ~isTooltipVisible: bool=?,
) => comboCustomInputRecord
let multiLineTextInput: (
  ~isDisabled: bool,
  ~rows: option<int>,
  ~cols: option<int>,
  ~customClass: string=?,
  ~leftIcon: React.element=?,
  ~maxLength: int=?,
) => (~input: ReactFinalForm.fieldRenderPropsInput, ~placeholder: string) => React.element
let iconFieldWithMessageDes: (
  (~input: ReactFinalForm.fieldRenderPropsInput, ~placeholder: 'a) => React.element,
  ~description: string=?,
) => (~input: ReactFinalForm.fieldRenderPropsInput, ~placeholder: 'a) => React.element
let passwordMatchField: (
  ~leftIcon: React.element=?,
) => (~input: ReactFinalForm.fieldRenderPropsInput, ~placeholder: string) => React.element
let checkboxInput: (
  ~isHorizontal: bool=?,
  ~options: array<SelectBox.dropdownOption>,
  ~optionSize: CheckBoxIcon.size=?,
  ~isSelectedStateMinus: bool=?,
  ~disableSelect: bool=?,
  ~buttonText: string=?,
  ~maxHeight: string=?,
  ~searchable: bool=?,
  ~searchInputPlaceHolder: string=?,
  ~dropdownCustomWidth: string=?,
  ~customSearchStyle: string=?,
  ~customLabelStyle: string=?,
  ~customMarginStyle: string=?,
  ~customStyle: string=?,
  ~checkboxDimension: string=?,
  ~wrapBasis: string=?,
) => (~input: ReactFinalForm.fieldRenderPropsInput, ~placeholder: 'a) => React.element
let boolInput: (
  ~isDisabled: bool,
  ~isCheckBox: bool=?,
  ~boolCustomClass: string=?,
) => (~input: ReactFinalForm.fieldRenderPropsInput, ~placeholder: 'a) => React.element
