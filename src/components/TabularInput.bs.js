// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "./Button.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";

function TabularInput$FieldInputRenderer(props) {
  return React.createElement("td", undefined, props.item(props.input));
}

var FieldInputRenderer = {
  make: TabularInput$FieldInputRenderer,
};

function TabularInput$TableCell(props) {
  var keyValue = props.keyValue;
  var onChange = props.onChange;
  var isLast = props.isLast;
  var elemIndex = props.elemIndex;
  return React.createElement(
    "tr",
    {
      key: elemIndex.toString(),
      className:
        " h-full rounded-md bg-white dark:bg-jp-gray-lightgray_background transition duration-300 ease-in-out text-sm text-jp-gray-800 dark:text-jp-gray-text_darktheme dark:text-opacity-75",
    },
    props.fields.map(function (itm, i) {
      var input_onBlur = function (_ev) {};
      var input_onChange = function (ev) {
        var $$event = ev.target;
        onChange(elemIndex, i, $$event.value);
      };
      var input_onFocus = function (_ev) {};
      var input_value = Core__Option.getOr(
        Core__Option.getOr(keyValue[elemIndex], [])[i],
        "",
      );
      var input = {
        name: "input",
        onBlur: input_onBlur,
        onChange: input_onChange,
        onFocus: input_onFocus,
        value: input_value,
        checked: true,
      };
      return JsxPPXReactSupportU.createElementWithKey(
        i.toString(),
        TabularInput$FieldInputRenderer,
        {
          item: itm,
          input: input,
        },
      );
    }),
    React.createElement(
      "td",
      {
        className: "mt-2 ml-5",
      },
      React.createElement(Button.make, {
        buttonState: "Normal",
        text: isLast ? "Add Row" : "Remove",
        buttonSize: "Small",
        leftIcon: isLast
          ? {
              TAG: "FontAwesome",
              _0: "plus-circle",
            }
          : {
              TAG: "FontAwesome",
              _0: "minus-circle",
            },
        onClick: props.onClick(elemIndex, isLast),
      }),
    ),
  );
}

var TableCell = {
  make: TabularInput$TableCell,
};

function TabularInput$TableHeading(props) {
  return React.createElement(
    "th",
    undefined,
    React.createElement(
      "div",
      {
        className:
          "flex flex-row justify-between px-4 py-3 bg-gradient-to-b from-jp-gray-250 to-jp-gray-200 dark:from-jp-gray-950  dark:to-jp-gray-950 text-jp-gray-800 dark:text-jp-gray-text_darktheme dark:text-opacity-75 whitespace-pre ",
      },
      React.createElement(
        "div",
        {
          className: "font-bold text-sm",
        },
        props.heading,
      ),
    ),
  );
}

var TableHeading = {
  make: TabularInput$TableHeading,
};

function TabularInput$TableStructure(props) {
  return React.createElement(
    "div",
    undefined,
    React.createElement(
      "table",
      {
        className: "table-auto w-full h-full",
        colSpan: 0,
      },
      React.createElement(
        "thead",
        undefined,
        React.createElement(
          "tr",
          {
            className:
              "h-full rounded-md bg-white dark:bg-jp-gray-lightgray_background hover:bg-jp-gray-table_hover dark:hover:bg-jp-gray-100 dark:hover:bg-opacity-10 transition duration-300 ease-in-out text-sm text-jp-gray-800 dark:text-jp-gray-text_darktheme dark:text-opacity-75",
          },
          props.headings.map(function (heading, i) {
            return JsxPPXReactSupportU.createElementWithKey(
              i.toString(),
              TabularInput$TableHeading,
              {
                heading: heading,
              },
            );
          }),
        ),
        React.Children.map(props.children, function (element) {
          return element;
        }),
      ),
    ),
  );
}

var TableStructure = {
  make: TabularInput$TableStructure,
};

function TabularInput(props) {
  var fields = props.fields;
  var input = props.input;
  var currentValue = React.useMemo(
    function () {
      var str = Core__JSON.Decode.array(input.value);
      if (str !== undefined) {
        return str.map(function (item) {
          var a = Core__JSON.Decode.array(item);
          if (a !== undefined) {
            return a.map(function (itm) {
              return LogicUtils.getStringFromJson(itm, "");
            });
          } else {
            return [];
          }
        });
      } else {
        return [];
      }
    },
    [input.value],
  );
  var dummyInitialState = [
    fields.map(function (param) {
      return "";
    }),
  ];
  var initialState = currentValue.length > 0 ? currentValue : dummyInitialState;
  var match = React.useState(function () {
    return initialState;
  });
  var setKeyValue = match[1];
  var keyValue = match[0];
  var onKeyUp = input.onChange;
  var onChange = function (elemIndex, coloumnIndex, value) {
    var a = keyValue.map(function (itm, index) {
      if (index === elemIndex) {
        return itm.map(function (val, k) {
          if (k === coloumnIndex) {
            return value;
          } else {
            return val;
          }
        });
      } else {
        return itm;
      }
    });
    onKeyUp(a);
    setKeyValue(function (param) {
      return a;
    });
  };
  var onClick = function (elemIndex, isLast) {
    return function (_ev) {
      var value = isLast
        ? initialState.concat(dummyInitialState)
        : initialState.filter(function (param, index) {
            return index !== elemIndex;
          });
      setKeyValue(function (param) {
        return value;
      });
      onKeyUp(value);
    };
  };
  return React.createElement(TabularInput$TableStructure, {
    children: initialState.map(function (param, i) {
      var isLast = i === ((initialState.length - 1) | 0);
      return React.createElement(TabularInput$TableCell, {
        onClick: onClick,
        elemIndex: i,
        isLast: isLast,
        fields: fields,
        onChange: onChange,
        keyValue: keyValue,
      });
    }),
    headings: props.headings,
  });
}

var make = TabularInput;

export { FieldInputRenderer, TableCell, TableHeading, TableStructure, make };
/* react Not a pure module */
