// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as Shimmer from "../libraries/Shimmer.bs.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as AuthHooks from "../hooks/AuthHooks.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as FunnelChart from "./CustomCharts/FunnelChart.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as TimeZoneHook from "../hooks/TimeZoneHook.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as DateTimeUtils from "../utils/DateTimeUtils.bs.js";
import * as FilterContext from "../context/FilterContext.bs.js";
import * as UrlFetchUtils from "../utils/UrlFetchUtils.bs.js";
import * as AnalyticsUtils from "../screens/Analytics/AnalyticsUtils.bs.js";
import * as ReactFinalForm from "../libraries/ReactFinalForm.bs.js";
import * as HyperswitchAtom from "../Recoils/HyperswitchAtom.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as React$1 from "@headlessui/react";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as HighchartBarChart from "./CustomCharts/HighchartBarChart.bs.js";
import * as HighchartPieChart from "./CustomCharts/HighchartPieChart.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as AnalyticsLogUtilsHook from "../screens/Hooks/AnalyticsLogUtilsHook.bs.js";
import * as HighchartTimeSeriesChart from "./CustomCharts/HighchartTimeSeriesChart.bs.js";
import * as HighchartHorizontalBarChart from "./CustomCharts/HighchartHorizontalBarChart.bs.js";

function getGranularityString(granularity) {
  switch (granularity) {
    case "G_THIRTYSEC":
      return "G_THIRTYSEC";
    case "G_ONEMIN":
      return "G_ONEMIN";
    case "G_FIVEMIN":
      return "G_FIVEMIN";
    case "G_FIFTEENMIN":
      return "G_FIFTEENMIN";
    case "G_THIRTYMIN":
      return "G_THIRTYMIN";
    case "G_ONEHOUR":
      return "G_ONEHOUR";
    case "G_ONEDAY":
      return "G_ONEDAY";
  }
}

function getGranularityFormattedText(granularity) {
  switch (granularity) {
    case "G_THIRTYSEC":
      return "THIRTY SEC";
    case "G_ONEMIN":
      return "ONE MIN";
    case "G_FIVEMIN":
      return "FIVE MIN";
    case "G_FIFTEENMIN":
      return "FIFTEEN MIN";
    case "G_THIRTYMIN":
      return "THIRTY MIN";
    case "G_ONEHOUR":
      return "ONE HOUR";
    case "G_ONEDAY":
      return "ONE DAY";
  }
}

function getGranularity(startTime, endTime) {
  var diff =
    (DateTimeUtils.parseAsFloat(endTime) -
      DateTimeUtils.parseAsFloat(startTime)) /
    (1000 * 60);
  if (diff < 60 * 6) {
    return ["G_FIFTEENMIN", "G_FIVEMIN"];
  } else if (diff < 60 * 24) {
    return ["G_ONEHOUR", "G_THIRTYMIN", "G_FIFTEENMIN", "G_FIVEMIN"];
  } else {
    return [
      "G_ONEDAY",
      "G_ONEHOUR",
      "G_THIRTYMIN",
      "G_FIFTEENMIN",
      "G_FIVEMIN",
    ];
  }
}

function getTimeSeriesChart(chartEntity) {
  var metricsArr = chartEntity.metrics.map(function (item) {
    return item.metric_name_db;
  });
  return JSON.stringify([
    AnalyticsUtils.getFilterRequestBody(
      Caml_option.some(chartEntity.granularityOpts),
      Caml_option.some(chartEntity.groupByNames),
      Caml_option.some(chartEntity.filters),
      Caml_option.some(metricsArr),
      chartEntity.delta,
      Caml_option.some(chartEntity.prefix),
      undefined,
      chartEntity.start_time,
      chartEntity.end_time,
      Caml_option.some(chartEntity.cardinality),
      Caml_option.some(chartEntity.mode),
      Core__Option.getOr(chartEntity.customFilter, ""),
      chartEntity.source,
      undefined,
    ),
  ]);
}

function getLegendBody(chartEntity) {
  var metricsArr = chartEntity.metrics.map(function (item) {
    return item.metric_name_db;
  });
  return JSON.stringify([
    AnalyticsUtils.getFilterRequestBody(
      undefined,
      Caml_option.some(chartEntity.groupByNames),
      Caml_option.some(chartEntity.filters),
      Caml_option.some(metricsArr),
      chartEntity.delta,
      Caml_option.some(chartEntity.prefix),
      undefined,
      chartEntity.start_time,
      chartEntity.end_time,
      Caml_option.some(chartEntity.cardinality),
      Caml_option.some(chartEntity.mode),
      Core__Option.getOr(chartEntity.customFilter, ""),
      chartEntity.source,
      undefined,
    ),
  ]);
}

function chartMapper(str) {
  switch (str) {
    case "Line":
      return "Line chart";
    case "Bar":
      return "Bar Chart";
    case "SemiDonut":
      return "SemiDonut Chart";
    case "HorizontalBar":
      return "Horizontal Bar Chart";
    case "Funnel":
      return "Funnel Chart";
  }
}

function chartReverseMappers(str) {
  switch (str) {
    case "Bar Chart":
      return "Bar";
    case "Funnel Chart":
      return "Funnel";
    case "Horizontal Bar Chart":
      return "HorizontalBar";
    case "SemiDonut Chart":
      return "SemiDonut";
    default:
      return "Line";
  }
}

function makeEntity(
  uri,
  chartConfig,
  filterKeysOpt,
  dateFilterKeys,
  currentMetrics,
  cardinality,
  granularityOpt,
  chartTypesOpt,
  uriConfig,
  moduleName,
  sourceOpt,
  customFilterKey,
  getGranularity,
  enableLoadersOpt,
  chartDescription,
  sortingColumnLegend,
  jsonTransformer,
  disableGranularity,
  param,
) {
  var filterKeys = filterKeysOpt !== undefined ? filterKeysOpt : [];
  var granularity =
    granularityOpt !== undefined ? granularityOpt : ["G_ONEDAY"];
  var chartTypes = chartTypesOpt !== undefined ? chartTypesOpt : ["Line"];
  var source = sourceOpt !== undefined ? sourceOpt : "BATCH";
  var enableLoaders = enableLoadersOpt !== undefined ? enableLoadersOpt : true;
  var granularity$1 = granularity.length === 0 ? ["G_ONEDAY"] : granularity;
  var chartTypes$1 = chartTypes.length === 0 ? ["Line"] : chartTypes;
  return {
    uri: uri,
    chartConfig: chartConfig,
    allFilterDimension: filterKeys,
    dateFilterKeys: dateFilterKeys,
    currentMetrics: currentMetrics,
    cardinality: cardinality,
    granularity: granularity$1,
    chartTypes: chartTypes$1,
    uriConfig: uriConfig,
    moduleName: moduleName,
    source: source,
    customFilterKey: customFilterKey,
    getGranularity: getGranularity,
    enableLoaders: enableLoaders,
    chartDescription: chartDescription,
    sortingColumnLegend: sortingColumnLegend,
    jsonTransformer: jsonTransformer,
    disableGranularity: disableGranularity,
  };
}

function useChartFetch(setStatusDict) {
  var fetchApi = AuthHooks.useApiFetcher();
  var addLogsAroundFetch = AnalyticsLogUtilsHook.useAddLogsAroundFetch();
  return function (updatedChartBody, setState) {
    Core__Promise.$$catch(
      Promise.all(
        updatedChartBody.map(function (item) {
          return Core__Promise.$$catch(
            addLogsAroundFetch(
              setStatusDict,
              "Chart Data Api",
              fetchApi(
                item.url,
                item.body,
                undefined,
                Object.fromEntries([["QueryType", "Chart"]]),
                "Post",
                undefined,
                undefined,
                undefined,
              ),
            ).then(function (json) {
              var dataRawTimeSeries = LogicUtils.getArrayFromJson(
                LogicUtils.getJsonObjectFromDict(
                  LogicUtils.getDictFromJsonObject(json),
                  "queryData",
                ),
                [],
              );
              var legendBody = item.legendBody;
              if (legendBody !== undefined) {
                return Core__Promise.$$catch(
                  addLogsAroundFetch(
                    setStatusDict,
                    "Chart Data Api",
                    fetchApi(
                      item.url,
                      legendBody,
                      undefined,
                      Object.fromEntries([["QueryType", "Chart"]]),
                      "Post",
                      undefined,
                      undefined,
                      undefined,
                    ),
                  ).then(function (legendJson) {
                    var dataRawLegend = LogicUtils.getArrayFromJson(
                      LogicUtils.getJsonObjectFromDict(
                        LogicUtils.getDictFromJsonObject(legendJson),
                        "queryData",
                      ),
                      [],
                    );
                    return Promise.resolve({
                      metricsUrl: item.url,
                      rawData: dataRawTimeSeries,
                      legendData: dataRawLegend,
                    });
                  }),
                  function (_err) {
                    return Promise.resolve(undefined);
                  },
                );
              } else {
                return Promise.resolve({
                  metricsUrl: item.url,
                  rawData: dataRawTimeSeries,
                  legendData: [],
                });
              }
            }),
            function (_err) {
              return Promise.resolve(undefined);
            },
          );
        }),
      ).then(function (dataArr) {
        var data = Belt_Array.keepMap(dataArr, function (item) {
          return item;
        });
        setState(data);
      }),
      function (_err) {
        return Promise.resolve();
      },
    );
  };
}

var cardinalityArr = ["TOP_5", "TOP_10"];

var chartTypeArr = [
  "Line chart",
  "Bar Chart",
  "SemiDonut Chart",
  "Horizontal Bar Chart",
  "Funnel Chart",
];

function DynamicChart$GranularitySelectBox(props) {
  var setSelectedGranularity = props.setSelectedGranularity;
  var selectedGranularity = props.selectedGranularity;
  var options = getGranularity(props.startTime, props.endTime);
  return React.createElement(React.Fragment, {
    children: Caml_option.some(
      React.createElement(React$1.Menu, {
        as: "div",
        className: "relative inline-block text-left",
        children: function (_menuProps) {
          return React.createElement(
            "div",
            undefined,
            React.createElement(React$1.Menu.Button, {
              className:
                "inline-flex whitespace-pre leading-5 justify-center text-sm  px-3 py-1 font-medium rounded-md hover:bg-opacity-80 bg-white border",
              children: function (props) {
                var arrow = props.open;
                return React.createElement(
                  React.Fragment,
                  {},
                  getGranularityFormattedText(selectedGranularity),
                  React.createElement(Icon.make, {
                    name: "arrow-without-tail",
                    size: 15,
                    className: arrow
                      ? "rotate-0 transition duration-[250ms] ml-1 mt-1 opacity-60"
                      : "rotate-180 transition duration-[250ms] ml-1 mt-1 opacity-60",
                  }),
                );
              },
            }),
            React.createElement(React$1.Transition, {
              as: "span",
              enter: "transition ease-out duration-100",
              enterFrom: "transform opacity-0 scale-95",
              enterTo: "transform opacity-100 scale-100",
              leave: "transition ease-in duration-75",
              leaveFrom: "transform opacity-100 scale-100",
              leaveTo: "transform opacity-0 scale-95",
              children: Caml_option.some(
                React.createElement(React$1.Menu.Items, {
                  className:
                    "absolute right-0 z-50 w-36 mt-2 origin-top-right bg-white dark:bg-jp-gray-950 divide-y divide-gray-100 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none",
                  children: function (_props) {
                    return React.createElement(React.Fragment, {
                      children: Caml_option.some(
                        React.createElement(
                          "div",
                          {
                            className: "px-1 py-1 ",
                          },
                          options.map(function (option, i) {
                            return JsxPPXReactSupportU.createElementWithKey(
                              i.toString(),
                              React$1.Menu.Item,
                              {
                                children: function (props) {
                                  var activeClasses = props.active
                                    ? "group flex rounded-md items-center w-full px-2 py-2 text-sm bg-gray-100 dark:bg-black"
                                    : "group flex rounded-md items-center w-full px-2 py-2 text-sm";
                                  return React.createElement(
                                    "div",
                                    {
                                      className: "relative",
                                    },
                                    React.createElement(
                                      "button",
                                      {
                                        className:
                                          activeClasses +
                                          " font-medium text-start",
                                        onClick: function (param) {
                                          setSelectedGranularity(
                                            function (param) {
                                              return option;
                                            },
                                          );
                                        },
                                      },
                                      React.createElement(
                                        "div",
                                        {
                                          className: "mr-5",
                                        },
                                        getGranularityFormattedText(option),
                                      ),
                                    ),
                                  );
                                },
                              },
                            );
                          }),
                        ),
                      ),
                    });
                  },
                }),
              ),
            }),
          );
        },
      }),
    ),
  });
}

var GranularitySelectBox = {
  make: DynamicChart$GranularitySelectBox,
};

function DynamicChart(props) {
  var __comparitionWidget = props.comparitionWidget;
  var __legendType = props.legendType;
  var __showMarkers = props.showMarkers;
  var __showTableLegend = props.showTableLegend;
  var tabTitleMapper = props.tabTitleMapper;
  var updateUrl = props.updateUrl;
  var __chartId = props.chartId;
  var modeKey = props.modeKey;
  var selectedTab = props.selectedTab;
  var entity = props.entity;
  var chartId = __chartId !== undefined ? __chartId : "";
  var showTableLegend =
    __showTableLegend !== undefined ? __showTableLegend : true;
  var showMarkers = __showMarkers !== undefined ? __showMarkers : false;
  var legendType = __legendType !== undefined ? __legendType : "Table";
  var comparitionWidget =
    __comparitionWidget !== undefined ? __comparitionWidget : false;
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var isoStringToCustomTimeZone = TimeZoneHook.useIsoStringToCustomTimeZone();
  var updateChartCompFilters =
    updateUrl !== undefined ? updateUrl : function (param) {};
  var match = React.useContext(FilterContext.filterContext);
  var customFilterKey = entity.customFilterKey;
  var customFilterKey$1 = customFilterKey !== undefined ? customFilterKey : "";
  var getAllFilter = Object.fromEntries(
    Object.entries(match.filterValue).map(function (item) {
      return [item[0], UrlFetchUtils.getFilterValue(item[1])];
    }),
  );
  var getChartCompFilters = React.useMemo(
    function () {
      return Object.fromEntries(
        Belt_Array.keepMap(Object.entries(getAllFilter), function (item) {
          var value = item[1];
          var keyArr = item[0].split(".");
          var prefix = Core__Option.getOr(keyArr[0], "");
          var fitlerName = Core__Option.getOr(keyArr[1], "");
          if (LogicUtils.isEmptyString(chartId)) {
            return [prefix, value];
          } else if (
            prefix === chartId &&
            LogicUtils.isNonEmptyString(fitlerName)
          ) {
            return [fitlerName, value];
          } else {
            return;
          }
        }),
      );
    },
    [getAllFilter],
  );
  var getTopLevelFilter = React.useMemo(
    function () {
      return Object.fromEntries(
        Belt_Array.keepMap(Object.entries(getAllFilter), function (item) {
          var keyArr = item[0].split(".");
          var prefix = Core__Option.getOr(keyArr[0], "");
          if (prefix === chartId && LogicUtils.isNonEmptyString(prefix)) {
            return;
          } else {
            return [prefix, item[1]];
          }
        }),
      );
    },
    [getAllFilter],
  );
  var mode =
    modeKey !== undefined
      ? LogicUtils.getString(getTopLevelFilter, modeKey, "")
      : "ORDER";
  var source = entity.source;
  var uriConfig = entity.uriConfig;
  var currentMetrics = entity.currentMetrics;
  var dateFilterKeys = entity.dateFilterKeys;
  var allFilterDimension = entity.allFilterDimension;
  var enableLoaders = Core__Option.getOr(entity.enableLoaders, true);
  var entityAllMetrics = Core__Array.reduce(
    uriConfig,
    [],
    function (acc, item) {
      return acc.concat(item.metrics);
    },
  );
  var currentBottomMetrix = currentMetrics[1];
  var currentTopMatrix = currentMetrics[0];
  React.useEffect(function () {
    var cardinality = LogicUtils.getString(
      getChartCompFilters,
      "cardinality",
      "TOP_5",
    );
    var chartType = LogicUtils.getString(
      getChartCompFilters,
      "chartType",
      chartMapper(Core__Option.getOr(entity.chartTypes[0], "Line")),
    );
    var chartTopMetric = LogicUtils.getString(
      getChartCompFilters,
      "chartTopMetric",
      currentTopMatrix,
    );
    var chartBottomMetric = LogicUtils.getString(
      getChartCompFilters,
      "chartBottomMetric",
      currentBottomMetrix,
    );
    var dict = {};
    var chartMatrixArr = entityAllMetrics.map(function (item) {
      return item.metric_label;
    });
    if (cardinalityArr.includes(cardinality)) {
      dict["cardinality"] = cardinality;
    } else if (cardinalityArr.includes("TOP_5")) {
      dict["cardinality"] = "TOP_5";
    } else {
      dict["cardinality"] = Core__Option.getOr(cardinalityArr[0], "");
    }
    if (chartTypeArr.includes(chartType)) {
      dict["chartType"] = chartType;
    } else {
      dict["chartType"] = "Line chart";
    }
    if (chartMatrixArr.includes(chartTopMetric)) {
      dict["chartTopMetric"] = chartTopMetric;
    } else if (chartMatrixArr.includes(currentTopMatrix)) {
      dict["chartTopMetric"] = currentTopMatrix;
    } else {
      dict["chartTopMetric"] = Core__Option.getOr(chartMatrixArr[0], "");
    }
    if (chartMatrixArr.includes(chartBottomMetric)) {
      dict["chartBottomMetric"] = chartBottomMetric;
    } else if (chartMatrixArr.includes(currentBottomMetrix)) {
      dict["chartBottomMetric"] = currentBottomMetrix;
    } else {
      dict["chartBottomMetric"] = Core__Option.getOr(chartMatrixArr[0], "");
    }
    updateChartCompFilters(dict);
  }, []);
  var cardinalityFromUrl = LogicUtils.getString(
    getChartCompFilters,
    "cardinality",
    "TOP_5",
  );
  var match$1 = React.useState(function () {});
  var setRawChartData = match$1[1];
  var rawChartData = match$1[0];
  var match$2 = React.useState(function () {
    return "";
  });
  var endTimeFilterKey = dateFilterKeys[1];
  var startTimeFilterKey = dateFilterKeys[0];
  var setGroupKey = match$2[1];
  var groupKey = match$2[0];
  var defaultFilters =
    modeKey !== undefined
      ? [startTimeFilterKey, endTimeFilterKey, modeKey]
      : [startTimeFilterKey, endTimeFilterKey];
  var allFilterKeys = defaultFilters.concat(allFilterDimension);
  var match$3 = React.useMemo(
    function () {
      var filterSearchParam = Belt_Array.keepMap(
        Object.entries(getTopLevelFilter),
        function (entry) {
          var key = entry[0];
          if (!allFilterKeys.includes(key)) {
            return;
          }
          var str = Core__JSON.Classify.classify(entry[1]);
          if (typeof str !== "object") {
            return;
          }
          switch (str.TAG) {
            case "String":
              return key + "=" + str._0;
            case "Number":
              return key + "=" + String(str._0);
            case "Array":
              return key + "=[" + String(str._0) + "]";
            default:
              return;
          }
        },
      ).join("&");
      return [
        filterSearchParam,
        LogicUtils.getString(getTopLevelFilter, customFilterKey$1, ""),
      ];
    },
    [getTopLevelFilter],
  );
  var endTimeFilterKey$1 = dateFilterKeys[1];
  var startTimeFilterKey$1 = dateFilterKeys[0];
  var customFilter = match$3[1];
  var topFiltersToSearchParam = match$3[0];
  var match$4 = React.useState(function () {
    return true;
  });
  var setChartLoading = match$4[1];
  var chartLoading = match$4[0];
  var match$5 = React.useState(function () {
    return {};
  });
  var fetchChartData = useChartFetch(match$5[1]);
  var startTimeFromUrl = React.useMemo(
    function () {
      return LogicUtils.getString(getTopLevelFilter, startTimeFilterKey$1, "");
    },
    [topFiltersToSearchParam],
  );
  var endTimeFromUrl = React.useMemo(
    function () {
      return LogicUtils.getString(getTopLevelFilter, endTimeFilterKey$1, "");
    },
    [topFiltersToSearchParam],
  );
  var val = getGranularity(startTimeFromUrl, endTimeFromUrl)[0];
  var defaultGranularity = val !== undefined ? val : "G_FIVEMIN";
  var match$6 = React.useState(function () {
    return defaultGranularity;
  });
  var setSelectedGranularity = match$6[1];
  var selectedGranularity = match$6[0];
  var topFiltersToSearchParam$1 = React.useMemo(
    function () {
      return Belt_Array.keepMap(
        Object.entries(getTopLevelFilter),
        function (entry) {
          var key = entry[0];
          var str = Core__JSON.Classify.classify(entry[1]);
          if (typeof str !== "object") {
            return;
          }
          switch (str.TAG) {
            case "String":
              return key + "=" + str._0;
            case "Number":
              return key + "=" + String(str._0);
            case "Array":
              return key + "=[" + String(str._0) + "]";
            default:
              return;
          }
        },
      ).join("&");
    },
    [topFiltersToSearchParam],
  );
  React.useEffect(
    function () {
      setSelectedGranularity(function (param) {
        return defaultGranularity;
      });
    },
    [startTimeFromUrl, endTimeFromUrl],
  );
  var selectedTabStr = Core__Option.getOr(selectedTab, []).join("");
  var updatedChartConfigArr = React.useMemo(
    function () {
      return uriConfig.map(function (item) {
        var filterKeys = item.filterKeys.filter(function (item) {
          return allFilterDimension.includes(item);
        });
        var filterValue = Object.fromEntries(
          Belt_Array.keepMap(
            Object.entries(getTopLevelFilter),
            function (entries) {
              var key = entries[0];
              if (filterKeys.includes(key)) {
                return [key, entries[1]];
              }
            },
          ),
        );
        var granularityOpts = Core__Option.getOr(
          entity.disableGranularity,
          false,
        )
          ? undefined
          : getGranularityString(selectedGranularity);
        return {
          uri: item.uri,
          metrics: item.metrics,
          groupByNames: selectedTab,
          start_time: startTimeFromUrl,
          end_time: endTimeFromUrl,
          filters: filterValue,
          granularityOpts: granularityOpts,
          delta: false,
          startDateTime: startTimeFromUrl,
          cardinality: cardinalityFromUrl,
          mode: mode,
          prefix: item.prefix,
          source: source,
          customFilter: customFilter,
        };
      });
    },
    [
      startTimeFromUrl,
      endTimeFromUrl,
      customFilter,
      topFiltersToSearchParam$1,
      cardinalityFromUrl,
      selectedTabStr,
      selectedGranularity,
    ],
  );
  var updatedChartBody = React.useMemo(
    function () {
      return Belt_Array.keepMap(uriConfig, function (item) {
        var chartconfig = updatedChartConfigArr.find(function (config) {
          return config.uri === item.uri;
        });
        if (chartconfig === undefined) {
          return;
        }
        var legendBody = item.legendBody;
        var legendBody$1 =
          legendBody !== undefined ? legendBody(chartconfig) : undefined;
        return {
          url: item.uri,
          body: item.timeSeriesBody(chartconfig),
          legendBody:
            Core__Option.getOr(chartconfig.groupByNames, []).length === 1
              ? legendBody$1
              : undefined,
          metrics: item.metrics,
          timeCol: item.timeCol,
        };
      });
    },
    [updatedChartConfigArr],
  );
  var match$7 = React.useMemo(
    function () {
      if (tabTitleMapper === undefined) {
        if (selectedTab !== undefined) {
          return [
            Core__Option.getOr(selectedTab[0], ""),
            Core__Option.getOr(selectedTab[0], ""),
          ];
        } else {
          return ["", ""];
        }
      }
      if (selectedTab === undefined) {
        return ["", ""];
      }
      var groupKey = Core__Option.getOr(selectedTab[0], "");
      return [groupKey, Core__Option.getOr(tabTitleMapper[groupKey], groupKey)];
    },
    [selectedTab],
  );
  var titleKey = match$7[1];
  var groupKeyFromTab = match$7[0];
  var setRawChartData$1 = function (data) {
    var chartData = data.map(function (mappedData) {
      var rawdata = mappedData.rawData.map(function (item) {
        var dict = Core__Option.getOr(Core__JSON.Decode.object(item), {});
        var jsonObj = dict["time_range"];
        if (jsonObj !== undefined) {
          var timeDict = LogicUtils.getDictFromJsonObject(jsonObj);
          var startValue = timeDict["startTime"];
          if (startValue !== undefined) {
            var sTime = Core__Option.getOr(
              Core__JSON.Decode.string(startValue),
              "",
            );
            if (LogicUtils.isNonEmptyString(sTime)) {
              var match = isoStringToCustomTimeZone(
                new Date(sTime).toISOString(),
              );
              dict["time_bucket"] =
                match.year +
                "-" +
                match.month +
                "-" +
                match.date +
                " " +
                match.hour +
                ":" +
                match.minute +
                ":" +
                match.second;
            }
          }
        }
        Core__Option.getOr(selectedTab, []).forEach(function (tabName) {
          var metric = Core__Option.getOr(
            Core__JSON.Decode.string(Core__Option.getOr(dict[tabName], "")),
            "",
          );
          var label = LogicUtils.isEmptyString(metric) ? "NA" : metric;
          dict[tabName] = label;
          Object.keys(dict).forEach(function (key) {
            if (key.includes("amount")) {
              var amount = Core__Option.getOr(
                Core__JSON.Decode.$$float(Core__Option.getOr(dict[key], 0.0)),
                0.0,
              );
              var amount$1 = (amount / 100.0).toFixed(2);
              dict[key] = Number(amount$1);
              return;
            }
            if (!(!key.includes("time") && key !== tabName)) {
              return;
            }
            var val = dict[key];
            if (val === undefined) {
              return;
            }
            var val2 = Core__JSON.Decode.$$float(val);
            if (val2 !== undefined) {
              dict[key] = val2.toFixed(2);
              return;
            }
          });
        });
        return dict;
      });
      return {
        metricsUrl: mappedData.metricsUrl,
        rawData: rawdata,
        legendData: mappedData.legendData,
      };
    });
    setGroupKey(function (param) {
      return groupKeyFromTab;
    });
    setRawChartData(function (param) {
      return chartData;
    });
    setChartLoading(function (param) {
      return false;
    });
  };
  var chartTypeFromUrl = LogicUtils.getString(
    getChartCompFilters,
    "chartType",
    "Line chart",
  );
  var chartTopMetricFromUrl = LogicUtils.getString(
    getChartCompFilters,
    "chartTopMetric",
    currentTopMatrix,
  );
  React.useEffect(
    function () {
      if (
        LogicUtils.isNonEmptyString(startTimeFromUrl) &&
        LogicUtils.isNonEmptyString(endTimeFilterKey$1)
      ) {
        setChartLoading(function (param) {
          return enableLoaders;
        });
        fetchChartData(updatedChartBody, setRawChartData$1);
      }
    },
    [updatedChartBody],
  );
  if (Object.values(match$5[0]).includes(504)) {
    return React.createElement(AnalyticsUtils.NoDataFoundPage.make, {});
  } else {
    return React.createElement(
      "div",
      undefined,
      React.createElement(ReactFinalForm$1.Form, {
        onSubmit: function (param, param$1) {
          return Promise.resolve(null);
        },
        render: function (param) {
          var tmp;
          if (chartLoading) {
            tmp = React.createElement(Shimmer.make, {
              styleClass: "w-full h-96 dark:bg-black bg-white",
              shimmerType: "Big",
            });
          } else if (comparitionWidget) {
            tmp = React.createElement(
              "div",
              undefined,
              React.createElement(RenderIf.make, {
                condition: featureFlagDetails.granularity,
                children: React.createElement(
                  "div",
                  {
                    className: "w-full flex justify-end p-2",
                  },
                  React.createElement(DynamicChart$GranularitySelectBox, {
                    selectedGranularity: selectedGranularity,
                    setSelectedGranularity: setSelectedGranularity,
                    startTime: startTimeFromUrl,
                    endTime: endTimeFromUrl,
                  }),
                ),
              }),
              entityAllMetrics.map(function (selectedMetrics, index) {
                var metricsUri = uriConfig[0];
                if (metricsUri === undefined) {
                  return null;
                }
                var dataVal = Core__Option.getOr(rawChartData, []).find(
                  function (item) {
                    return item.metricsUrl === metricsUri.uri;
                  },
                );
                var match =
                  dataVal !== undefined
                    ? [dataVal.rawData, dataVal.legendData, metricsUri.timeCol]
                    : [[], [], ""];
                return JsxPPXReactSupportU.createElementWithKey(
                  index.toString(),
                  HighchartTimeSeriesChart.LineChart1D.make,
                  {
                    class: "flex overflow-scroll",
                    rawChartData: match[0],
                    selectedMetrics: selectedMetrics,
                    xAxis: match[2],
                    groupKey: groupKey,
                    chartTitle: true,
                    chartTitleText: selectedMetrics.metric_label,
                    showTableLegend: showTableLegend,
                    legendType: legendType,
                    legendData: match[1],
                    showMarkers: showMarkers,
                    comparitionWidget: comparitionWidget,
                    selectedTab: Core__Option.getOr(selectedTab, []),
                  },
                );
              }),
            );
          } else {
            var selectedMetrics = entityAllMetrics.filter(function (item) {
              return item.metric_label === chartTopMetricFromUrl;
            })[0];
            if (selectedMetrics !== undefined) {
              var metricsUri = uriConfig.find(function (uriMetrics) {
                return uriMetrics.metrics
                  .map(function (item) {
                    return item.metric_label;
                  })
                  .includes(selectedMetrics.metric_label);
              });
              var match;
              if (metricsUri !== undefined) {
                var dataVal = Core__Option.getOr(rawChartData, []).find(
                  function (item) {
                    return item.metricsUrl === metricsUri.uri;
                  },
                );
                match =
                  dataVal !== undefined
                    ? [dataVal.rawData, dataVal.legendData, metricsUri.timeCol]
                    : [[], [], ""];
              } else {
                match = [[], [], ""];
              }
              var data = match[0];
              var match$1 = chartReverseMappers(chartTypeFromUrl);
              switch (match$1) {
                case "Line":
                  tmp = JsxPPXReactSupportU.createElementWithKey(
                    "0",
                    HighchartTimeSeriesChart.LineChart1D.make,
                    {
                      class: "flex overflow-scroll",
                      rawChartData: data,
                      selectedMetrics: selectedMetrics,
                      chartPlace: "top_",
                      xAxis: match[2],
                      groupKey: groupKey,
                      chartTitle: false,
                      showTableLegend: showTableLegend,
                      legendType: legendType,
                      legendData: match[1],
                      showMarkers: showMarkers,
                    },
                  );
                  break;
                case "Bar":
                  tmp = React.createElement(
                    "div",
                    {
                      className: "",
                    },
                    JsxPPXReactSupportU.createElementWithKey(
                      "0",
                      HighchartBarChart.HighBarChart1D.make,
                      {
                        rawData: data,
                        groupKey: groupKey,
                        selectedMetrics: selectedMetrics,
                      },
                    ),
                  );
                  break;
                case "SemiDonut":
                  tmp = React.createElement(
                    "div",
                    {
                      className: "m-4",
                    },
                    JsxPPXReactSupportU.createElementWithKey(
                      "0",
                      HighchartPieChart.make,
                      {
                        rawData: data,
                        groupKey: groupKey,
                        titleKey: titleKey,
                        selectedMetrics: selectedMetrics,
                      },
                    ),
                  );
                  break;
                case "HorizontalBar":
                  tmp = React.createElement(
                    "div",
                    {
                      className: "m-4",
                    },
                    JsxPPXReactSupportU.createElementWithKey(
                      "0",
                      HighchartHorizontalBarChart.make,
                      {
                        rawData: data,
                        groupKey: groupKey,
                        titleKey: titleKey,
                        selectedMetrics: selectedMetrics,
                      },
                    ),
                  );
                  break;
                case "Funnel":
                  tmp = React.createElement(FunnelChart.make, {
                    data: data,
                    metrics: entityAllMetrics,
                    moduleName: entity.moduleName,
                    description: entity.chartDescription,
                  });
                  break;
              }
            } else {
              tmp = null;
            }
          }
          return React.createElement(
            "form",
            {
              onSubmit: param.handleSubmit,
            },
            React.createElement(AddDataAttributes.make, {
              attributes: [["data-chart-segment", "Chart-1"]],
              children: React.createElement(
                "div",
                {
                  className:
                    "border rounded bg-white border-jp-gray-500 dark:border-jp-gray-960 dark:bg-jp-gray-950 dynamicChart",
                },
                tmp,
              ),
            }),
          );
        },
        subscription: ReactFinalForm.subscribeToValues,
      }),
    );
  }
}

var make = DynamicChart;

export {
  getGranularityString,
  getGranularityFormattedText,
  getGranularity,
  getTimeSeriesChart,
  getLegendBody,
  chartMapper,
  chartReverseMappers,
  makeEntity,
  useChartFetch,
  cardinalityArr,
  chartTypeArr,
  GranularitySelectBox,
  make,
};
/* Icon Not a pure module */
