// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

function RangeSlider(props) {
  var minSlide = props.minSlide;
  var maxSlide = props.maxSlide;
  var __width = props.width;
  var __min = props.min;
  var __max = props.max;
  var max = __max !== undefined ? __max : "5000";
  var min = __min !== undefined ? __min : "1200";
  var width = __width !== undefined ? __width : "200px";
  var max$1 = Math.ceil(Number(max));
  var min$1 = Math.floor(Number(min));
  var match = React.useState(function () {
    return LogicUtils.getFloatFromJson(minSlide.value, min$1);
  });
  var setMinSlideVal = match[1];
  var minSlideVal = match[0];
  var match$1 = React.useState(function () {
    return LogicUtils.getFloatFromJson(maxSlide.value, max$1);
  });
  var setMaxSlideVal = match$1[1];
  var maxSlideVal = match$1[0];
  var match$2 = React.useState(function () {
    return [false, false];
  });
  var setHasError = match$2[1];
  var hasError = match$2[0];
  var match$3 = React.useState(function () {
    return [false, false];
  });
  var setIsFocused = match$3[1];
  var isFocused = match$3[0];
  var match$4 = React.useState(function () {
    return [false, false];
  });
  var hasMaxError = hasError[1];
  var hasMinError = hasError[0];
  var isInputFocused = match$4[0];
  var isMaxFocused = isFocused[1];
  var isMinFocused = isFocused[0];
  var setIsInputFocused = match$4[1];
  var maxSlide_name = maxSlide.name;
  var maxSlide_onBlur = maxSlide.onBlur;
  var maxSlide_onChange = maxSlide.onChange;
  var maxSlide_onFocus = maxSlide.onFocus;
  var maxSlide_value = Caml_obj.lessequal(maxSlide.value, minSlide.value)
    ? minSlide.value
    : Caml_obj.greaterthan(maxSlide.value, max$1)
      ? max$1
      : maxSlide.value;
  var maxSlide_checked = maxSlide.checked;
  var minSlide_name = minSlide.name;
  var minSlide_onBlur = minSlide.onBlur;
  var minSlide_onChange = minSlide.onChange;
  var minSlide_onFocus = minSlide.onFocus;
  var minSlide_value = Caml_obj.greaterequal(minSlide.value, maxSlide_value)
    ? maxSlide_value
    : Caml_obj.lessthan(minSlide.value, min$1)
      ? min$1
      : minSlide.value;
  var minSlide_checked = minSlide.checked;
  var diff = React.useMemo(
    function () {
      return Math.max(max$1 - min$1, 1);
    },
    [max$1, min$1],
  );
  var maxsliderVal = React.useMemo(
    function () {
      var num = Core__JSON.Decode.$$float(maxSlide_value);
      if (num !== undefined) {
        return Math.ceil(num).toString();
      } else {
        return "0";
      }
    },
    [maxSlide_value],
  );
  var minsliderVal = React.useMemo(
    function () {
      var num = Core__JSON.Decode.$$float(minSlide_value);
      if (num !== undefined) {
        return Math.floor(num).toString();
      } else {
        return "0";
      }
    },
    [minSlide_value],
  );
  var minborderClass = hasMinError
    ? "border-jp-2-light-red-600"
    : isMinFocused || isInputFocused[0]
      ? "border-jp-2-light-primary-600"
      : "";
  var maxborderClass = hasMaxError
    ? "border-jp-2-light-red-600"
    : isMaxFocused || isInputFocused[1]
      ? "border-jp-2-light-primary-600"
      : "";
  var inputClassname = function (hasError, isFocused) {
    var bg = hasError
      ? "bg-jp-2-red-100"
      : isFocused
        ? "bg-jp-2-light-primary-200"
        : "focus:bg-jp-2-light-primary-200 hover:bg-jp-2-light-gray-100";
    return "w-max numberInput outline-none p-1 " + bg + " ";
  };
  var bgClass =
    isMinFocused || isMaxFocused ? "bg-blue-500" : "bg-jp-2-light-gray-2000";
  return React.createElement(
    "div",
    {
      className: "relative pt-1 w-max",
    },
    React.createElement(
      "div",
      {
        className: "h-1 rounded relative bg-gray-200",
        style: {
          width: width,
        },
      },
      React.createElement("div", {
        className: "h-1 rounded absolute " + bgClass,
        style: {
          left:
            (
              ((LogicUtils.getFloatFromString(minsliderVal, 0) - min$1) * 100) /
              diff
            ).toString() + "%",
          right:
            (
              ((max$1 - LogicUtils.getFloatFromString(maxsliderVal, 0)) * 100) /
              diff
            ).toString() + "%",
          width:
            (
              ((LogicUtils.getFloatFromString(maxsliderVal, 0) -
                LogicUtils.getFloatFromString(minsliderVal, 0)) *
                100) /
              diff
            ).toString() + "%",
        },
      }),
    ),
    React.createElement(
      "div",
      {
        className: "absolute top-0",
      },
      React.createElement("input", {
        className:
          "absolute bg-transparent pointer-events-none appearance-none slider hover:sliderFocus active:sliderFocus outline-none",
        style: {
          width: width,
        },
        max: max$1.toString(),
        min: min$1.toString(),
        type: "range",
        value: minsliderVal,
        onFocus: function (ev) {
          minSlide_onFocus(ev);
        },
        onBlur: minSlide_onBlur,
        onChange: function (ev) {
          minSlide_onChange(ev);
          setHasError(function (param) {
            return [false, param[1]];
          });
          setMinSlideVal(function (param) {
            return ev.target.value;
          });
        },
        onMouseEnter: function (param) {
          setIsFocused(function (param) {
            return [true, param[1]];
          });
        },
        onMouseLeave: function (param) {
          setIsFocused(function (param) {
            return [false, param[1]];
          });
        },
      }),
      React.createElement("input", {
        className:
          "absolute bg-transparent pointer-events-none appearance-none slider hover:sliderFocus active:sliderFocus outline-none",
        style: {
          width: width,
        },
        max: max$1.toString(),
        min: min$1.toString(),
        type: "range",
        value: maxsliderVal,
        onFocus: function (ev) {
          minSlide_onFocus(ev);
        },
        onBlur: maxSlide_onBlur,
        onChange: function (ev) {
          maxSlide_onChange(ev);
          setHasError(function (param) {
            return [param[0], false];
          });
          setMaxSlideVal(function (param) {
            return ev.target.value;
          });
        },
        onMouseEnter: function (param) {
          setIsFocused(function (param) {
            return [param[0], true];
          });
        },
        onMouseLeave: function (param) {
          setIsFocused(function (param) {
            return [param[0], false];
          });
        },
      }),
    ),
    React.createElement(
      "div",
      {
        className: "mt-4 flex flex-row justify-between w-full",
      },
      React.createElement(
        "span",
        {
          className: "font-bold p-1 border-b " + minborderClass,
        },
        React.createElement("input", {
          className: inputClassname(hasMinError, isMinFocused),
          max: max$1.toString(),
          min: min$1.toString(),
          type: "number",
          value: minSlideVal.toString(),
          onKeyUp: function (ev) {
            var key = ev.key;
            var keyCode = ev.keyCode;
            if (!(key === "Enter" || keyCode === 13)) {
              return;
            }
            var maxSliderValue = Core__Option.getOr(
              Core__JSON.Decode.$$float(maxSlide_value),
              0,
            );
            if (minSlideVal >= min$1 && minSlideVal <= maxSliderValue) {
              setHasError(function (param) {
                return [false, param[1]];
              });
              return minSlide_onChange(ev);
            } else {
              return setHasError(function (param) {
                return [true, param[1]];
              });
            }
          },
          onFocus: function (param) {
            setIsInputFocused(function (param) {
              return [true, param[1]];
            });
          },
          onBlur: function (ev) {
            var maxSliderValue = Core__Option.getOr(
              Core__JSON.Decode.$$float(maxSlide_value),
              0,
            );
            if (minSlideVal >= min$1 && minSlideVal < maxSliderValue) {
              setHasError(function (param) {
                return [false, param[1]];
              });
              minSlide_onChange(ev);
            } else {
              setHasError(function (param) {
                return [true, param[1]];
              });
            }
            setIsInputFocused(function (param) {
              return [false, param[1]];
            });
          },
          onChange: function (ev) {
            setMinSlideVal(function (param) {
              return ev.target.value;
            });
          },
        }),
      ),
      React.createElement(
        "span",
        {
          className: "font-bold p-1 border-b " + maxborderClass,
        },
        React.createElement("input", {
          className: inputClassname(hasMaxError, isMaxFocused),
          max: max$1.toString(),
          min: min$1.toString(),
          type: "number",
          value: maxSlideVal.toString(),
          onKeyUp: function (ev) {
            var key = ev.key;
            var keyCode = ev.keyCode;
            var minSliderValue = Core__Option.getOr(
              Core__JSON.Decode.$$float(minSlide_value),
              0,
            );
            if (key === "Enter" || keyCode === 13) {
              if (maxSlideVal <= max$1 && maxSlideVal >= minSliderValue) {
                setHasError(function (param) {
                  return [param[0], false];
                });
                return maxSlide_onChange(ev);
              } else {
                return setHasError(function (param) {
                  return [param[0], true];
                });
              }
            }
          },
          onFocus: function (param) {
            setIsInputFocused(function (param) {
              return [param[0], true];
            });
          },
          onBlur: function (ev) {
            var minSliderValue = Core__Option.getOr(
              Core__JSON.Decode.$$float(minSlide_value),
              0,
            );
            if (maxSlideVal <= max$1 && maxSlideVal > minSliderValue) {
              setHasError(function (param) {
                return [param[0], false];
              });
              maxSlide_onChange(ev);
            } else {
              setHasError(function (param) {
                return [param[0], true];
              });
            }
            setIsInputFocused(function (param) {
              return [param[0], false];
            });
          },
          onChange: function (ev) {
            setMaxSlideVal(function (param) {
              return ev.target.value;
            });
          },
        }),
      ),
    ),
  );
}

var make = RangeSlider;

export { make };
/* react Not a pure module */
