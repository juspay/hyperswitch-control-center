// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Modal from "../utils/Modal.bs.js";
import * as Table from "./Table.bs.js";
import * as React from "react";
import * as Shimmer from "../libraries/Shimmer.bs.js";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as EntityType from "../entities/EntityType.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "./LoadedTable.bs.js";

var visibleColumns = ["Label", "Value"];

function colMapper(col) {
  if (col === "Label") {
    return "rowLabel";
  } else {
    return "rowValue";
  }
}

function tableItemToObjMapper(dict) {
  return {
    rowLabel: LogicUtils.getString(dict, "rowLabel", "NA"),
    rowValue: LogicUtils.getFloat(dict, "rowValue", 0.0),
  };
}

function getObjects(json) {
  return LogicUtils.getArrayFromJson(json, []).map(function (item) {
    return tableItemToObjMapper(LogicUtils.getDictFromJsonObject(item));
  });
}

function getHeading(colType) {
  var key = colMapper(colType);
  if (colType === "Label") {
    return Table.makeHeaderInfo(
      key,
      "Currency",
      "TextType",
      false,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
  } else {
    return Table.makeHeaderInfo(
      key,
      "Amount",
      "TextType",
      false,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
  }
}

function percentFormat(value) {
  return value.toFixed(2) + "%";
}

function stringToVarient(statType) {
  switch (statType) {
    case "Amount":
      return "Amount";
    case "Latency":
      return "Latency";
    case "LatencyMs":
      return "LatencyMs";
    case "NegativeRate":
      return "NegativeRate";
    case "Rate":
      return "Rate";
    case "Volume":
      return "Volume";
    default:
      return "Default";
  }
}

function statValue(val, statType) {
  var statType$1 = stringToVarient(statType);
  switch (statType$1) {
    case "Rate":
    case "NegativeRate":
      break;
    case "Amount":
    case "Volume":
      return LogicUtils.indianShortNum(val);
    case "Latency":
      return LogicUtils.latencyShortNum(val, undefined, undefined);
    case "LatencyMs":
      return LogicUtils.latencyShortNum(val, true, undefined);
    case "Default":
      return val.toString();
  }
  if (Number.isNaN(val)) {
    return "-";
  } else {
    return percentFormat(val);
  }
}

function getCell(obj, colType, stateType) {
  if (colType === "Label") {
    return {
      TAG: "Text",
      _0: obj.rowLabel,
    };
  } else {
    return {
      TAG: "Text",
      _0: statValue(obj.rowValue, stateType),
    };
  }
}

function HSwitchSingleStatTableWidget$ShowMore(props) {
  var value = props.value;
  var match = React.useState(function () {
    return false;
  });
  var setShowModal = match[1];
  var showModal = match[0];
  var match$1 = React.useState(function () {
    return 0;
  });
  var tableData =
    value.length > 0
      ? value.map(function (item) {
          return item;
        })
      : [];
  var tableBorderClass =
    "border-collapse border border-jp-gray-940 border-solid border-2 border-opacity-30 dark:border-jp-gray-dark_table_border_color dark:border-opacity-30";
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(
      "div",
      {
        className:
          "flex text-blue-900 text-sm font-bold cursor-pointer justify-end w-full",
        onClick: function (param) {
          setShowModal(function (param) {
            return !showModal;
          });
        },
      },
      "more..",
    ),
    React.createElement(Modal.make, {
      showModal: showModal,
      setShowModal: setShowModal,
      children: React.createElement(LoadedTable.make, {
        visibleColumns: visibleColumns,
        defaultSort: {
          key: "",
          order: "INC",
        },
        title: " ",
        actualData: tableData,
        totalResults: tableData.length,
        resultsPerPage: 10,
        offset: match$1[0],
        setOffset: match$1[1],
        entity: props.tableEntity,
        currrentFetchCount: tableData.length,
        hideTitle: true,
        ignoreHeaderBg: true,
        tableLocalFilter: false,
        tableheadingClass: tableBorderClass,
        tableBorderClass: tableBorderClass,
        tableDataBorderClass: tableBorderClass,
        isAnalyticsModule: true,
        showResultsPerPageSelector: false,
      }),
      modalHeading: props.title,
      modalClass: "w-full max-w-lg mx-auto md:mt-44 ",
      closeOnOutsideClick: true,
    }),
  );
}

var ShowMore = {
  make: HSwitchSingleStatTableWidget$ShowMore,
};

function HSwitchSingleStatTableWidget(props) {
  var __fullWidth = props.fullWidth;
  var __loaderType = props.loaderType;
  var __singleStatLoading = props.singleStatLoading;
  var __borderRounded = props.borderRounded;
  var __statType = props.statType;
  var __tooltipText = props.tooltipText;
  var __title = props.title;
  var __deltaTooltipComponent = props.deltaTooltipComponent;
  if (__deltaTooltipComponent !== undefined) {
    Caml_option.valFromOption(__deltaTooltipComponent);
  }
  var title = __title !== undefined ? __title : "";
  var tooltipText = __tooltipText !== undefined ? __tooltipText : "";
  var statType = __statType !== undefined ? __statType : "";
  var borderRounded =
    __borderRounded !== undefined ? __borderRounded : "rounded-lg";
  var singleStatLoading =
    __singleStatLoading !== undefined ? __singleStatLoading : false;
  var loaderType = __loaderType !== undefined ? __loaderType : "Shimmer";
  var fullWidth = __fullWidth !== undefined ? __fullWidth : false;
  var isMobileWidth = MatchMedia.useMatchMedia("(max-width: 700px)");
  var tableEntity = EntityType.makeEntity(
    "",
    getObjects,
    visibleColumns,
    visibleColumns,
    getHeading,
    function (tableRowType, cols) {
      return getCell(tableRowType, cols, statType);
    },
    "",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    [],
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
  var modifiedData = props.value.filter(function (val) {
    return val.rowValue > 0.0;
  });
  if (singleStatLoading && loaderType === "Shimmer") {
    return React.createElement(
      "div",
      {
        className: "p-4",
        style: {
          width: fullWidth || isMobileWidth ? "100%" : "33.33%",
        },
      },
      React.createElement(Shimmer.make, {
        styleClass: "w-full h-28",
      }),
    );
  } else {
    return React.createElement(
      "div",
      {
        className: "mt-4",
        style: {
          width: fullWidth || isMobileWidth ? "100%" : "33.33%",
        },
      },
      React.createElement(
        "div",
        {
          className:
            "h-full flex flex-col border " +
            borderRounded +
            " dark:border-jp-gray-850 bg-white dark:bg-jp-gray-lightgray_background overflow-hidden singlestatBox p-2 md:mr-4",
        },
        React.createElement(
          "div",
          {
            className: "p-4 flex flex-col justify-start h-full gap-2",
          },
          React.createElement(RenderIf.make, {
            condition: singleStatLoading && loaderType === "SideLoader",
            children: React.createElement(
              "div",
              {
                className: "animate-spin self-end absolute",
              },
              React.createElement(Icon.make, {
                name: "spinner",
                size: 16,
              }),
            ),
          }),
          React.createElement(
            "div",
            {
              className:
                "flex gap-2 items-center text-jp-gray-700 font-bold self-start",
            },
            React.createElement(
              "div",
              {
                className: "font-semibold text-base text-black dark:text-white",
              },
              title,
            ),
            React.createElement(ToolTip.make, {
              description: tooltipText,
              toolTipFor: Caml_option.some(
                React.createElement(
                  "div",
                  {
                    className: "cursor-pointer",
                  },
                  React.createElement(Icon.make, {
                    name: "info-vacent",
                    size: 13,
                  }),
                ),
              ),
              toolTipPosition: "Top",
              newDesign: true,
            }),
          ),
          React.createElement(
            "div",
            {
              className: "flex gap-1 flex-col w-full mt-1",
            },
            modifiedData.length > 0
              ? React.createElement(
                  React.Fragment,
                  {},
                  modifiedData
                    .filter(function (_val, index) {
                      return index < 3;
                    })
                    .map(function (item, index) {
                      return React.createElement(
                        "div",
                        {
                          key: index.toString(),
                          className:
                            "flex justify-between w-full text-sm opacity-70",
                        },
                        React.createElement("div", undefined, item.rowLabel),
                        React.createElement(
                          "div",
                          undefined,
                          statValue(item.rowValue, statType),
                        ),
                      );
                    }),
                  React.createElement(RenderIf.make, {
                    condition: modifiedData.length > 5,
                    children: React.createElement(
                      HSwitchSingleStatTableWidget$ShowMore,
                      {
                        value: modifiedData,
                        title: title,
                        tableEntity: tableEntity,
                      },
                    ),
                  }),
                )
              : React.createElement(
                  "div",
                  {
                    className:
                      "w-full border flex justify-center border-dashed text-sm opacity-70 rounded-lg p-5",
                  },
                  "No Data",
                ),
          ),
        ),
      ),
    );
  }
}

var make = HSwitchSingleStatTableWidget;

export {
  visibleColumns,
  colMapper,
  tableItemToObjMapper,
  getObjects,
  getHeading,
  percentFormat,
  stringToVarient,
  statValue,
  getCell,
  ShowMore,
  make,
};
/* Icon Not a pure module */
