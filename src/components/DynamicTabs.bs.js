// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "./Button.bs.js";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as SelectModal from "./SelectModal.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ErrorBoundary from "./ErrorBoundary.bs.js";
import * as FilterContext from "../context/FilterContext.bs.js";
import * as FramerMotion from "framer-motion";
import * as UserPrefContext from "../context/UserPrefContext.bs.js";

function getValueFromArrayTab(tabsVal, index) {
  var val = tabsVal[index];
  if (val !== undefined) {
    return val.value;
  } else {
    return "";
  }
}

function setTabScroll(
  firstTabRef,
  lastTabRef,
  scrollRef,
  setIsLeftArrowVisible,
  setIsRightArrowVisible,
  getBoundingRectInfo,
) {
  var leftVal = getBoundingRectInfo(firstTabRef, function (val) {
    return val.x;
  });
  var rightVal = getBoundingRectInfo(lastTabRef, function (val) {
    return val.right;
  });
  var scrollValLeft = getBoundingRectInfo(scrollRef, function (val) {
    return val.x;
  });
  var scrollValRight = getBoundingRectInfo(scrollRef, function (val) {
    return val.right;
  });
  var newIsLeftArrowVisible = ((leftVal - scrollValLeft) | 0) < 0;
  var newIsRightArrowVisible = ((rightVal - scrollValRight) | 0) >= 1;
  setIsLeftArrowVisible(function (param) {
    return newIsLeftArrowVisible;
  });
  return setIsRightArrowVisible(function (param) {
    return newIsRightArrowVisible;
  });
}

function DynamicTabs$TabInfo(props) {
  var setTabStacksnames = props.setTabStacksnames;
  var tabStacksnames = props.tabStacksnames;
  var handleSelectedTab = props.handleSelectedTab;
  var tabNames = props.tabNames;
  var selectedIndex = props.selectedIndex;
  var setCollapsibleTabs = props.setCollapsibleTabs;
  var index = props.index;
  var isSelected = props.isSelected;
  var defaultThemeBasedClass = "font-inter-style px-6";
  var defaultClasses =
    "font-semibold " +
    defaultThemeBasedClass +
    " w-max flex flex-auto flex-row items-center justify-center text-body mb-1";
  var selectionClasses = isSelected
    ? "font-semibold text-black"
    : "text-jp-gray-700 dark:text-jp-gray-tabset_gray dark:text-opacity-75  hover:text-jp-gray-800 dark:hover:text-opacity-100 font-medium";
  var handleClick = React.useCallback(
    function (_ev) {
      var tab = tabNames[index];
      handleSelectedTab(
        tab !== undefined ? tab.value : getValueFromArrayTab(tabNames, 0),
        tabNames,
        false,
      );
    },
    [index, handleSelectedTab],
  );
  var crossIcon = props.isRemovable
    ? React.createElement(
        "svg",
        {
          style: {
            marginLeft: "15px",
          },
          height: "10",
          width: "10",
          onClick: function (ev) {
            ev.stopPropagation();
            ev.preventDefault();
            setTabStacksnames(function (prev) {
              var updatedStackAfterRemovingTab = prev
                .slice()
                .filter(function (item) {
                  return item !== getValueFromArrayTab(tabNames, index);
                });
              return updatedStackAfterRemovingTab.filter(
                function (item, index) {
                  if (index === 0) {
                    return true;
                  } else {
                    return (
                      item !==
                      Core__Option.getOr(
                        updatedStackAfterRemovingTab[(index - 1) | 0],
                        "",
                      )
                    );
                  }
                },
              );
            });
            var updatedTabNames = tabNames.slice().filter(function (param, i) {
              return i !== index;
            });
            setCollapsibleTabs(function (param) {
              return updatedTabNames;
            });
            if (selectedIndex !== index) {
              return handleSelectedTab(
                getValueFromArrayTab(updatedTabNames, 0),
                updatedTabNames,
                true,
              );
            }
            if (tabStacksnames.length < 1) {
              return handleSelectedTab(
                getValueFromArrayTab(updatedTabNames, 0),
                updatedTabNames,
                true,
              );
            }
            var tabName = tabStacksnames.pop();
            handleSelectedTab(
              tabName !== undefined
                ? tabName
                : getValueFromArrayTab(updatedTabNames, 0),
              updatedTabNames,
              true,
            );
          },
          fill: "none",
          viewBox: "0 0 12 12",
          xmlns: "http://www.w3.org/2000/svg",
        },
        React.createElement("path", {
          d: "M11.8339 1.34102L10.6589 0.166016L6.00057 4.82435L1.34224 0.166016L0.167236 1.34102L4.82557 5.99935L0.167236 10.6577L1.34224 11.8327L6.00057 7.17435L10.6589 11.8327L11.8339 10.6577L7.17557 5.99935L11.8339 1.34102Z",
          fill: "#7c7d82",
        }),
      )
    : null;
  var tab = React.createElement(
    "div",
    {
      className: "flex flex-col",
    },
    React.createElement(
      "div",
      {
        className: defaultClasses + " " + selectionClasses,
        onClick: handleClick,
      },
      props.title
        .split("+")
        .map(function (prim) {
          return prim.trim();
        })
        .map(LogicUtils.snakeToTitle)
        .join(" + "),
      crossIcon,
    ),
    React.createElement("div", undefined),
    React.createElement(RenderIf.make, {
      condition: isSelected,
      children: React.createElement(FramerMotion.motion.div, {
        className: "bg-black w-full h-0.5 rounded-full",
        layoutId: "underline",
      }),
    }),
    React.createElement(RenderIf.make, {
      condition: !isSelected,
      children: React.createElement("div", {
        className: "w-full h-0.5 rounded-full",
      }),
    }),
  );
  return React.createElement(
    "div",
    {
      className: "flex flex-row cursor-pointer pt-0.5 pb-0   items-center h-14",
    },
    tab,
  );
}

var TabInfo = {
  make: DynamicTabs$TabInfo,
};

function DynamicTabs$IndicationArrow(props) {
  var isVisible = props.isVisible;
  var refElement = props.refElement;
  var isMobileView = MatchMedia.useMobileChecker();
  var onClick = function (_ev) {
    Core__Option.forEach(
      Caml_option.nullable_to_opt(refElement.current),
      function (input) {
        input.scrollIntoView({
          behavior: "smooth",
          block: "nearest",
          inline: "nearest",
        });
      },
    );
  };
  var roundness =
    props.side === "left" ? "rounded-tr-md ml-2" : "rounded-tl-md";
  var className = isVisible
    ? "mt-auto mb-1.5 " + roundness + " drop-shadow-md"
    : "hidden";
  return React.createElement(RenderIf.make, {
    condition: isMobileView,
    children: React.createElement(
      "div",
      {
        className: className,
      },
      React.createElement(Button.make, {
        buttonState: isVisible ? "Normal" : "Disabled",
        buttonType: "Secondary",
        leftIcon: {
          TAG: "FontAwesome",
          _0: props.iconName,
        },
        flattenBottom: true,
        onClick: onClick,
        customButtonStyle:
          "text-black cursor-pointer border-2 border-black-900 !px-2 py-1.5 !rounded-lg",
      }),
    ),
  });
}

var IndicationArrow = {
  make: DynamicTabs$IndicationArrow,
};

function getBoundingRectInfo(ref, getter) {
  return Core__Option.mapOr(
    Core__Option.map(Caml_option.nullable_to_opt(ref.current), function (prim) {
      return prim.getBoundingClientRect();
    }),
    0,
    getter,
  );
}

function DynamicTabs(props) {
  var __showAddMoreTabs = props.showAddMoreTabs;
  var __toolTipDescription = props.toolTipDescription;
  var __enableDescriptionHeader = props.enableDescriptionHeader;
  var initalTab = props.initalTab;
  var updateUrlDict = props.updateUrlDict;
  var setActiveTab = props.setActiveTab;
  var __tabId = props.tabId;
  var __maxSelection = props.maxSelection;
  var __tabContainerClass = props.tabContainerClass;
  var __disableIndicationArrow = props.disableIndicationArrow;
  var tabs = props.tabs;
  var disableIndicationArrow =
    __disableIndicationArrow !== undefined ? __disableIndicationArrow : false;
  var tabContainerClass =
    __tabContainerClass !== undefined ? __tabContainerClass : "";
  var maxSelection = __maxSelection !== undefined ? __maxSelection : 1;
  var tabId = __tabId !== undefined ? __tabId : "";
  var enableDescriptionHeader =
    __enableDescriptionHeader !== undefined ? __enableDescriptionHeader : false;
  var toolTipDescription =
    __toolTipDescription !== undefined ? __toolTipDescription : "Add more tabs";
  var showAddMoreTabs =
    __showAddMoreTabs !== undefined ? __showAddMoreTabs : true;
  var isMobileView = MatchMedia.useMobileChecker();
  var defaultTabs = Core__Option.getOr(
    props.defaultTabs,
    tabs.slice().filter(function (item) {
      return !item.isRemovable;
    }),
  );
  var availableTabUserPrefKey = "dynamicTab_available_tab_" + tabId;
  var updateTabNameWith =
    updateUrlDict !== undefined ? updateUrlDict : function (param) {};
  var match = React.useContext(UserPrefContext.userPrefContext);
  var getConfig = match.getConfig;
  var addConfig = match.addConfig;
  var match$1 = React.useContext(FilterContext.filterContext);
  var filterValueJson = match$1.filterValueJson;
  var getTitle = function (key) {
    return Core__Option.getOr(
      tabs.filter(function (item) {
        return item.value === key;
      })[0],
      {
        title: "",
        value: "",
        isRemovable: false,
      },
    ).title;
  };
  var match$2 = React.useState(function () {
    return tabs.slice();
  });
  var setTabDetails = match$2[1];
  var tabsDetails = match$2[0];
  var match$3 = React.useState(function () {
    return 0;
  });
  var setSelectedIndex = match$3[1];
  var selectedIndex = match$3[0];
  var match$4 = React.useMemo(function () {
    var defautTabValues = defaultTabs.map(function (item) {
      return item.value;
    });
    var jsonVal = getConfig(availableTabUserPrefKey);
    var collapsibleTabs;
    if (jsonVal !== undefined) {
      var tabsFromPreference = LogicUtils.getStrArryFromJson(jsonVal).filter(
        function (item) {
          return !defautTabValues.includes(item);
        },
      );
      var tabsFromPreference$1 = defautTabValues
        .concat(tabsFromPreference)
        .map(function (item) {
          return item.split(",");
        });
      collapsibleTabs = Belt_Array.keepMap(
        tabsFromPreference$1,
        function (tabName) {
          var tabName$1 = LogicUtils.getUniqueArray(tabName);
          var validated =
            tabName$1.filter(function (item) {
              return (
                tabs
                  .map(function (item) {
                    return item.value;
                  })
                  .includes(item) === false
              );
            }).length === 0;
          var concatinatedTabNames = tabName$1.map(getTitle).join(" + ");
          if (
            !(
              validated &&
              tabName$1.length <= maxSelection &&
              tabName$1.length > 0
            )
          ) {
            return;
          }
          var tabValue = tabs.find(function (item) {
            return item.value === tabName$1.join(",");
          });
          var tabValue$1 = tabs.find(function (item) {
            return item.value === tabName$1.join(",");
          });
          return {
            title: concatinatedTabNames,
            value: tabName$1.join(","),
            isRemovable: tabValue !== undefined ? tabValue.isRemovable : true,
            description:
              tabValue$1 !== undefined && enableDescriptionHeader
                ? Core__Option.getOr(tabValue$1.description, "")
                : "",
          };
        },
      );
    } else {
      collapsibleTabs = defaultTabs;
    }
    var tabName =
      initalTab !== undefined
        ? initalTab
        : LogicUtils.getStrArrayFromDict(filterValueJson, "tabName", []).filter(
            function (item) {
              return LogicUtils.isNonEmptyString(item);
            },
          );
    var tabName$1 = LogicUtils.getUniqueArray(tabName);
    var validated =
      tabName$1.filter(function (item) {
        return (
          tabs
            .map(function (item) {
              return item.value;
            })
            .includes(item) === false
        );
      }).length === 0;
    var concatinatedTabNames = tabName$1.map(getTitle).join(" + ");
    if (validated && tabName$1.length <= maxSelection && tabName$1.length > 0) {
      var concatinatedTabIndex = collapsibleTabs
        .map(function (item) {
          return item.title;
        })
        .indexOf(concatinatedTabNames);
      if (concatinatedTabIndex !== -1) {
        return [concatinatedTabIndex, collapsibleTabs];
      }
      var newTab = [
        {
          title: concatinatedTabNames,
          value: tabName$1.join(","),
          isRemovable: true,
        },
      ];
      var updatedColllapsableTab = collapsibleTabs.concat(newTab);
      setTabDetails(function (param) {
        return tabsDetails.concat(newTab);
      });
      return [collapsibleTabs.length, updatedColllapsableTab];
    }
    setSelectedIndex(function (param) {
      return 0;
    });
    return [0, collapsibleTabs];
  }, []);
  var updatedCollapsableTabs = match$4[1];
  var initialIndex = match$4[0];
  var match$5 = React.useState(function () {
    return updatedCollapsableTabs;
  });
  var setCollapsibleTabs = match$5[1];
  var collapsibleTabs = match$5[0];
  var match$6 = React.useState(function () {
    return [];
  });
  var setFormattedOptions = match$6[1];
  var formattedOptions = match$6[0];
  React.useEffect(
    function () {
      setSelectedIndex(function (param) {
        return initialIndex;
      });
    },
    [initialIndex],
  );
  React.useEffect(
    function () {
      setCollapsibleTabs(function (param) {
        return updatedCollapsableTabs;
      });
    },
    [updatedCollapsableTabs],
  );
  React.useEffect(
    function () {
      var collapsibleTabsValues = collapsibleTabs.map(function (item) {
        return item.value;
      });
      addConfig(availableTabUserPrefKey, collapsibleTabsValues);
    },
    [collapsibleTabs],
  );
  var match$7 = React.useState(function () {
    return [
      getValueFromArrayTab(updatedCollapsableTabs, 0),
      getValueFromArrayTab(updatedCollapsableTabs, initialIndex),
    ];
  });
  var setTabStacksnames = match$7[1];
  var tabStacksnames = match$7[0];
  var match$8 = React.useState(function () {
    return false;
  });
  var setIsLeftArrowVisible = match$8[1];
  var match$9 = React.useState(function () {
    return true;
  });
  var setIsRightArrowVisible = match$9[1];
  var firstTabRef = React.useRef(null);
  var scrollRef = React.useRef(null);
  var lastTabRef = React.useRef(null);
  var onScroll = function (_ev) {
    setTabScroll(
      firstTabRef,
      lastTabRef,
      scrollRef,
      setIsLeftArrowVisible,
      setIsRightArrowVisible,
      getBoundingRectInfo,
    );
  };
  var match$10 = React.useState(function () {
    return false;
  });
  var setShowModal = match$10[1];
  var handleSelectedTab = function (tabValue, collapsibleTabs, removed) {
    if (removed === false) {
      if (
        tabValue !==
        Core__Option.getOr(tabStacksnames[(tabStacksnames.length - 1) | 0], "")
      ) {
        setTabStacksnames(function (prev) {
          return prev.concat([tabValue]);
        });
      }
      updateTabNameWith(
        Object.fromEntries([["tabName", "[" + tabValue + "]"]]),
      );
      setActiveTab(tabValue);
      return setSelectedIndex(function (param) {
        return Math.max(
          0,
          collapsibleTabs
            .map(function (item) {
              return item.value;
            })
            .indexOf(tabValue),
        );
      });
    } else {
      updateTabNameWith(
        Object.fromEntries([
          [
            "tabName",
            "[" +
              Core__Option.getOr(
                tabStacksnames[(tabStacksnames.length - 1) | 0],
                "",
              ) +
              "]",
          ],
        ]),
      );
      setActiveTab(
        Core__Option.getOr(tabStacksnames[(tabStacksnames.length - 1) | 0], ""),
      );
      return setSelectedIndex(function (param) {
        return Math.max(
          0,
          collapsibleTabs
            .map(function (item) {
              return item.value;
            })
            .indexOf(
              Core__Option.getOr(
                tabStacksnames[(tabStacksnames.length - 1) | 0],
                "",
              ),
            ),
        );
      });
    }
  };
  var onSubmit = function (values) {
    var tabName = values.map(getTitle).join(" + ");
    var tabValue = values.join(",");
    if (
      collapsibleTabs
        .map(function (item) {
          return item.title;
        })
        .includes(tabName)
    ) {
      setSelectedIndex(function (param) {
        return collapsibleTabs
          .map(function (item) {
            return item.value;
          })
          .indexOf(tabValue);
      });
      updateTabNameWith(
        Object.fromEntries([["tabName", "[" + values.join(",") + "]"]]),
      );
      setActiveTab(values.join(","));
    } else {
      var newTab = [
        {
          title: tabName,
          value: tabValue,
          isRemovable: true,
        },
      ];
      var updatedCollapsableTabs = collapsibleTabs.concat(newTab);
      setCollapsibleTabs(function (param) {
        return updatedCollapsableTabs;
      });
      setTabDetails(function (param) {
        return tabsDetails.concat(newTab);
      });
      setSelectedIndex(function (param) {
        return (updatedCollapsableTabs.length - 1) | 0;
      });
      setTabStacksnames(function (prev) {
        return prev.concat([getValueFromArrayTab(newTab, 0)]);
      });
      updateTabNameWith(
        Object.fromEntries([
          ["tabName", "[" + getValueFromArrayTab(newTab, 0) + "]"],
        ]),
      );
      setActiveTab(getValueFromArrayTab(newTab, 0));
      setTimeout(function () {
        Core__Option.forEach(
          Caml_option.nullable_to_opt(lastTabRef.current),
          function (input) {
            input.scrollIntoView({
              behavior: "smooth",
              block: "nearest",
              inline: "start",
            });
          },
        );
      }, 200);
    }
    setShowModal(function (param) {
      return false;
    });
  };
  React.useEffect(
    function () {
      var options = tabs
        .filter(function (tab) {
          return tab.value.split(",").length <= 1;
        })
        .map(function (x) {
          var description = x.description;
          if (description !== undefined) {
            return {
              label: x.title,
              value: x.value,
              icon: {
                TAG: "CustomRightIcon",
                _0: LogicUtils.isNonEmptyString(description)
                  ? React.createElement(ToolTip.make, {
                      description: description,
                      toolTipPosition: "BottomLeft",
                      customStyle: "-mr-1.5",
                      arrowCustomStyle: isMobileView ? "" : "ml-1.5",
                      justifyClass: "ml-2 h-auto mb-0.5",
                    })
                  : null,
              },
            };
          } else {
            return {
              label: x.title,
              value: x.value,
            };
          }
        });
      setFormattedOptions(function (param) {
        return options;
      });
    },
    [collapsibleTabs],
  );
  return React.createElement(
    "div",
    {
      className: isMobileView
        ? "sticky top-0 z-15 bg-jp-gray-100 dark:bg-jp-gray-darkgray_background"
        : "",
    },
    React.createElement(
      ErrorBoundary.make,
      {
        children: null,
      },
      React.createElement(
        "div",
        {
          className: "py-0 flex flex-row",
        },
        React.createElement(RenderIf.make, {
          condition: !isMobileView,
          children: React.createElement(DynamicTabs$IndicationArrow, {
            iconName: "caret-left",
            side: "left",
            refElement: firstTabRef,
            isVisible: match$8[0],
          }),
        }),
        React.createElement(
          "div",
          {
            ref: Caml_option.some(scrollRef),
            className: "overflow-x-auto no-scrollbar overflow-y-hidden ",
            onScroll: onScroll,
          },
          React.createElement(
            "div",
            {
              className: "flex flex-row",
            },
            React.createElement(
              "div",
              {
                className:
                  "flex flex-row mt-5 gap-1.5\n             " +
                  tabContainerClass,
              },
              collapsibleTabs.map(function (tab, i) {
                var ref =
                  i === 0
                    ? Caml_option.some(firstTabRef)
                    : (setTimeout(function () {
                        setTabScroll(
                          firstTabRef,
                          lastTabRef,
                          scrollRef,
                          setIsLeftArrowVisible,
                          setIsRightArrowVisible,
                          getBoundingRectInfo,
                        );
                      }, 200),
                      Caml_option.some(lastTabRef));
                return React.createElement(
                  "div",
                  {
                    key: i.toString(),
                    ref: ref,
                  },
                  React.createElement(DynamicTabs$TabInfo, {
                    title: tab.title,
                    isSelected: selectedIndex === i,
                    index: i,
                    isRemovable: tab.isRemovable,
                    setCollapsibleTabs: setCollapsibleTabs,
                    selectedIndex: selectedIndex,
                    tabNames: collapsibleTabs,
                    handleSelectedTab: handleSelectedTab,
                    tabStacksnames: tabStacksnames,
                    setTabStacksnames: setTabStacksnames,
                    description: tab.description,
                  }),
                );
              }),
            ),
            React.createElement("div", {
              className: disableIndicationArrow ? "hidden" : "block",
            }),
          ),
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-row",
          },
          React.createElement(RenderIf.make, {
            condition: !isMobileView,
            children: React.createElement(DynamicTabs$IndicationArrow, {
              iconName: "caret-right",
              side: "right",
              refElement: lastTabRef,
              isVisible: match$9[0],
            }),
          }),
          React.createElement(RenderIf.make, {
            condition: showAddMoreTabs && formattedOptions.length > 0,
            children: React.createElement(
              "div",
              {
                className: "flex flex-row",
                style: {
                  marginTop: "20px",
                  marginLeft: "7px",
                },
              },
              React.createElement(ToolTip.make, {
                description: toolTipDescription,
                toolTipFor: Caml_option.some(
                  React.createElement(Button.make, {
                    text: "+",
                    buttonType: "NonFilled",
                    buttonSize: "Small",
                    onClick: function (_ev) {
                      setShowModal(function (param) {
                        return true;
                      });
                    },
                    textStyle: "text-md text-black !px-0 mx-0",
                    customButtonStyle:
                      "text-black cursor-pointer border-2 border-black-900 !px-4 !rounded-lg ",
                  }),
                ),
                tooltipWidthClass: "w-fit",
                toolTipPosition: "Top",
              }),
            ),
          }),
        ),
      ),
      React.createElement(SelectModal.make, {
        modalHeading: "Add Segment",
        modalHeadingDescription:
          "You can select up to " + maxSelection.toString() + " options",
        showModal: match$10[0],
        setShowModal: setShowModal,
        onSubmit: onSubmit,
        initialValues: [],
        options: formattedOptions,
        submitButtonText: "Add Segment",
        showDeSelectAll: true,
        showSelectAll: false,
        maxSelection: maxSelection,
        headerClass: "h-fit",
      }),
      React.createElement("div", {
        className: "",
      }),
    ),
  );
}

var make = DynamicTabs;

export {
  getValueFromArrayTab,
  setTabScroll,
  TabInfo,
  IndicationArrow,
  getBoundingRectInfo,
  make,
};
/* react Not a pure module */
