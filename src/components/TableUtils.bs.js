// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as React from "react";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as Clipboard from "../libraries/Clipboard.bs.js";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as SelectBox from "./SelectBox.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as TimeZoneData from "../mockData/TimeZoneData.bs.js";
import * as TimeZoneHook from "../hooks/TimeZoneHook.bs.js";
import * as ThemeProvider from "../context/ThemeProvider.bs.js";
import * as HelperComponents from "../screens/Helpers/HelperComponents.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as TableLocalFilters from "./TableLocalFilters.bs.js";
import * as DateFormatProvider from "../context/DateFormatProvider.bs.js";
import * as UserTimeZoneProvider from "../context/UserTimeZoneProvider.bs.js";
import * as DataTableFilterOpenContext from "../context/DataTableFilterOpenContext.bs.js";

function regex(searchString) {
  return new RegExp(searchString, "gi");
}

function highlightedText(str, searchedText) {
  var shouldHighlight =
    LogicUtils.isNonEmptyString(searchedText) &&
    str.toLowerCase().includes(searchedText.toLowerCase());
  if (!shouldHighlight) {
    return str;
  }
  var re = regex(searchedText);
  var matchFn = function (matchPart, _offset, _wholeString) {
    return "@@" + matchPart + "@@";
  };
  var listText = Js_string.unsafeReplaceBy0(re, matchFn, str).split("@@");
  return listText.map(function (item, i) {
    if (
      item.toLowerCase() === searchedText.toLowerCase() &&
      searchedText.length > 0
    ) {
      return React.createElement(
        "mark",
        {
          key: i.toString(),
          className: "bg-yellow",
        },
        item,
      );
    } else {
      return React.createElement(
        "span",
        {
          key: i.toString(),
          className: "",
          value: str,
        },
        item,
      );
    }
  });
}

function getSortOrderString(order) {
  switch (order) {
    case "INC":
      return "desc";
    case "DEC":
      return "asc";
    case "NONE":
      return "";
  }
}

function makeHeaderInfo(
  key,
  title,
  dataTypeOpt,
  showSortOpt,
  showFilterOpt,
  highlightCellOnHoverOpt,
  headerElement,
  description,
  data,
  isMandatory,
  showMultiSelectCheckBox,
  hideOnShrink,
  customWidth,
  param,
) {
  var dataType = dataTypeOpt !== undefined ? dataTypeOpt : "TextType";
  var showSort = showSortOpt !== undefined ? showSortOpt : false;
  var showFilter = showFilterOpt !== undefined ? showFilterOpt : false;
  var highlightCellOnHover =
    highlightCellOnHoverOpt !== undefined ? highlightCellOnHoverOpt : false;
  return {
    key: key,
    title: title,
    dataType: dataType,
    showSort: showSort,
    showFilter: showFilter,
    highlightCellOnHover: highlightCellOnHover,
    headerElement: headerElement,
    description: description,
    data: data,
    isMandatory: isMandatory,
    showMultiSelectCheckBox: showMultiSelectCheckBox,
    hideOnShrink: hideOnShrink,
    customWidth: customWidth,
  };
}

function getCell(item) {
  return {
    TAG: "Text",
    _0: item,
  };
}

function TableUtils$ProgressCell(props) {
  var progressPercentage = props.progressPercentage;
  return React.createElement(
    "div",
    {
      className: "w-full bg-gray-200 rounded-full",
    },
    React.createElement(
      "div",
      {
        className:
          "bg-green-700 text font-medium text-blue-100 text-left pl-5 p-0.5 leading-none rounded-full",
        style: {
          width: progressPercentage.toString() + "%",
        },
      },
      progressPercentage.toString() + "%",
    ),
  );
}

var ProgressCell = {
  make: TableUtils$ProgressCell,
};

function getTextAlignmentClass(textAlign) {
  if (textAlign === "Left") {
    return "text-left";
  } else {
    return "text-right px-2";
  }
}

function TableUtils$BaseComponentMethod(props) {
  var filterKey = props.filterKey;
  var showDropDown = props.showDropDown;
  var match = React.useContext(DataTableFilterOpenContext.filterOpenContext);
  var setLclFilterOpen = match[1];
  React.useEffect(
    function () {
      setLclFilterOpen(filterKey, showDropDown);
    },
    [showDropDown],
  );
  return React.createElement(
    "div",
    {
      className:
        "flex px-1 pt-1 pb-0.5 items-center rounded-sm " +
        (showDropDown
          ? "bg-jp-2-light-primary-100 !text-jp-2-light-primary-600"
          : ""),
    },
    React.createElement(Icon.make, {
      name: "bars-filter",
      size: 12,
      parentClass: "cursor-pointer",
    }),
  );
}

var BaseComponentMethod = {
  make: TableUtils$BaseComponentMethod,
};

function TableUtils$LabelCell(props) {
  var __highlightText = props.highlightText;
  var __labelMargin = props.labelMargin;
  var text = props.text;
  var labelColor = props.labelColor;
  var labelMargin = __labelMargin !== undefined ? __labelMargin : "";
  var highlightText = __highlightText !== undefined ? __highlightText : "";
  var match = React.useContext(ThemeProvider.themeContext);
  var backgroundColor = match.globalUIConfig.backgroundColor;
  var isMobileView = MatchMedia.useMobileChecker();
  var bgOpacity = isMobileView ? "bg-opacity-12 dark:!bg-opacity-12" : "";
  var borderColor;
  switch (labelColor) {
    case "LabelGreen":
      borderColor = "bg-green-950 " + bgOpacity + " dark:bg-opacity-50";
      break;
    case "LabelRed":
      borderColor = "bg-red-960 " + bgOpacity + " dark:bg-opacity-50";
      break;
    case "LabelBlue":
      borderColor = backgroundColor + " dark:bg-opacity-50";
      break;
    case "LabelGray":
      borderColor = "bg-blue-table_gray";
      break;
    case "LabelOrange":
      borderColor = "bg-orange-950 " + bgOpacity + " dark:bg-opacity-50";
      break;
    case "LabelYellow":
      borderColor = "bg-yellow-600";
      break;
    case "LabelDarkGreen":
      borderColor = "bg-green-700";
      break;
    case "LabelDarkRed":
      borderColor = "bg-red-400";
      break;
    case "LabelBrown":
      borderColor = "bg-brown-600 bg-opacity-50";
      break;
    case "LabelLightBlue":
      borderColor = backgroundColor + " bg-opacity-50";
      break;
    case "LabelWhite":
      borderColor = "bg-white border border-jp-gray-300";
      break;
    case "LabelViolet":
      borderColor = "bg-violet-500";
      break;
    case "LabelLightGreen":
      borderColor = "bg-green-700  dark:bg-opacity-50";
      break;
    case "LabelLightRed":
      borderColor = "bg-red-400 dark:bg-opacity-50";
      break;
  }
  var textColor;
  switch (labelColor) {
    case "LabelGray":
      textColor = "text-jp-gray-900";
      break;
    case "LabelWhite":
      textColor = "text-jp-gray-700";
      break;
    default:
      textColor = "text-white";
  }
  var mobileTextColor;
  switch (labelColor) {
    case "LabelGreen":
      mobileTextColor = "text-green-950";
      break;
    case "LabelRed":
      mobileTextColor = "text-red-960";
      break;
    case "LabelOrange":
      mobileTextColor = "text-orange-950";
      break;
    default:
      mobileTextColor = "text-white";
  }
  var textColor$1 = isMobileView ? mobileTextColor : textColor;
  return React.createElement(
    "div",
    {
      className: "flex",
    },
    React.createElement(
      "div",
      {
        className: "flex-initial ",
      },
      React.createElement(
        "div",
        {
          className: "rounded " + borderColor,
        },
        React.createElement(
          "div",
          {
            className:
              labelMargin +
              " font-inter-style " +
              textColor$1 +
              " text-fs-10 font-bold px-2 py-0.5",
          },
          React.createElement(AddDataAttributes.make, {
            attributes: [["data-label", text]],
            children: React.createElement(
              "div",
              undefined,
              highlightedText(text, highlightText),
            ),
          }),
        ),
      ),
    ),
  );
}

var LabelCell = {
  make: TableUtils$LabelCell,
};

function TableUtils$NewLabelCell(props) {
  var labelColor = props.labelColor;
  switch (labelColor) {
    case "LabelGreen":
      break;
    case "LabelRed":
      break;
    case "LabelBlue":
      break;
    case "LabelGray":
      break;
    case "LabelOrange":
      break;
    case "LabelYellow":
      break;
    case "LabelDarkGreen":
      break;
    case "LabelDarkRed":
      break;
    case "LabelBrown":
      break;
    case "LabelLightBlue":
      break;
    case "LabelWhite":
      break;
    case "LabelViolet":
      break;
    case "LabelLightGreen":
      break;
    case "LabelLightRed":
      break;
  }
  var bgColor;
  switch (labelColor) {
    case "LabelGreen":
      bgColor = "bg-[#ECFDF3]";
      break;
    case "LabelRed":
      bgColor = "bg-[#FEECEB]";
      break;
    default:
      bgColor = "bg-[#FFF9E2]";
  }
  var textColor;
  switch (labelColor) {
    case "LabelGreen":
      textColor = "text-[#027A48]";
      break;
    case "LabelRed":
      textColor = "text-[#A83027]";
      break;
    default:
      textColor = "text-[#333333]";
  }
  var dotColor;
  switch (labelColor) {
    case "LabelGreen":
      dotColor = "fill-[#12B76A]";
      break;
    case "LabelRed":
      dotColor = "fill-[#F04438]";
      break;
    default:
      dotColor = "fill-[#FDD744]";
  }
  return React.createElement(
    "div",
    {
      className: "flex",
    },
    React.createElement(
      "div",
      {
        className: "flex-initial ",
      },
      React.createElement(
        "div",
        {
          className:
            "flex flex-row px-2 py-0.5 " +
            bgColor +
            " rounded-[16px] text-fs-10 font-bold " +
            textColor,
        },
        React.createElement(Icon.make, {
          name: "circle_unfilled",
          size: 6,
          className: dotColor + " mr-2",
        }),
        React.createElement(
          "div",
          {
            className: textColor + " font-medium text-xs",
          },
          props.text,
        ),
      ),
    ),
  );
}

var NewLabelCell = {
  make: TableUtils$NewLabelCell,
};

function TableUtils$ColoredTextCell(props) {
  var __customPadding = props.customPadding;
  var customPadding = __customPadding !== undefined ? __customPadding : "px-2";
  var textColor;
  switch (props.labelColor) {
    case "LabelGreen":
      textColor = "text-status-green";
      break;
    case "LabelRed":
      textColor = "text-red-980";
      break;
    case "LabelBlue":
      textColor = "text-sky-500";
      break;
    case "LabelGray":
      textColor = "text-grey-500";
      break;
    case "LabelOrange":
      textColor = "text-status-text-orange";
      break;
    case "LabelYellow":
      textColor = "text-yellow-400";
      break;
    case "LabelDarkGreen":
      textColor = "text-green-700";
      break;
    case "LabelDarkRed":
      textColor = "text-red-700";
      break;
    case "LabelBrown":
      textColor = "text-yellow-800";
      break;
    case "LabelLightBlue":
      textColor = "text-sky-300";
      break;
    case "LabelWhite":
      textColor = "text-jp-gray-500";
      break;
    case "LabelViolet":
      textColor = "bg-violet-500";
      break;
    case "LabelLightGreen":
      textColor = "bg-green-700";
      break;
    case "LabelLightRed":
      textColor = "bg-red-400";
      break;
  }
  return React.createElement(
    "div",
    {
      className: "flex",
    },
    React.createElement(
      "div",
      {
        className: "flex-initial ",
      },
      React.createElement(
        "p",
        {
          className:
            "py-0.5 fira-code text-fs-13 font-semibold " +
            textColor +
            " " +
            customPadding,
        },
        props.text,
      ),
    ),
  );
}

var ColoredTextCell = {
  make: TableUtils$ColoredTextCell,
};

function TableUtils$Numeric(props) {
  var num = props.num;
  if (props.clearFormatting !== false) {
    return React.createElement(AddDataAttributes.make, {
      attributes: [["data-numeric", num.toString()]],
      children: React.createElement("div", undefined, num.toString()),
    });
  }
  var mapper = props.mapper;
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-numeric", mapper(num)]],
    children: React.createElement("div", undefined, mapper(num)),
  });
}

var Numeric = {
  make: TableUtils$Numeric,
};

function getAmountValue(amount, currency) {
  var amountSplitArr = amount.toFixed(2).split(".");
  var decimal = Core__Option.getOr(amountSplitArr[1], "00");
  var receivedValue = Core__Option.getOr(amountSplitArr[0], "");
  var formattedAmount = receivedValue.includes("e")
    ? receivedValue
    : currency === "INR"
      ? receivedValue.replace(/(\d)(?=(?:(\d\d)+(\d)(?!\d))+(?!\d))/g, "$1,")
      : receivedValue.replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
  var formatted_amount = formattedAmount + "." + decimal;
  return formatted_amount + " " + currency;
}

function TableUtils$MoneyCell(props) {
  var __customMoneyStyle = props.customMoneyStyle;
  var __fontBold = props.fontBold;
  var __textAlign = props.textAlign;
  var __isCard = props.isCard;
  var isCard = __isCard !== undefined ? __isCard : false;
  var textAlign = __textAlign !== undefined ? __textAlign : "Right";
  var fontBold = __fontBold !== undefined ? __fontBold : false;
  var customMoneyStyle =
    __customMoneyStyle !== undefined ? __customMoneyStyle : "";
  var textAlignClass = getTextAlignmentClass(textAlign);
  var boldClass = fontBold
    ? "text-fs-20 font-bold text-jp-gray-900"
    : "text-fs-13 text-jp-gray-dark_disable_border_color";
  var wrapperClass = isCard
    ? "font-semibold font-fira-code"
    : boldClass +
      " text-start dark:text-white " +
      textAlignClass +
      " " +
      customMoneyStyle;
  var amountValue = getAmountValue(props.amount, props.currency);
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-money-cell", amountValue]],
    children: React.createElement(
      "div",
      {
        className: wrapperClass,
      },
      amountValue,
    ),
  });
}

var MoneyCell = {
  getAmountValue: getAmountValue,
  make: TableUtils$MoneyCell,
};

function TableUtils$LinkCell(props) {
  var trimLength = props.trimLength;
  var data = props.data;
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowCopy = match$1[1];
  var isMobileView = MatchMedia.useMobileChecker();
  var trimData;
  if (trimLength !== undefined) {
    var length = isMobileView ? 36 : trimLength;
    trimData = "..".concat(Js_string.substrAtMost(0, length, data));
  } else {
    trimData = data;
  }
  var mouseOver = function (_ev) {
    setShowCopy(function (param) {
      return true;
    });
  };
  var mouseOut = function (_ev) {
    setShowCopy(function (param) {
      return false;
    });
  };
  var visibility = match$1[0] && !isMobileView ? "visible" : "invisible";
  var preventEvent = function (ev) {
    ev.stopPropagation();
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-row items-center",
      onMouseOut: mouseOut,
      onMouseOver: mouseOver,
    },
    React.createElement(
      "div",
      {
        className:
          "whitespace-pre text-sm font-fira-code dark:text-opacity-75 text-right p-1 " +
          match.globalUIConfig.font.textColor.primaryNormal +
          " text-ellipsis overflow-hidden",
      },
      React.createElement(
        "a",
        {
          href: data,
          target: "_blank",
          onClick: preventEvent,
        },
        trimData,
      ),
    ),
    React.createElement(
      "div",
      {
        className: visibility,
      },
      React.createElement(Clipboard.Copy.make, {
        data: data,
        toolTipPosition: "Top",
      }),
    ),
  );
}

var LinkCell = {
  make: TableUtils$LinkCell,
};

function TableUtils$DateCell(props) {
  var __hideTime = props.hideTime;
  var __textAlign = props.textAlign;
  var textStyle = props.textStyle;
  var __isCard = props.isCard;
  var timestamp = props.timestamp;
  var isCard = __isCard !== undefined ? __isCard : false;
  var textAlign = __textAlign !== undefined ? __textAlign : "Right";
  var hideTime = __hideTime !== undefined ? __hideTime : false;
  var isMobileView = MatchMedia.useMobileChecker();
  var dateFormat = React.useContext(DateFormatProvider.dateFormatContext);
  var dateFormat$1 = isMobileView ? "DD MMM HH:mm" : dateFormat;
  var isoStringToCustomTimeZone =
    TimeZoneHook.useIsoStringToCustomTimeZoneInFloat();
  var getFormattedDate = function (dateStr) {
    try {
      var customTimeZone = isoStringToCustomTimeZone(dateStr);
      return TimeZoneHook.formattedDateTimeFloat(customTimeZone, dateFormat$1);
    } catch (exn) {
      return dateStr + " - unable to parse";
    }
  };
  var fontType = textStyle !== undefined ? textStyle : "font-semibold";
  var match = React.useContext(UserTimeZoneProvider.userTimeContext);
  var selectedTimeZoneData = TimeZoneData.getTimeZoneData(match[0]);
  var selectedTimeZoneAlias = selectedTimeZoneData.title;
  var textAlignClass = getTextAlignmentClass(textAlign);
  var wrapperClass = isCard
    ? fontType
    : "dark:text-jp-gray-text_darktheme dark:text-opacity-75 " +
      textAlignClass +
      " font-inter-style";
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-date", getFormattedDate(timestamp)]],
    children: React.createElement(
      "div",
      {
        className: wrapperClass + " whitespace-nowrap",
      },
      hideTime
        ? getFormattedDate(timestamp).slice(0, 12)
        : getFormattedDate(timestamp) + " " + selectedTimeZoneAlias,
    ),
  });
}

var DateCell = {
  make: TableUtils$DateCell,
};

function TableUtils$StartEndDateCell(props) {
  return React.createElement(
    "div",
    undefined,
    React.createElement(
      "div",
      {
        className: "flex justify-between",
      },
      "Start: ",
      React.createElement(TableUtils$DateCell, {
        timestamp: props.startDate,
      }),
    ),
    React.createElement(
      "div",
      {
        className: "flex justify-between",
      },
      "End: ",
      React.createElement(TableUtils$DateCell, {
        timestamp: props.endDate,
      }),
    ),
  );
}

var StartEndDateCell = {
  make: TableUtils$StartEndDateCell,
};

function TableUtils$EllipsisText(props) {
  var __toolTipPosition = props.toolTipPosition;
  var __ellipsisThreshold = props.ellipsisThreshold;
  var __ellipsisIdentifier = props.ellipsisIdentifier;
  var __ellipseClass = props.ellipseClass;
  var __isEllipsisTextRelative = props.isEllipsisTextRelative;
  var __highlightText = props.highlightText;
  var width = props.width;
  var text = props.text;
  var highlightText = __highlightText !== undefined ? __highlightText : "";
  var isEllipsisTextRelative =
    __isEllipsisTextRelative !== undefined ? __isEllipsisTextRelative : true;
  var ellipseClass = __ellipseClass !== undefined ? __ellipseClass : "";
  var ellipsisIdentifier =
    __ellipsisIdentifier !== undefined ? __ellipsisIdentifier : "";
  var ellipsisThreshold =
    __ellipsisThreshold !== undefined ? __ellipsisThreshold : 20;
  var toolTipPosition =
    __toolTipPosition !== undefined ? __toolTipPosition : "Right";
  var modifiedText = LogicUtils.isNonEmptyString(ellipsisIdentifier)
    ? Core__Option.getOr(text.split(ellipsisIdentifier)[0], "") + "..."
    : text;
  var ellipsesCondition = LogicUtils.isNonEmptyString(ellipsisIdentifier)
    ? ellipsisIdentifier.includes(text)
    : text.length > ellipsisThreshold;
  if (ellipsesCondition) {
    return React.createElement(ToolTip.make, {
      description: text,
      toolTipFor: Caml_option.some(
        React.createElement(
          "div",
          {
            className:
              "whitespace-pre text-ellipsis overflow-x-hidden " + width,
          },
          highlightedText(modifiedText, highlightText),
        ),
      ),
      tooltipForWidthClass: ellipseClass,
      toolTipPosition: toolTipPosition,
      contentAlign: "Left",
      isRelative: isEllipsisTextRelative,
    });
  } else {
    return React.createElement(
      "div",
      {
        className: "whitespace-pre text-ellipsis " + ellipseClass + " " + width,
      },
      highlightedText(text, highlightText),
    );
  }
}

var EllipsisText = {
  make: TableUtils$EllipsisText,
};

function TableUtils$TrimmedText(props) {
  var __hideShowMore = props.hideShowMore;
  var __highlightText = props.highlightText;
  var width = props.width;
  var text = props.text;
  var highlightText = __highlightText !== undefined ? __highlightText : "";
  var hideShowMore = __hideShowMore !== undefined ? __hideShowMore : false;
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = React.useState(function () {
    return true;
  });
  var setshow = match$1[1];
  var show = match$1[0];
  var breakWords = hideShowMore
    ? ""
    : "whitespace-nowrap text-ellipsis overflow-x-hidden";
  if (text.length > 40) {
    return React.createElement(
      "div",
      {
        className: show
          ? breakWords + "  justify-content " + width
          : "justify-content",
      },
      React.createElement(AddDataAttributes.make, {
        attributes: [["data-trimmed-text", text]],
        children: React.createElement(
          "div",
          {
            className: hideShowMore ? "truncate" : "",
          },
          highlightedText(text, highlightText),
        ),
      }),
      hideShowMore
        ? null
        : React.createElement(
            "div",
            {
              className:
                match.globalUIConfig.font.textColor.primaryNormal +
                " cursor-pointer",
              onClick: function (param) {
                setshow(function (show) {
                  return !show;
                });
              },
            },
            show ? "More" : "Less",
          ),
    );
  } else {
    return React.createElement(
      "div",
      undefined,
      React.createElement(AddDataAttributes.make, {
        attributes: [["data-trimmed-text", text]],
        children: React.createElement(
          "div",
          {
            className: hideShowMore
              ? "justify-content " + width + " truncate"
              : "",
          },
          highlightedText(text, highlightText),
        ),
      }),
    );
  }
}

var TrimmedText = {
  make: TableUtils$TrimmedText,
};

function TableUtils$TableFilterCell(props) {
  var cell = props.cell;
  switch (cell.TAG) {
    case "DropDownFilter":
      return React.createElement(TableLocalFilters.FilterDropDown.make, {
        val: cell._0,
        arr: cell._1,
      });
    case "TextFilter":
      return React.createElement(TableLocalFilters.TextFilterCell.make, {
        val: cell._0,
      });
    case "Range":
      return React.createElement(TableLocalFilters.RangeFilterCell.make, {
        minVal: cell._1,
        maxVal: cell._2,
        val: cell._0,
      });
  }
}

var TableFilterCell = {
  make: TableUtils$TableFilterCell,
};

function TableUtils$DeltaColumn(props) {
  var delta = props.delta;
  var value = props.value;
  var detlaStr = delta.toFixed(2) + "%";
  var match =
    delta === 0
      ? ["", "", "", "", "bg-jp-2-gray-30"]
      : delta < 0
        ? [
            "",
            "text-red-980",
            "text-jp-2-red-100",
            "arrow-down",
            "bg-jp-2-red-100",
          ]
        : [
            "+",
            "text-green-950",
            "text-jp-2-green-300",
            "arrow-up",
            "bg-jp-2-green-50",
          ];
  var detlaStr$1 = match[0] + detlaStr;
  var paraparentCss = "flex items-center rounded";
  return React.createElement(
    "div",
    {
      className: "flex",
    },
    React.createElement(
      "div",
      {
        className: "flex justify-between",
      },
      React.createElement(
        "div",
        {
          className: paraparentCss,
        },
        React.createElement(
          "p",
          {
            className: "px-2 py-0.5 fira-code text-fs-13",
          },
          value.toFixed(2) + "%",
        ),
      ),
      React.createElement(RenderIf.make, {
        condition: delta !== value,
        children: React.createElement(
          "div",
          {
            className: paraparentCss,
          },
          React.createElement(
            "p",
            {
              className: "px-2 py-0.5 fira-code text-fs-10  " + match[1],
            },
            detlaStr$1,
          ),
        ),
      }),
    ),
  );
}

var DeltaColumn = {
  make: TableUtils$DeltaColumn,
};

function TableUtils$TableCell(props) {
  var __ellipseClass = props.ellipseClass;
  var __isEllipsisTextRelative = props.isEllipsisTextRelative;
  var __fontStyle = props.fontStyle;
  var __clearFormatting = props.clearFormatting;
  var __hideShowMore = props.hideShowMore;
  var __highlightText = props.highlightText;
  var __customDateStyle = props.customDateStyle;
  var __customMoneyStyle = props.customMoneyStyle;
  var __fontBold = props.fontBold;
  var cell = props.cell;
  var fontBold = __fontBold !== undefined ? __fontBold : false;
  var customMoneyStyle =
    __customMoneyStyle !== undefined ? __customMoneyStyle : "";
  var customDateStyle =
    __customDateStyle !== undefined ? __customDateStyle : "";
  var highlightText = __highlightText !== undefined ? __highlightText : "";
  var hideShowMore = __hideShowMore !== undefined ? __hideShowMore : false;
  var clearFormatting =
    __clearFormatting !== undefined ? __clearFormatting : false;
  var fontStyle = __fontStyle !== undefined ? __fontStyle : "";
  var isEllipsisTextRelative =
    __isEllipsisTextRelative !== undefined ? __isEllipsisTextRelative : true;
  var ellipseClass = __ellipseClass !== undefined ? __ellipseClass : "";
  switch (cell.TAG) {
    case "Label":
      var x = cell._0;
      return React.createElement(AddDataAttributes.make, {
        attributes: [["data-testid", x.title.toLowerCase()]],
        children: React.createElement(TableUtils$LabelCell, {
          labelColor: x.color,
          text: x.title,
          labelMargin: props.labelMargin,
          highlightText: highlightText,
          fontStyle: fontStyle,
          showIcon: x.showIcon,
        }),
      });
    case "EllipsisText":
      var text = cell._0;
      return React.createElement(AddDataAttributes.make, {
        attributes: [["data-testid", text.toLowerCase()]],
        children: React.createElement(TableUtils$EllipsisText, {
          text: text,
          width: cell._1,
          highlightText: highlightText,
          isEllipsisTextRelative: isEllipsisTextRelative,
          ellipseClass: ellipseClass,
        }),
      });
    case "Currency":
      return React.createElement(TableUtils$MoneyCell, {
        amount: cell._0,
        currency: cell._1,
        textAlign: props.textAlign,
        fontBold: fontBold,
        customMoneyStyle: customMoneyStyle,
      });
    case "Date":
      var timestamp = cell._0;
      if (LogicUtils.isNonEmptyString(timestamp)) {
        return React.createElement(TableUtils$DateCell, {
          timestamp: timestamp,
          textAlign: "Left",
          customDateStyle: customDateStyle,
        });
      } else {
        return React.createElement("div", undefined, "-");
      }
    case "DateWithoutTime":
      var timestamp$1 = cell._0;
      if (LogicUtils.isNonEmptyString(timestamp$1)) {
        return React.createElement(TableUtils$DateCell, {
          timestamp: timestamp$1,
          textAlign: "Left",
          customDateStyle: customDateStyle,
          hideTime: true,
        });
      } else {
        return React.createElement("div", undefined, "-");
      }
    case "StartEndDate":
      return React.createElement(TableUtils$StartEndDateCell, {
        startDate: cell._0,
        endDate: cell._1,
      });
    case "Link":
      return React.createElement(TableUtils$LinkCell, {
        data: cell._0,
        trimLength: 55,
      });
    case "Progress":
      return React.createElement(TableUtils$ProgressCell, {
        progressPercentage: cell._0,
      });
    case "InputField":
    case "CustomCell":
      return cell._0;
    case "DisplayCopyCell":
      return React.createElement(HelperComponents.CopyTextCustomComp.make, {
        displayValue: cell._0,
      });
    case "TrimmedText":
      return React.createElement(TableUtils$TrimmedText, {
        text: cell._0,
        width: cell._1,
        highlightText: highlightText,
        hideShowMore: hideShowMore,
      });
    case "DeltaPercentage":
      return React.createElement(TableUtils$DeltaColumn, {
        value: cell._0,
        delta: cell._1,
      });
    case "Text":
    case "DropDown":
      break;
    case "Numeric":
      return React.createElement(TableUtils$Numeric, {
        num: cell._0,
        mapper: cell._1,
        clearFormatting: clearFormatting,
      });
    case "ColoredText":
      var x$1 = cell._0;
      return React.createElement(TableUtils$ColoredTextCell, {
        labelColor: x$1.color,
        text: x$1.title,
      });
  }
  var x$2 = cell._0;
  var x$3 = LogicUtils.isEmptyString(x$2) ? "NA" : x$2;
  return React.createElement(AddDataAttributes.make, {
    attributes: [
      ["data-desc", x$3],
      ["data-testid", x$3.toLowerCase()],
    ],
    children: React.createElement(
      "div",
      undefined,
      highlightedText(x$3, highlightText),
    ),
  });
}

var TableCell = {
  make: TableUtils$TableCell,
};

function TableUtils$NewTableCell(props) {
  var __fontStyle = props.fontStyle;
  var __clearFormatting = props.clearFormatting;
  var __hideShowMore = props.hideShowMore;
  var __highlightText = props.highlightText;
  var __customDateStyle = props.customDateStyle;
  var __customMoneyStyle = props.customMoneyStyle;
  var __fontBold = props.fontBold;
  var cell = props.cell;
  var fontBold = __fontBold !== undefined ? __fontBold : false;
  var customMoneyStyle =
    __customMoneyStyle !== undefined ? __customMoneyStyle : "";
  var customDateStyle =
    __customDateStyle !== undefined ? __customDateStyle : "";
  var highlightText = __highlightText !== undefined ? __highlightText : "";
  var hideShowMore = __hideShowMore !== undefined ? __hideShowMore : false;
  var clearFormatting =
    __clearFormatting !== undefined ? __clearFormatting : false;
  var fontStyle = __fontStyle !== undefined ? __fontStyle : "";
  switch (cell.TAG) {
    case "Label":
      var x = cell._0;
      return React.createElement(TableUtils$NewLabelCell, {
        labelColor: x.color,
        text: x.title,
        labelMargin: props.labelMargin,
        highlightText: highlightText,
        fontStyle: fontStyle,
      });
    case "EllipsisText":
      return React.createElement(TableUtils$EllipsisText, {
        text: cell._0,
        width: cell._1,
        highlightText: highlightText,
      });
    case "Currency":
      return React.createElement(TableUtils$MoneyCell, {
        amount: cell._0,
        currency: cell._1,
        textAlign: props.textAlign,
        fontBold: fontBold,
        customMoneyStyle: customMoneyStyle,
      });
    case "Date":
      var timestamp = cell._0;
      if (LogicUtils.isNonEmptyString(timestamp)) {
        return React.createElement(TableUtils$DateCell, {
          timestamp: timestamp,
          textAlign: "Left",
          customDateStyle: customDateStyle,
        });
      } else {
        return React.createElement("div", undefined, "-");
      }
    case "DateWithoutTime":
      var timestamp$1 = cell._0;
      if (LogicUtils.isNonEmptyString(timestamp$1)) {
        return React.createElement(TableUtils$DateCell, {
          timestamp: timestamp$1,
          textAlign: "Left",
          customDateStyle: customDateStyle,
          hideTime: true,
        });
      } else {
        return React.createElement("div", undefined, "-");
      }
    case "StartEndDate":
      return React.createElement(TableUtils$StartEndDateCell, {
        startDate: cell._0,
        endDate: cell._1,
      });
    case "Link":
      return React.createElement(TableUtils$LinkCell, {
        data: cell._0,
        trimLength: 55,
      });
    case "Progress":
      return React.createElement(TableUtils$ProgressCell, {
        progressPercentage: cell._0,
      });
    case "InputField":
    case "CustomCell":
      return cell._0;
    case "DisplayCopyCell":
      return React.createElement(HelperComponents.CopyTextCustomComp.make, {
        displayValue: cell._0,
      });
    case "TrimmedText":
      return React.createElement(TableUtils$TrimmedText, {
        text: cell._0,
        width: cell._1,
        highlightText: highlightText,
        hideShowMore: hideShowMore,
      });
    case "DeltaPercentage":
      return React.createElement(TableUtils$DeltaColumn, {
        value: cell._0,
        delta: cell._1,
      });
    case "Text":
    case "DropDown":
      break;
    case "Numeric":
      return React.createElement(TableUtils$Numeric, {
        num: cell._0,
        mapper: cell._1,
        clearFormatting: clearFormatting,
      });
    case "ColoredText":
      var x$1 = cell._0;
      return React.createElement(TableUtils$ColoredTextCell, {
        labelColor: x$1.color,
        text: x$1.title,
      });
  }
  var x$2 = cell._0;
  var x$3 = LogicUtils.isEmptyString(x$2) ? "NA" : x$2;
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-desc", x$3]],
    children: React.createElement(
      "div",
      undefined,
      highlightedText(x$3, highlightText),
    ),
  });
}

var NewTableCell = {
  make: TableUtils$NewTableCell,
};

function getTableCellValue(cell) {
  switch (cell.TAG) {
    case "CustomCell":
      return cell._1;
    case "StartEndDate":
    case "InputField":
    case "Progress":
    case "TrimmedText":
    case "DropDown":
      return "";
    case "Currency":
    case "DeltaPercentage":
    case "Numeric":
      return cell._0.toString();
    case "Label":
    case "ColoredText":
      return cell._0.title;
    default:
      return cell._0;
  }
}

function TableUtils$SortIcons(props) {
  var size = props.size;
  var match;
  switch (props.order) {
    case "INC":
      match = ["text-gray-400", "text-gray-300"];
      break;
    case "DEC":
      match = ["text-gray-300", "text-gray-400"];
      break;
    case "NONE":
      match = ["text-gray-400", "text-gray-400"];
      break;
  }
  return React.createElement(
    "div",
    {
      className: "flex flex-col justify-center",
    },
    React.createElement(Icon.make, {
      name: "sort-up",
      size: size,
      className: "-mb-2 " + match[0],
    }),
    React.createElement(Icon.make, {
      name: "sort-down",
      size: size,
      className: match[1],
    }),
  );
}

var SortIcons = {
  make: TableUtils$SortIcons,
};

function TableUtils$HeaderActions(props) {
  var filterKey = props.filterKey;
  var __isLastCol = props.isLastCol;
  var filterRow = props.filterRow;
  var __actionOptions = props.actionOptions;
  var actionOptions =
    __actionOptions !== undefined
      ? __actionOptions
      : [
          {
            label: "Sort Ascending",
            value: "DEC",
            icon: {
              TAG: "Euler",
              _0: "sortAscending",
            },
          },
          {
            label: "Sort Descending",
            value: "INC",
            icon: {
              TAG: "Euler",
              _0: "sortDescending",
            },
          },
        ];
  var isLastCol = __isLastCol !== undefined ? __isLastCol : false;
  var match = React.useState(function () {
    return false;
  });
  var getSortOrderToString = function (order) {
    switch (order) {
      case "INC":
        return "INC";
      case "DEC":
        return "DEC";
      case "NONE":
        return "";
    }
  };
  var actionInput_onBlur = function (_ev) {};
  var actionInput_onChange = props.onChange;
  var actionInput_onFocus = function (_ev) {};
  var actionInput_value = getSortOrderToString(props.order);
  var actionInput = {
    name: "heading",
    onBlur: actionInput_onBlur,
    onChange: actionInput_onChange,
    onFocus: actionInput_onFocus,
    value: actionInput_value,
    checked: true,
  };
  var customButton =
    filterRow !== undefined
      ? React.createElement(
          "div",
          {
            className: "flex relative flex-col w-full bg-white rounded-b-lg",
          },
          React.createElement("div", {
            className: "w-full h-[1px] bg-jp-2-light-gray-400 px-1",
          }),
          React.createElement(TableUtils$TableFilterCell, {
            cell: filterRow,
          }),
        )
      : null;
  return React.createElement(SelectBox.BaseDropdown.make, {
    buttonText: "",
    allowMultiSelect: false,
    input: actionInput,
    showClearAll: false,
    showSelectAll: false,
    options: actionOptions,
    hideMultiSelectButtons: true,
    baseComponentMethod: function (showDropDown) {
      return React.createElement(TableUtils$BaseComponentMethod, {
        showDropDown: showDropDown,
        filterKey: filterKey,
      });
    },
    autoApply: true,
    fixedDropDownDirection: isLastCol ? "BottomLeft" : "BottomRight",
    marginTop: "mt-5.5",
    dropDownCustomBtnClick: match[0],
    showCustomBtnAtEnd: true,
    customButton: Caml_option.some(customButton),
  });
}

var HeaderActions = {
  make: TableUtils$HeaderActions,
};

export {
  regex,
  highlightedText,
  getSortOrderString,
  makeHeaderInfo,
  getCell,
  ProgressCell,
  getTextAlignmentClass,
  BaseComponentMethod,
  LabelCell,
  NewLabelCell,
  ColoredTextCell,
  Numeric,
  MoneyCell,
  LinkCell,
  DateCell,
  StartEndDateCell,
  EllipsisText,
  TrimmedText,
  TableFilterCell,
  DeltaColumn,
  TableCell,
  NewTableCell,
  getTableCellValue,
  SortIcons,
  HeaderActions,
};
/* Icon Not a pure module */
