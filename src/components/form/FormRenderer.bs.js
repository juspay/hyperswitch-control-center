// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../Icon.bs.js";
import * as React from "react";
import * as Button from "../Button.bs.js";
import * as Portal from "../portal/Portal.bs.js";
import * as ToolTip from "../tooltip/ToolTip.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as ButtonGroup from "../ButtonGroup.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InputFields from "../InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ErrorBoundary from "../ErrorBoundary.bs.js";
import * as FormErrorIcon from "../custom-icons/FormErrorIcon.bs.js";
import * as FormValuesSpy from "./FormValuesSpy.bs.js";
import * as ReactFinalForm from "../../libraries/ReactFinalForm.bs.js";
import * as JsonFlattenUtils from "../../utils/JsonFlattenUtils.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as AddDataAttributes from "../AddDataAttributes.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as LabelVisibilityContext from "./LabelVisibilityContext.bs.js";

function makeInputFieldInfo(
  label,
  name,
  customInput,
  placeholder,
  format,
  disabledOpt,
  parse,
  type_Opt,
  isRequiredOpt,
  validate,
  param,
) {
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var type_ = type_Opt !== undefined ? type_Opt : "text";
  var isRequired = isRequiredOpt !== undefined ? isRequiredOpt : false;
  var label$1 = Core__Option.getOr(label, name);
  var newCustomInput = Core__Option.getOr(
    customInput,
    InputFields.textInput(
      undefined,
      disabled,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    ),
  );
  return {
    name: name,
    placeholder: Core__Option.getOr(placeholder, label$1),
    format: format,
    parse: parse,
    disabled: disabled,
    isRequired: isRequired,
    type: type_,
    customInput: newCustomInput,
    validate: validate,
  };
}

function makeMultiInputFieldInfoOld(
  label,
  customLabelIcon,
  subHeading,
  subHeadingIcon,
  description,
  toolTipPosition,
  descriptionComponent,
  subText,
  isRequiredOpt,
  comboCustomInput,
  inputFields,
  param,
) {
  var isRequired = isRequiredOpt !== undefined ? isRequiredOpt : false;
  return {
    label: label,
    customLabelIcon: customLabelIcon,
    subHeading: subHeading,
    subHeadingIcon: subHeadingIcon,
    description: description,
    descriptionComponent: descriptionComponent,
    subText: subText,
    isRequired: isRequired,
    toolTipPosition: toolTipPosition,
    comboCustomInput: comboCustomInput,
    inputFields: inputFields,
    inputNames: inputFields.map(function (x) {
      return x.name;
    }),
  };
}

function makeMultiInputFieldInfo(
  label,
  customLabelIcon,
  subHeading,
  subHeadingIcon,
  description,
  toolTipPosition,
  descriptionComponent,
  subText,
  isRequiredOpt,
  comboCustomInput,
  fieldPortalKey,
  inputFields,
  param,
) {
  var isRequired = isRequiredOpt !== undefined ? isRequiredOpt : false;
  var inputNames = Core__Option.mapOr(comboCustomInput, [], function (x) {
    return x.names;
  }).concat(
    inputFields.map(function (x) {
      return x.name;
    }),
  );
  return {
    label: label,
    customLabelIcon: customLabelIcon,
    subHeading: subHeading,
    subHeadingIcon: subHeadingIcon,
    description: description,
    descriptionComponent: descriptionComponent,
    subText: subText,
    isRequired: isRequired,
    toolTipPosition: toolTipPosition,
    comboCustomInput: Core__Option.map(comboCustomInput, function (x) {
      return x.fn;
    }),
    inputFields: inputFields,
    inputNames: inputNames,
    fieldPortalKey: fieldPortalKey,
  };
}

function makeFieldInfo(
  label,
  customLabelIcon,
  name,
  customInput,
  description,
  toolTipPosition,
  descriptionComponent,
  subText,
  placeholder,
  subHeading,
  subHeadingIcon,
  format,
  disabledOpt,
  parse,
  type_Opt,
  isRequiredOpt,
  fieldPortalKey,
  validate,
  param,
) {
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var type_ = type_Opt !== undefined ? type_Opt : "text";
  var isRequired = isRequiredOpt !== undefined ? isRequiredOpt : false;
  var label$1 = Core__Option.getOr(label, name);
  var newCustomInput = Core__Option.getOr(
    customInput,
    InputFields.textInput(
      undefined,
      disabled,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    ),
  );
  return makeMultiInputFieldInfo(
    label$1,
    customLabelIcon,
    subHeading,
    subHeadingIcon,
    description,
    toolTipPosition,
    descriptionComponent,
    subText,
    isRequired,
    undefined,
    fieldPortalKey,
    [
      makeInputFieldInfo(
        label$1,
        name,
        newCustomInput,
        placeholder,
        format,
        disabled,
        parse,
        type_,
        isRequired,
        validate,
        undefined,
      ),
    ],
    undefined,
  );
}

function FormRenderer$FieldWrapper(props) {
  var __subHeadingClass = props.subHeadingClass;
  var __subTextClass = props.subTextClass;
  var __dataId = props.dataId;
  var __fieldWrapperClass = props.fieldWrapperClass;
  var __isRequired = props.isRequired;
  var descriptionComponent = props.descriptionComponent;
  var __toolTipPosition = props.toolTipPosition;
  var description = props.description;
  var subHeadingIcon = props.subHeadingIcon;
  var subHeading = props.subHeading;
  var __labelPadding = props.labelPadding;
  var __labelTextStyleClass = props.labelTextStyleClass;
  var __labelClass = props.labelClass;
  var customLabelIcon = props.customLabelIcon;
  var label = props.label;
  var labelClass = __labelClass !== undefined ? __labelClass : "";
  var labelTextStyleClass =
    __labelTextStyleClass !== undefined ? __labelTextStyleClass : "";
  var labelPadding = __labelPadding !== undefined ? __labelPadding : "";
  var toolTipPosition =
    __toolTipPosition !== undefined ? __toolTipPosition : "Bottom";
  var isRequired = __isRequired !== undefined ? __isRequired : false;
  var fieldWrapperClass =
    __fieldWrapperClass !== undefined ? __fieldWrapperClass : "";
  var dataId = __dataId !== undefined ? __dataId : "";
  var subTextClass = __subTextClass !== undefined ? __subTextClass : "";
  var subHeadingClass =
    __subHeadingClass !== undefined ? __subHeadingClass : "";
  var showLabel = React.useContext(
    LabelVisibilityContext.formLabelRenderContext,
  );
  var fieldWrapperClass$1 = LogicUtils.isEmptyString(fieldWrapperClass)
    ? "p-1 flex flex-col"
    : fieldWrapperClass;
  var subTextClass$1 =
    "pt-2 pb-2 text-sm text-bold text-jp-gray-900 text-opacity-50 dark:text-jp-gray-text_darktheme dark:text-opacity-50 " +
    subTextClass;
  var labelPadding$1 = LogicUtils.isEmptyString(labelPadding)
    ? "pt-2 pb-2"
    : labelPadding;
  var labelTextClass = LogicUtils.isNonEmptyString(labelTextStyleClass)
    ? labelTextStyleClass
    : "text-fs-13 text-jp-gray-900 dark:text-jp-gray-text_darktheme dark:text-opacity-50 ml-1";
  var subText = Core__Option.flatMap(props.subText, function (val) {
    return LogicUtils.getNonEmptyString(val);
  });
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-component-field-wrapper", "field-" + dataId]],
    children: React.createElement(
      "div",
      {
        className: fieldWrapperClass$1,
      },
      React.createElement(
        React.Fragment,
        {},
        React.createElement(
          "div",
          {
            className: "flex items-center",
          },
          React.createElement(RenderIf.make, {
            condition: showLabel,
            children: React.createElement(AddDataAttributes.make, {
              attributes: [["data-form-label", label]],
              children: React.createElement(
                "label",
                {
                  className:
                    labelPadding$1 + " " + labelTextClass + " " + labelClass,
                },
                label,
                React.createElement(RenderIf.make, {
                  condition: isRequired,
                  children: React.createElement(
                    "span",
                    {
                      className: "text-red-950",
                    },
                    " *",
                  ),
                }),
              ),
            }),
          }),
          description !== undefined
            ? React.createElement(RenderIf.make, {
                condition: LogicUtils.isNonEmptyString(description),
                children: React.createElement(
                  "div",
                  {
                    className: "text-sm text-gray-500 mx-2",
                  },
                  React.createElement(ToolTip.make, {
                    description: description,
                    toolTipPosition: toolTipPosition,
                  }),
                ),
              })
            : null,
          descriptionComponent !== undefined
            ? React.createElement(
                "div",
                {
                  className: "text-sm text-gray-500 mx-2",
                },
                React.createElement(ToolTip.make, {
                  descriptionComponent: Caml_option.some(
                    Caml_option.valFromOption(descriptionComponent),
                  ),
                  tooltipWidthClass: "w-80",
                  toolTipPosition: toolTipPosition,
                }),
              )
            : null,
          customLabelIcon !== undefined
            ? React.createElement(
                "div",
                {
                  className: "pl-2",
                },
                Caml_option.valFromOption(customLabelIcon),
              )
            : null,
        ),
        subHeading !== undefined
          ? React.createElement(
              "div",
              {
                className: "flex flex-row items-center",
              },
              subHeadingIcon !== undefined
                ? React.createElement(Icon.make, {
                    name: subHeadingIcon,
                    size: 13,
                    className: " opacity-60 mr-2 ml-1 mb-2",
                  })
                : null,
              React.createElement(
                "div",
                {
                  className:
                    "text-sm text-jp-gray-900 text-opacity-50 dark:text-jp-gray-text_darktheme dark:text-opacity-50 mb-2 " +
                    subHeadingClass,
                },
                subHeading,
              ),
            )
          : null,
      ),
      props.children,
      subText !== undefined
        ? React.createElement(
            "div",
            {
              className: subTextClass$1,
            },
            subText,
          )
        : null,
    ),
  });
}

var FieldWrapper = {
  make: FormRenderer$FieldWrapper,
};

function FormRenderer$FieldError(props) {
  var __showErrorOnChange = props.showErrorOnChange;
  var __errorClass = props.errorClass;
  var __alwaysShow = props.alwaysShow;
  var meta = props.meta;
  var alwaysShow = __alwaysShow !== undefined ? __alwaysShow : false;
  var errorClass = __errorClass !== undefined ? __errorClass : "";
  var showErrorOnChange =
    __showErrorOnChange !== undefined ? __showErrorOnChange : false;
  var error =
    meta.touched || alwaysShow || (showErrorOnChange && meta.modified)
      ? !(meta.submitError == null) && !meta.dirtySinceLastSubmit
        ? Caml_option.nullable_to_opt(meta.submitError)
        : Caml_option.nullable_to_opt(meta.error)
      : undefined;
  if (error !== undefined) {
    return React.createElement(AddDataAttributes.make, {
      attributes: [["data-form-error", error]],
      children: React.createElement(
        "div",
        {
          className:
            "flex flex-row items-center text-red-950 dark:text-red-400 text-fs-10 font-medium ml-1 pt-2 leading-4 text-start " +
            errorClass,
        },
        React.createElement(FormErrorIcon.make, {}),
        error,
      ),
    });
  } else {
    return null;
  }
}

var FieldError = {
  make: FormRenderer$FieldError,
};

function FormRenderer$FieldErrorRenderer(props) {
  var __errorClass = props.errorClass;
  var field = props.field;
  var errorClass = __errorClass !== undefined ? __errorClass : "";
  return React.createElement(ReactFinalForm$1.Field, {
    name: field.name,
    render: function (param) {
      return React.createElement(FormRenderer$FieldError, {
        meta: param.meta,
        errorClass: errorClass,
      });
    },
    validate: field.validate,
  });
}

var FieldErrorRenderer = {
  make: FormRenderer$FieldErrorRenderer,
};

function FormRenderer$FieldInputRenderer(props) {
  var __showErrorOnChange = props.showErrorOnChange;
  var __errorClass = props.errorClass;
  var __showError = props.showError;
  var customRender = props.customRender;
  var field = props.field;
  var showError = __showError !== undefined ? __showError : true;
  var errorClass = __errorClass !== undefined ? __errorClass : "";
  var showErrorOnChange =
    __showErrorOnChange !== undefined ? __showErrorOnChange : false;
  return React.cloneElement(
    React.createElement(ReactFinalForm$1.Field, {
      format: field.format,
      name: field.name,
      parse: field.parse,
      render:
        customRender !== undefined
          ? customRender
          : function (param) {
              return React.createElement(
                React.Fragment,
                {},
                field.customInput(param.input, field.placeholder),
                showError
                  ? React.createElement(FormRenderer$FieldError, {
                      meta: param.meta,
                      errorClass: errorClass,
                      showErrorOnChange: showErrorOnChange,
                    })
                  : null,
              );
            },
      validate: field.validate,
    }),
    {
      type: field.type,
    },
  );
}

var FieldInputRenderer = {
  make: FormRenderer$FieldInputRenderer,
};

function FormRenderer$ComboFieldsRenderer(props) {
  var field = props.field;
  return React.createElement(
    "div",
    undefined,
    React.createElement(ButtonGroup.make, {
      children: field.inputFields.map(function (field, i) {
        return JsxPPXReactSupportU.createElementWithKey(
          i.toString(),
          ErrorBoundary.make,
          {
            children: React.createElement(FormRenderer$FieldInputRenderer, {
              field: field,
              showError: false,
            }),
          },
        );
      }),
      wrapperClass: "flex flex-row items-center",
    }),
    React.createElement(
      "div",
      undefined,
      field.inputFields.map(function (field, i) {
        return JsxPPXReactSupportU.createElementWithKey(
          i.toString(),
          ErrorBoundary.make,
          {
            children: React.createElement(FormRenderer$FieldErrorRenderer, {
              field: field,
            }),
          },
        );
      }),
    ),
  );
}

var ComboFieldsRenderer = {
  make: FormRenderer$ComboFieldsRenderer,
};

function FormRenderer$ComboFieldsRenderer3$ComboFieldsRecursive(props) {
  var renderComboFields = props.renderComboFields;
  var renderInputs = props.renderInputs;
  var __fieldsState = props.fieldsState;
  var inputFields = props.inputFields;
  var fieldsState = __fieldsState !== undefined ? __fieldsState : [];
  if (inputFields.length === 0) {
    return renderInputs(fieldsState);
  }
  var inputField = Core__Option.getOr(
    inputFields[0],
    makeInputFieldInfo(
      undefined,
      "",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    ),
  );
  var restInputFields = inputFields.slice(1);
  return React.createElement(ReactFinalForm$1.Field, {
    children: function (fieldState) {
      var newFieldsState = [].concat(fieldsState, [fieldState]);
      return renderComboFields(restInputFields, newFieldsState, renderInputs);
    },
    format: inputField.format,
    name: inputField.name,
    parse: inputField.parse,
    validate: inputField.validate,
  });
}

var ComboFieldsRecursive = {
  make: FormRenderer$ComboFieldsRenderer3$ComboFieldsRecursive,
};

function renderComboFields(inputFields, fieldsState, renderInputs) {
  return React.createElement(
    FormRenderer$ComboFieldsRenderer3$ComboFieldsRecursive,
    {
      inputFields: inputFields,
      fieldsState: fieldsState,
      renderInputs: renderInputs,
      renderComboFields: renderComboFields,
    },
  );
}

function FormRenderer$ComboFieldsRenderer3(props) {
  var __fieldsState = props.fieldsState;
  var fieldsState = __fieldsState !== undefined ? __fieldsState : [];
  return React.createElement(
    FormRenderer$ComboFieldsRenderer3$ComboFieldsRecursive,
    {
      inputFields: props.inputFields,
      fieldsState: fieldsState,
      renderInputs: props.renderInputs,
      renderComboFields: renderComboFields,
    },
  );
}

var ComboFieldsRenderer3 = {
  ComboFieldsRecursive: ComboFieldsRecursive,
  renderComboFields: renderComboFields,
  make: FormRenderer$ComboFieldsRenderer3,
};

function FormRenderer$DesktopRow(props) {
  var __backgroundColor = props.backgroundColor;
  var __itemWrapperClass = props.itemWrapperClass;
  var __wrapperClass = props.wrapperClass;
  var wrapperClass = __wrapperClass !== undefined ? __wrapperClass : "";
  var itemWrapperClass =
    __itemWrapperClass !== undefined ? __itemWrapperClass : "mx-4";
  var backgroundColor =
    __backgroundColor !== undefined ? __backgroundColor : "";
  return React.createElement(
    "div",
    {
      className:
        "flex flex-col md:flex-row md:flex-wrap " +
        backgroundColor +
        " " +
        wrapperClass,
    },
    React.Children.map(props.children, function (element) {
      if (element !== null) {
        return React.createElement(AddDataAttributes.make, {
          attributes: [["data-component", "desktopRow"]],
          children: React.createElement(
            "div",
            {
              className: "flex-1 space-y-2 " + itemWrapperClass,
            },
            element,
          ),
        });
      } else {
        return null;
      }
    }),
  );
}

var DesktopRow = {
  make: FormRenderer$DesktopRow,
};

function FormRenderer$FieldRenderer(props) {
  var __showErrorOnChange = props.showErrorOnChange;
  var __subHeadingClass = props.subHeadingClass;
  var __subTextClass = props.subTextClass;
  var __errorClass = props.errorClass;
  var __labelPadding = props.labelPadding;
  var __labelTextStyleClass = props.labelTextStyleClass;
  var __labelClass = props.labelClass;
  var __fieldWrapperClass = props.fieldWrapperClass;
  var field = props.field;
  var fieldWrapperClass =
    __fieldWrapperClass !== undefined ? __fieldWrapperClass : "";
  var labelClass = __labelClass !== undefined ? __labelClass : "";
  var labelTextStyleClass =
    __labelTextStyleClass !== undefined ? __labelTextStyleClass : "";
  var labelPadding = __labelPadding !== undefined ? __labelPadding : "";
  var errorClass = __errorClass !== undefined ? __errorClass : "";
  var subTextClass = __subTextClass !== undefined ? __subTextClass : "";
  var subHeadingClass =
    __subHeadingClass !== undefined ? __subHeadingClass : "";
  var showErrorOnChange =
    __showErrorOnChange !== undefined ? __showErrorOnChange : false;
  var names = field.inputNames.join("-");
  var tmp;
  if (field.inputFields.length === 1) {
    var field$1 = Core__Option.getOr(
      field.inputFields[0],
      makeInputFieldInfo(
        undefined,
        "",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    );
    tmp = React.createElement(ErrorBoundary.make, {
      children: React.createElement(FormRenderer$FieldInputRenderer, {
        field: field$1,
        errorClass: errorClass,
        showErrorOnChange: showErrorOnChange,
      }),
    });
  } else {
    var renderInputs = field.comboCustomInput;
    tmp =
      renderInputs !== undefined
        ? React.createElement(FormRenderer$ComboFieldsRenderer3, {
            inputFields: field.inputFields,
            renderInputs: renderInputs,
          })
        : React.createElement(FormRenderer$ComboFieldsRenderer, {
            field: field,
          });
  }
  return React.createElement(Portal.make, {
    to: "",
    children: React.createElement(AddDataAttributes.make, {
      attributes: [["data-component", "fieldRenderer"]],
      children: React.createElement(ErrorBoundary.make, {
        children: React.createElement(FormRenderer$FieldWrapper, {
          label: field.label,
          customLabelIcon: field.customLabelIcon,
          labelClass: labelClass,
          labelTextStyleClass: labelTextStyleClass,
          labelPadding: labelPadding,
          subHeading: field.subHeading,
          subHeadingIcon: field.subHeadingIcon,
          description: field.description,
          toolTipPosition: field.toolTipPosition,
          descriptionComponent: field.descriptionComponent,
          subText: field.subText,
          isRequired: field.isRequired,
          fieldWrapperClass: fieldWrapperClass,
          children: tmp,
          dataId: names,
          subTextClass: subTextClass,
          subHeadingClass: subHeadingClass,
        }),
      }),
    }),
  });
}

var FieldRenderer = {
  make: FormRenderer$FieldRenderer,
};

function FormRenderer$FormError(props) {
  var form = props.form;
  var match = React.useState(function () {});
  var setSubmitErrors = match[1];
  var submitErrors = match[0];
  var subscriptionDict = {};
  subscriptionDict["submitErrors"] = true;
  React.useEffect(function () {
    return form.subscribe(function (formState) {
      setSubmitErrors(function (param) {
        return Caml_option.nullable_to_opt(formState.submitErrors);
      });
    }, subscriptionDict);
  }, []);
  if (submitErrors === undefined) {
    return null;
  }
  var dict = Core__JSON.Decode.object(submitErrors);
  if (dict === undefined) {
    return null;
  }
  var err = dict["FORM_ERROR"];
  var errStr =
    err !== undefined
      ? LogicUtils.getStringFromJson(err, "")
      : "Error occurred on submit";
  return React.createElement(
    "div",
    {
      className: "text-red-950",
    },
    errStr,
  );
}

var FormError = {
  make: FormRenderer$FormError,
};

function FormRenderer$SubmitButton(props) {
  var dataTestId = props.dataTestId;
  var textStyle = props.textStyle;
  var __userInteractionRequired = props.userInteractionRequired;
  var __tooltipForHeight = props.tooltipForHeight;
  var __tooltipForWidthClass = props.tooltipForWidthClass;
  var __tooltipWidthClass = props.tooltipWidthClass;
  var modalObj = props.modalObj;
  var __withDialog = props.withDialog;
  var __tooltipPositioning = props.tooltipPositioning;
  var __toolTipPosition = props.toolTipPosition;
  var buttonSize = props.buttonSize;
  var __loadingText = props.loadingText;
  var __buttonType = props.buttonType;
  var __showToolTip = props.showToolTip;
  var __customSumbitButtonStyle = props.customSumbitButtonStyle;
  var __loginPageValidator = props.loginPageValidator;
  var __rightIcon = props.rightIcon;
  var __icon = props.icon;
  var __disabledParamter = props.disabledParamter;
  var __text = props.text;
  var text = __text !== undefined ? __text : "Submit";
  var disabledParamter =
    __disabledParamter !== undefined ? __disabledParamter : false;
  var icon = __icon !== undefined ? __icon : "NoIcon";
  var rightIcon = __rightIcon !== undefined ? __rightIcon : "NoIcon";
  var loginPageValidator =
    __loginPageValidator !== undefined ? __loginPageValidator : false;
  var customSumbitButtonStyle =
    __customSumbitButtonStyle !== undefined ? __customSumbitButtonStyle : "";
  var showToolTip = __showToolTip !== undefined ? __showToolTip : true;
  var buttonType = __buttonType !== undefined ? __buttonType : "Primary";
  var loadingText = __loadingText !== undefined ? __loadingText : "";
  var toolTipPosition =
    __toolTipPosition !== undefined ? __toolTipPosition : "Top";
  var tooltipPositioning =
    __tooltipPositioning !== undefined ? __tooltipPositioning : "fixed";
  var withDialog = __withDialog !== undefined ? __withDialog : false;
  var tooltipWidthClass =
    __tooltipWidthClass !== undefined ? __tooltipWidthClass : "w-64";
  var tooltipForWidthClass =
    __tooltipForWidthClass !== undefined ? __tooltipForWidthClass : "";
  var tooltipForHeight =
    __tooltipForHeight !== undefined ? __tooltipForHeight : "h-full";
  var userInteractionRequired =
    __userInteractionRequired !== undefined ? __userInteractionRequired : false;
  var dict = {};
  [
    "hasSubmitErrors",
    "hasValidationErrors",
    "errors",
    "submitErrors",
    "submitting",
  ].forEach(function (item) {
    dict[item] = true;
  });
  var formState = ReactFinalForm$1.useFormState(dict);
  var submitting = formState.submitting;
  var hasValidationErrors = formState.hasValidationErrors;
  var errorsList = Object.entries(
    JsonFlattenUtils.flattenObject(formState.errors, false),
  );
  var hasError = loginPageValidator
    ? hasValidationErrors
    : (hasValidationErrors || formState.hasSubmitErrors || submitting) &&
      !formState.dirtySinceLastSubmit;
  var disabled = hasError || disabledParamter;
  var showPopUp = PopUpState.useShowPopUp();
  var match = React.useState(function () {
    return userInteractionRequired;
  });
  var setAvoidDisable = match[1];
  var avoidDisable = match[0];
  React.useEffect(function () {
    var onClick = function (_ev) {
      setAvoidDisable(function (param) {
        return false;
      });
    };
    window.addEventListener("click", onClick);
    return function () {
      window.removeEventListener("click", onClick);
    };
  }, []);
  var form = ReactFinalForm$1.useForm();
  var popUpBtn = React.createElement(Button.make, {
    buttonState: disabled ? "Disabled" : "Normal",
    text: text,
    buttonType: buttonType,
    buttonSize: buttonSize,
    leftIcon: icon,
    rightIcon: rightIcon,
    onClick: function (param) {
      if (!disabled && modalObj !== undefined) {
        var confirmType = modalObj.confirmType;
        var confirmText = modalObj.confirmText;
        var buttonText = modalObj.buttonText;
        var cancelButtonText = modalObj.cancelButtonText;
        var popUpType = modalObj.popUpType;
        return showPopUp({
          heading: confirmType,
          description: confirmText,
          popUpType: [popUpType, "WithIcon"],
          handleCancel: {
            text: cancelButtonText,
          },
          handleConfirm: {
            text: buttonText,
            onClick: function (param) {
              form.submit();
            },
          },
        });
      }
    },
    textStyle: textStyle,
    customTextSize: props.customTextSize,
    textWeight: props.textWeight,
    customButtonStyle: customSumbitButtonStyle,
    customPaddingClass: props.customPaddingClass,
    dataTestId: dataTestId,
  });
  var buttonState =
    LogicUtils.isNonEmptyString(loadingText) && submitting
      ? "Loading"
      : !avoidDisable && disabled
        ? "Disabled"
        : "Normal";
  var submitBtn = React.createElement(
    React.Fragment,
    {},
    React.createElement("button", {
      className: "hidden",
      type: "submit",
    }),
    React.createElement(Button.make, {
      loadingText: loadingText,
      buttonState: buttonState,
      text: text,
      buttonType: buttonType,
      buttonSize: buttonSize,
      leftIcon: icon,
      rightIcon: rightIcon,
      onClick: function (_ev) {
        form.submit();
      },
      textStyle: textStyle,
      customButtonStyle: customSumbitButtonStyle,
      customHeightClass: props.customHeightClass,
      dataTestId: dataTestId,
    }),
  );
  var button = withDialog ? popUpBtn : submitBtn;
  if (errorsList.length === 0) {
    return button;
  }
  var description = errorsList
    .map(function (entry) {
      var value = LogicUtils.getStringFromJson(entry[1], "Error");
      return LogicUtils.snakeToTitle(entry[0]) + ": " + value;
    })
    .join("\n");
  if (showToolTip && !avoidDisable) {
    return React.createElement(ToolTip.make, {
      description: description,
      tooltipPositioning: tooltipPositioning,
      toolTipFor: Caml_option.some(button),
      tooltipWidthClass: tooltipWidthClass,
      tooltipForWidthClass: tooltipForWidthClass,
      toolTipPosition: toolTipPosition,
      height: tooltipForHeight,
    });
  } else {
    return button;
  }
}

var SubmitButton = {
  make: FormRenderer$SubmitButton,
};

function FormRenderer$FieldsRenderer(props) {
  var __subHeadingClass = props.subHeadingClass;
  var __subTextClass = props.subTextClass;
  var __errorClass = props.errorClass;
  var __labelPadding = props.labelPadding;
  var __labelClass = props.labelClass;
  var __fieldWrapperClass = props.fieldWrapperClass;
  var fieldWrapperClass =
    __fieldWrapperClass !== undefined ? __fieldWrapperClass : "";
  var labelClass = __labelClass !== undefined ? __labelClass : "";
  var labelPadding = __labelPadding !== undefined ? __labelPadding : "";
  var errorClass = __errorClass !== undefined ? __errorClass : "";
  var subTextClass = __subTextClass !== undefined ? __subTextClass : "";
  var subHeadingClass =
    __subHeadingClass !== undefined ? __subHeadingClass : "";
  return props.fields.map(function (field, i) {
    return JsxPPXReactSupportU.createElementWithKey(
      i.toString(),
      FormRenderer$FieldRenderer,
      {
        field: field,
        fieldWrapperClass: fieldWrapperClass,
        labelClass: labelClass,
        labelPadding: labelPadding,
        errorClass: errorClass,
        subTextClass: subTextClass,
        subHeadingClass: subHeadingClass,
      },
    );
  });
}

var FieldsRenderer = {
  make: FormRenderer$FieldsRenderer,
};

function FormRenderer$FormContent(props) {
  var __showFormSpy = props.showFormSpy;
  var __formClass = props.formClass;
  var __fieldWrapperClass = props.fieldWrapperClass;
  var __fieldsWrapperClass = props.fieldsWrapperClass;
  var fields = props.fields;
  var title = props.title;
  var fieldsWrapperClass =
    __fieldsWrapperClass !== undefined ? __fieldsWrapperClass : "";
  var fieldWrapperClass =
    __fieldWrapperClass !== undefined ? __fieldWrapperClass : "";
  var formClass = __formClass !== undefined ? __formClass : "";
  var showFormSpy = __showFormSpy !== undefined ? __showFormSpy : false;
  return React.createElement(
    "form",
    {
      onSubmit: props.handleSubmit,
    },
    React.createElement(
      "div",
      {
        className: formClass,
      },
      title !== undefined ? React.createElement("div", undefined, title) : null,
      React.createElement(
        "div",
        {
          className: "p-2 " + fieldsWrapperClass,
        },
        showFormSpy
          ? React.createElement(
              "div",
              {
                className: "flex flex-1 flex-row overflow-hidden",
              },
              React.createElement(
                "div",
                {
                  className: "flex flex-1 flex-col overflow-scroll p-4",
                },
                React.createElement(FormRenderer$FieldsRenderer, {
                  fields: fields,
                  fieldWrapperClass: fieldWrapperClass,
                }),
              ),
              React.createElement(FormValuesSpy.make, {
                wrapperClass: "h-full w-1/3",
                restrictToLocal: false,
              }),
            )
          : React.createElement(FormRenderer$FieldsRenderer, {
              fields: fields,
              fieldWrapperClass: fieldWrapperClass,
            }),
      ),
      React.createElement(
        "div",
        {
          className: "p-3",
        },
        React.createElement(FormRenderer$FormError, {
          form: props.form,
        }),
      ),
      React.createElement(
        "div",
        {
          className: "flex justify-center mb-2",
        },
        React.createElement(FormRenderer$SubmitButton, {
          text: props.submitButtonText,
        }),
      ),
    ),
  );
}

var FormContent = {
  make: FormRenderer$FormContent,
};

function FormRenderer(props) {
  var __showFormSpy = props.showFormSpy;
  var __formClass = props.formClass;
  var __fieldWrapperClass = props.fieldWrapperClass;
  var __fieldsWrapperClass = props.fieldsWrapperClass;
  var submitButtonText = props.submitButtonText;
  var fields = props.fields;
  var title = props.title;
  var fieldsWrapperClass =
    __fieldsWrapperClass !== undefined ? __fieldsWrapperClass : "";
  var fieldWrapperClass =
    __fieldWrapperClass !== undefined ? __fieldWrapperClass : "";
  var formClass = __formClass !== undefined ? __formClass : "";
  var showFormSpy = __showFormSpy !== undefined ? __showFormSpy : false;
  return React.createElement(ReactFinalForm$1.Form, {
    initialValues: props.initialValues,
    onSubmit: props.onSubmit,
    render: function (param) {
      return React.createElement(FormRenderer$FormContent, {
        form: param.form,
        title: title,
        fields: fields,
        handleSubmit: param.handleSubmit,
        fieldsWrapperClass: fieldsWrapperClass,
        fieldWrapperClass: fieldWrapperClass,
        formClass: formClass,
        showFormSpy: showFormSpy,
        submitButtonText: submitButtonText,
      });
    },
    subscription: ReactFinalForm.subscribeToValues,
    validate: props.validate,
  });
}

var make = FormRenderer;

export {
  makeInputFieldInfo,
  makeMultiInputFieldInfoOld,
  makeMultiInputFieldInfo,
  makeFieldInfo,
  FieldWrapper,
  FieldError,
  FieldErrorRenderer,
  FieldInputRenderer,
  ComboFieldsRenderer,
  ComboFieldsRenderer3,
  DesktopRow,
  FieldRenderer,
  FormError,
  SubmitButton,
  FieldsRenderer,
  FormContent,
  make,
};
/* Icon Not a pure module */
