// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as TextInput from "./TextInput.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Float from "@rescript/core/src/Core__Float.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

function getFloat(strJson) {
  return Core__Option.flatMap(
    Core__JSON.Decode.string(strJson),
    function (val) {
      return Core__Float.fromString(val);
    },
  );
}

function NumericTextInput(props) {
  var __widthMatchwithPlaceholderLength = props.widthMatchwithPlaceholderLength;
  var __shouldSubmitForm = props.shouldSubmitForm;
  var __removeLeadingZeroes = props.removeLeadingZeroes;
  var precision = props.precision;
  var __customStyle = props.customStyle;
  var __inputMode = props.inputMode;
  var __type_ = props.type_;
  var __isDisabled = props.isDisabled;
  var input = props.input;
  var isDisabled = __isDisabled !== undefined ? __isDisabled : false;
  var type_ = __type_ !== undefined ? __type_ : "text";
  var inputMode = __inputMode !== undefined ? __inputMode : "number";
  var customStyle = __customStyle !== undefined ? __customStyle : "";
  var removeLeadingZeroes =
    __removeLeadingZeroes !== undefined ? __removeLeadingZeroes : false;
  var shouldSubmitForm =
    __shouldSubmitForm !== undefined ? __shouldSubmitForm : true;
  var widthMatchwithPlaceholderLength =
    __widthMatchwithPlaceholderLength !== undefined
      ? Caml_option.valFromOption(__widthMatchwithPlaceholderLength)
      : undefined;
  var match = React.useState(function () {
    return input.value;
  });
  var setLocalStrValue = match[1];
  var localStrValue = match[0];
  var inputRef = React.useRef(null);
  React.useEffect(
    function () {
      if (widthMatchwithPlaceholderLength !== undefined) {
        var elem = inputRef.current;
        if (!(elem == null)) {
          var size = Core__Option.mapOr(
            Caml_option.nullable_to_opt(elem.getAttribute("placeholder")),
            widthMatchwithPlaceholderLength,
            function (str) {
              return Math.max(widthMatchwithPlaceholderLength, str.length);
            },
          ).toString();
          elem.setAttribute("size", size);
        }
      }
    },
    [inputRef.current, input.name],
  );
  var modifiedInput = React.useMemo(
    function () {
      return {
        name: input.name,
        onBlur: input.onBlur,
        onChange: function (ev) {
          var value = ev.target.value;
          var strValue = Core__Option.getOr(
            Core__JSON.Decode.string(value),
            "",
          );
          var strArr = strValue.match(/[\d\.]/g);
          var cleanedValue;
          if (strArr !== null) {
            var str = strArr.join("").split(".").slice(0, 2);
            if (removeLeadingZeroes) {
              str[0] = Core__Option.getOr(str[0], "").replace(/\b0+/g, "");
              str[0] = LogicUtils.isEmptyString(Core__Option.getOr(str[0], ""))
                ? "0"
                : Core__Option.getOr(str[0], "");
              cleanedValue = str.join(".");
            } else {
              cleanedValue = str.join(".");
            }
          } else {
            cleanedValue = "";
          }
          var indexOfDec = cleanedValue.indexOf(".");
          var precisionCheckedVal =
            precision !== undefined && indexOfDec > 0
              ? cleanedValue.slice(0, (((indexOfDec + precision) | 0) + 1) | 0)
              : "";
          var finalVal = LogicUtils.isNonEmptyString(precisionCheckedVal)
            ? precisionCheckedVal
            : cleanedValue;
          setLocalStrValue(function (param) {
            return finalVal;
          });
          var num = getFloat(finalVal);
          if (num !== undefined) {
            return input.onChange(num);
          } else if (LogicUtils.isEmptyString(value)) {
            return input.onChange(null);
          } else {
            return;
          }
        },
        onFocus: input.onFocus,
        value: localStrValue,
        checked: input.checked,
      };
    },
    [localStrValue, input],
  );
  React.useEffect(
    function () {
      setLocalStrValue(function (prevLocalStr) {
        var numericPrevLocalValue = Core__Option.getOr(
          Core__Option.map(
            Core__Option.flatMap(
              Core__JSON.Decode.string(prevLocalStr),
              Core__Float.fromString,
            ),
            function (prim) {
              return prim;
            },
          ),
          null,
        );
        if (input.value === numericPrevLocalValue) {
          return prevLocalStr;
        } else {
          return input.value;
        }
      });
    },
    [input.value],
  );
  return React.createElement(TextInput.make, {
    input: modifiedInput,
    placeholder: props.placeholder,
    isDisabled: isDisabled,
    type_: type_,
    inputMode: inputMode,
    pattern: props.pattern,
    autoComplete: props.autoComplete,
    shouldSubmitForm: shouldSubmitForm,
    min: props.min,
    max: props.max,
    maxLength: props.maxLength,
    leftIcon: props.leftIcon,
    rightIcon: props.rightIcon,
    customStyle: customStyle,
    iconOpacity: props.iconOpacity,
    customPaddingClass: props.customPaddingClass,
    widthMatchwithPlaceholderLength: Caml_option.some(
      widthMatchwithPlaceholderLength,
    ),
    rightIconCustomStyle: props.rightIconCustomStyle,
    leftIconCustomStyle: props.leftIconCustomStyle,
    removeValidationCheck: props.removeValidationCheck,
  });
}

var make = NumericTextInput;

export { getFloat, make };
/* react Not a pure module */
