// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../Icon.bs.js";
import * as React from "react";
import * as ToolTip from "../tooltip/ToolTip.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as TextInput from "./TextInput.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as OutsideClick from "../../hooks/OutsideClick.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";

function PasswordStrengthInputAsChips$PasswordChip(props) {
  var __customTextStyle = props.customTextStyle;
  var passwordChecks = props.passwordChecks;
  var customTextStyle =
    __customTextStyle !== undefined ? __customTextStyle : "";
  var match;
  switch (props.chipType) {
    case "Number":
      match = [passwordChecks.number, "Numbers"];
      break;
    case "Lowercase":
      match = [passwordChecks.lowercase, "Lowercase Letters"];
      break;
    case "Uppercase":
      match = [passwordChecks.uppercase, "Uppercase Letters"];
      break;
    case "SpecialChar":
      match = [passwordChecks.specialChar, "Special Characters"];
      break;
    case "MinEightChars":
      match = [passwordChecks.minEightChars, "8 Characters"];
      break;
  }
  var isCheckPassed = match[0];
  var textClass = isCheckPassed
    ? "text-green-700 font-medium"
    : "font-base dark:text-gray-100";
  return React.createElement(
    "p",
    {
      className: isCheckPassed
        ? "flex items-center bg-green-50 dark:bg-green-700/25 border-gray-300 inline-block text-xs p-2 border-0.5 border-green-700 rounded-2xl gap-1"
        : " bg-gray-50 dark:bg-jp-gray-960/75 border-gray-300 inline-block text-xs p-2 border-0.5 dark:border-0 border-gray-300 rounded-2xl",
    },
    React.createElement(RenderIf.make, {
      condition: isCheckPassed,
      children: React.createElement(Icon.make, {
        name: "check",
        size: 9,
      }),
    }),
    React.createElement(
      "span",
      {
        className: textClass + " " + customTextStyle,
      },
      match[1],
    ),
  );
}

var PasswordChip = {
  make: PasswordStrengthInputAsChips$PasswordChip,
};

function PasswordStrengthInputAsChips(props) {
  var __specialCharatersInfoText = props.specialCharatersInfoText;
  var __customTextStyle = props.customTextStyle;
  var __customPaddingClass = props.customPaddingClass;
  var __customStyle = props.customStyle;
  var __autoComplete = props.autoComplete;
  var input = props.input;
  var autoComplete =
    __autoComplete !== undefined ? __autoComplete : "new-password";
  var customStyle = __customStyle !== undefined ? __customStyle : "";
  var customPaddingClass =
    __customPaddingClass !== undefined ? __customPaddingClass : "";
  var customTextStyle =
    __customTextStyle !== undefined ? __customTextStyle : "";
  var specialCharatersInfoText =
    __specialCharatersInfoText !== undefined ? __specialCharatersInfoText : "";
  var initialPasswordState = {
    number: false,
    lowercase: false,
    uppercase: false,
    specialChar: false,
    minEightChars: false,
  };
  var match = React.useState(function () {
    return initialPasswordState;
  });
  var setPasswordChecks = match[1];
  var passwordChecks = match[0];
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowValidation = match$1[1];
  var showValidation = match$1[0];
  var modalRef = React.useRef(null);
  OutsideClick.useOutsideClick(
    {
      TAG: "ArrayOfRef",
      _0: [modalRef],
    },
    undefined,
    showValidation,
    undefined,
    function () {
      setShowValidation(function (param) {
        return false;
      });
    },
    undefined,
  );
  var newInput_name = input.name;
  var newInput_onBlur = function (ev) {
    setShowValidation(function (param) {
      return false;
    });
    input.onBlur(ev);
  };
  var newInput_onChange = function (ev) {
    input.onChange(ev);
    setPasswordChecks(function (param) {
      return initialPasswordState;
    });
    var strVal = ev.target.value;
    if (LogicUtils.isNonEmptyString(strVal)) {
      setShowValidation(function (param) {
        return true;
      });
    } else {
      setShowValidation(function (param) {
        return false;
      });
    }
    if (strVal.length >= 8) {
      setPasswordChecks(function (prev) {
        return {
          number: prev.number,
          lowercase: prev.lowercase,
          uppercase: prev.uppercase,
          specialChar: prev.specialChar,
          minEightChars: true,
        };
      });
    }
    if (/^(?=.*[A-Z])/.test(strVal)) {
      setPasswordChecks(function (prev) {
        return {
          number: prev.number,
          lowercase: prev.lowercase,
          uppercase: true,
          specialChar: prev.specialChar,
          minEightChars: prev.minEightChars,
        };
      });
    }
    if (/^(?=.*[a-z])/.test(strVal)) {
      setPasswordChecks(function (prev) {
        return {
          number: prev.number,
          lowercase: true,
          uppercase: prev.uppercase,
          specialChar: prev.specialChar,
          minEightChars: prev.minEightChars,
        };
      });
    }
    if (/^(?=.*[0-9])/.test(strVal)) {
      setPasswordChecks(function (prev) {
        return {
          number: true,
          lowercase: prev.lowercase,
          uppercase: prev.uppercase,
          specialChar: prev.specialChar,
          minEightChars: prev.minEightChars,
        };
      });
    }
    var specialCharCheck = /^(?=.*[!@#$%^&*_])/.test(strVal);
    if (specialCharCheck) {
      return setPasswordChecks(function (prev) {
        return {
          number: prev.number,
          lowercase: prev.lowercase,
          uppercase: prev.uppercase,
          specialChar: true,
          minEightChars: prev.minEightChars,
        };
      });
    }
  };
  var newInput_onFocus = input.onFocus;
  var newInput_value = input.value;
  var newInput_checked = input.checked;
  var newInput = {
    name: newInput_name,
    onBlur: newInput_onBlur,
    onChange: newInput_onChange,
    onFocus: newInput_onFocus,
    value: newInput_value,
    checked: newInput_checked,
  };
  var passwordChips = [
    "MinEightChars",
    "Lowercase",
    "Number",
    "SpecialChar",
    "Uppercase",
  ];
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(TextInput.make, {
      input: newInput,
      placeholder: props.placeholder,
      type_: "password",
      autoComplete: autoComplete,
      leftIcon: props.leftIcon,
      customDashboardClass: props.customDashboardClass,
      customStyle: customStyle,
      customPaddingClass: customPaddingClass,
    }),
    React.createElement(
      "div",
      {
        className:
          (showValidation ? "block" : "hidden") +
          " flex flex-row flex-wrap gap-y-3 gap-x-2 mt-3",
      },
      passwordChips.map(function (chipType, index) {
        if (
          LogicUtils.isNonEmptyString(specialCharatersInfoText) &&
          chipType === "SpecialChar"
        ) {
          return React.createElement(ToolTip.make, {
            description: specialCharatersInfoText,
            toolTipFor: Caml_option.some(
              JsxPPXReactSupportU.createElementWithKey(
                "check_" + index.toString(),
                PasswordStrengthInputAsChips$PasswordChip,
                {
                  passwordChecks: passwordChecks,
                  chipType: chipType,
                  customTextStyle: customTextStyle,
                },
              ),
            ),
            tooltipWidthClass: "w-fit",
          });
        } else {
          return JsxPPXReactSupportU.createElementWithKey(
            "check_" + index.toString(),
            PasswordStrengthInputAsChips$PasswordChip,
            {
              passwordChecks: passwordChecks,
              chipType: chipType,
              customTextStyle: customTextStyle,
            },
          );
        }
      }),
    ),
  );
}

var make = PasswordStrengthInputAsChips;

export { PasswordChip, make };
/* Icon Not a pure module */
