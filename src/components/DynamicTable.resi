let useRemoteFilter: (
  ~searchParams: Js.String.t,
  ~remoteFilters: array<EntityType.initialFilters<'a>>,
  ~remoteOptions: array<EntityType.optionType<'a>>,
  ~mandatoryRemoteKeys: array<string>,
) => Js.Json.t
@react.component
let make: (
  ~entity: EntityType.entityType<'colType, 't>,
  ~title: Js.String.t,
  ~titleSize: NewThemeUtils.headingSize=?,
  ~hideTitle: bool=?,
  ~description: Js.String2.t=?,
  ~hideFiltersOnNoData: bool=?,
  ~showSerialNumber: bool=?,
  ~tableActions: React.element=?,
  ~isTableActionBesideFilters: bool=?,
  ~hideFilterTopPortals: bool=?,
  ~bottomActions: React.element=?,
  ~resultsPerPage: int=?,
  ~onEntityClick: 't => unit=?,
  ~method: Fetch.requestMethod=?,
  ~path: string=?,
  ~downloadCsv: React.element=?,
  ~prefixAddition: bool=?,
  ~ignoreUrlUpdate: bool=?,
  ~advancedSearchComponent: React.element=?,
  ~body: Js.Json.t=?,
  ~isFiltersInPortal: bool=?,
  ~defaultSort: Table.sortedObject=?,
  ~dataNotFoundComponent: React.element=?,
  ~visibleColumns: Js.Array2.t<'colType>=?,
  ~activeColumnsAtom: Recoil.recoilAtom<array<'colType>>=?,
  ~customizedColumnsStyle: string=?,
  ~renderCard: (~index: int, ~item: 't, ~onRowClick: React.callback<int, unit>) => React.element=?,
  ~getCustomUriForOrder: (string, ~filtersJson: Js.Json.t, ~finalJson: Js.Json.t) => string=?,
  ~portalKey: Js.Dict.key=?,
  ~isEulerOrderEntity: bool=?,
  ~tableLocalFilter: bool=?,
  ~dropdownSearchKeyValueNames: array<Js.Dict.key>=?,
  ~searchkeysDict: Js.Dict.t<Js.Json.t>=?,
  ~mandatoryRemoteKeys: array<string>=?,
  ~isSearchKeyArray: bool=?,
  ~forcePreventConcatData: bool=?,
  ~collapseTableRow: bool=?,
  ~showRefreshFilter: bool=?,
  ~showRemoteOptions: bool=?,
  ~filterButtonStyle: string=?,
  ~getRowDetails: Js.Nullable.t<'t> => React.element=?,
  ~onMouseEnter: 't => unit=?,
  ~onMouseLeave: 't => unit=?,
  ~customFilterStyle: string=?,
  ~reactWindow: bool=?,
  ~frozenUpto: int=?,
  ~heightHeadingClass: string=?,
  ~rowHeightClass: string=?,
  ~titleTooltip: bool=?,
  ~rowCustomClass: string=?,
  ~requireDateFormatting: bool=?,
  ~autoApply: bool=?,
  ~showClearFilter: bool=?,
  ~addDataLoading: bool=?,
  ~filterObj: array<Table.filterObject>=?,
  ~setFilterObj: (array<Table.filterObject> => Js.Array2.t<Table.filterObject>) => unit=?,
  ~filterCols: array<int>=?,
  ~filterIcon: React.element=?,
  ~applyFilters: bool=?,
  ~errorButtonType: Button.buttonType=?,
  ~maxTableHeight: string=?,
  ~tableheadingClass: string=?,
  ~ignoreHeaderBg: bool=?,
  ~customLocalFilterStyle: string=?,
  ~showFiltersSearch: bool=?,
  ~showFilterBorder: bool=?,
  ~headBottomMargin: string=?,
  ~noDataMsg: string=?,
  ~checkBoxProps: LoadedTable.checkBoxProps=?,
  ~tableBorderClass: string=?,
  ~paginationClass: string=?,
  ~tableDataBorderClass: string=?,
  ~tableActionBorder: string=?,
  ~disableURIdecode: bool=?,
  ~mergeBodytoRemoteFilterDict: bool=?,
  ~defaultKeysAllowed: array<string>=?,
  ~urlKeyTypeDict: Js.Dict.t<RemoteFiltersUtils.urlKEyType>=?,
) => React.element
