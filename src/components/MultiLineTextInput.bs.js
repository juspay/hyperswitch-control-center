// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as PopUpState from "../hooks/PopUpState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

function MultiLineTextInput(props) {
  var leftIcon = props.leftIcon;
  var __customClass = props.customClass;
  var isDisabled = props.isDisabled;
  var input = props.input;
  var customClass = __customClass !== undefined ? __customClass : "";
  var showPopUp = PopUpState.useShowPopUp();
  var cursorClass = isDisabled ? "cursor-not-allowed" : "";
  React.useEffect(
    function () {
      var val = Core__Option.getOr(Core__JSON.Decode.string(input.value), "");
      if (val.includes("<script>") || val.includes("</script>")) {
        showPopUp({
          heading: "Script Tags are not allowed",
          description: "Input cannot contain <script>, </script> tags",
          popUpType: ["Warning", "WithIcon"],
          handleConfirm: {
            text: "OK",
          },
        });
        input.onChange(val.replace("<script>", "").replace("</script>", ""));
      }
    },
    [input.value],
  );
  var className =
    "rounded-md border border-jp-gray-lightmode_steelgray border-opacity-75 font-normal pl-4 pt-3 pb-3 text-sm text-jp-gray-900  text-opacity-75 placeholder-jp-gray-900 placeholder-opacity-25 hover:bg-jp-gray-lightmode_steelgray hover:bg-opacity-20 hover:border-jp-gray-900 hover:border-opacity-20 focus:text-opacity-100 focus:outline-none focus:border-blue-500 focus:border-opacity-100 dark:text-jp-gray-text_darktheme dark:text-opacity-75 dark:border-jp-gray-960 dark:hover:border-jp-gray-960 dark:hover:bg-jp-gray-970 dark:bg-jp-gray-darkgray_background dark:placeholder-jp-gray-text_darktheme dark:placeholder-opacity-25 dark:focus:text-opacity-100 dark:focus:border-blue-500 " +
    cursorClass +
    " " +
    customClass;
  var str = Core__JSON.Classify.classify(input.value);
  var value;
  if (typeof str !== "object") {
    value = "";
  } else {
    switch (str.TAG) {
      case "String":
        value = str._0;
        break;
      case "Number":
        value = str._0.toString();
        break;
      default:
        value = "";
    }
  }
  var textAreaComponent = React.createElement("textarea", {
    className: className,
    autoFocus: props.autoFocus,
    cols: props.cols,
    disabled: isDisabled,
    maxLength: props.maxLength,
    name: input.name,
    placeholder: props.placeholder,
    readOnly: props.readOnly,
    rows: props.rows,
    value: value,
    onFocus: input.onFocus,
    onBlur: input.onBlur,
    onChange: input.onChange,
  });
  if (leftIcon !== undefined) {
    return React.createElement(
      "div",
      {
        className: "flex flex-row md:relative",
      },
      React.createElement(
        "div",
        {
          className: "absolute self-start p-3",
        },
        Caml_option.valFromOption(leftIcon),
      ),
      textAreaComponent,
    );
  } else {
    return textAreaComponent;
  }
}

var make = MultiLineTextInput;

export { make };
/* react Not a pure module */
