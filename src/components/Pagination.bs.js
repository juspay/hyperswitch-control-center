// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "./Button.bs.js";
import * as SelectBox from "./SelectBox.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as ButtonGroup from "./ButtonGroup.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";

function Pagination(props) {
  var __btnCount = props.btnCount;
  var paginate = props.paginate;
  var currentPage = props.currentPage;
  var totalResults = props.totalResults;
  var btnCount = __btnCount !== undefined ? __btnCount : 4;
  var pageNumbers = [];
  var isMobileView = MatchMedia.useMobileChecker();
  var match = React.useState(function () {
    return "1-10";
  });
  var setDropDownVal = match[1];
  var total = Math.ceil(totalResults / props.resultsPerPage) | 0;
  for (var x = 1; x <= total; ++x) {
    pageNumbers.push(x);
  }
  var pageToLeft =
    ((btnCount - ((total - currentPage) | 0)) | 0) < ((btnCount / 2) | 0)
      ? (btnCount / 2) | 0
      : (btnCount - ((total - currentPage) | 0)) | 0;
  var arr = [];
  for (var x$1 = 1; x$1 <= totalResults; ++x$1) {
    arr.push(x$1);
  }
  var rangeNum = arr
    .map(function (ele) {
      if (ele % 10 === 0) {
        return arr.indexOf((ele + 1) | 0);
      } else {
        return 0;
      }
    })
    .filter(function (i) {
      return i !== 0;
    });
  var ranges = [];
  rangeNum.forEach(function (ele) {
    ranges.push(((ele - 9) | 0).toString() + "-" + ele.toString());
  });
  var lastNum = Core__Option.getOr(rangeNum[(rangeNum.length - 1) | 0], 0);
  if (totalResults > lastNum) {
    var start = (lastNum + ((totalResults - lastNum) | 0)) | 0;
    if (start === totalResults) {
      ranges.push(start.toString());
    } else {
      ranges.push(start.toString() + "-" + totalResults.toString());
    }
  }
  var startIndex = Math.max(1, (currentPage - pageToLeft) | 0);
  var endIndex = Math.min((startIndex + btnCount) | 0, total);
  var nonEmpty = function (s) {
    if (s >= startIndex) {
      return s <= endIndex;
    } else {
      return false;
    }
  };
  if (!isMobileView) {
    return React.createElement(
      ButtonGroup.make,
      {
        children: null,
      },
      React.createElement(Button.make, {
        buttonState: currentPage > 1 ? "Normal" : "Disabled",
        buttonType: "Pagination",
        leftIcon: {
          TAG: "Euler",
          _0: "LeftPagination",
        },
        onClick: function (_evt) {
          paginate(Math.max(1, (currentPage - 1) | 0));
        },
        customButtonStyle: "!h-10",
      }),
      pageNumbers.filter(nonEmpty).map(function (number, idx) {
        var isSelected = number === currentPage;
        return JsxPPXReactSupportU.createElementWithKey(
          idx.toString(),
          Button.make,
          {
            buttonState: isSelected ? "NoHover" : "Normal",
            text: number.toString(),
            buttonType: "Pagination",
            onClick: function (_evt) {
              paginate(number);
            },
            customButtonStyle: "!h-10 border-left-1 border-right-1",
          },
        );
      }),
      React.createElement(Button.make, {
        buttonState: currentPage < pageNumbers.length ? "Normal" : "Disabled",
        buttonType: "Pagination",
        rightIcon: {
          TAG: "Euler",
          _0: "RightPagination",
        },
        onClick: function (_evt) {
          paginate((currentPage + 1) | 0);
        },
        customButtonStyle: "!h-10",
      }),
    );
  }
  var dropDownOptions = ranges.map(function (item, idx) {
    return {
      label: item,
      value: ((idx + 1) | 0).toString(),
    };
  });
  var selectInput_onBlur = function (_ev) {};
  var selectInput_onChange = function (_evt) {
    var val = Core__Option.getOr(ranges[(_evt - 1) | 0], "1-10");
    setDropDownVal(function (param) {
      return val;
    });
    paginate(_evt);
  };
  var selectInput_onFocus = function (_ev) {};
  var selectInput = {
    name: "dummy-name",
    onBlur: selectInput_onBlur,
    onChange: selectInput_onChange,
    onFocus: selectInput_onFocus,
    value: "",
    checked: true,
  };
  return React.createElement(SelectBox.BaseDropdown.make, {
    buttonText: match[0],
    allowMultiSelect: false,
    input: selectInput,
    options: dropDownOptions,
    hideMultiSelectButtons: true,
    deselectDisable: true,
    buttonType: "Pagination",
    searchable: false,
  });
}

var make = Pagination;

export { make };
/* react Not a pure module */
