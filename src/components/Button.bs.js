// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as React from "react";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as Loadericon from "./custom-icons/Loadericon.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ThemeProvider from "../context/ThemeProvider.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as ButtonGroupContext from "../context/ButtonGroupContext.bs.js";
import * as RippleEffectBackground from "./RippleEffectBackground.bs.js";

function useGetBgColor(
  buttonType,
  buttonState,
  showBorder,
  isDropdownOpenOpt,
  isPhoneDropdownOpt,
  param,
) {
  var isDropdownOpen =
    isDropdownOpenOpt !== undefined ? isDropdownOpenOpt : false;
  var isPhoneDropdown =
    isPhoneDropdownOpt !== undefined ? isPhoneDropdownOpt : false;
  var config = React.useContext(ThemeProvider.themeContext);
  var buttonConfig = config.globalUIConfig.button.backgroundColor;
  switch (buttonType) {
    case "Primary":
      switch (buttonState) {
        case "Loading":
          return buttonConfig.primaryLoading;
        case "Disabled":
          return buttonConfig.primaryDisabled;
        case "NoHover":
          return buttonConfig.primaryNoHover;
        case "Normal":
        case "Focused":
          return buttonConfig.primaryNormal;
      }
    case "Secondary":
      switch (buttonState) {
        case "Loading":
          if (showBorder) {
            return "bg-jp-gray-button_gray  dark:bg-jp-gray-darkgray_background";
          } else {
            return "bg-jp-gray-lightmode_steelgray bg-opacity-40 dark:bg-jp-gray-950 dark:bg-opacity-100";
          }
        case "Disabled":
          if (showBorder) {
            return "bg-jp-gray-300 dark:bg-gray-800 dark:bg-opacity-10";
          } else {
            return "px-4";
          }
        case "NoHover":
          return "bg-jp-gray-button_gray text-jp-gray-900 text-opacity-50  hover:bg-jp-gray-secondary_hover hover:text-jp-gray-890  dark:bg-jp-gray-darkgray_background dark:text-jp-gray-text_darktheme focus:outline-none dark:text-opacity-50 ";
        case "Normal":
        case "Focused":
          if (showBorder) {
            return "bg-jp-gray-button_gray text-jp-gray-900 text-opacity-75 hover:bg-jp-gray-secondary_hover hover:text-jp-gray-890  dark:bg-jp-gray-darkgray_background  dark:text-jp-gray-text_darktheme dark:text-opacity-50 focus:outline-none";
          } else {
            return "text-jp-gray-900 hover:bg-jp-gray-lightmode_steelgray hover:bg-opacity-40 dark:bg-jp-gray-darkgray_background dark:text-jp-gray-text_darktheme dark:text-opacity-50 dark:hover:bg-jp-gray-950 focus:outline-none";
          }
      }
    case "PrimaryOutline":
      return buttonConfig.primaryOutline;
    case "SecondaryFilled":
      switch (buttonState) {
        case "Loading":
          return "bg-jp-gray-200 dark:bg-jp-gray-800 dark:bg-opacity-10";
        case "Disabled":
          return "bg-jp-gray-300 dark:bg-jp-gray-950 dark:bg-opacity-50 border dark:border-jp-gray-disabled_border dark:border-opacity-50";
        case "NoHover":
          return "bg-gradient-to-b overflow-x-scroll from-jp-gray-200 to-jp-gray-300 dark:from-jp-gray-950 dark:to-jp-gray-950 dark:gray-text_darktheme focus:outline-none dark:text-opacity-50 text-opacity-50";
        case "Normal":
        case "Focused":
          return "bg-gradient-to-b from-jp-gray-250 to-jp-gray-200 dark:from-jp-gray-950 dark:to-jp-gray-950 hover:shadow dark:text-jp-gray-text_darktheme dark:text-opacity-50 focus:outline-none";
      }
    case "NonFilled":
      switch (buttonState) {
        case "Loading":
          return "bg-jp-gray-200 dark:bg-jp-gray-800 dark:bg-opacity-10";
        case "Disabled":
          return "bg-jp-gray-300 dark:bg-jp-gray-950 dark:bg-opacity-50 border dark:border-jp-gray-disabled_border dark:border-opacity-50";
        case "NoHover":
          return "hover:bg-jp-gray-600 hover:bg-opacity-40 dark:hover:bg-jp-gray-950 dark:hover:bg-opacity-100 dark:text-jp-gray-text_darktheme focus:outline-none dark:text-opacity-50 text-opacity-50";
        case "Normal":
        case "Focused":
          return "hover:bg-jp-gray-lightmode_steelgray hover:bg-opacity-40 dark:hover:bg-jp-gray-950 dark:hover:bg-opacity-100 dark:text-jp-gray-text_darktheme dark:text-opacity-50 focus:outline-none";
      }
    case "Pagination":
      switch (buttonState) {
        case "Loading":
          return "border-left-1 border-right-1 font-normal border-left-1 bg-jp-gray-200 dark:bg-jp-gray-800 dark:bg-opacity-10";
        case "Disabled":
          return "border-left-1 border-right-1 font-normal border-left-1 bg-jp-gray-300 dark:bg-jp-gray-950 dark:bg-opacity-50 border dark:border-jp-gray-disabled_border dark:border-opacity-50";
        case "NoHover":
          return "bg-white border-left-1 border-right-1 font-normal text-jp-gray-900 text-opacity-75 hover:text-jp-gray-900 dark:text-jp-gray-text_darktheme dark:text-opacity-75";
        case "Normal":
        case "Focused":
          return "border-left-1 opacity-80 border-right-1 font-normal border-left-1 text-jp-gray-900 text-opacity-50 hover:text-jp-gray-900 focus:outline-none";
      }
    case "Pill":
      switch (buttonState) {
        case "Loading":
          if (showBorder) {
            return "bg-white dark:bg-jp-gray-darkgray_background";
          } else {
            return "bg-jp-gray-600 bg-opacity-40 dark:bg-jp-gray-950 dark:bg-opacity-100";
          }
        case "Disabled":
          if (showBorder) {
            return "bg-jp-gray-300 dark:bg-jp-gray-950 dark:bg-opacity-50 border dark:border-jp-gray-disabled_border dark:border-opacity-50";
          } else {
            return "px-4";
          }
        case "NoHover":
          return "bg-white text-jp-gray-900 text-opacity-50 dark:bg-jp-gray-darkgray_background dark:text-jp-gray-text_darktheme dark:text-opacity-50 focus:outline-none";
        case "Normal":
        case "Focused":
          return "bg-white text-jp-gray-900 text-opacity-50 hover:shadow hover:text-opacity-75 dark:bg-jp-gray-darkgray_background dark:text-jp-gray-text_darktheme dark:text-opacity-50 focus:outline-none";
      }
    case "FilterAdd":
      switch (buttonState) {
        case "Loading":
          return "bg-jp-gray-200 dark:bg-jp-gray-800 dark:bg-opacity-10";
        case "Disabled":
          return "bg-jp-gray-300 dark:bg-jp-gray-950 dark:bg-opacity-50 border dark:border-jp-gray-disabled_border dark:border-opacity-50";
        case "NoHover":
          return "hover:bg-jp-gray-600 hover:bg-opacity-40 dark:hover:bg-jp-gray-950 dark:hover:bg-opacity-100 dark:text-blue-500  focus:outline-none dark:text-opacity-100 text-opacity-50";
        case "Normal":
        case "Focused":
          return "hover:bg-jp-gray-lightmode_steelgray hover:bg-opacity-40 dark:hover:bg-jp-gray-950 dark:hover:bg-opacity-100 text-blue-500 dark:text-blue-500 dark:text-opacity-100 focus:outline-none";
      }
    case "Delete":
      switch (buttonState) {
        case "Loading":
          return "bg-red-960";
        case "Disabled":
          return "bg-jp-gray-300 dark:bg-jp-gray-950 dark:bg-opacity-50 border dark:border-jp-gray-disabled_border dark:border-opacity-50";
        case "NoHover":
          return "bg-gradient-to-t from-red-960 to-red-800  hover:from-red-960 hover:to-red-960 focus:outline-none dark:text-opacity-50 text-opacity-50";
        case "Normal":
        case "Focused":
          return "bg-red-960   hover:from-red-960 hover:to-red-950 focus:outline-none";
      }
    case "Transparent":
      switch (buttonState) {
        case "Loading":
        case "NoHover":
          return "bg-gray-50   hover:bg-gray-200 focus:outline-none";
        case "Normal":
        case "Disabled":
        case "Focused":
          return "bg-gray-50   hover:bg-gray-200 dark:bg-jp-gray-darkgray_background focus:outline-none";
      }
    case "SelectTransparent":
      switch (buttonState) {
        case "Loading":
        case "Disabled":
        case "NoHover":
          return "bg-gray-100   hover:bg-blue-200 focus:outline-none";
        case "Normal":
        case "Focused":
          return "bg-blue-100   hover:bg-blue-200  dark:bg-black focus:outline-none";
      }
    case "DarkPurple":
      switch (buttonState) {
        case "Normal":
        case "Loading":
        case "Disabled":
        case "NoHover":
        case "Focused":
          return "bg-[#4F54EF] dark:bg-black focus:outline-none";
      }
    case "Dropdown":
      var hoverCss = isPhoneDropdown ? "" : "hover:bg-jp-2-light-gray-100";
      var color = isDropdownOpen
        ? showBorder
          ? "bg-jp-2-light-gray-100 shadow-jp-2-sm-gray-focus"
          : isPhoneDropdown
            ? "bg-transparent"
            : "bg-jp-2-light-gray-100"
        : isPhoneDropdown
          ? ""
          : "bg-white";
      if (buttonState === "Disabled") {
        return "bg-gray-200 dark:bg-jp-gray-950 dark:bg-opacity-50 border dark:border-jp-gray-disabled_border dark:border-opacity-50";
      } else {
        return (
          color + " " + hoverCss + " focus:outline-none dark:active:shadow-none"
        );
      }
  }
}

function useGetTextColor(
  buttonType,
  buttonState,
  showBorder,
  isDropdownOpenOpt,
  isPhoneDropdownOpt,
  param,
) {
  var isDropdownOpen =
    isDropdownOpenOpt !== undefined ? isDropdownOpenOpt : false;
  var isPhoneDropdown =
    isPhoneDropdownOpt !== undefined ? isPhoneDropdownOpt : false;
  var config = React.useContext(ThemeProvider.themeContext);
  var textConfig = config.globalUIConfig.button.textColor;
  switch (buttonType) {
    case "Primary":
      if (buttonState === "Disabled") {
        return textConfig.primaryDisabled;
      } else {
        return textConfig.primaryNormal;
      }
    case "Secondary":
      switch (buttonState) {
        case "Loading":
          return "text-jp-gray-950 hover:text-black dark:text-jp-gray-text_darktheme dark:text-opacity-75";
        case "Disabled":
          return "text-jp-gray-600 dark:text-jp-gray-text_darktheme dark:text-opacity-25";
        default:
          return "text-jp-gray-950 hover:text-black dark:text-jp-gray-text_darktheme dark:hover:text-jp-gray-text_darktheme dark:hover:text-opacity-75";
      }
    case "PrimaryOutline":
      return textConfig.primaryOutline;
    case "SecondaryFilled":
      switch (buttonState) {
        case "Loading":
          return "text-jp-gray-800 hover:text-black dark:text-jp-gray-text_darktheme dark:text-opacity-75";
        case "Disabled":
          return "text-jp-gray-600 dark:text-jp-gray-text_darktheme dark:text-opacity-25";
        default:
          return "text-jp-gray-800 hover:text-black dark:text-jp-gray-text_darktheme dark:hover:text-jp-gray-text_darktheme dark:hover:text-opacity-75";
      }
    case "Transparent":
      return "text-gray-400";
    case "FilterAdd":
    case "SelectTransparent":
      return "text-blue-500";
    case "Delete":
    case "DarkPurple":
      return "text-white";
    case "Dropdown":
      switch (buttonState) {
        case "Loading":
        case "Disabled":
          return "text-jp-2-light-gray-600";
        default:
          if (isDropdownOpen) {
            if (showBorder || isPhoneDropdown) {
              return "text-jp-2-light-gray-2000";
            } else {
              return "text-jp-2-light-gray-1700";
            }
          } else {
            return "text-jp-2-light-gray-1200 hover:text-jp-2-light-gray-2000";
          }
      }
    default:
      switch (buttonState) {
        case "Loading":
          return "text-jp-gray-900 text-opacity-50 hover:text-opacity-100 dark:text-jp-gray-text_darktheme dark:text-opacity-75";
        case "Disabled":
          return "text-jp-gray-600 dark:text-jp-gray-text_darktheme dark:text-opacity-25";
        default:
          return "text-jp-gray-900 text-opacity-50 hover:text-opacity-100 dark:text-jp-gray-text_darktheme dark:hover:text-jp-gray-text_darktheme dark:hover:text-opacity-75";
      }
  }
}

function Button(props) {
  var __dataTestId = props.dataTestId;
  var __toolTipPosition = props.toolTipPosition;
  var __showBtnTextToolTip = props.showBtnTextToolTip;
  var __isPhoneDropdown = props.isPhoneDropdown;
  var __isRelative = props.isRelative;
  var __ellipsisOnly = props.ellipsisOnly;
  var buttonRightText = props.buttonRightText;
  var __badge = props.badge;
  var __allowButtonTextMinWidth = props.allowButtonTextMinWidth;
  var textStyleClass = props.textStyleClass;
  var __customButtonStyle = props.customButtonStyle;
  var __disableRipple = props.disableRipple;
  var __fullLength = props.fullLength;
  var textWeight = props.textWeight;
  var __iconBorderColor = props.iconBorderColor;
  var __iconColor = props.iconColor;
  var __textStyle = props.textStyle;
  var onClick = props.onClick;
  var __onEnterPress = props.onEnterPress;
  var __flattenTop = props.flattenTop;
  var __flattenBottom = props.flattenBottom;
  var __type_ = props.type_;
  var __showBorder = props.showBorder;
  var __rightIcon = props.rightIcon;
  var __leftIcon = props.leftIcon;
  var __isDropdownOpen = props.isDropdownOpen;
  var __buttonType = props.buttonType;
  var __isSelectBoxButton = props.isSelectBoxButton;
  var text = props.text;
  var __buttonState = props.buttonState;
  var __loadingText = props.loadingText;
  var __buttonFor = props.buttonFor;
  var buttonFor = __buttonFor !== undefined ? __buttonFor : "";
  var loadingText = __loadingText !== undefined ? __loadingText : "Loading..";
  var buttonState = __buttonState !== undefined ? __buttonState : "Normal";
  var isSelectBoxButton =
    __isSelectBoxButton !== undefined ? __isSelectBoxButton : false;
  var buttonType =
    __buttonType !== undefined ? __buttonType : "SecondaryFilled";
  var isDropdownOpen =
    __isDropdownOpen !== undefined ? __isDropdownOpen : false;
  var leftIcon = __leftIcon !== undefined ? __leftIcon : "NoIcon";
  var rightIcon = __rightIcon !== undefined ? __rightIcon : "NoIcon";
  var showBorder = __showBorder !== undefined ? __showBorder : true;
  var type_ = __type_ !== undefined ? __type_ : "button";
  var flattenBottom = __flattenBottom !== undefined ? __flattenBottom : false;
  var flattenTop = __flattenTop !== undefined ? __flattenTop : false;
  var onEnterPress = __onEnterPress !== undefined ? __onEnterPress : true;
  var textStyle = __textStyle !== undefined ? __textStyle : "";
  var iconColor = __iconColor !== undefined ? __iconColor : "";
  var iconBorderColor =
    __iconBorderColor !== undefined ? __iconBorderColor : "";
  var fullLength = __fullLength !== undefined ? __fullLength : false;
  var disableRipple = __disableRipple !== undefined ? __disableRipple : false;
  var customButtonStyle =
    __customButtonStyle !== undefined ? __customButtonStyle : "";
  var allowButtonTextMinWidth =
    __allowButtonTextMinWidth !== undefined ? __allowButtonTextMinWidth : true;
  var badge =
    __badge !== undefined
      ? __badge
      : {
          value: (1).toString(),
          color: "NoBadge",
        };
  var ellipsisOnly = __ellipsisOnly !== undefined ? __ellipsisOnly : false;
  var isRelative = __isRelative !== undefined ? __isRelative : true;
  var isPhoneDropdown =
    __isPhoneDropdown !== undefined ? __isPhoneDropdown : false;
  var showBtnTextToolTip =
    __showBtnTextToolTip !== undefined ? __showBtnTextToolTip : false;
  var toolTipPosition =
    __toolTipPosition !== undefined ? __toolTipPosition : "Top";
  var dataTestId = __dataTestId !== undefined ? __dataTestId : "";
  var parentRef = React.useRef(null);
  var dummyRef = React.useRef(null);
  var buttonRef = disableRipple ? dummyRef : parentRef;
  RippleEffectBackground.useHorizontalRippleHook(buttonRef);
  if (isPhoneDropdown) {
  }
  var customTextOverFlowClass =
    textStyleClass !== undefined ? textStyleClass : "overflow-hidden";
  var buttonType$1;
  buttonType$1 = buttonType === "SecondaryFilled" ? "Secondary" : buttonType;
  var buttonSize = Core__Option.getOr(
    props.buttonSize,
    MatchMedia.useMatchMedia("(max-width: 800px)") ? "Small" : "Medium",
  );
  var lengthStyle = fullLength ? "w-full justify-between" : "";
  var badgeColor;
  if (buttonState === "Disabled") {
    badgeColor = "bg-slate-300";
  } else {
    var match = badge.color;
    switch (match) {
      case "BadgeGreen":
        badgeColor = "bg-green-950 dark:bg-opacity-50";
        break;
      case "BadgeRed":
        badgeColor = "bg-red-960 dark:bg-opacity-50";
        break;
      case "BadgeBlue":
        badgeColor = "bg-blue-500 dark:bg-opacity-50";
        break;
      case "BadgeGray":
        badgeColor = "bg-blue-table_gray";
        break;
      case "BadgeOrange":
        badgeColor = "bg-orange-950 dark:bg-opacity-50";
        break;
      case "BadgeYellow":
        badgeColor = "bg-blue-table_yellow";
        break;
      case "BadgeDarkGreen":
        badgeColor = "bg-green-700";
        break;
      case "BadgeDarkRed":
        badgeColor = "bg-red-400";
        break;
      case "NoBadge":
        badgeColor = "hidden";
        break;
    }
  }
  var badgeTextColor;
  if (buttonState === "Disabled") {
    badgeTextColor = "text-white";
  } else {
    var match$1 = badge.color;
    switch (match$1) {
      case "BadgeGray":
      case "BadgeYellow":
        badgeTextColor = "text-jp-gray-900";
        break;
      default:
        badgeTextColor = "text-white";
    }
  }
  var heightClass = Core__Option.getOr(props.customHeightClass, "h-fit");
  var cursorType;
  switch (buttonState) {
    case "Loading":
      cursorType = "cursor-wait";
      break;
    case "Disabled":
      cursorType = "cursor-not-allowed";
      break;
    default:
      cursorType = "cursor-pointer";
  }
  var tmp;
  switch (buttonSize) {
    case "Large":
      tmp = "py-3 px-4";
      break;
    case "Medium":
      tmp = buttonType$1 === "Pagination" ? "py-3 px-4 mr-1" : "py-3 px-4";
      break;
    case "Small":
      switch (buttonType$1) {
        case "Pagination":
          tmp = "py-3 px-4 mr-1";
          break;
        default:
          tmp = "py-3 px-4";
      }
      break;
    case "XSmall":
      tmp = "p-2";
      break;
  }
  var paddingClass = Core__Option.getOr(props.customPaddingClass, tmp);
  var tmp$1;
  switch (buttonSize) {
    case "Large":
    case "Medium":
    case "Small":
    case "XSmall":
      tmp$1 = "px-1";
      break;
  }
  var textPaddingClass = Core__Option.getOr(
    props.customTextPaddingClass,
    tmp$1,
  );
  var tmp$2;
  switch (buttonSize) {
    case "Large":
      tmp$2 = "text-fs-16";
      break;
    case "Medium":
      tmp$2 = "text-body";
      break;
    case "Small":
      tmp$2 = "text-fs-13";
      break;
    case "XSmall":
      tmp$2 = "text-fs-11";
      break;
  }
  var textSize = Core__Option.getOr(props.customTextSize, tmp$2);
  var ellipsisClass = ellipsisOnly ? "truncate" : "";
  var ellipsisParentClass = ellipsisOnly ? "max-w-[250px] md:max-w-xs" : "";
  var tmp$3;
  switch (buttonSize) {
    case "Large":
      tmp$3 = 18;
      break;
    case "Medium":
      tmp$3 = 16;
      break;
    case "Small":
      tmp$3 = 14;
      break;
    case "XSmall":
      tmp$3 = 12;
      break;
  }
  var iconSize = Core__Option.getOr(props.customIconSize, tmp$3);
  var strokeColor = "";
  var iconPadding;
  switch (buttonSize) {
    case "Large":
    case "Medium":
      iconPadding = "";
      break;
    case "Small":
    case "XSmall":
      iconPadding = "pl-1";
      break;
  }
  var tmp$4;
  switch (buttonSize) {
    case "Large":
    case "Medium":
      tmp$4 = "mx-1";
      break;
    case "Small":
    case "XSmall":
      tmp$4 = "ml-1";
      break;
  }
  var iconMargin = Core__Option.getOr(props.customIconMargin, tmp$4);
  var rightIconSpacing;
  switch (buttonSize) {
    case "Large":
    case "Medium":
      rightIconSpacing = "mx-1 mt-0.5";
      break;
    case "Small":
    case "XSmall":
      rightIconSpacing = "mt-0.5 px-1";
      break;
  }
  var badgeSpacing;
  switch (buttonSize) {
    case "Large":
    case "Medium":
      badgeSpacing = "px-2 mb-1 mr-0.5";
      break;
    case "Small":
    case "XSmall":
      badgeSpacing = "px-2 mb-0.5 mr-0.5";
      break;
  }
  var badgeTextSize;
  switch (buttonSize) {
    case "Large":
    case "Medium":
      badgeTextSize = "text-base";
      break;
    case "Small":
    case "XSmall":
      badgeTextSize = "text-sm";
      break;
  }
  var backColor = useGetBgColor(
    buttonType$1,
    buttonState,
    showBorder,
    isDropdownOpen,
    isPhoneDropdown,
    undefined,
  );
  var textColor = useGetTextColor(
    buttonType$1,
    buttonState,
    showBorder,
    isDropdownOpen,
    isPhoneDropdown,
    undefined,
  );
  var match$2 = React.useContext(ButtonGroupContext.buttonGroupContext);
  var isLast = match$2.isLast;
  var isFirst = match$2.isFirst;
  var roundedBottom = flattenBottom ? "rounded-b-none" : "";
  var roundedTop = flattenTop ? "rounded-t-none" : "";
  var roundedDirection =
    isFirst && isLast
      ? "rounded"
      : isFirst
        ? "rounded-l-md"
        : isLast
          ? "rounded-r-md"
          : buttonType$1 === "Pagination"
            ? "rounded-md"
            : "";
  var roundedClass = roundedDirection + " " + roundedBottom + " " + roundedTop;
  var borderWidth =
    showBorder || (buttonType$1 === "Dropdown" && !(isFirst && isLast))
      ? isFirst && isLast
        ? "border"
        : isFirst
          ? "border focus:border-r"
          : isLast
            ? "border  focus:border-l"
            : "border border-x-1 focus:border-x"
      : "border-0";
  var borderStyle;
  var exit = 0;
  switch (buttonType$1) {
    case "Primary":
      borderStyle =
        buttonState === "Disabled" || !showBorder ? "" : borderWidth;
      break;
    case "PrimaryOutline":
      borderStyle = "border-2";
      break;
    case "SecondaryFilled":
      switch (buttonState) {
        case "Loading":
          borderStyle =
            borderWidth +
            " border-jp-gray-600 border-opacity-75 dark:border-jp-gray-960 dark:border-opacity-100 ";
          break;
        case "Disabled":
          borderStyle = "";
          break;
        default:
          borderStyle =
            borderWidth + " border-jp-gray-500 dark:border-jp-gray-960";
      }
      break;
    case "Pill":
      if (showBorder) {
        switch (buttonState) {
          case "Loading":
            borderStyle =
              borderWidth +
              " border-jp-gray-600 border-opacity-75 dark:border-jp-gray-960 dark:border-opacity-100";
            break;
          case "Disabled":
            borderStyle = "";
            break;
          default:
            borderStyle =
              borderWidth + " border-jp-gray-500 dark:border-jp-gray-960";
        }
      } else {
        switch (buttonState) {
          case "Disabled":
            borderStyle = "";
            break;
          default:
            borderStyle = borderWidth;
        }
      }
      break;
    case "FilterAdd":
      borderStyle = "border-0";
      break;
    case "Delete":
      switch (buttonState) {
        case "Loading":
          borderStyle =
            borderWidth +
            " border-jp-gray-600 border-opacity-75 dark:border-jp-gray-960 dark:border-opacity-100 ";
          break;
        case "Disabled":
          borderStyle = "";
          break;
        default:
          borderStyle =
            borderWidth + " border-jp-gray-500 dark:border-jp-gray-960";
      }
      break;
    case "Transparent":
      borderStyle = "border border-jp-2-light-gray-400";
      break;
    case "SelectTransparent":
      borderStyle = "border border-1 border-blue-500";
      break;
    case "Secondary":
    case "Dropdown":
      exit = 1;
      break;
    default:
      switch (buttonState) {
        case "Loading":
          borderStyle =
            borderWidth +
            " border-jp-gray-600 border-opacity-75 dark:border-jp-gray-960 dark:border-opacity-100 ";
          break;
        case "Disabled":
          borderStyle = "";
          break;
        default:
          borderStyle =
            borderWidth + " border-jp-gray-500 dark:border-jp-gray-960";
      }
  }
  if (exit === 1) {
    if (showBorder) {
      switch (buttonState) {
        case "Loading":
          borderStyle = borderWidth + " border-border_gray";
          break;
        case "Disabled":
          borderStyle = "";
          break;
        default:
          borderStyle =
            borderWidth +
            " border-border_gray dark:border-jp-gray-960 dark:border-opacity-100";
      }
    } else {
      switch (buttonState) {
        case "Disabled":
          borderStyle = "";
          break;
        default:
          borderStyle = borderWidth;
      }
    }
  }
  var dis;
  switch (buttonState) {
    case "Loading":
    case "Disabled":
      dis = true;
      break;
    case "Normal":
    case "NoHover":
    case "Focused":
      dis = false;
      break;
  }
  var loaderIconColor;
  loaderIconColor = buttonType$1 === "Primary" ? "text-white" : undefined;
  var handleClick = function (ev) {
    if (onClick !== undefined) {
      return onClick(ev);
    }
  };
  var textWeight$1 =
    textWeight !== undefined ? textWeight : "text-sm font-medium leading-5";
  var textId = Core__Option.getOr(text, "");
  var iconId;
  if (typeof leftIcon !== "object") {
    if (typeof rightIcon !== "object") {
      iconId = "";
    } else {
      switch (rightIcon.TAG) {
        case "CustomIcon":
          iconId = "CustomIcon";
          break;
        case "CustomRightIcon":
          iconId = "CustomRightIcon";
          break;
        case "FontAwesome":
        case "Euler":
          iconId = rightIcon._0;
          break;
      }
    }
  } else {
    switch (leftIcon.TAG) {
      case "CustomIcon":
        iconId = "CustomIcon";
        break;
      case "CustomRightIcon":
        iconId = "CustomRightIcon";
        break;
      case "FontAwesome":
      case "Euler":
        iconId = leftIcon._0;
        break;
    }
  }
  var dataAttrKey = isSelectBoxButton ? "data-value" : "data-button-for";
  var dataAttrStr = LogicUtils.isEmptyString(textId)
    ? iconId
    : LogicUtils.toCamelCase(textId.concat(buttonFor));
  var relativeClass = isRelative ? "relative" : "";
  var conditionalButtonStyles =
    (allowButtonTextMinWidth ? "min-w-min" : "") +
    " " +
    Core__Option.getOr(props.customBackColor, backColor) +
    " " +
    Core__Option.getOr(props.customRoundedClass, roundedClass);
  var customJustifyStyle = customButtonStyle.includes("justify")
    ? ""
    : "justify-center";
  var tmp$5;
  if (buttonState === "Loading") {
    tmp$5 = React.createElement(
      "span",
      {
        className: iconPadding,
      },
      React.createElement(
        "span",
        {
          className: "flex items-center mx-2 animate-spin",
        },
        React.createElement(Loadericon.make, {
          iconColor: loaderIconColor,
          size: iconSize,
        }),
      ),
    );
  } else if (typeof leftIcon !== "object") {
    tmp$5 = null;
  } else {
    switch (leftIcon.TAG) {
      case "FontAwesome":
        tmp$5 = React.createElement(
          "span",
          {
            className:
              "flex items-center " +
              iconColor +
              " " +
              iconMargin +
              " " +
              iconPadding,
          },
          React.createElement(Icon.make, {
            name: leftIcon._0,
            size: iconSize,
            className: "align-middle " + strokeColor + " " + iconBorderColor,
          }),
        );
        break;
      case "CustomIcon":
        tmp$5 = React.createElement(
          "span",
          {
            className: "flex items-center " + iconMargin,
          },
          leftIcon._0,
        );
        break;
      case "CustomRightIcon":
        tmp$5 = null;
        break;
      case "Euler":
        tmp$5 = React.createElement(
          "span",
          {
            className: "flex items-center " + iconColor + " " + iconMargin,
          },
          React.createElement(Icon.make, {
            name: leftIcon._0,
            size: iconSize,
            className: "align-middle " + strokeColor,
          }),
        );
        break;
    }
  }
  var tmp$6;
  if (text !== undefined && !LogicUtils.isEmptyString(text)) {
    var btnContent = React.createElement(AddDataAttributes.make, {
      attributes: [["data-button-text", text]],
      children: React.createElement(
        "div",
        {
          className:
            textPaddingClass +
            " " +
            textSize +
            " " +
            textWeight$1 +
            " " +
            ellipsisClass +
            " whitespace-pre " +
            textStyle,
        },
        buttonState === "Loading" ? loadingText : text,
      ),
    });
    tmp$6 = showBtnTextToolTip
      ? React.createElement(
          "div",
          {
            className: ellipsisParentClass,
          },
          React.createElement(ToolTip.make, {
            description: Core__Option.getOr(props.tooltipText, ""),
            toolTipFor: Caml_option.some(btnContent),
            toolTipPosition: toolTipPosition,
            contentAlign: "Default",
            justifyClass: "justify-start",
          }),
        )
      : React.createElement(
          "div",
          {
            className: ellipsisParentClass,
          },
          btnContent,
        );
  } else {
    tmp$6 = null;
  }
  var match$3 = badge.color;
  var tmp$7;
  tmp$7 =
    match$3 === "NoBadge"
      ? null
      : React.createElement(AddDataAttributes.make, {
          attributes: [["data-badge-value", badge.value]],
          children: React.createElement(
            "span",
            {
              className:
                "flex items-center " +
                rightIconSpacing +
                " " +
                badgeColor +
                " " +
                badgeTextColor +
                " " +
                badgeSpacing +
                " " +
                badgeTextSize +
                "  rounded-full",
            },
            badge.value,
          ),
        });
  var tmp$8;
  if (typeof rightIcon !== "object") {
    tmp$8 = null;
  } else {
    switch (rightIcon.TAG) {
      case "FontAwesome":
        tmp$8 = React.createElement(
          "span",
          {
            className: "flex items-center " + rightIconSpacing,
          },
          React.createElement(Icon.make, {
            name: rightIcon._0,
            size: iconSize,
            className: "align-middle " + strokeColor,
          }),
        );
        break;
      case "CustomIcon":
        tmp$8 = React.createElement(
          "span",
          {
            className: "flex items-center " + iconPadding + " ",
          },
          rightIcon._0,
        );
        break;
      case "CustomRightIcon":
        tmp$8 = null;
        break;
      case "Euler":
        tmp$8 = React.createElement(
          "span",
          {
            className: "flex items-center " + iconMargin,
          },
          React.createElement(Icon.make, {
            name: rightIcon._0,
            size: iconSize,
            className: "align-middle " + strokeColor,
          }),
        );
        break;
    }
  }
  return React.createElement(AddDataAttributes.make, {
    attributes: [
      [dataAttrKey, dataAttrStr],
      ["data-testid", dataTestId],
    ],
    children: React.createElement(
      "button",
      {
        ref: Caml_option.some(parentRef),
        className:
          "flex group " +
          customButtonStyle +
          " " +
          customJustifyStyle +
          " " +
          relativeClass +
          " " +
          heightClass +
          " " +
          conditionalButtonStyles +
          " items-center " +
          borderStyle +
          "   " +
          cursorType +
          " " +
          paddingClass +
          " " +
          lengthStyle +
          "   " +
          customTextOverFlowClass +
          " " +
          textColor,
        disabled: dis,
        type: type_,
        onKeyPress: function (e) {
          if (!onEnterPress) {
            e.preventDefault();
            return;
          }
        },
        onKeyUp: function (e) {
          e.preventDefault();
        },
        onClick: handleClick,
      },
      tmp$5,
      tmp$6,
      tmp$7,
      buttonRightText !== undefined
        ? React.createElement(RenderIf.make, {
            condition: !LogicUtils.isEmptyString(buttonRightText),
            children: React.createElement(
              "span",
              {
                className:
                  "text-jp-2-light-primary-600 font-semibold text-fs-14",
              },
              buttonRightText,
            ),
          })
        : null,
      tmp$8,
    ),
  });
}

var make = Button;

export { useGetBgColor, useGetTextColor, make };
/* Icon Not a pure module */
