// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import Highcharts from "highcharts";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as LineChartUtils from "./LineChartUtils.bs.js";
import HighchartsReactOfficial from "highcharts-react-official";

function HighchartHorizontalBarChart$RawHBarChart(props) {
  return React.createElement(HighchartsReactOfficial, {
    highcharts: Highcharts,
    options: props.options,
  });
}

var RawHBarChart = {
  make: HighchartHorizontalBarChart$RawHBarChart,
};

function valueFormatter() {
  var $$this = this;
  return (
    "<div class='text-white'>" +
    $$this.category +
    " count: <b>" +
    $$this.y.toString() +
    "</b></div>"
  );
}

function dataLabelFormatter() {
  return "";
}

function xLabelFormatter() {
  var param = this;
  var axis = param.axis;
  var series = axis.series;
  var value = param.value;
  var seriesSum = Core__Array.reduce(
    series.map(function (series) {
      var options = series.options;
      return Core__Array.reduce(
        options !== undefined ? options.data : [],
        0,
        function (acc, num) {
          return (acc + num) | 0;
        },
      );
    }),
    0,
    function (acc, num) {
      return (acc + num) | 0;
    },
  );
  var index = axis.categories.findIndex(function (x) {
    return x === value;
  });
  var firstSeries = series[0];
  var y;
  if (firstSeries !== undefined) {
    var options = firstSeries.options;
    y = options !== undefined ? Core__Option.getOr(options.data[index], 0) : 0;
  } else {
    y = 0;
  }
  return (
    '<div style="display: inline-block; margin-left: 10px;" class="text-black dark:text-white"><div class="font-semibold"> ' +
    value +
    ' </div><div class="font-medium" style="display: inline-block;">' +
    ((y * 100) / seriesSum).toFixed(2) +
    "%</div></div>"
  );
}

function HighchartHorizontalBarChart(props) {
  var selectedMetrics = props.selectedMetrics;
  var groupKey = props.groupKey;
  var rawData = props.rawData;
  var match = React.useContext(ThemeProvider.themeContext);
  var theme = match.theme;
  var barChartData = React.useMemo(
    function () {
      return LineChartUtils.chartDataMaker(
        true,
        rawData,
        groupKey,
        selectedMetrics.metric_name_db,
      );
    },
    [rawData, groupKey, selectedMetrics.metric_name_db],
  );
  var titleKey = Core__Option.getOr(props.titleKey, groupKey);
  var barOption = React.useMemo(
    function () {
      var length = barChartData.length;
      var colors = barChartData.map(function (_data, i) {
        var opacity = (length - i + 1) / (length + 1);
        return "rgb(0,109,249," + opacity.toString() + ")";
      });
      return {
        chart: {
          type: "bar",
          backgroundColor: theme === "Dark" ? "#202124" : "white",
        },
        title: {
          text:
            "<div class='font-semibold text-lg font-inter-style text-black dark:text-white'>" +
            LogicUtils.snakeToTitle(titleKey) +
            "</div>",
          align: "Left",
          useHTML: true,
        },
        subtitle: {
          text:
            "<div class='font-medium text-sm font-inter-style text-jp-gray-800 dark:text-dark_theme'>Distribution across " +
            LogicUtils.snakeToTitle(titleKey) +
            "s</div>",
          align: "Left",
          useHTML: true,
        },
        xAxis: {
          categories: barChartData.map(function (data) {
            return data[0];
          }),
          lineWidth: 0,
          opposite: true,
          labels: {
            enabled: true,
            formatter: xLabelFormatter,
            useHTML: true,
          },
        },
        yAxis: {
          min: 0,
          title: {
            text: "category",
          },
          labels: {
            enabled: false,
          },
          gridLineWidth: 0,
          visible: false,
        },
        legend: {
          enabled: false,
        },
        series: [
          {
            name: LogicUtils.snakeToTitle(titleKey) + " Share",
            data: barChartData.map(function (data) {
              return data[1];
            }),
            type: "bar",
          },
        ],
        plotOptions: {
          bar: {
            dataLabels: {
              enabled: true,
              formatter: dataLabelFormatter,
              useHTML: true,
            },
            colors: colors,
            colorByPoint: true,
            borderColor: theme === "Dark" ? "black" : "white",
          },
        },
        credits: {
          enabled: false,
        },
        tooltip: {
          pointFormatter: valueFormatter,
          useHTML: true,
          backgroundColor: "rgba(25, 26, 26, 1)",
          borderColor: "rgba(25, 26, 26, 1)",
          headerFormat: "",
        },
      };
    },
    [barChartData, theme],
  );
  return React.createElement(HighchartHorizontalBarChart$RawHBarChart, {
    options: barOption,
  });
}

var make = HighchartHorizontalBarChart;

export {
  RawHBarChart,
  valueFormatter,
  dataLabelFormatter,
  xLabelFormatter,
  make,
};
/* valueFormatter Not a pure module */
