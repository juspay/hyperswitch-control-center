// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as MatchMedia from "../../context/MatchMedia.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";

function FunnelChart(props) {
  var description = props.description;
  var __size = props.size;
  var size = __size !== undefined ? __size : 0.24;
  var match = React.useContext(ThemeProvider.themeContext);
  var textColor = match.globalUIConfig.font.textColor;
  var isMobileView = MatchMedia.useMobileChecker();
  var match$1 = React.useMemo(
    function () {
      if (isMobileView) {
        return [0.16, "w-full", "flex-col"];
      } else {
        return [size, "w-1/2", "flex-row"];
      }
    },
    [isMobileView],
  );
  var widthClass = match$1[1];
  var size$1 = match$1[0];
  var funnelData = LogicUtils.getDictFromJsonObject(
    Core__Option.getOr(props.data[0], null),
  );
  var metrics = props.metrics.filter(function (metric) {
    return !Core__Option.getOr(metric.disabled, false);
  });
  var match$2 = React.useState(function () {
    return -1;
  });
  var setHoverIndex = match$2[1];
  var hoverIndex = match$2[0];
  var match$3 = React.useState(function () {
    return "Volume";
  });
  var setSelectedMetric = match$3[1];
  var selectedMetric = match$3[0];
  var length = metrics.length;
  var widths = React.useMemo(
    function () {
      return metrics.map(function (metric, i) {
        var previousMetric = metrics[(i - 1) | 0];
        var previousMetric$1 =
          previousMetric !== undefined ? previousMetric.metric_name_db : "";
        var func = metric.data_transformation_func;
        var funnelData$1 = func !== undefined ? func(funnelData) : funnelData;
        var currentVol = LogicUtils.getInt(
          funnelData$1,
          metric.metric_name_db,
          0,
        );
        var previousVol = LogicUtils.getInt(
          funnelData$1,
          previousMetric$1,
          currentVol | 0,
        );
        return Math.log10((currentVol * 100) / previousVol) / 2.0;
      });
    },
    [funnelData],
  );
  var fixedWidth = {
    contents: size$1 * 70,
  };
  var prevMetricVol = {
    contents: undefined,
  };
  var someData =
    Object.entries(funnelData).filter(function (entry) {
      return LogicUtils.getIntFromJson(entry[1], 0) !== 0;
    }).length > 0;
  return React.createElement(
    "div",
    {
      className: "block m-6 mb-2",
    },
    React.createElement(
      "div",
      {
        className: "font-semibold text-lg text-black dark:text-white",
      },
      LogicUtils.snakeToTitle(LogicUtils.camelToSnake(props.moduleName)),
    ),
    description !== undefined
      ? React.createElement(
          "div",
          {
            className:
              "font-medium text-sm text-jp-gray-800 dark:text-dark_theme my-2",
          },
          description,
        )
      : null,
    React.createElement(RenderIf.make, {
      condition: someData,
      children: React.createElement(
        "div",
        {
          className: "flex flex-col",
        },
        React.createElement(
          "div",
          {
            className: "flex gap-6 justify-end",
          },
          React.createElement("div", {
            className: "flex flex-col " + widthClass,
          }),
          React.createElement(
            "div",
            {
              className:
                "flex flex-row items-start ml-6 " +
                widthClass +
                " font-medium text-sm text-jp-gray-800 dark:text-dark_theme cursor-pointer",
            },
            React.createElement(
              "div",
              {
                className: selectedMetric === "Volume" ? "font-bold" : "",
                onClick: function (param) {
                  setSelectedMetric(function (param) {
                    return "Volume";
                  });
                },
              },
              "Volume",
            ),
            "/",
            React.createElement(
              "div",
              {
                className: selectedMetric === "Percentage" ? "font-bold" : "",
                onClick: function (param) {
                  setSelectedMetric(function (param) {
                    return "Percentage";
                  });
                },
              },
              "Percentage",
            ),
          ),
        ),
        React.createElement(
          "div",
          {
            className:
              "flex " +
              match$1[2] +
              " gap-6 mt-5 mb-10 delay-75 animate-slideUp",
          },
          React.createElement(
            "div",
            {
              className: "flex flex-col items-center my-auto " + widthClass,
            },
            metrics.map(function (_metric, i) {
              var opacity = (i + 1) / length;
              var borderTop =
                (size$1 * 14).toString() +
                "rem solid rgb(0,109,249," +
                opacity.toString() +
                ")";
              var width = widths[i | 0];
              var currentWidthRatio = width !== undefined ? width : size$1 * 70;
              var width$1 = widths[((i | 0) + 1) | 0];
              var nextWidthRatio =
                width$1 !== undefined
                  ? width$1
                  : Core__Option.getOr(widths[i | 0], size$1 * 70);
              fixedWidth.contents = currentWidthRatio * fixedWidth.contents;
              var borderXFloat =
                ((1 - nextWidthRatio) * fixedWidth.contents) / 2;
              var borderX = borderXFloat.toString() + "rem solid transparent";
              var width$2 = fixedWidth.contents.toString() + "rem";
              var marginBottom = (size$1 * 1.4).toString() + "rem";
              return React.createElement("div", {
                key: i.toString() + "funnelStage",
                className:
                  "flex hover:cursor-pointer transition ease-in-out hover:scale-110 duration-300",
                style: {
                  borderTop: borderTop,
                  borderRight: borderX,
                  borderLeft: borderX,
                  marginBottom: marginBottom,
                  width: width$2,
                },
                onMouseOut: function (param) {
                  setHoverIndex(function (param) {
                    return -1;
                  });
                },
                onMouseOver: function (param) {
                  setHoverIndex(function (param) {
                    return i;
                  });
                },
              });
            }),
          ),
          React.createElement(
            "div",
            {
              className: "flex flex-row justify-center gap-6",
            },
            React.createElement(
              "div",
              {
                className: "flex flex-col items-start",
              },
              metrics.map(function (metric, i) {
                var marginBottom = (size$1 * 1.4).toString() + "rem";
                var paddingTop = (size$1 * 4.2).toString() + "rem";
                var metricVal = LogicUtils.getInt(
                  funnelData,
                  metric.metric_name_db,
                  0,
                );
                var vol = prevMetricVol.contents;
                var prevMetricVolume = vol !== undefined ? vol : metricVal;
                var val = prevMetricVol.contents;
                prevMetricVol.contents = val !== undefined ? val : metricVal;
                var tmp;
                tmp =
                  selectedMetric === "Volume"
                    ? LogicUtils.shortNum(
                        metricVal,
                        LogicUtils.getDefaultNumberFormat(),
                        undefined,
                        undefined,
                      )
                    : ((metricVal * 100) / prevMetricVolume).toFixed(2) + "%";
                return React.createElement(
                  "div",
                  {
                    key: i.toString() + "funnelStageVol",
                    className: "flex flex-row gap-4 h-full items-center w-max",
                    style: {
                      marginBottom: marginBottom,
                      paddingTop: paddingTop,
                    },
                  },
                  React.createElement(
                    "div",
                    {
                      className:
                        "flex font-semibold text-xl " +
                        (metricVal <= 0
                          ? "text-red-400"
                          : "text-black dark:text-white") +
                        " w-max items-start",
                    },
                    tmp,
                  ),
                );
              }),
            ),
            React.createElement(
              "div",
              {
                className: "flex flex-col items-start",
              },
              metrics.map(function (metric, i) {
                var marginBottom = (size$1 * 2.1).toString() + "rem";
                var paddingTop = (size$1 * 3.4 * 1.4).toString() + "rem";
                return React.createElement(
                  "div",
                  {
                    key: i.toString() + "funnelStageDesc",
                    className: "flex flex-row gap-4 h-full items-center w-max ",
                    style: {
                      marginBottom: marginBottom,
                      paddingTop: paddingTop,
                    },
                  },
                  React.createElement(
                    "div",
                    {
                      className:
                        "transition ease-in-out duration-300 font-medium text-base " +
                        (hoverIndex === i
                          ? textColor.primaryNormal + " scale-110"
                          : "text-jp-gray-800 dark:text-dark_theme"),
                    },
                    metric.metric_label,
                  ),
                );
              }),
            ),
          ),
        ),
      ),
    }),
  );
}

var make = FunnelChart;

export { make };
/* react Not a pure module */
