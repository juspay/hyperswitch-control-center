// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import Highcharts from "highcharts";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as LineChartUtils from "./LineChartUtils.bs.js";
import HighchartsReactOfficial from "highcharts-react-official";

require("./highcharts.css");

function HighchartPieChart$RawPieChart(props) {
  return React.createElement(HighchartsReactOfficial, {
    highcharts: Highcharts,
    options: props.options,
  });
}

var RawPieChart = {
  make: HighchartPieChart$RawPieChart,
};

function valueFormatter() {
  var $$this = this;
  return (
    "<div class='text-white'>" +
    $$this.name +
    " count: <b>" +
    $$this.y.toString() +
    "</b></div>"
  );
}

function formatter() {
  var param = this;
  return (
    '<div class="font-semibold text-black dark:text-white">' +
    param.point.name +
    '</div><br><div class="font-medium text-black dark:text-white">' +
    param.point.percentage.toFixed(2) +
    "%</div>"
  );
}

function HighchartPieChart(props) {
  var selectedMetrics = props.selectedMetrics;
  var groupKey = props.groupKey;
  var rawData = props.rawData;
  var match = React.useContext(ThemeProvider.themeContext);
  var theme = match.theme;
  var pieSeriesData = React.useMemo(
    function () {
      return LineChartUtils.chartDataMaker(
        true,
        rawData,
        groupKey,
        selectedMetrics.metric_name_db,
      );
    },
    [rawData, groupKey, selectedMetrics.metric_name_db],
  );
  var color = theme === "Dark" ? "white" : "black";
  var borderColor = theme === "Dark" ? "black" : "white";
  var opacity = theme === "Dark" ? "0.5" : "1";
  var titleKey = Core__Option.getOr(props.titleKey, groupKey);
  var barOption = React.useMemo(
    function () {
      var length = pieSeriesData.length;
      var colors = pieSeriesData.map(function (_data, i) {
        var opacity = (length - i + 1) / (length + 1);
        return "rgb(0,109,249," + opacity.toString() + ")";
      });
      return {
        title: {
          text:
            "<div class='font-semibold text-lg font-inter-style text-black dark:text-white'>" +
            LogicUtils.snakeToTitle(titleKey) +
            "</div>",
          align: "Left",
          useHTML: true,
        },
        subtitle: {
          text:
            "<div class='font-medium text-sm font-inter-style text-jp-gray-800 dark:text-dark_theme'>Distribution across " +
            LogicUtils.snakeToTitle(titleKey) +
            "s</div>",
          align: "Left",
          useHTML: true,
        },
        series: [
          {
            name: LogicUtils.snakeToTitle(titleKey) + " Share",
            type: "pie",
            innerSize: "58%",
            data: pieSeriesData,
          },
        ],
        plotOptions: {
          pie: {
            dataLabels: {
              enabled: true,
              connectorShape: "straight",
              formatter: formatter,
              style: {
                color: color,
                opacity: opacity,
              },
              useHTML: true,
            },
            startAngle: -90,
            endAngle: 90,
            center: ["50%", "75%"],
            size: "100%",
            colors: colors,
            borderColor: borderColor,
          },
        },
        credits: {
          enabled: false,
        },
        tooltip: {
          pointFormatter: valueFormatter,
          useHTML: true,
          backgroundColor: "rgba(25, 26, 26, 1)",
          borderColor: "rgba(25, 26, 26, 1)",
          headerFormat: "",
        },
        chart: {
          backgroundColor: theme === "Dark" ? "#202124" : "white",
        },
      };
    },
    [pieSeriesData, theme],
  );
  return React.createElement(HighchartPieChart$RawPieChart, {
    options: barOption,
  });
}

var make = HighchartPieChart;

export { RawPieChart, valueFormatter, formatter, make };
/*  Not a pure module */
