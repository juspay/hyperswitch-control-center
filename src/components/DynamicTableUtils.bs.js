// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as Recoil from "recoil";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Core__Float from "@rescript/core/src/Core__Float.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as TimeZoneHook from "../hooks/TimeZoneHook.bs.js";
import * as JsonFlattenUtils from "../utils/JsonFlattenUtils.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as DateFormatProvider from "../context/DateFormatProvider.bs.js";
import * as CustomizeTableColumns from "./CustomizeTableColumns.bs.js";
import * as TableFilterSectionContext from "../context/TableFilterSectionContext.bs.js";

var tableHeadingClass =
  "font-bold text-xl text-black text-opacity-75 dark:text-white dark:text-opacity-75";

function visibilityColFunc(dateFormatConvertor, jsonVal, tableCell) {
  switch (tableCell.TAG) {
    case "Text":
    case "EllipsisText":
      return [tableCell._0, jsonVal];
    case "Date":
      var x = tableCell._0;
      return [dateFormatConvertor(x), dateFormatConvertor(x)];
    case "StartEndDate":
      var end = tableCell._1;
      return [
        String(Core__Option.getOr(dateFormatConvertor(tableCell._0), "")) +
          " " +
          String(Core__Option.getOr(dateFormatConvertor(end), "")),
        dateFormatConvertor(end),
      ];
    case "CustomCell":
      return [tableCell._1, jsonVal];
    case "Label":
    case "ColoredText":
      return [tableCell._0.title, jsonVal];
    default:
      return [jsonVal, jsonVal];
  }
}

function useDateFormatConvertor() {
  var dateFormat = React.useContext(DateFormatProvider.dateFormatContext);
  var isoStringToCustomTimeZone =
    TimeZoneHook.useIsoStringToCustomTimeZoneInFloat();
  return function (dateStr) {
    try {
      var customTimeZone = isoStringToCustomTimeZone(dateStr);
      return TimeZoneHook.formattedDateTimeFloat(customTimeZone, dateFormat);
    } catch (exn) {
      return;
    }
  };
}

function filteredData(
  actualData,
  columnFilter,
  visibleColumns,
  entity,
  dateFormatConvertor,
) {
  var selectedFiltersKeys = Object.keys(columnFilter);
  if (selectedFiltersKeys.length > 0) {
    return actualData.filter(function (item) {
      if (item == null) {
        return false;
      }
      var anyMatch = selectedFiltersKeys.find(function (keys) {
        var selectedArr = columnFilter[keys];
        if (selectedArr === undefined) {
          return false;
        }
        var jsonVal = JsonFlattenUtils.flattenObject(item, false)[keys];
        var visibleColumns$1 = Belt_Array.keepMap(
          Core__Option.getOr(visibleColumns, entity.defaultColumns),
          function (item) {
            var columnEntity = entity.getHeading(item);
            var entityKey = entity.getHeading(item).key;
            var dataType = columnEntity.dataType;
            if (entityKey === keys) {
              return [dataType, item];
            }
          },
        );
        var ele = visibleColumns$1[0];
        if (ele === undefined) {
          return false;
        }
        var jsonVal$1 = visibilityColFunc(
          dateFormatConvertor,
          jsonVal,
          entity.getCell(item, ele[1]),
        );
        switch (ele[0]) {
          case "LabelType":
          case "TextType":
            break;
          case "DropDown":
            var selectedArr$1 = Belt_Array.keepMap(
              selectedArr,
              function (item) {
                return Core__JSON.Decode.string(item);
              },
            ).map(function (prim) {
              return prim.toLowerCase();
            });
            var transformed = jsonVal$1[0];
            var currVal =
              transformed !== undefined
                ? String(transformed).toLowerCase()
                : "";
            return !selectedArr$1.includes(currVal);
          default:
            var selectedArr$2 = Belt_Array.keepMap(
              selectedArr,
              function (item) {
                return Core__JSON.Decode.$$float(item);
              },
            );
            var actualVal = jsonVal$1[1];
            var currVal$1 =
              actualVal !== undefined ? Number(String(actualVal)) : 0;
            return !(
              currVal$1 >= Core__Option.getOr(selectedArr$2[0], 0) &&
              currVal$1 <= Core__Option.getOr(selectedArr$2[1], 0)
            );
        }
        var selectedArr1 = Belt_Array.keepMap(selectedArr, function (item) {
          return Core__JSON.Decode.string(item);
        });
        var transformed$1 = jsonVal$1[0];
        var currVal$2 =
          transformed$1 !== undefined ? String(transformed$1) : "";
        var searchedText = Core__Option.getOr(selectedArr1[0], "");
        return !searchedText.toUpperCase().includes(currVal$2.toUpperCase());
      });
      return Core__Option.isNone(anyMatch);
    });
  } else {
    return actualData;
  }
}

function convertStrCellToFloat(dataType, str) {
  switch (dataType) {
    case "LabelType":
    case "TextType":
    case "DropDown":
      return str;
    default:
      return Core__Option.getOr(Core__Float.fromString(str), 0);
  }
}

function convertFloatCellToStr(dataType, num) {
  switch (dataType) {
    case "MoneyType":
    case "NumericType":
    case "ProgressType":
      return num;
    default:
      return num.toString();
  }
}

function defaultRefetchFn() {
  console.log("This is default refetch");
}

var refetchContext = React.createContext(defaultRefetchFn);

var make = refetchContext.Provider;

var RefetchContextProvider = {
  make: make,
};

function DynamicTableUtils$TableHeading(props) {
  var __titleTooltip = props.titleTooltip;
  var description = props.description;
  var __noVerticalMargin = props.noVerticalMargin;
  var title = props.title;
  var noVerticalMargin =
    __noVerticalMargin !== undefined ? __noVerticalMargin : false;
  var titleTooltip = __titleTooltip !== undefined ? __titleTooltip : false;
  var tooltipFlexDir = titleTooltip ? "flex-row" : "flex-col";
  var marginClass = noVerticalMargin ? "" : "lg:mb-4 lg:mt-8";
  if (LogicUtils.isNonEmptyString(title) || Core__Option.isSome(description)) {
    return React.createElement(
      "div",
      {
        className: "flex " + tooltipFlexDir + " " + marginClass,
      },
      LogicUtils.isNonEmptyString(title)
        ? React.createElement(AddDataAttributes.make, {
            attributes: [["data-table-heading-title", title]],
            children: React.createElement(
              "div",
              {
                className: tableHeadingClass,
              },
              title,
            ),
          })
        : null,
      description !== undefined
        ? titleTooltip
          ? React.createElement(
              "div",
              {
                className: "text-sm text-gray-500 mx-2",
              },
              React.createElement(ToolTip.make, {
                description: description,
                toolTipPosition: "Bottom",
              }),
            )
          : React.createElement(AddDataAttributes.make, {
              attributes: [["data-table-heading-desc", description]],
              children: React.createElement(
                "div",
                {
                  className: "text-base text-jp-gray-700 dark:text-jp-gray-800",
                },
                description,
              ),
            })
        : null,
    );
  } else {
    return null;
  }
}

var TableHeading = {
  make: DynamicTableUtils$TableHeading,
};

function DynamicTableUtils$TableLoadingErrorIndicator(props) {
  var __hideTitle = props.hideTitle;
  var __buttonType = props.buttonType;
  var __showFilterBorder = props.showFilterBorder;
  var showFilterBorder =
    __showFilterBorder !== undefined ? __showFilterBorder : false;
  var buttonType = __buttonType !== undefined ? __buttonType : "Primary";
  var hideTitle = __hideTitle !== undefined ? __hideTitle : false;
  var isMobileView = MatchMedia.useMobileChecker();
  var filtersBorder =
    !isMobileView && showFilterBorder
      ? "p-2 bg-white dark:bg-black border border-jp-2-light-gray-400 rounded-lg"
      : "";
  return React.createElement(
    "div",
    {
      className: "flex flex-col w-full",
    },
    React.createElement(RenderIf.make, {
      condition: !hideTitle,
      children: React.createElement(DynamicTableUtils$TableHeading, {
        title: props.title,
      }),
    }),
    React.createElement(TableFilterSectionContext.make, {
      children: React.createElement(
        "div",
        {
          className: filtersBorder,
        },
        props.filters,
      ),
      isFilterSection: true,
    }),
    React.createElement(
      "div",
      {
        className: "flex flex-col py-16 text-center items-center",
      },
      props.fetchSuccess
        ? React.createElement(
            React.Fragment,
            {},
            React.createElement(
              "div",
              {
                className: "animate-spin mb-10",
              },
              React.createElement(Icon.make, {
                name: "spinner",
              }),
            ),
            "Loading...",
          )
        : React.createElement(
            React.Fragment,
            {},
            React.createElement(
              "div",
              {
                className: "mb-4 text-xl",
              },
              "Oops, Something Went Wrong! Try again Later.",
            ),
            React.createElement(Button.make, {
              text: "Refresh",
              buttonType: buttonType,
              leftIcon: {
                TAG: "FontAwesome",
                _0: "sync-alt",
              },
              onClick: function (param) {
                window.location.reload();
              },
            }),
          ),
    ),
  );
}

var TableLoadingErrorIndicator = {
  make: DynamicTableUtils$TableLoadingErrorIndicator,
};

function DynamicTableUtils$TableDataLoadingIndicator(props) {
  var __showWithData = props.showWithData;
  var showWithData = __showWithData !== undefined ? __showWithData : true;
  var padding = showWithData ? "py-8 rounded-b" : "py-56 rounded";
  return React.createElement(
    "div",
    {
      className:
        "flex flex-col " +
        padding +
        " justify-center space-x-2 items-center bg-white shadow-md dark:bg-jp-gray-lightgray_background dark:shadow-md",
    },
    React.createElement(
      "div",
      {
        className: "animate-spin mb-4",
      },
      React.createElement(Icon.make, {
        name: "spinner",
      }),
    ),
    React.createElement(
      "div",
      {
        className: "text-gray-500",
      },
      "Loading...",
    ),
  );
}

var TableDataLoadingIndicator = {
  make: DynamicTableUtils$TableDataLoadingIndicator,
};

function DynamicTableUtils$ChooseColumns(props) {
  var __showSerialNumber = props.showSerialNumber;
  var __orderdColumnBasedOnDefaultCol = props.orderdColumnBasedOnDefaultCol;
  var __sortingBasedOnDisabled = props.sortingBasedOnDisabled;
  var __isModalView = props.isModalView;
  var setShowColumnSelector = props.setShowColumnSelector;
  var entity = props.entity;
  var isModalView = __isModalView !== undefined ? __isModalView : true;
  var sortingBasedOnDisabled =
    __sortingBasedOnDisabled !== undefined ? __sortingBasedOnDisabled : true;
  var orderdColumnBasedOnDefaultCol =
    __orderdColumnBasedOnDefaultCol !== undefined
      ? __orderdColumnBasedOnDefaultCol
      : false;
  var showSerialNumber =
    __showSerialNumber !== undefined ? __showSerialNumber : true;
  var match = Recoil.useRecoilState(props.activeColumnsAtom);
  var setVisibleColumns = match[1];
  var setColumns = React.useCallback(
    function (fn) {
      setVisibleColumns(fn);
      setShowColumnSelector(function (param) {
        return false;
      });
    },
    [setVisibleColumns],
  );
  if (Core__Option.isSome(entity.allColumns) && props.totalResults > 0) {
    return React.createElement(CustomizeTableColumns.make, {
      allHeadersArray: entity.allColumns,
      visibleColumns: match[0],
      setColumns: setColumns,
      getHeading: entity.getHeading,
      defaultColumns: props.defaultColumns,
      showModal: props.showColumnSelector,
      setShowModal: setShowColumnSelector,
      isModalView: isModalView,
      orderdColumnBasedOnDefaultCol: orderdColumnBasedOnDefaultCol,
      sortingBasedOnDisabled: sortingBasedOnDisabled,
      showSerialNumber: showSerialNumber,
    });
  } else {
    return null;
  }
}

var ChooseColumns = {
  make: DynamicTableUtils$ChooseColumns,
};

function DynamicTableUtils$ChooseColumnsWrapper(props) {
  var __showSerialNumber = props.showSerialNumber;
  var __sortingBasedOnDisabled = props.sortingBasedOnDisabled;
  var __isModalView = props.isModalView;
  var optionalActiveColumnsAtom = props.activeColumnsAtom;
  var isModalView = __isModalView !== undefined ? __isModalView : true;
  var sortingBasedOnDisabled =
    __sortingBasedOnDisabled !== undefined ? __sortingBasedOnDisabled : true;
  var showSerialNumber =
    __showSerialNumber !== undefined ? __showSerialNumber : true;
  if (optionalActiveColumnsAtom !== undefined) {
    return React.createElement(AddDataAttributes.make, {
      attributes: [["data-table", "dynamicTableChooseColumn"]],
      children: React.createElement(DynamicTableUtils$ChooseColumns, {
        entity: props.entity,
        totalResults: props.totalResults,
        defaultColumns: props.defaultColumns,
        activeColumnsAtom: optionalActiveColumnsAtom,
        setShowColumnSelector: props.setShowColumnSelector,
        showColumnSelector: props.showColumnSelector,
        isModalView: isModalView,
        sortingBasedOnDisabled: sortingBasedOnDisabled,
        showSerialNumber: showSerialNumber,
      }),
    });
  } else {
    return null;
  }
}

var ChooseColumnsWrapper = {
  make: DynamicTableUtils$ChooseColumnsWrapper,
};

export {
  tableHeadingClass,
  visibilityColFunc,
  useDateFormatConvertor,
  filteredData,
  convertStrCellToFloat,
  convertFloatCellToStr,
  defaultRefetchFn,
  refetchContext,
  RefetchContextProvider,
  TableHeading,
  TableLoadingErrorIndicator,
  TableDataLoadingIndicator,
  ChooseColumns,
  ChooseColumnsWrapper,
};
/* refetchContext Not a pure module */
