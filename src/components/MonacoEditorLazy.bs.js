// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Clipboard from "../libraries/Clipboard.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as MonacoEditor from "../libraries/MonacoEditor.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";

function MonacoEditorLazy(props) {
  var __outerWidth = props.outerWidth;
  var __minimap = props.minimap;
  var __showCopy = props.showCopy;
  var __readOnly = props.readOnly;
  var value = props.value;
  var defaultValue = props.defaultValue;
  var readOnly = __readOnly !== undefined ? __readOnly : false;
  var showCopy = __showCopy !== undefined ? __showCopy : true;
  var minimap = __minimap !== undefined ? __minimap : true;
  var outerWidth = __outerWidth !== undefined ? __outerWidth : "w-full";
  var copyValue = Core__Option.isNone(value) ? defaultValue : value;
  return React.createElement(AddDataAttributes.make, {
    attributes: [
      ["data-editor", "Monaco Editor"],
      ["text", Core__Option.getOr(value, "")],
    ],
    children: React.createElement(
      "div",
      {
        className: "flex flex-col " + outerWidth,
      },
      Core__Option.getOr(props.headerComponent, null),
      showCopy
        ? React.createElement(Clipboard.Copy.make, {
            data: copyValue,
          })
        : null,
      React.createElement(MonacoEditor.make, {
        defaultLanguage: props.defaultLanguage,
        defaultValue: defaultValue,
        value: value,
        height: props.height,
        theme: props.theme,
        width: props.width,
        options: {
          readOnly: readOnly,
          fontSize: Caml_option.some(props.fontSize),
          fontFamily: Caml_option.some(props.fontFamily),
          fontWeight: Caml_option.some(props.fontWeight),
          minimap: {
            enabled: minimap,
          },
        },
        onChange: props.onChange,
        onValidate: props.onValidate,
        onMount: props.onMount,
      }),
    ),
  });
}

var make = MonacoEditorLazy;

export { make };
/* react Not a pure module */
