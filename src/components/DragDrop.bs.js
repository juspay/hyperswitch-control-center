// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "./Button.bs.js";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as ReactBeautifulDnd from "react-beautiful-dnd";

var defaultDraggableDest = {
  index: 0,
  droppableId: "",
};

function getItemStyle(isDragging, _draggableStyle) {
  return {
    color: isDragging ? "lightgreen" : "grey",
    height: "100px",
    margin: "0 0 5px 0",
    padding: "100",
    width: "250px",
    userSelect: "none",
  };
}

function DragDrop(props) {
  var keyExtractor = props.keyExtractor;
  var setListItems = props.setListItems;
  var listItems = props.listItems;
  var __isHorizontal = props.isHorizontal;
  var isHorizontal = __isHorizontal !== undefined ? __isHorizontal : true;
  var match = React.useState(function () {
    return listItems;
  });
  var setList = match[1];
  var list = match[0];
  var reorder = function (currentState, startIndex, endIndex) {
    if (startIndex === endIndex) {
      return [currentState, false];
    }
    var oldStateArray = currentState.slice();
    var removed = Js_array.removeCountInPlace(startIndex, 1, oldStateArray);
    Caml_splice_call.spliceObjApply(oldStateArray, "splice", [
      endIndex,
      0,
      removed,
    ]);
    return [oldStateArray, true];
  };
  var onDragEnd = function (result) {
    var dest = result.destination;
    var hasCorrectDestination = !(dest == null);
    if (!hasCorrectDestination) {
      return;
    }
    var res =
      dest == null
        ? defaultDraggableDest
        : {
            index: dest.index,
            droppableId: dest.droppableId,
          };
    var match = reorder(list, result.source.index, res.index);
    if (!match[1]) {
      return;
    }
    var updatedList = match[0];
    setList(function (param) {
      return updatedList;
    });
  };
  var onSubmit = function () {
    var updatedDict = {};
    updatedDict["items"] = list;
    setListItems(function (param) {
      return list;
    });
  };
  var directionClass = isHorizontal ? "flex-row" : "flex-col";
  var droppableDirection = isHorizontal ? "horizontal" : "vertical";
  return React.createElement(
    "div",
    undefined,
    React.createElement(
      "div",
      {
        className:
          "w-min p-3 bg-jp-gray-50 dark:bg-jp-gray-950 rounded border border-jp-gray-500 dark:border-jp-gray-960 align-center justify-center rounded-t-none flex " +
          directionClass,
      },
      React.createElement(
        "span",
        undefined,
        React.createElement(ReactBeautifulDnd.DragDropContext, {
          children: Caml_option.some(
            React.createElement(ReactBeautifulDnd.Droppable, {
              children: function (provided, _snapshot) {
                return React.cloneElement(
                  React.createElement(
                    "div",
                    {
                      ref: Caml_option.some(provided.innerRef),
                      className: "flex " + directionClass,
                    },
                    list.map(function (item, index) {
                      var val = keyExtractor(item);
                      if (val !== undefined) {
                        return JsxPPXReactSupportU.createElementWithKey(
                          "item-" + index.toString(),
                          ReactBeautifulDnd.Draggable,
                          {
                            children: function (provided, _snapshot) {
                              return React.cloneElement(
                                React.cloneElement(
                                  React.createElement(
                                    "span",
                                    {
                                      ref: Caml_option.some(provided.innerRef),
                                      className:
                                        "flex " +
                                        directionClass +
                                        " p-3 m-1 bg-jp-gray-50 dark:bg-jp-gray-950 rounded border border-jp-gray-500 dark:border-jp-gray-960 align-center justify-center rounded-t-none",
                                      onDragStart: provided.onDragStart,
                                    },
                                    val,
                                  ),
                                  provided.draggableProps,
                                ),
                                provided.dragHandleProps,
                              );
                            },
                            draggableId: "item-" + index.toString(),
                            index: index,
                          },
                        );
                      } else {
                        return null;
                      }
                    }),
                    provided.placeholder,
                  ),
                  provided.droppableProps,
                );
              },
              droppableId: "droppable",
              direction: droppableDirection,
            }),
          ),
          onDragEnd: onDragEnd,
        }),
      ),
    ),
    React.createElement(
      "div",
      {
        className: "pt-5 inline-block ",
      },
      React.createElement(Button.make, {
        text: "Update",
        buttonType: "Primary",
        onClick: function (param) {
          onSubmit();
        },
      }),
    ),
  );
}

var make = DragDrop;

export { defaultDraggableDest, getItemStyle, make };
/* react Not a pure module */
