// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as React from "react";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as MobileView from "./MobileView.bs.js";
import * as TableUtils from "./TableUtils.bs.js";
import * as DesktopView from "./DesktopView.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";

function CollapsableTableRow(props) {
  var title = props.title;
  var getRowDetails = props.getRowDetails;
  var onExpandIconClick = props.onExpandIconClick;
  var highlightEnabledFieldsArray = props.highlightEnabledFieldsArray;
  var rowIndex = props.rowIndex;
  var item = props.item;
  var isCurrentRowExpanded = props.expandedRowIndexArray.includes(rowIndex);
  var headingArray = [];
  props.heading.forEach(function (item) {
    headingArray.push(item.title);
  });
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(
      DesktopView.make,
      {
        children: null,
      },
      React.createElement(
        "tr",
        {
          className:
            "group h-full rounded-md bg-white dark:bg-jp-gray-lightgray_background hover:bg-jp-gray-table_hover dark:hover:bg-jp-gray-100 dark:hover:bg-opacity-10 text-jp-gray-900 dark:text-jp-gray-text_darktheme text-opacity-75 dark:text-opacity-75 font-fira-code transition duration-300 ease-in-out text-sm",
        },
        item.map(function (obj, cellIndex) {
          var showBorderTop;
          showBorderTop = obj.TAG === "Text" ? obj._0 !== "-" : true;
          var paddingClass;
          paddingClass = obj.TAG === "Link" ? "pt-2" : "py-3";
          var highlightCell = highlightEnabledFieldsArray.includes(cellIndex);
          var borderTop = showBorderTop ? "border-t" : "border-t-0";
          var borderClass =
            borderTop + " border-jp-gray-500 dark:border-jp-gray-960";
          var hCell = highlightCell ? "hover:font-bold" : "";
          var cursorI = cellIndex === 0 ? "cursor-pointer" : "";
          var $$location =
            title +
            "_tr" +
            ((rowIndex + 1) | 0).toString() +
            "_td" +
            ((cellIndex + 1) | 0).toString();
          return JsxPPXReactSupportU.createElementWithKey(
            cellIndex.toString(),
            AddDataAttributes.make,
            {
              attributes: [["data-table-location", $$location]],
              children: React.createElement(
                "td",
                {
                  key: cellIndex.toString(),
                  className:
                    "h-full p-0 align-top " +
                    borderClass +
                    " " +
                    hCell +
                    " " +
                    cursorI,
                  onClick: function (param) {
                    if (cellIndex === 0) {
                      return onExpandIconClick(isCurrentRowExpanded, rowIndex);
                    }
                  },
                },
                React.createElement(
                  "div",
                  {
                    className: "h-full box-border px-4 " + paddingClass,
                  },
                  React.createElement(
                    "div",
                    {
                      className: "flex flex-row gap-4 items-center",
                    },
                    React.createElement(RenderIf.make, {
                      condition: cellIndex === 0,
                      children: React.createElement(Icon.make, {
                        name: isCurrentRowExpanded
                          ? "caret-down"
                          : "caret-right",
                        size: 14,
                      }),
                    }),
                    React.createElement(TableUtils.TableCell.make, {
                      cell: obj,
                    }),
                  ),
                ),
              ),
            },
          );
        }),
      ),
      React.createElement(RenderIf.make, {
        condition: isCurrentRowExpanded,
        children: React.createElement(AddDataAttributes.make, {
          attributes: [
            ["data-table-row-expanded", ((rowIndex + 1) | 0).toString()],
          ],
          children: React.createElement(
            "tr",
            {
              className: "dark:border-jp-gray-dark_disable_border_color",
            },
            React.createElement(
              "td",
              {
                className: "",
                colSpan: 12,
              },
              getRowDetails(rowIndex),
            ),
          ),
        }),
      }),
    ),
    React.createElement(MobileView.make, {
      children: React.createElement(
        "div",
        {
          className: "px-3 py-4 bg-white dark:bg-jp-gray-lightgray_background",
        },
        item.map(function (obj, index) {
          var heading = Core__Option.getOr(headingArray[index], "");
          return JsxPPXReactSupportU.createElementWithKey(
            index.toString(),
            RenderIf.make,
            {
              condition: index !== 0,
              children: React.createElement(
                "div",
                {
                  className: "flex mb-5 justify-between",
                },
                React.createElement(
                  "div",
                  {
                    className: "text-jp-gray-900 opacity-50 font-medium",
                  },
                  heading,
                ),
                React.createElement(
                  "div",
                  {
                    className: "font-semibold",
                  },
                  React.createElement(TableUtils.TableCell.make, {
                    cell: obj,
                  }),
                ),
              ),
            },
          );
        }),
        getRowDetails(rowIndex),
      ),
    }),
  );
}

var make = CollapsableTableRow;

export { make };
/* Icon Not a pure module */
