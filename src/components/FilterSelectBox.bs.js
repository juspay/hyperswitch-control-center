// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Tick from "./custom-icons/Tick.bs.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as Loader from "./Loader.bs.js";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as BoolInput from "./form/BoolInput.bs.js";
import * as RadioIcon from "./custom-icons/RadioIcon.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as BottomModal from "./BottomModal.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as SearchInput from "./SearchInput.bs.js";
import * as CheckBoxIcon from "./custom-icons/CheckBoxIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as Core__String from "@rescript/core/src/Core__String.bs.js";
import * as OutsideClick from "../hooks/OutsideClick.bs.js";
import * as FilterContext from "../context/FilterContext.bs.js";
import * as ThemeProvider from "../context/ThemeProvider.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RippleEffectBackground from "./RippleEffectBackground.bs.js";
import * as TableFilterSectionContext from "../context/TableFilterSectionContext.bs.js";
import * as DropdownTextWeighContextWrapper from "../context/DropdownTextWeighContextWrapper.bs.js";

function regex(a, searchString) {
  var searchStringNew = searchString
    .replace(/[<>\[\]';|?*\\]/g, "")
    .replace(/\(/g, "\\(")
    .replace(/\+/g, "\\+")
    .replace(/\)/g, "\\)")
    .replace(/\./g, "");
  return new RegExp("(.*)(" + a + searchStringNew + ")(.*)", "i");
}

function FilterSelectBox$ListItem(props) {
  var __textColorClass = props.textColorClass;
  var __textEllipsisForDropDownOptions = props.textEllipsisForDropDownOptions;
  var __showToolTipOptions = props.showToolTipOptions;
  var __iconStroke = props.iconStroke;
  var __checkboxDimension = props.checkboxDimension;
  var __toggleProps = props.toggleProps;
  var __selectClass = props.selectClass;
  var __optionClass = props.optionClass;
  var __showDescriptionAsTool = props.showDescriptionAsTool;
  var textOverflowClass = props.textOverflowClass;
  var __customSelectStyle = props.customSelectStyle;
  var __listFlexDirection = props.listFlexDirection;
  var __customMarginStyle = props.customMarginStyle;
  var __customLabelStyle = props.customLabelStyle;
  var __description = props.description;
  var __isMobileView = props.isMobileView;
  var __serialNumber = props.serialNumber;
  var __customStyle = props.customStyle;
  var __showToggle = props.showToggle;
  var __leftVacennt = props.leftVacennt;
  var icon = props.icon;
  var __isDisabled = props.isDisabled;
  var __labelValue = props.labelValue;
  var __fill = props.fill;
  var text = props.text;
  var onClick = props.onClick;
  var isSelected = props.isSelected;
  var __isSelectedStateMinus = props.isSelectedStateMinus;
  var __optionSize = props.optionSize;
  var multiSelect = props.multiSelect;
  var searchString = props.searchString;
  var isDropDown = props.isDropDown;
  var optionSize = __optionSize !== undefined ? __optionSize : "Small";
  var isSelectedStateMinus =
    __isSelectedStateMinus !== undefined ? __isSelectedStateMinus : false;
  var fill = __fill !== undefined ? __fill : "#0EB025";
  var labelValue = __labelValue !== undefined ? __labelValue : "";
  var isDisabled = __isDisabled !== undefined ? __isDisabled : false;
  var leftVacennt = __leftVacennt !== undefined ? __leftVacennt : false;
  var showToggle = __showToggle !== undefined ? __showToggle : false;
  var customStyle = __customStyle !== undefined ? __customStyle : "";
  var serialNumber =
    __serialNumber !== undefined
      ? Caml_option.valFromOption(__serialNumber)
      : undefined;
  var isMobileView = __isMobileView !== undefined ? __isMobileView : false;
  var description =
    __description !== undefined
      ? Caml_option.valFromOption(__description)
      : undefined;
  var customLabelStyle =
    __customLabelStyle !== undefined
      ? Caml_option.valFromOption(__customLabelStyle)
      : undefined;
  var customMarginStyle =
    __customMarginStyle !== undefined ? __customMarginStyle : "mx-3 py-2 gap-2";
  var listFlexDirection =
    __listFlexDirection !== undefined ? __listFlexDirection : "";
  var customSelectStyle =
    __customSelectStyle !== undefined ? __customSelectStyle : "";
  var showDescriptionAsTool =
    __showDescriptionAsTool !== undefined ? __showDescriptionAsTool : true;
  var optionClass = __optionClass !== undefined ? __optionClass : "";
  var selectClass = __selectClass !== undefined ? __selectClass : "";
  var toggleProps = __toggleProps !== undefined ? __toggleProps : "";
  var checkboxDimension =
    __checkboxDimension !== undefined ? __checkboxDimension : "";
  var iconStroke = __iconStroke !== undefined ? __iconStroke : "";
  var showToolTipOptions =
    __showToolTipOptions !== undefined ? __showToolTipOptions : false;
  var textEllipsisForDropDownOptions =
    __textEllipsisForDropDownOptions !== undefined
      ? __textEllipsisForDropDownOptions
      : false;
  var textColorClass = __textColorClass !== undefined ? __textColorClass : "";
  var match = React.useContext(ThemeProvider.themeContext);
  var font = match.globalUIConfig.font;
  var match$1 = labelValue.length;
  var labelText = match$1 !== 0 ? labelValue : text;
  var match$2 = React.useState(function () {
    return isSelected;
  });
  var setToggleSelect = match$2[1];
  var listText;
  if (LogicUtils.isEmptyString(searchString)) {
    listText = [text];
  } else {
    var r = text.match(regex("\\b", searchString));
    if (r !== null) {
      listText = Belt_Array.keepMap(r.slice(1), function (x) {
        return x;
      });
    } else {
      var a = text.match(regex("_", searchString));
      listText =
        a !== null
          ? Belt_Array.keepMap(a.slice(1), function (x) {
              return x;
            })
          : [text];
    }
  }
  var customMarginStyle$1 = isMobileView
    ? "py-2 gap-2"
    : isDropDown
      ? customMarginStyle
      : "mr-3 py-2 gap-2";
  var backgroundClass = showToggle
    ? ""
    : isSelected && LogicUtils.isNonEmptyString(customStyle)
      ? customSelectStyle
      : isDropDown && isSelected && !isDisabled
        ? "md:bg-jp-gray-100 md:dark:bg-jp-gray-text_darktheme md:dark:bg-opacity-3 dark:hover:text-white dark:text-white transition ease-[cubic-bezier(0.33, 1, 0.68, 1)]"
        : "hover:bg-jp-gray-100 dark:hover:bg-jp-gray-text_darktheme dark:hover:bg-opacity-10 dark:hover:text-white dark:text-white";
  var justifyClass = isDropDown ? "justify-between" : "";
  var selectedClass = isSelected
    ? "text-opacity-100 dark:text-opacity-100"
    : isDisabled
      ? "text-opacity-50 dark:text-opacity-50"
      : "text-opacity-75 dark:text-opacity-75";
  var leftElementClass = leftVacennt ? "px-4 " : "";
  var labelStyle = Core__Option.isSome(customLabelStyle)
    ? Core__Option.getOr(customLabelStyle, "")
    : "";
  var onToggleSelect = function (val) {
    if (!isDisabled) {
      return setToggleSelect(function (param) {
        return val;
      });
    }
  };
  React.useEffect(
    function () {
      setToggleSelect(function (param) {
        return isSelected;
      });
    },
    [isSelected],
  );
  var cursorClass =
    showToggle || !isDropDown
      ? ""
      : isDisabled
        ? "cursor-not-allowed"
        : "cursor-pointer";
  var paddingClass = showToggle ? "pr-6 mr-4" : "pr-2";
  var onClickTemp = showToggle ? function (param) {} : onClick;
  var parentRef = React.useRef(null);
  var textColor = LogicUtils.isNonEmptyString(textColorClass)
    ? textColorClass
    : "text-jp-2-gray-300";
  var toggleClass = showToggle ? "" : multiSelect ? "pr-2" : "pl-2";
  var optionIconStroke = "";
  var optionTextSize = "text-fs-14";
  var searchMatchTextColor =
    "dark:" + font.textColor.primaryNormal + " " + font.textColor.primaryNormal;
  var optionDescPadding =
    optionSize === "Small"
      ? showToggle
        ? "pl-12"
        : "pl-7"
      : showToggle
        ? "pl-15"
        : "pl-9";
  var overFlowTextCustomClass =
    textOverflowClass !== undefined ? textOverflowClass : "overflow-hidden";
  var customCss = LogicUtils.isEmptyString(listFlexDirection)
    ? "flex-row " + paddingClass
    : listFlexDirection;
  RippleEffectBackground.useLinearRippleHook(parentRef, isDropDown);
  var tmp;
  if (typeof icon !== "object") {
    tmp = null;
  } else {
    switch (icon.TAG) {
      case "FontAwesome":
        tmp = React.createElement(Icon.make, {
          name: icon._0,
          size: 20,
          className:
            "align-middle " +
            (LogicUtils.isEmptyString(iconStroke)
              ? optionIconStroke
              : iconStroke) +
            " ",
        });
        break;
      case "CustomIcon":
        tmp = icon._0;
        break;
      case "CustomRightIcon":
        tmp = null;
        break;
      case "Euler":
        tmp = React.createElement(Icon.make, {
          name: icon._0,
          size: 12,
          className: "align-middle " + optionIconStroke,
        });
        break;
    }
  }
  var tmp$1;
  tmp$1 =
    typeof icon !== "object" || icon.TAG !== "CustomRightIcon" ? null : icon._0;
  var comp = React.createElement(AddDataAttributes.make, {
    attributes: [
      ["data-dropdown-numeric", ((props.dataId + 1) | 0).toString()],
      ["data-dropdown-value", labelText],
      ["data-dropdown-value-selected", isSelected ? "True" : "False"],
    ],
    children: React.createElement(
      "div",
      {
        ref: Caml_option.some(parentRef),
        className:
          "flex  relative mx-2 md:mx-0 my-3 md:my-0 pr-2 md:pr-0 md:w-full items-center font-medium  " +
          overFlowTextCustomClass +
          "  " +
          textColor +
          " " +
          justifyClass +
          " " +
          cursorClass +
          " " +
          backgroundClass +
          " " +
          selectedClass +
          " " +
          customStyle +
          "  " +
          customCss +
          " ",
        onClick: onClickTemp,
      },
      isDropDown
        ? multiSelect && !isMobileView
          ? React.createElement(
              "span",
              {
                className: "pl-3",
              },
              React.createElement(CheckBoxIcon.make, {
                isSelected: isSelected,
                isDisabled: isDisabled,
                isSelectedStateMinus: isSelectedStateMinus,
              }),
            )
          : null
        : showToggle
          ? React.createElement(
              "div",
              {
                className: toggleClass + toggleProps,
                onClick: onClick,
              },
              React.createElement(BoolInput.BaseComponent.make, {
                isSelected: match$2[0],
                setIsSelected: onToggleSelect,
                size: optionSize,
                isDisabled: isDisabled,
              }),
            )
          : multiSelect
            ? React.createElement(
                "span",
                {
                  className: toggleClass,
                },
                LogicUtils.isNonEmptyString(checkboxDimension)
                  ? React.createElement(CheckBoxIcon.make, {
                      isSelected: isSelected,
                      isDisabled: isDisabled,
                      size: optionSize,
                      isSelectedStateMinus: isSelectedStateMinus,
                      checkboxDimension: checkboxDimension,
                    })
                  : React.createElement(CheckBoxIcon.make, {
                      isSelected: isSelected,
                      isDisabled: isDisabled,
                      size: optionSize,
                      isSelectedStateMinus: isSelectedStateMinus,
                    }),
              )
            : React.createElement(
                "div",
                {
                  className: toggleClass,
                },
                React.createElement(RadioIcon.make, {
                  isSelected: isSelected,
                  size: optionSize,
                  fill: fill,
                  isDisabled: isDisabled,
                }),
              ),
      React.createElement(
        "div",
        {
          className:
            "flex flex-row group " +
            optionTextSize +
            " w-full text-left items-center " +
            customMarginStyle$1 +
            " overflow-hidden",
        },
        React.createElement(
          "div",
          {
            className:
              leftElementClass +
              "  flex w-full overflow-x-auto whitespace-pre " +
              labelStyle,
          },
          tmp,
          React.createElement(
            "div",
            {
              className: "w-full",
            },
            listText
              .filter(function (str) {
                return LogicUtils.isNonEmptyString(str);
              })
              .map(function (item, i) {
                if (
                  (item.toLowerCase() === searchString.toLowerCase() ||
                    item.toLowerCase() ===
                      ("_" + searchString).toLowerCase()) &&
                  searchString.length > 0
                ) {
                  return JsxPPXReactSupportU.createElementWithKey(
                    i.toString(),
                    AddDataAttributes.make,
                    {
                      attributes: [["data-searched-text", item]],
                      children: React.createElement(
                        "mark",
                        {
                          key: i.toString(),
                          className: searchMatchTextColor + " bg-transparent",
                        },
                        item,
                      ),
                    },
                  );
                }
                var className = isSelected ? selectClass : optionClass;
                var textClass = textEllipsisForDropDownOptions
                  ? className + " text-ellipsis overflow-hidden "
                  : className;
                var selectOptions = JsxPPXReactSupportU.createElementWithKey(
                  i.toString(),
                  AddDataAttributes.make,
                  {
                    attributes: [["data-text", labelText]],
                    children: React.createElement(
                      "span",
                      {
                        key: i.toString(),
                        className: textClass,
                        value: labelText,
                      },
                      item,
                    ),
                  },
                );
                if (showToolTipOptions) {
                  return JsxPPXReactSupportU.createElementWithKey(
                    i.toString(),
                    ToolTip.make,
                    {
                      description: item,
                      toolTipFor: Caml_option.some(selectOptions),
                      contentAlign: "Default",
                      justifyClass: "justify-start",
                    },
                  );
                } else {
                  return selectOptions;
                }
              }),
          ),
        ),
        tmp$1,
      ),
      isMobileView && isDropDown
        ? multiSelect
          ? React.createElement(CheckBoxIcon.make, {
              isSelected: isSelected,
            })
          : React.createElement(RadioIcon.make, {
              isSelected: isSelected,
              isDisabled: isDisabled,
            })
        : isDropDown
          ? React.createElement(
              "div",
              {
                className: "mr-2",
              },
              React.createElement(Tick.make, {
                isSelected: isSelected,
              }),
            )
          : null,
      serialNumber !== undefined
        ? React.createElement(AddDataAttributes.make, {
            attributes: [["data-badge-value", serialNumber]],
            children: React.createElement(
              "div",
              {
                className:
                  "mr-2 py-0.5 px-2 bg-blue-500 text-white font-semibold rounded-full",
              },
              serialNumber,
            ),
          })
        : null,
    ),
  });
  return React.createElement(React.Fragment, {
    children: Caml_option.some(
      description !== undefined
        ? isDropDown
          ? showDescriptionAsTool
            ? React.createElement(ToolTip.make, {
                description: description,
                toolTipFor: Caml_option.some(comp),
                contentAlign: "Default",
                justifyClass: "justify-start",
              })
            : React.createElement(
                "div",
                undefined,
                comp,
                React.createElement("div", undefined, description),
              )
          : React.createElement(
              React.Fragment,
              {},
              comp,
              React.createElement(
                "div",
                {
                  className:
                    "text-jp-2-light-gray-1100 font-normal -mt-2 " +
                    optionDescPadding +
                    " " +
                    optionTextSize,
                },
                description,
              ),
            )
        : comp,
    ),
  });
}

var ListItem = {
  make: FilterSelectBox$ListItem,
};

function makeNonOptional(dropdownOption) {
  return {
    label: dropdownOption.label,
    value: dropdownOption.value,
    isDisabled: Core__Option.getOr(dropdownOption.isDisabled, false),
    icon: Core__Option.getOr(dropdownOption.icon, "NoIcon"),
    description: dropdownOption.description,
    iconStroke: Core__Option.getOr(dropdownOption.iconStroke, ""),
    textColor: Core__Option.getOr(dropdownOption.textColor, ""),
    optGroup: Core__Option.getOr(dropdownOption.optGroup, "-"),
  };
}

function useTransformed(options) {
  return React.useMemo(
    function () {
      return options.map(makeNonOptional);
    },
    [options],
  );
}

function makeOptions(options) {
  return options.map(function (str) {
    return {
      label: str,
      value: str,
    };
  });
}

function FilterSelectBox$BaseSelect(props) {
  var __preservedAppliedOptions = props.preservedAppliedOptions;
  var __wrapBasis = props.wrapBasis;
  var __onItemSelect = props.onItemSelect;
  var __dropdownClassName = props.dropdownClassName;
  var __checkboxDimension = props.checkboxDimension;
  var __customSelectAllStyle = props.customSelectAllStyle;
  var __toggleProps = props.toggleProps;
  var __selectClass = props.selectClass;
  var __optionClass = props.optionClass;
  var __showDescriptionAsTool = props.showDescriptionAsTool;
  var onApply = props.onApply;
  var __listFlexDirection = props.listFlexDirection;
  var __customMarginStyle = props.customMarginStyle;
  var __sortingBasedOnDisabled = props.sortingBasedOnDisabled;
  var __dropdownCustomWidth = props.dropdownCustomWidth;
  var setShowDropDown = props.setShowDropDown;
  var __isModalView = props.isModalView;
  var __isMobileView = props.isMobileView;
  var __allSelectType = props.allSelectType;
  var __hideBorder = props.hideBorder;
  var deselectDisable = props.deselectDisable;
  var __disableSelect = props.disableSelect;
  var __customMargin = props.customMargin;
  var __customStyle = props.customStyle;
  var __showSearchIcon = props.showSearchIcon;
  var __searchInputPlaceHolder = props.searchInputPlaceHolder;
  var optionRigthElement = props.optionRigthElement;
  var searchable = props.searchable;
  var __maxHeight = props.maxHeight;
  var __heading = props.heading;
  var __showSerialNumber = props.showSerialNumber;
  var __showToggle = props.showToggle;
  var customLabelStyle = props.customLabelStyle;
  var __isHorizontal = props.isHorizontal;
  var onBlur = props.onBlur;
  var values = props.value;
  var onSelect = props.onSelect;
  var __isSelectedStateMinus = props.isSelectedStateMinus;
  var __optionSize = props.optionSize;
  var options = props.options;
  var __isDropDown = props.isDropDown;
  var __showDropDown = props.showDropDown;
  var __showSelectAll = props.showSelectAll;
  var showSelectAll = __showSelectAll !== undefined ? __showSelectAll : true;
  var showDropDown = __showDropDown !== undefined ? __showDropDown : false;
  var isDropDown = __isDropDown !== undefined ? __isDropDown : true;
  var optionSize = __optionSize !== undefined ? __optionSize : "Small";
  var isSelectedStateMinus =
    __isSelectedStateMinus !== undefined ? __isSelectedStateMinus : false;
  var isHorizontal = __isHorizontal !== undefined ? __isHorizontal : false;
  var showToggle = __showToggle !== undefined ? __showToggle : false;
  var showSerialNumber =
    __showSerialNumber !== undefined ? __showSerialNumber : false;
  var heading = __heading !== undefined ? __heading : "Some heading";
  var maxHeight = __maxHeight !== undefined ? __maxHeight : "md:max-h-72";
  var searchInputPlaceHolder =
    __searchInputPlaceHolder !== undefined ? __searchInputPlaceHolder : "";
  var showSearchIcon = __showSearchIcon !== undefined ? __showSearchIcon : true;
  var customStyle = __customStyle !== undefined ? __customStyle : "";
  var customMargin = __customMargin !== undefined ? __customMargin : "";
  var disableSelect = __disableSelect !== undefined ? __disableSelect : false;
  var hideBorder = __hideBorder !== undefined ? __hideBorder : false;
  var allSelectType = __allSelectType !== undefined ? __allSelectType : "Icon";
  var isMobileView = __isMobileView !== undefined ? __isMobileView : false;
  var isModalView = __isModalView !== undefined ? __isModalView : false;
  var dropdownCustomWidth =
    __dropdownCustomWidth !== undefined
      ? __dropdownCustomWidth
      : "w-full md:max-w-md min-w-[10rem]";
  var sortingBasedOnDisabled =
    __sortingBasedOnDisabled !== undefined ? __sortingBasedOnDisabled : true;
  var customMarginStyle =
    __customMarginStyle !== undefined ? __customMarginStyle : "mx-3 py-2 gap-2";
  var listFlexDirection =
    __listFlexDirection !== undefined ? __listFlexDirection : "";
  var showDescriptionAsTool =
    __showDescriptionAsTool !== undefined ? __showDescriptionAsTool : true;
  var optionClass = __optionClass !== undefined ? __optionClass : "";
  var selectClass = __selectClass !== undefined ? __selectClass : "";
  var toggleProps = __toggleProps !== undefined ? __toggleProps : "";
  var customSelectAllStyle =
    __customSelectAllStyle !== undefined ? __customSelectAllStyle : "";
  var checkboxDimension =
    __checkboxDimension !== undefined ? __checkboxDimension : "";
  var dropdownClassName =
    __dropdownClassName !== undefined ? __dropdownClassName : "";
  var onItemSelect =
    __onItemSelect !== undefined
      ? __onItemSelect
      : function (param, param$1) {};
  var wrapBasis = __wrapBasis !== undefined ? __wrapBasis : "";
  var preservedAppliedOptions =
    __preservedAppliedOptions !== undefined ? __preservedAppliedOptions : [];
  var match = React.useContext(ThemeProvider.themeContext);
  var font = match.globalUIConfig.font;
  var match$1 = React.useState(function () {
    return "";
  });
  var setSearchString = match$1[1];
  var searchString = match$1[0];
  var maxHeight$1 = maxHeight.includes("72") ? "md:max-h-66.5" : maxHeight;
  var saneValue = React.useMemo(
    function () {
      var jsonArr = Core__JSON.Decode.array(values);
      if (jsonArr !== undefined) {
        return LogicUtils.getStrArrayFromJsonArray(jsonArr);
      } else {
        return [];
      }
    },
    [values],
  );
  var initialSelectedOptions = React.useMemo(function () {
    return options.filter(function (item) {
      return saneValue.includes(item.value);
    });
  }, []);
  options.sort(function (item1, item2) {
    var item1Index = initialSelectedOptions.findIndex(function (item) {
      return item.label === item1.label;
    });
    var item2Index = initialSelectedOptions.findIndex(function (item) {
      return item.label === item2.label;
    });
    if (item1Index <= item2Index) {
      return 1;
    } else {
      return -1;
    }
  });
  var transformedOptions = useTransformed(options);
  var match$2 = React.useState(function () {
    return transformedOptions;
  });
  var setFilteredOptions = match$2[1];
  var filteredOptions = match$2[0];
  React.useEffect(
    function () {
      setFilteredOptions(function (param) {
        return transformedOptions;
      });
    },
    [transformedOptions],
  );
  React.useEffect(
    function () {
      var shouldDisplay = function (option) {
        var match = option.label.match(regex("\\b", searchString));
        if (match !== null) {
          return true;
        }
        var match$1 = option.label.match(regex("_", searchString));
        return match$1 !== null;
      };
      var filterOptions = options.filter(shouldDisplay).map(makeNonOptional);
      setFilteredOptions(function (param) {
        return filterOptions;
      });
    },
    [searchString],
  );
  var onItemClick = function (itemDataValue, isDisabled) {
    return function (e) {
      if (isDisabled) {
        return;
      }
      var data;
      if (saneValue.includes(itemDataValue)) {
        var values = Core__Option.getOr(deselectDisable, false)
          ? saneValue
          : saneValue.filter(function (x) {
              return x !== itemDataValue;
            });
        onItemSelect(e, itemDataValue);
        data = values;
      } else {
        data = saneValue.concat([itemDataValue]);
      }
      onSelect(data);
      if (onBlur !== undefined) {
        return onBlur(new FocusEvent("blur"));
      }
    };
  };
  var handleSearch = function (str) {
    setSearchString(function (param) {
      return str;
    });
  };
  var selectAll = function (select) {
    return function (_ev) {
      var newValues;
      if (select) {
        var newVal = filteredOptions
          .filter(function (x) {
            if (x.isDisabled) {
              return false;
            } else {
              return !saneValue.includes(x.value);
            }
          })
          .map(function (x) {
            return x.value;
          });
        newValues = saneValue.concat(newVal);
      } else {
        newValues = [];
      }
      onSelect(newValues);
      if (onBlur !== undefined) {
        return onBlur(new FocusEvent("blur"));
      }
    };
  };
  var borderClass = hideBorder
    ? ""
    : isDropDown
      ? "bg-white border dark:bg-jp-gray-lightgray_background border-jp-gray-lightmode_steelgray border-opacity-75 dark:border-jp-gray-960 \n            rounded-lg rounded-b-none animate-textTransition transition duration-400"
      : showToggle
        ? "bg-white border rounded rounded-b-none dark:bg-jp-gray-darkgray_background border-jp-gray-lightmode_steelgray border-opacity-75 dark:border-jp-gray-960"
        : "";
  var minWidth = isDropDown ? "min-w-65" : "";
  var widthClass = showToggle
    ? ""
    : isMobileView
      ? "w-full"
      : minWidth + " " + dropdownCustomWidth;
  var textIconPresent = options.some(function (op) {
    return Core__Option.getOr(op.icon, "NoIcon") !== "NoIcon";
  });
  if (sortingBasedOnDisabled) {
    options.toSorted(function (m1, m2) {
      var m1Disabled = Core__Option.getOr(m1.isDisabled, false);
      var m2Disabled = Core__Option.getOr(m2.isDisabled, false);
      if (m1Disabled === m2Disabled) {
        return 0;
      } else if (m1Disabled) {
        return 1;
      } else {
        return -1;
      }
    });
  }
  var noOfSelected = saneValue.length;
  var applyBtnDisabled =
    noOfSelected === preservedAppliedOptions.length &&
    Core__Array.reduce(saneValue, true, function (acc, val) {
      if (preservedAppliedOptions.includes(val)) {
        return acc;
      } else {
        return false;
      }
    });
  var searchRef = React.useRef(null);
  var match$3 = React.useState(function () {
    return false;
  });
  var setChooseAllToggleSelected = match$3[1];
  var isChooseAllToggleSelected = match$3[0];
  var gapClass = optionRigthElement !== undefined ? "flex gap-4" : "";
  var form = ReactFinalForm.useForm();
  var onClick = function (ev) {
    form.submit();
    if (setShowDropDown !== undefined) {
      setShowDropDown(function (param) {
        return false;
      });
    }
    if (onApply !== undefined) {
      return onApply(ev);
    }
  };
  React.useEffect(
    function () {
      Core__Option.forEach(
        Caml_option.nullable_to_opt(searchRef.current),
        function (input) {
          input.focus();
        },
      );
    },
    [searchRef.current, showDropDown],
  );
  React.useEffect(
    function () {
      if (noOfSelected === options.length) {
        setChooseAllToggleSelected(function (param) {
          return true;
        });
      } else {
        setChooseAllToggleSelected(function (param) {
          return false;
        });
      }
    },
    [noOfSelected, options],
  );
  var toggleSelectAll = function (val) {
    if (!disableSelect) {
      selectAll(val)("");
      return setChooseAllToggleSelected(function (param) {
        return val;
      });
    }
  };
  var disabledClass = disableSelect ? "cursor-not-allowed" : "";
  var marginClass = LogicUtils.isEmptyString(customMargin)
    ? "mt-4"
    : customMargin;
  var dropdownAnimation = showDropDown
    ? "animate-textTransition transition duration-400"
    : "animate-textTransitionOff transition duration-400";
  var searchInputUI = React.createElement(
    "div",
    {
      className: "bg-white p-2 border-b-2 pb-0",
    },
    React.createElement(
      "div",
      {
        className: "pb-2 z-50",
      },
      React.createElement(SearchInput.make, {
        onChange: handleSearch,
        inputText: searchString,
        placeholder: LogicUtils.isEmptyString(searchInputPlaceHolder)
          ? "Search..."
          : searchInputPlaceHolder,
        searchRef: searchRef,
        showSearchIcon: showSearchIcon,
      }),
    ),
  );
  var animationClass = isModalView ? "" : dropdownAnimation;
  var outerClass = isModalView ? "h-full" : isDropDown ? "overflow-auto" : "";
  var tmp;
  if (showSelectAll && isDropDown) {
    if (isMobileView) {
      tmp = React.createElement(
        "div",
        {
          className:
            "flex " +
            (isHorizontal ? "flex-col" : "flex-row") +
            " justify-between pr-4 pl-5 pt-6 pb-1 text-base font-semibold " +
            font.textColor.primaryNormal +
            " cursor-pointer",
          onClick: selectAll(noOfSelected !== options.length),
        },
        "SELECT ALL",
        React.createElement(CheckBoxIcon.make, {
          isSelected: noOfSelected === options.length,
        }),
      );
    } else {
      var clearAllCondition = noOfSelected > 0;
      tmp = React.createElement(RenderIf.make, {
        condition:
          filteredOptions.length > 1 &&
          Core__Option.isNone(
            filteredOptions.find(function (item) {
              return item.value === "Loading...";
            }),
          ),
        children: React.createElement(
          "div",
          {
            className:
              "flex px-3 py-2 border-b-2 gap-3 text-jp-2-gray-300 items-center text-fs-14 font-medium cursor-pointer",
            onClick: selectAll(noOfSelected === 0),
          },
          React.createElement(CheckBoxIcon.make, {
            isSelected: noOfSelected !== 0,
            size: optionSize,
            isSelectedStateMinus: clearAllCondition,
          }),
          clearAllCondition ? "Clear All" : "Select All",
        ),
      });
    }
  } else {
    tmp = null;
  }
  var tmp$1;
  if (showToggle) {
    var tmp$2;
    if (showSelectAll) {
      var tmp$3;
      tmp$3 =
        allSelectType === "Icon"
          ? React.createElement(BoolInput.BaseComponent.make, {
              isSelected: isChooseAllToggleSelected,
              setIsSelected: toggleSelectAll,
              size: optionSize,
              isDisabled: disableSelect,
            })
          : React.createElement(AddDataAttributes.make, {
              attributes: [
                [
                  "data-select-box",
                  isChooseAllToggleSelected ? "deselectAll" : "selectAll",
                ],
              ],
              children: React.createElement(
                "div",
                {
                  className:
                    "font-semibold " +
                    font.textColor.primaryNormal +
                    " " +
                    disabledClass +
                    " " +
                    customSelectAllStyle,
                  onClick: function (param) {
                    toggleSelectAll(!isChooseAllToggleSelected);
                  },
                },
                isChooseAllToggleSelected ? "Deselect All" : "Select All",
              ),
            });
      tmp$2 = React.createElement(
        "div",
        {
          className: "flex  mr-5 justify-end",
        },
        tmp$3,
      );
    } else {
      tmp$2 = null;
    }
    tmp$1 = React.createElement(
      "div",
      undefined,
      React.createElement(
        "div",
        {
          className: "grid grid-cols-2 items-center " + marginClass,
        },
        React.createElement(
          "div",
          {
            className:
              "ml-5 font-bold text-fs-16 text-jp-gray-900 text-opacity-50 dark:text-jp-gray-text_darktheme dark:text-opacity-50",
          },
          heading,
        ),
        tmp$2,
      ),
      hideBorder
        ? null
        : React.createElement("div", {
            className:
              "my-2 bg-jp-gray-lightmode_steelgray dark:bg-jp-gray-960  ",
            style: {
              height: "1px",
            },
          }),
    );
  } else {
    tmp$1 = null;
  }
  return React.createElement(
    "div",
    undefined,
    React.createElement(
      "div",
      {
        className:
          widthClass +
          " " +
          outerClass +
          " " +
          borderClass +
          " " +
          animationClass +
          " " +
          dropdownClassName +
          " max-h-80",
        id: "neglectTopbarTheme",
      },
      searchable !== undefined
        ? searchable
          ? searchInputUI
          : null
        : isDropDown && options.length > 5
          ? searchInputUI
          : null,
      tmp,
      tmp$1,
      React.createElement(
        "div",
        {
          className:
            "overflow-auto  " +
            (isHorizontal ? "flex flex-row grow" : "") +
            "  " +
            (showToggle ? "ml-3" : maxHeight$1) +
            (LogicUtils.isEmptyString(wrapBasis)
              ? ""
              : " flex flex-wrap justify-between"),
        },
        filteredOptions.length === 0
          ? React.createElement(
              "div",
              {
                className: "flex justify-center items-center m-4",
              },
              "No matching records found",
            )
          : Core__Option.isSome(
                filteredOptions.find(function (item) {
                  return item.value === "Loading...";
                }),
              )
            ? React.createElement(Loader.make, {})
            : filteredOptions.map(function (item, indx) {
                var valueToConsider = item.value;
                var index = saneValue.findIndex(function (sv) {
                  return sv === valueToConsider;
                });
                var prevItem = filteredOptions[(indx - 1) | 0];
                var isPrevSelected =
                  prevItem !== undefined
                    ? saneValue.findIndex(function (sv) {
                        return sv === prevItem.value;
                      }) > -1
                    : false;
                var nextItem = filteredOptions[(indx + 1) | 0];
                var isNextSelected =
                  nextItem !== undefined
                    ? saneValue.findIndex(function (sv) {
                        return sv === nextItem.value;
                      }) > -1
                    : false;
                var isSelected = index > -1;
                var serialNumber =
                  isSelected && showSerialNumber
                    ? ((index + 1) | 0).toString()
                    : undefined;
                var leftVacennt =
                  isDropDown && textIconPresent && item.icon === "NoIcon";
                return React.createElement(
                  "div",
                  {
                    key: item.value,
                    className: gapClass + " " + wrapBasis,
                  },
                  React.createElement(FilterSelectBox$ListItem, {
                    isDropDown: isDropDown,
                    searchString: searchString,
                    multiSelect: true,
                    optionSize: optionSize,
                    isSelectedStateMinus: isSelectedStateMinus,
                    isSelected: isSelected,
                    isPrevSelected: isPrevSelected,
                    isNextSelected: isNextSelected,
                    onClick: onItemClick(
                      valueToConsider,
                      item.isDisabled || disableSelect,
                    ),
                    text: item.label,
                    labelValue: item.label,
                    isDisabled: item.isDisabled || disableSelect,
                    icon: item.icon,
                    leftVacennt: leftVacennt,
                    showToggle: showToggle,
                    customStyle: customStyle,
                    serialNumber: Caml_option.some(serialNumber),
                    isMobileView: isMobileView,
                    description: Caml_option.some(item.description),
                    customLabelStyle: Caml_option.some(customLabelStyle),
                    customMarginStyle: customMarginStyle,
                    listFlexDirection: listFlexDirection,
                    dataId: indx,
                    showDescriptionAsTool: showDescriptionAsTool,
                    optionClass: optionClass,
                    selectClass: selectClass,
                    toggleProps: toggleProps,
                    checkboxDimension: checkboxDimension,
                    iconStroke: item.iconStroke,
                  }),
                  optionRigthElement !== undefined
                    ? Caml_option.valFromOption(optionRigthElement)
                    : null,
                );
              }),
      ),
      React.createElement("button", {
        className: "hidden",
        type: "submit",
      }),
    ),
    React.createElement(Button.make, {
      buttonState: applyBtnDisabled ? "Disabled" : "Normal",
      text: "Apply",
      buttonType: "Primary",
      flattenTop: false,
      onClick: onClick,
      customButtonStyle: "w-full items-center sticky bottom-0",
    }),
  );
}

var BaseSelect = {
  make: FilterSelectBox$BaseSelect,
};

function FilterSelectBox$BaseSelectButton(props) {
  var __showSearchIcon = props.showSearchIcon;
  var __searchInputPlaceHolder = props.searchInputPlaceHolder;
  var __hideAssignBtn = props.hideAssignBtn;
  var __isMobileView = props.isMobileView;
  var __disableSelect = props.disableSelect;
  var onAssignClick = props.onAssignClick;
  var setShowDropDown = props.setShowDropDown;
  var onBlur = props.onBlur;
  var __deselectDisable = props.deselectDisable;
  var value = props.value;
  var onSelect = props.onSelect;
  var __isSelectedStateMinus = props.isSelectedStateMinus;
  var __optionSize = props.optionSize;
  var __isHorizontal = props.isHorizontal;
  var __isDropDown = props.isDropDown;
  var __showDropDown = props.showDropDown;
  var showDropDown = __showDropDown !== undefined ? __showDropDown : false;
  var isDropDown = __isDropDown !== undefined ? __isDropDown : true;
  var isHorizontal = __isHorizontal !== undefined ? __isHorizontal : false;
  var optionSize = __optionSize !== undefined ? __optionSize : "Small";
  var isSelectedStateMinus =
    __isSelectedStateMinus !== undefined ? __isSelectedStateMinus : false;
  var deselectDisable =
    __deselectDisable !== undefined ? __deselectDisable : false;
  var disableSelect = __disableSelect !== undefined ? __disableSelect : false;
  var isMobileView = __isMobileView !== undefined ? __isMobileView : false;
  var hideAssignBtn = __hideAssignBtn !== undefined ? __hideAssignBtn : false;
  var searchInputPlaceHolder =
    __searchInputPlaceHolder !== undefined ? __searchInputPlaceHolder : "";
  var showSearchIcon = __showSearchIcon !== undefined ? __showSearchIcon : true;
  var options = useTransformed(props.options);
  var match = React.useState(function () {
    return "";
  });
  var setSearchString = match[1];
  var searchString = match[0];
  var match$1 = React.useState(function () {
    return "";
  });
  var setItemData = match$1[1];
  var itemdata = match$1[0];
  var match$2 = React.useState(function () {
    return false;
  });
  var setAssignButtonState = match$2[1];
  var searchRef = React.useRef(null);
  var onItemClick = function (itemData) {
    return function (_ev) {
      if (disableSelect) {
        return;
      }
      var isSelected = Core__Option.mapOr(
        Core__JSON.Decode.string(value),
        false,
        function (str) {
          return itemData === str;
        },
      );
      if (isSelected && !deselectDisable) {
        onSelect("");
      } else {
        setItemData(function (param) {
          return itemData;
        });
        onSelect(itemData);
      }
      setAssignButtonState(function (param) {
        return true;
      });
      if (onBlur !== undefined) {
        return onBlur(new FocusEvent("blur"));
      }
    };
  };
  React.useEffect(
    function () {
      Core__Option.forEach(
        Caml_option.nullable_to_opt(searchRef.current),
        function (input) {
          input.focus();
        },
      );
    },
    [searchRef.current, showDropDown],
  );
  var handleSearch = function (str) {
    setSearchString(function (param) {
      return str;
    });
  };
  var searchable = isDropDown && options.length > 5;
  var width = isHorizontal ? "w-auto" : "w-full md:w-72";
  var inlineClass = isHorizontal ? "inline-flex" : "";
  var textIconPresent = options.some(function (op) {
    return op.icon !== "NoIcon";
  });
  var optionsOuterClass = isDropDown ? "md:max-h-72 overflow-auto" : "";
  var overflowClass = isDropDown ? "overflow-auto" : "";
  return React.createElement(
    "div",
    {
      className:
        "bg-white dark:bg-jp-gray-lightgray_background " +
        width +
        " " +
        overflowClass +
        " font-medium flex flex-col " +
        (showDropDown
          ? "animate-textTransition transition duration-400"
          : "animate-textTransitionOff transition duration-400"),
    },
    searchable
      ? React.createElement(
          "div",
          {
            className:
              props.customSearchStyle +
              " border-b border-jp-gray-lightmode_steelgray border-opacity-75 dark:border-jp-gray-960 ",
          },
          React.createElement(
            "div",
            {
              className: "pb-2",
            },
            React.createElement(SearchInput.make, {
              onChange: handleSearch,
              inputText: searchString,
              placeholder: LogicUtils.isEmptyString(searchInputPlaceHolder)
                ? "Search..."
                : searchInputPlaceHolder,
              searchRef: searchRef,
              showSearchIcon: showSearchIcon,
            }),
          ),
        )
      : null,
    React.createElement(
      "div",
      {
        className: optionsOuterClass + "  " + inlineClass,
      },
      options.map(function (option, i) {
        var str = Core__JSON.Decode.string(value);
        var isSelected = str !== undefined ? option.value === str : false;
        var match = option.label.match(regex("\\b", searchString));
        var shouldDisplay;
        if (match !== null) {
          shouldDisplay = true;
        } else {
          var match$1 = option.label.match(regex("_", searchString));
          shouldDisplay = match$1 !== null;
        }
        var leftVacennt =
          isDropDown && textIconPresent && option.icon === "NoIcon";
        if (shouldDisplay) {
          return JsxPPXReactSupportU.createElementWithKey(
            i.toString(),
            FilterSelectBox$ListItem,
            {
              isDropDown: isDropDown,
              searchString: searchString,
              multiSelect: false,
              optionSize: optionSize,
              isSelectedStateMinus: isSelectedStateMinus,
              isSelected: isSelected,
              onClick: onItemClick(option.value),
              text: option.label,
              labelValue: option.label,
              icon: option.icon,
              leftVacennt: leftVacennt,
              isMobileView: isMobileView,
              dataId: i,
              iconStroke: option.iconStroke,
            },
          );
        } else {
          return null;
        }
      }),
    ),
    hideAssignBtn
      ? null
      : React.createElement(
          "div",
          {
            className: "px-3 py-3",
            id: "neglectTopbarTheme",
          },
          React.createElement(Button.make, {
            buttonState: match$2[0] ? "Normal" : "Disabled",
            text: "Assign",
            isSelectBoxButton: isDropDown,
            buttonType: "Primary",
            buttonSize: "Small",
            onClick: function (param) {
              if (onAssignClick !== undefined) {
                onAssignClick(itemdata);
              }
              if (setShowDropDown !== undefined) {
                return setShowDropDown(function (param) {
                  return false;
                });
              }
            },
            allowButtonTextMinWidth: props.allowButtonTextMinWidth,
          }),
        ),
  );
}

var BaseSelectButton = {
  make: FilterSelectBox$BaseSelectButton,
};

function FilterSelectBox$RenderListItemInBaseRadio(props) {
  var __customMarginStyleOfListItem = props.customMarginStyleOfListItem;
  var isHorizontal = props.isHorizontal;
  var textEllipsisForDropDownOptions = props.textEllipsisForDropDownOptions;
  var showToolTipOptions = props.showToolTipOptions;
  var textOverflowClass = props.textOverflowClass;
  var customSelectStyle = props.customSelectStyle;
  var listFlexDirection = props.listFlexDirection;
  var isMobileView = props.isMobileView;
  var customStyle = props.customStyle;
  var fill = props.fill;
  var onItemClick = props.onItemClick;
  var isSelectedStateMinus = props.isSelectedStateMinus;
  var optionSize = props.optionSize;
  var searchString = props.searchString;
  var textIconPresent = props.textIconPresent;
  var isDropDown = props.isDropDown;
  var descriptionOnHover = props.descriptionOnHover;
  var value = props.value;
  var customMarginStyleOfListItem =
    __customMarginStyleOfListItem !== undefined
      ? __customMarginStyleOfListItem
      : "mx-3 py-2 gap-2";
  return props.newOptions.map(function (option, i) {
    var str = Core__JSON.Decode.string(value);
    var isSelected = str !== undefined ? option.value === str : false;
    var description = descriptionOnHover ? option.description : undefined;
    var leftVacennt = isDropDown && textIconPresent && option.icon === "NoIcon";
    var listItemComponent = JsxPPXReactSupportU.createElementWithKey(
      i.toString(),
      FilterSelectBox$ListItem,
      {
        isDropDown: isDropDown,
        searchString: searchString,
        multiSelect: false,
        optionSize: optionSize,
        isSelectedStateMinus: isSelectedStateMinus,
        isSelected: isSelected,
        onClick: onItemClick(option.value, option.isDisabled),
        text: option.label,
        fill: fill,
        labelValue: option.label,
        isDisabled: option.isDisabled,
        icon: option.icon,
        leftVacennt: leftVacennt,
        customStyle: customStyle,
        isMobileView: isMobileView,
        description: Caml_option.some(description),
        customMarginStyle: customMarginStyleOfListItem,
        listFlexDirection: listFlexDirection,
        customSelectStyle: customSelectStyle,
        textOverflowClass: textOverflowClass,
        dataId: i,
        iconStroke: option.iconStroke,
        showToolTipOptions: showToolTipOptions,
        textEllipsisForDropDownOptions: textEllipsisForDropDownOptions,
        textColorClass: option.textColor,
      },
    );
    if (descriptionOnHover) {
      return listItemComponent;
    }
    var str$1 = option.description;
    if (str$1 !== undefined) {
      return React.createElement(
        "div",
        {
          key: i.toString(),
          className: "flex flex-row",
        },
        listItemComponent,
        React.createElement(RenderIf.make, {
          condition: !isHorizontal,
          children: React.createElement(ToolTip.make, {
            description: str$1,
            toolTipFor: Caml_option.some(
              React.createElement(
                "div",
                {
                  className: "py-4 px-4",
                },
                React.createElement(Icon.make, {
                  name: "info-circle",
                  size: 12,
                }),
              ),
            ),
          }),
        }),
      );
    } else {
      return listItemComponent;
    }
  });
}

var RenderListItemInBaseRadio = {
  make: FilterSelectBox$RenderListItemInBaseRadio,
};

function getHashMappedOptionValues(options) {
  return Core__Array.reduce(options, {}, function (acc, ele) {
    if (Core__Option.isNone(acc[ele.optGroup])) {
      acc[ele.optGroup] = [ele];
    } else {
      Core__Option.getOr(acc[ele.optGroup], []).push(ele);
    }
    return acc;
  });
}

function getSortedKeys(hashMappedOptions) {
  return Object.keys(hashMappedOptions).toSorted(function (a, b) {
    if (a === "-") {
      return 1;
    } else if (b === "-") {
      return -1;
    } else {
      return Core__String.compare(a, b);
    }
  });
}

function FilterSelectBox$BaseRadio(props) {
  var __textEllipsisForDropDownOptions = props.textEllipsisForDropDownOptions;
  var __showToolTipOptions = props.showToolTipOptions;
  var __showSearchIcon = props.showSearchIcon;
  var __searchInputPlaceHolder = props.searchInputPlaceHolder;
  var textOverflowClass = props.textOverflowClass;
  var __maxHeight = props.maxHeight;
  var __customSelectStyle = props.customSelectStyle;
  var __baseComponentCustomStyle = props.baseComponentCustomStyle;
  var __listFlexDirection = props.listFlexDirection;
  var __setExtSearchString = props.setExtSearchString;
  var __setSelectedString = props.setSelectedString;
  var __selectedString = props.selectedString;
  var __fullLength = props.fullLength;
  var __showMatchingRecordsText = props.showMatchingRecordsText;
  var __dropdownCustomWidth = props.dropdownCustomWidth;
  var __addDynamicValue = props.addDynamicValue;
  var __descriptionOnHover = props.descriptionOnHover;
  var __customSearchStyle = props.customSearchStyle;
  var __isMobileView = props.isMobileView;
  var searchable = props.searchable;
  var __customStyle = props.customStyle;
  var __fill = props.fill;
  var onBlur = props.onBlur;
  var __deselectDisable = props.deselectDisable;
  var value = props.value;
  var onSelect = props.onSelect;
  var __isSelectedStateMinus = props.isSelectedStateMinus;
  var __optionSize = props.optionSize;
  var options = props.options;
  var __isHorizontal = props.isHorizontal;
  var __isDropDown = props.isDropDown;
  var __showDropDown = props.showDropDown;
  var showDropDown = __showDropDown !== undefined ? __showDropDown : false;
  var isDropDown = __isDropDown !== undefined ? __isDropDown : true;
  var isHorizontal = __isHorizontal !== undefined ? __isHorizontal : false;
  var optionSize = __optionSize !== undefined ? __optionSize : "Small";
  var isSelectedStateMinus =
    __isSelectedStateMinus !== undefined ? __isSelectedStateMinus : false;
  var deselectDisable =
    __deselectDisable !== undefined ? __deselectDisable : false;
  var fill = __fill !== undefined ? __fill : "#0EB025";
  var customStyle = __customStyle !== undefined ? __customStyle : "";
  var isMobileView = __isMobileView !== undefined ? __isMobileView : false;
  var customSearchStyle =
    __customSearchStyle !== undefined
      ? __customSearchStyle
      : "bg-jp-gray-100 dark:bg-jp-gray-950 p-2";
  var descriptionOnHover =
    __descriptionOnHover !== undefined ? __descriptionOnHover : false;
  var addDynamicValue =
    __addDynamicValue !== undefined ? __addDynamicValue : false;
  var dropdownCustomWidth =
    __dropdownCustomWidth !== undefined ? __dropdownCustomWidth : "w-80";
  var showMatchingRecordsText =
    __showMatchingRecordsText !== undefined ? __showMatchingRecordsText : true;
  var fullLength = __fullLength !== undefined ? __fullLength : false;
  var selectedString = __selectedString !== undefined ? __selectedString : "";
  var setSelectedString =
    __setSelectedString !== undefined
      ? __setSelectedString
      : function (param) {};
  var setExtSearchString =
    __setExtSearchString !== undefined
      ? __setExtSearchString
      : function (param) {};
  var listFlexDirection =
    __listFlexDirection !== undefined ? __listFlexDirection : "";
  var baseComponentCustomStyle =
    __baseComponentCustomStyle !== undefined ? __baseComponentCustomStyle : "";
  var customSelectStyle =
    __customSelectStyle !== undefined ? __customSelectStyle : "";
  var maxHeight = __maxHeight !== undefined ? __maxHeight : "md:max-h-72";
  var searchInputPlaceHolder =
    __searchInputPlaceHolder !== undefined ? __searchInputPlaceHolder : "";
  var showSearchIcon = __showSearchIcon !== undefined ? __showSearchIcon : true;
  var showToolTipOptions =
    __showToolTipOptions !== undefined ? __showToolTipOptions : false;
  var textEllipsisForDropDownOptions =
    __textEllipsisForDropDownOptions !== undefined
      ? __textEllipsisForDropDownOptions
      : false;
  var options$1 = React.useMemo(
    function () {
      return options.map(makeNonOptional);
    },
    [options],
  );
  var hashMappedOptions = getHashMappedOptionValues(options$1);
  var isNonGrouped =
    Core__Option.getOr(hashMappedOptions["-"], []).length === options$1.length;
  var match = React.useState(function () {
    return getSortedKeys(hashMappedOptions);
  });
  var setOptgroupKeys = match[1];
  var match$1 = React.useState(function () {
    return "";
  });
  var setSearchString = match$1[1];
  var searchString = match$1[0];
  React.useEffect(
    function () {
      setExtSearchString(function (param) {
        return searchString;
      });
    },
    [searchString],
  );
  OutsideClick.useOutsideClick(
    {
      TAG: "ArrayOfRef",
      _0: [Core__Option.getOr(props.dropdownRef, React.useRef(null))],
    },
    undefined,
    showDropDown,
    undefined,
    function () {
      setSearchString(function (param) {
        return "";
      });
    },
    undefined,
  );
  var onItemClick = function (itemData, isDisabled) {
    return function (_ev) {
      if (isDisabled) {
        return;
      }
      var isSelected = Core__Option.mapOr(
        Core__JSON.Decode.string(value),
        false,
        function (str) {
          return itemData === str;
        },
      );
      if (isSelected && !deselectDisable) {
        setSelectedString(function (param) {
          return "";
        });
        onSelect("");
      } else {
        if (
          addDynamicValue &&
          !options$1
            .map(function (item) {
              return item.value;
            })
            .includes(itemData)
        ) {
          setSelectedString(function (param) {
            return itemData;
          });
        } else if (LogicUtils.isNonEmptyString(selectedString)) {
          setSelectedString(function (param) {
            return "";
          });
        }
        onSelect(itemData);
      }
      setSearchString(function (param) {
        return "";
      });
      if (onBlur !== undefined) {
        return onBlur(new FocusEvent("blur"));
      }
    };
  };
  var handleSearch = function (str) {
    setSearchString(function (param) {
      return str;
    });
  };
  var isSearchable =
    isDropDown &&
    (searchable !== undefined ? searchable : options$1.length > 5);
  var widthClass =
    isMobileView || !isSearchable
      ? "w-auto"
      : fullLength
        ? "w-full"
        : dropdownCustomWidth;
  var searchRef = React.useRef(null);
  var width =
    isHorizontal || !isDropDown || LogicUtils.isEmptyString(customStyle)
      ? widthClass
      : customStyle;
  var inlineClass = isHorizontal ? "inline-flex" : "";
  var textIconPresent = options$1.some(function (op) {
    return op.icon !== "NoIcon";
  });
  React.useEffect(
    function () {
      Core__Option.forEach(
        Caml_option.nullable_to_opt(searchRef.current),
        function (input) {
          input.focus();
        },
      );
    },
    [searchRef.current, showDropDown],
  );
  var dropDownbgClass = isDropDown ? "bg-white" : "";
  var newOptions = React.useMemo(
    function () {
      var options$2 = LogicUtils.isNonEmptyString(selectedString)
        ? options$1.concat(makeOptions([selectedString]).map(makeNonOptional))
        : options$1;
      if (searchString.length !== 0) {
        var options$3 = options$2.filter(function (option) {
          var match = option.label.match(regex("\\b", searchString));
          if (match !== null) {
            return true;
          }
          var match$1 = option.label.match(regex("_", searchString));
          return match$1 !== null;
        });
        if (
          addDynamicValue &&
          !options$3
            .map(function (item) {
              return item.value;
            })
            .includes(searchString)
        ) {
          if (isNonGrouped) {
            return options$3.concat(
              makeOptions([searchString]).map(makeNonOptional),
            );
          } else {
            return options$3;
          }
        }
        var hashMappedSearchedOptions = getHashMappedOptionValues(options$3);
        var optgroupKeysForSearch = getSortedKeys(hashMappedSearchedOptions);
        setOptgroupKeys(function (param) {
          return optgroupKeysForSearch;
        });
        return options$3;
      }
      setOptgroupKeys(function (param) {
        return getSortedKeys(hashMappedOptions);
      });
      return options$2;
    },
    [searchString, options$1, selectedString],
  );
  var overflowClass = isDropDown ? "overflow-auto" : "";
  var searchInputUI = React.createElement(
    "div",
    {
      className:
        customSearchStyle +
        " border-b border-jp-gray-lightmode_steelgray border-opacity-75 dark:border-jp-gray-960 ",
    },
    React.createElement(
      "div",
      undefined,
      React.createElement(SearchInput.make, {
        onChange: handleSearch,
        inputText: searchString,
        placeholder: LogicUtils.isEmptyString(searchInputPlaceHolder)
          ? "Search..."
          : searchInputPlaceHolder,
        searchRef: searchRef,
        showSearchIcon: showSearchIcon,
      }),
    ),
  );
  return React.createElement(
    "div",
    {
      className:
        dropDownbgClass +
        "  dark:bg-jp-gray-lightgray_background " +
        width +
        " " +
        overflowClass +
        " font-medium flex flex-col " +
        (showDropDown
          ? "animate-textTransition transition duration-400"
          : "animate-textTransitionOff transition duration-400"),
    },
    searchable !== undefined
      ? React.createElement(RenderIf.make, {
          condition: searchable,
          children: searchInputUI,
        })
      : React.createElement(RenderIf.make, {
          condition: isDropDown && (options$1.length > 5 || addDynamicValue),
          children: searchInputUI,
        }),
    React.createElement(
      "div",
      {
        className:
          maxHeight +
          "  " +
          overflowClass +
          ' text-jp-2-gray-300 text-fs-14 font-medium"\n             ' +
          inlineClass +
          " " +
          baseComponentCustomStyle,
      },
      newOptions.length === 0 && showMatchingRecordsText
        ? React.createElement(
            "div",
            {
              className: "flex justify-center items-center m-4",
            },
            "No matching records found",
          )
        : isNonGrouped
          ? React.createElement(FilterSelectBox$RenderListItemInBaseRadio, {
              newOptions: newOptions,
              value: value,
              descriptionOnHover: descriptionOnHover,
              isDropDown: isDropDown,
              textIconPresent: textIconPresent,
              searchString: searchString,
              optionSize: optionSize,
              isSelectedStateMinus: isSelectedStateMinus,
              onItemClick: onItemClick,
              fill: fill,
              customStyle: customStyle,
              isMobileView: isMobileView,
              listFlexDirection: listFlexDirection,
              customSelectStyle: customSelectStyle,
              textOverflowClass: textOverflowClass,
              showToolTipOptions: showToolTipOptions,
              textEllipsisForDropDownOptions: textEllipsisForDropDownOptions,
              isHorizontal: isHorizontal,
            })
          : match[0].map(function (ele, index) {
              return JsxPPXReactSupportU.createElementVariadicWithKey(
                index.toString(),
                React.Fragment,
                {
                  children: null,
                },
                [
                  React.createElement(
                    "h2",
                    {
                      className: "p-3 font-bold",
                    },
                    ele,
                  ),
                  React.createElement(
                    FilterSelectBox$RenderListItemInBaseRadio,
                    {
                      newOptions: Core__Option.getOr(
                        getHashMappedOptionValues(newOptions)[ele],
                        [],
                      ),
                      value: value,
                      descriptionOnHover: descriptionOnHover,
                      isDropDown: isDropDown,
                      textIconPresent: textIconPresent,
                      searchString: searchString,
                      optionSize: optionSize,
                      isSelectedStateMinus: isSelectedStateMinus,
                      onItemClick: onItemClick,
                      fill: fill,
                      customStyle: customStyle,
                      isMobileView: isMobileView,
                      listFlexDirection: listFlexDirection,
                      customSelectStyle: customSelectStyle,
                      textOverflowClass: textOverflowClass,
                      showToolTipOptions: showToolTipOptions,
                      textEllipsisForDropDownOptions:
                        textEllipsisForDropDownOptions,
                      isHorizontal: isHorizontal,
                      customMarginStyleOfListItem: "ml-8 mx-3 py-2 gap-2",
                    },
                  ),
                ],
              );
            }),
    ),
  );
}

var BaseRadio = {
  make: FilterSelectBox$BaseRadio,
};

function FilterSelectBox$InfraSelectBox(props) {
  var __showTickMark = props.showTickMark;
  var __nonSelectedClass = props.nonSelectedClass;
  var __selectedClass = props.selectedClass;
  var __borderRadius = props.borderRadius;
  var __allowMultiSelect = props.allowMultiSelect;
  var __deselectDisable = props.deselectDisable;
  var input = props.input;
  var deselectDisable =
    __deselectDisable !== undefined ? __deselectDisable : false;
  var allowMultiSelect =
    __allowMultiSelect !== undefined ? __allowMultiSelect : true;
  var borderRadius =
    __borderRadius !== undefined ? __borderRadius : "rounded-full";
  var selectedClass =
    __selectedClass !== undefined
      ? __selectedClass
      : "border-jp-gray-600 dark:border-jp-gray-800 text-jp-gray-850 dark:text-jp-gray-400";
  var nonSelectedClass =
    __nonSelectedClass !== undefined
      ? __nonSelectedClass
      : "border-jp-gray-900 dark:border-jp-gray-300 text-jp-gray-900 dark:text-jp-gray-300 font-semibold";
  var showTickMark = __showTickMark !== undefined ? __showTickMark : true;
  var transformedOptions = useTransformed(props.options);
  var values = input.value;
  var saneValue = React.useMemo(
    function () {
      var jsonArr = Core__JSON.Decode.array(values);
      if (jsonArr !== undefined) {
        return LogicUtils.getStrArrayFromJsonArray(jsonArr);
      } else {
        return [];
      }
    },
    [values],
  );
  return React.createElement(
    "div",
    {
      className:
        "md:max-h-72 overflow-auto font-medium flex flex-wrap gap-y-4 gap-x-2.5",
    },
    transformedOptions.map(function (option, i) {
      var isSelected = saneValue.includes(option.value);
      var selectedClass$1 = isSelected ? selectedClass : nonSelectedClass;
      return React.createElement(
        "div",
        {
          key: i.toString(),
          className:
            "px-4 py-1 border " +
            borderRadius +
            " flex flex-row gap-2 items-center cursor-pointer " +
            selectedClass$1,
          onClick: function (param) {
            var itemDataValue = option.value;
            var isDisabled = option.isDisabled;
            if (isDisabled) {
              return;
            }
            if (!allowMultiSelect) {
              return input.onChange([itemDataValue]);
            }
            var data = saneValue.includes(itemDataValue)
              ? deselectDisable
                ? saneValue
                : saneValue.filter(function (x) {
                    return x !== itemDataValue;
                  })
              : saneValue.concat([itemDataValue]);
            input.onChange(data);
          },
        },
        isSelected && showTickMark
          ? React.createElement(Icon.make, {
              name: "check",
              size: 12,
              className:
                "align-middle font-thin text-jp-gray-900 dark:text-jp-gray-300",
            })
          : null,
        option.label,
      );
    }),
  );
}

var InfraSelectBox = {
  make: FilterSelectBox$InfraSelectBox,
};

function FilterSelectBox$BaseDropdown(props) {
  var __showSearchIcon = props.showSearchIcon;
  var __searchInputPlaceHolder = props.searchInputPlaceHolder;
  var __dropdownClassName = props.dropdownClassName;
  var __textEllipsisForDropDownOptions = props.textEllipsisForDropDownOptions;
  var __showToolTipOptions = props.showToolTipOptions;
  var __showSelectCountButton = props.showSelectCountButton;
  var buttonClickFn = props.buttonClickFn;
  var __showAllSelectedOptions = props.showAllSelectedOptions;
  var onApply = props.onApply;
  var __listFlexDirection = props.listFlexDirection;
  var __setExtSearchString = props.setExtSearchString;
  var __setSelectedString = props.setSelectedString;
  var __selectedString = props.selectedString;
  var __buttonStyleOnDropDownOpened = props.buttonStyleOnDropDownOpened;
  var dropdownCustomWidth = props.dropdownCustomWidth;
  var __hasApplyButton = props.hasApplyButton;
  var __showMatchingRecordsText = props.showMatchingRecordsText;
  var __addDynamicValue = props.addDynamicValue;
  var __descriptionOnHover = props.descriptionOnHover;
  var __customButton = props.customButton;
  var __showCustomBtnAtEnd = props.showCustomBtnAtEnd;
  var __dropDownCustomBtnClick = props.dropDownCustomBtnClick;
  var searchable = props.searchable;
  var __showNameAsToolTip = props.showNameAsToolTip;
  var __showToolTip = props.showToolTip;
  var __showSelectionAsChips = props.showSelectionAsChips;
  var __customSearchStyle = props.customSearchStyle;
  var __customStyle = props.customStyle;
  var __marginTop = props.marginTop;
  var __addButton = props.addButton;
  var fixedDropDownDirection = props.fixedDropDownDirection;
  var __customButtonStyle = props.customButtonStyle;
  var __fullLength = props.fullLength;
  var __autoApply = props.autoApply;
  var __disableSelect = props.disableSelect;
  var baseComponentMethod = props.baseComponentMethod;
  var baseComponent = props.baseComponent;
  var __buttonType = props.buttonType;
  var deselectDisable = props.deselectDisable;
  var __isSelectedStateMinus = props.isSelectedStateMinus;
  var __optionSize = props.optionSize;
  var options = props.options;
  var __showSelectAll = props.showSelectAll;
  var __showClearAll = props.showClearAll;
  var input = props.input;
  var allowMultiSelect = props.allowMultiSelect;
  var __buttonSize = props.buttonSize;
  var buttonText = props.buttonText;
  var buttonSize = __buttonSize !== undefined ? __buttonSize : "Small";
  var showClearAll = __showClearAll !== undefined ? __showClearAll : true;
  var showSelectAll = __showSelectAll !== undefined ? __showSelectAll : true;
  var optionSize = __optionSize !== undefined ? __optionSize : "Small";
  var isSelectedStateMinus =
    __isSelectedStateMinus !== undefined ? __isSelectedStateMinus : false;
  var buttonType =
    __buttonType !== undefined ? __buttonType : "SecondaryFilled";
  var disableSelect = __disableSelect !== undefined ? __disableSelect : false;
  var autoApply = __autoApply !== undefined ? __autoApply : true;
  var fullLength = __fullLength !== undefined ? __fullLength : false;
  var customButtonStyle =
    __customButtonStyle !== undefined ? __customButtonStyle : "";
  var addButton = __addButton !== undefined ? __addButton : false;
  var marginTop = __marginTop !== undefined ? __marginTop : "mt-12";
  var customStyle = __customStyle !== undefined ? __customStyle : "";
  var customSearchStyle =
    __customSearchStyle !== undefined
      ? __customSearchStyle
      : "bg-jp-gray-100 dark:bg-jp-gray-950 p-2";
  var showSelectionAsChips =
    __showSelectionAsChips !== undefined ? __showSelectionAsChips : true;
  var showToolTip = __showToolTip !== undefined ? __showToolTip : false;
  var showNameAsToolTip =
    __showNameAsToolTip !== undefined ? __showNameAsToolTip : false;
  var dropDownCustomBtnClick =
    __dropDownCustomBtnClick !== undefined ? __dropDownCustomBtnClick : false;
  var showCustomBtnAtEnd =
    __showCustomBtnAtEnd !== undefined ? __showCustomBtnAtEnd : false;
  var customButton =
    __customButton !== undefined
      ? Caml_option.valFromOption(__customButton)
      : null;
  var descriptionOnHover =
    __descriptionOnHover !== undefined ? __descriptionOnHover : false;
  var addDynamicValue =
    __addDynamicValue !== undefined ? __addDynamicValue : false;
  var showMatchingRecordsText =
    __showMatchingRecordsText !== undefined ? __showMatchingRecordsText : true;
  var hasApplyButton =
    __hasApplyButton !== undefined ? __hasApplyButton : false;
  var buttonStyleOnDropDownOpened =
    __buttonStyleOnDropDownOpened !== undefined
      ? __buttonStyleOnDropDownOpened
      : "";
  var selectedString = __selectedString !== undefined ? __selectedString : "";
  var setSelectedString =
    __setSelectedString !== undefined
      ? __setSelectedString
      : function (param) {};
  var setExtSearchString =
    __setExtSearchString !== undefined
      ? __setExtSearchString
      : function (param) {};
  var listFlexDirection =
    __listFlexDirection !== undefined ? __listFlexDirection : "";
  var showAllSelectedOptions =
    __showAllSelectedOptions !== undefined ? __showAllSelectedOptions : true;
  var showSelectCountButton =
    __showSelectCountButton !== undefined ? __showSelectCountButton : false;
  var showToolTipOptions =
    __showToolTipOptions !== undefined ? __showToolTipOptions : false;
  var textEllipsisForDropDownOptions =
    __textEllipsisForDropDownOptions !== undefined
      ? __textEllipsisForDropDownOptions
      : false;
  var dropdownClassName =
    __dropdownClassName !== undefined ? __dropdownClassName : "";
  var searchInputPlaceHolder =
    __searchInputPlaceHolder !== undefined ? __searchInputPlaceHolder : "";
  var showSearchIcon = __showSearchIcon !== undefined ? __showSearchIcon : true;
  var transformedOptions = useTransformed(options);
  var isMobileView = MatchMedia.useMobileChecker();
  var isSelectTextDark = React.useContext(
    DropdownTextWeighContextWrapper.selectedTextWeightContext,
  );
  var isFilterSection = React.useContext(
    TableFilterSectionContext.filterSectionContext,
  );
  var match = React.useContext(FilterContext.filterContext);
  var setfilterKeys = match.setfilterKeys;
  var filterKeys = match.filterKeys;
  var removeKeys = match.removeKeys;
  var showBorder = isFilterSection && !isMobileView ? false : props.showBorder;
  var dropdownOuterClass =
    "bg-white dark:bg-jp-gray-950 rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none";
  var isMobileView$1 = MatchMedia.useMobileChecker();
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowDropDown = match$1[1];
  var showDropDown = match$1[0];
  var match$2 = React.useState(function () {
    return false;
  });
  var setIsGrowDown = match$2[1];
  var isGrowDown = match$2[0];
  var match$3 = React.useState(function () {
    return true;
  });
  var setIsInitialRender = match$3[1];
  var isInitialRender = match$3[0];
  var selectBoxRef = React.useRef(null);
  var dropdownRef = React.useRef(null);
  var selectBtnRef = React.useRef(null);
  var match$4 = React.useState(function () {
    return LogicUtils.getStrArryFromJson(input.value);
  });
  var setPreservedAppliedOptions = match$4[1];
  var preservedAppliedOptions = match$4[0];
  var onApply$1 = function (ev) {
    if (onApply !== undefined) {
      onApply(ev);
    }
    setPreservedAppliedOptions(function (param) {
      return LogicUtils.getStrArryFromJson(input.value);
    });
  };
  var clearBtnRef = React.useRef(null);
  React.useEffect(
    function () {
      setShowDropDown(function (param) {
        return false;
      });
    },
    [dropDownCustomBtnClick],
  );
  var refs = autoApply
    ? [selectBoxRef, dropdownRef]
    : [selectBoxRef, dropdownRef, selectBtnRef, clearBtnRef];
  OutsideClick.useOutsideClick(
    {
      TAG: "ArrayOfRef",
      _0: refs,
    },
    undefined,
    showDropDown,
    undefined,
    function () {
      setShowDropDown(function (param) {
        return false;
      });
      if (hasApplyButton) {
        return input.onChange(preservedAppliedOptions);
      }
    },
    undefined,
  );
  var onClick = function (param) {
    if (buttonClickFn !== undefined) {
      buttonClickFn(input.name);
    }
    setShowDropDown(function (param) {
      return !showDropDown;
    });
    setIsGrowDown(function (param) {
      return true;
    });
    setTimeout(function () {
      setIsGrowDown(function (param) {
        return false;
      });
    }, 250);
    if (isInitialRender) {
      return setIsInitialRender(function (param) {
        return false;
      });
    }
  };
  var removeOption = function (text) {
    return function (_ev) {
      var str = transformedOptions.find(function (option) {
        return option.value === text;
      });
      var actualValue = str !== undefined ? str.value : "";
      var jsonArr = Core__JSON.Decode.array(input.value);
      input.onChange(
        jsonArr !== undefined
          ? LogicUtils.getStrArrayFromJsonArray(jsonArr).filter(function (str) {
              return str !== actualValue;
            })
          : [],
      );
    };
  };
  var dropDowntext;
  if (allowMultiSelect) {
    dropDowntext = buttonText;
  } else {
    var str = Core__JSON.Decode.string(input.value);
    if (str !== undefined) {
      var x = transformedOptions.find(function (x) {
        return x.value === str;
      });
      dropDowntext = x !== undefined ? x.label : buttonText;
    } else {
      dropDowntext = buttonText;
    }
  }
  var dropDirection = React.useMemo(
    function () {
      if (fixedDropDownDirection !== undefined) {
        return fixedDropDownDirection;
      } else {
        return Core__Option.getOr(
          Core__Option.flatMap(
            Core__Option.flatMap(
              Caml_option.nullable_to_opt(selectBoxRef.current),
              function (elem) {
                return elem.getClientRects()["0"];
              },
            ),
            function (firstEl) {
              var bottomVacent =
                ((window.innerHeight - (firstEl.bottom | 0)) | 0) > 375;
              var topVacent = (firstEl.top | 0) > 470;
              var rightVacent =
                ((window.innerWidth - (firstEl.left | 0)) | 0) > 270;
              var leftVacent = (firstEl.right | 0) > 270;
              return bottomVacent
                ? rightVacent
                  ? "BottomRight"
                  : leftVacent
                    ? "BottomLeft"
                    : "BottomMiddle"
                : topVacent
                  ? rightVacent
                    ? "TopRight"
                    : leftVacent
                      ? "TopLeft"
                      : "TopMiddle"
                  : rightVacent
                    ? "BottomRight"
                    : leftVacent
                      ? "BottomLeft"
                      : "BottomMiddle";
            },
          ),
          "BottomMiddle",
        );
      }
    },
    [showDropDown],
  );
  var flexWrapper;
  switch (dropDirection) {
    case "BottomLeft":
      flexWrapper = "flex-row-reverse flex-wrap";
      break;
    case "BottomMiddle":
      flexWrapper = "flex-row flex-wrap justify-center";
      break;
    case "BottomRight":
      flexWrapper = "flex-row flex-wrap";
      break;
    case "TopLeft":
      flexWrapper = "flex-row-reverse flex-wrap-reverse";
      break;
    case "TopMiddle":
      flexWrapper = "flex-row flex-wrap-reverse justify-center";
      break;
    case "TopRight":
      flexWrapper = "flex-row flex-wrap-reverse";
      break;
  }
  var marginBottom;
  switch (dropDirection) {
    case "TopLeft":
    case "TopRight":
      marginBottom = "mb-12";
      break;
    default:
      marginBottom = "";
  }
  var onRadioOptionSelect = function (_ev) {
    input.onChange(_ev);
    if (addButton) {
      return setShowDropDown(function (param) {
        return true;
      });
    } else {
      return setShowDropDown(function (param) {
        return false;
      });
    }
  };
  var allSellectedOptions = React.useMemo(
    function () {
      return Core__Option.getOr(
        LogicUtils.getNonEmptyString(
          Belt_Array.keepMap(
            Belt_Array.keepMap(
              Core__Option.getOr(Core__JSON.Decode.array(input.value), []),
              Core__JSON.Decode.string,
            ),
            function (str) {
              return Core__Option.map(
                transformedOptions.find(function (x) {
                  return x.value === str;
                }),
                function (x) {
                  return x.label;
                },
              );
            },
          ).join(", "),
        ),
        buttonText,
      );
    },
    [transformedOptions, input.value],
  );
  var title = showAllSelectedOptions ? allSellectedOptions : buttonText;
  var badgeForSelect = React.useMemo(
    function () {
      var count = Core__Option.getOr(
        Core__JSON.Decode.array(input.value),
        [],
      ).length;
      var condition = count > 1;
      return {
        value: count.toString(),
        color: condition ? "BadgeBlue" : "NoBadge",
      };
    },
    [input.value],
  );
  var widthClass = isMobileView$1
    ? "w-full"
    : Core__Option.getOr(dropdownCustomWidth, "");
  var optionsElement = allowMultiSelect
    ? React.createElement(FilterSelectBox$BaseSelect, {
        showSelectAll: showSelectAll,
        showDropDown: showDropDown,
        isDropDown: true,
        options: options,
        optionSize: optionSize,
        onSelect: input.onChange,
        value: input.value,
        onBlur: input.onBlur,
        showClearAll: showClearAll,
        showSelectionAsChips: showSelectionAsChips,
        maxHeight: props.maxHeight,
        searchable: searchable,
        searchInputPlaceHolder: searchInputPlaceHolder,
        showSearchIcon: showSearchIcon,
        customStyle: customStyle,
        disableSelect: disableSelect,
        deselectDisable: deselectDisable,
        isMobileView: isMobileView$1,
        hasApplyButton: hasApplyButton,
        setShowDropDown: setShowDropDown,
        dropdownCustomWidth: dropdownCustomWidth,
        sortingBasedOnDisabled: props.sortingBasedOnDisabled,
        customMarginStyle: props.customMarginStyle,
        listFlexDirection: listFlexDirection,
        onApply: onApply$1,
        showSelectCountButton: showSelectCountButton,
        dropdownClassName: dropdownClassName,
        preservedAppliedOptions: preservedAppliedOptions,
      })
    : addButton
      ? React.createElement(FilterSelectBox$BaseSelectButton, {
          showDropDown: showDropDown,
          isDropDown: true,
          isHorizontal: false,
          options: options,
          optionSize: optionSize,
          isSelectedStateMinus: isSelectedStateMinus,
          onSelect: onRadioOptionSelect,
          value: input.value,
          deselectDisable: deselectDisable,
          onBlur: input.onBlur,
          setShowDropDown: setShowDropDown,
          onAssignClick: props.onAssignClick,
          customSearchStyle: customSearchStyle,
          disableSelect: disableSelect,
          isMobileView: isMobileView$1,
          hideAssignBtn: true,
          searchInputPlaceHolder: searchInputPlaceHolder,
          showSearchIcon: showSearchIcon,
        })
      : React.createElement(FilterSelectBox$BaseRadio, {
          showDropDown: showDropDown,
          isDropDown: true,
          isHorizontal: false,
          options: options,
          optionSize: optionSize,
          isSelectedStateMinus: isSelectedStateMinus,
          onSelect: onRadioOptionSelect,
          value: input.value,
          deselectDisable: deselectDisable,
          onBlur: input.onBlur,
          customStyle: customStyle,
          searchable: searchable,
          isMobileView: isMobileView$1,
          descriptionOnHover: descriptionOnHover,
          addDynamicValue: addDynamicValue,
          dropdownCustomWidth: dropdownCustomWidth,
          dropdownRef: dropdownRef,
          showMatchingRecordsText: showMatchingRecordsText,
          fullLength: fullLength,
          selectedString: selectedString,
          setSelectedString: setSelectedString,
          setExtSearchString: setExtSearchString,
          listFlexDirection: listFlexDirection,
          searchInputPlaceHolder: searchInputPlaceHolder,
          showSearchIcon: showSearchIcon,
          showToolTipOptions: showToolTipOptions,
          textEllipsisForDropDownOptions: textEllipsisForDropDownOptions,
        });
  var selectButtonText = showSelectionAsChips
    ? LogicUtils.isNonEmptyString(selectedString)
      ? selectedString
      : dropDowntext
    : title;
  var buttonIcon = React.createElement(Icon.make, {
    name: "angle-down-outline",
    size: 24,
    className:
      "transition duration-[250ms] ease-out-[cubic-bezier(0.33, 1, 0.68, 1)] " +
      (showDropDown ? "-rotate-180" : ""),
  });
  var textStyle =
    isSelectTextDark && selectButtonText !== buttonText
      ? "text-black dark:text-white"
      : props.textStyle;
  var tmp;
  if (baseComponent !== undefined) {
    tmp = React.createElement(
      "span",
      {
        onClick: onClick,
      },
      Caml_option.valFromOption(baseComponent),
    );
  } else if (baseComponentMethod !== undefined) {
    tmp = React.createElement(
      "span",
      {
        onClick: onClick,
      },
      baseComponentMethod(showDropDown),
    );
  } else if (buttonType === "FilterAdd") {
    tmp = React.createElement(Button.make, {
      buttonState: disableSelect ? "Disabled" : "Normal",
      text: buttonText,
      isSelectBoxButton: true,
      buttonType: buttonType,
      buttonSize: buttonSize,
      leftIcon: Core__Option.getOr(props.customButtonLeftIcon, {
        TAG: "FontAwesome",
        _0: "plus",
      }),
      showBorder: showBorder,
      onClick: onClick,
      textStyle: textStyle,
      customIconMargin: props.customButtonIconMargin,
      textWeight: props.buttonTextWeight,
      fullLength: fullLength,
      customButtonStyle: customButtonStyle,
      customTextPaddingClass: props.customTextPaddingClass,
      customPaddingClass: props.customButtonPaddingClass,
      customBackColor: props.customBackColor,
    });
  } else {
    var selectButton = React.createElement(
      "div",
      {
        className:
          Core__Option.getOr(textStyle, "") +
          " flex justify-center items-center whitespace-pre leading-5  text-sm  font-medium hover:bg-opacity-80  cursor-pointer mr-2 border-r-2 pr-1",
        onClick: onClick,
      },
      React.createElement(
        "div",
        {
          className: "text-ellipsis overflow-hidden w-full max-w-sm h-fit",
        },
        selectButtonText,
      ),
      buttonIcon,
      React.createElement(RenderIf.make, {
        condition: badgeForSelect.color === "BadgeBlue",
        children: React.createElement(
          "div",
          {
            className:
              "px-2 py-0.5 bg-blue-500 rounded-lg text-white text-sm font-medium leading-5 mx-1 h-fit",
          },
          badgeForSelect.value,
        ),
      }),
    );
    tmp = React.createElement(
      "div",
      {
        className:
          "flex " +
          customButtonStyle +
          " " +
          (showDropDown ? buttonStyleOnDropDownOpened : "") +
          " transition duration-[250ms] ease-out-[cubic-bezier(0.33, 1, 0.68, 1)]  border",
      },
      showToolTip && input.value !== "" && !showDropDown && showNameAsToolTip
        ? React.createElement(ToolTip.make, {
            description: showNameAsToolTip
              ? "Select " + LogicUtils.snakeToTitle(input.name)
              : LogicUtils.getStrArryFromJson(input.value).join(",\n"),
            toolTipFor: Caml_option.some(selectButton),
            tooltipWidthClass: "",
            toolTipPosition: "Bottom",
          })
        : selectButton,
      React.createElement(
        "div",
        {
          className: "p-1 rounded-lg hover:bg-gray-200 cursor-pointer ",
          onClick: function (param) {
            var name = input.name;
            removeKeys([name]);
            setfilterKeys(function (param) {
              return filterKeys.filter(function (item) {
                return item !== name;
              });
            });
          },
        },
        React.createElement(Icon.make, {
          name: "cross-outline",
          size: 13,
        }),
      ),
    );
  }
  var tmp$1;
  if (
    allowMultiSelect &&
    !props.hideMultiSelectButtons &&
    showSelectionAsChips
  ) {
    var jsonArr = Core__JSON.Decode.array(input.value);
    tmp$1 =
      jsonArr !== undefined
        ? LogicUtils.getStrArrayFromJsonArray(jsonArr).map(function (str, i) {
            var actualValueIndex = options
              .map(function (x) {
                return x.value;
              })
              .findIndex(function (item) {
                return item === str;
              });
            if (actualValueIndex === -1) {
              return null;
            }
            var ele = options[actualValueIndex];
            var match =
              ele !== undefined
                ? [ele.label, Core__Option.getOr(ele.icon, "NoIcon")]
                : ["", "NoIcon"];
            return React.createElement(
              "div",
              {
                key: i.toString(),
                className: "m-2",
              },
              React.createElement(Button.make, {
                buttonFor: buttonText,
                text: match[0],
                isSelectBoxButton: true,
                buttonSize: "Small",
                leftIcon: match[1],
                rightIcon: {
                  TAG: "FontAwesome",
                  _0: "times",
                },
                onClick: removeOption(str),
              }),
            );
          })
        : null;
  } else {
    tmp$1 = null;
  }
  return React.createElement(
    "div",
    {
      className: "flex relative  flex-row  flex-wrap",
    },
    React.createElement(
      "div",
      {
        className:
          "flex relative " + flexWrapper + " " + (fullLength ? "w-full" : ""),
      },
      React.createElement(
        "div",
        {
          ref: Caml_option.some(selectBoxRef),
          className: "text-opacity-50 " + (fullLength ? "w-full" : ""),
        },
        tmp,
      ),
      showDropDown
        ? isMobileView$1
          ? React.createElement(BottomModal.make, {
              onCloseClick: onClick,
              children: optionsElement,
              headerText: buttonText,
            })
          : React.createElement(AddDataAttributes.make, {
              attributes: [["data-dropdown", "dropdown"]],
              children: React.createElement(
                "div",
                {
                  ref: Caml_option.some(dropdownRef),
                  className:
                    marginTop +
                    " absolute " +
                    (isGrowDown ? "animate-growDown" : "") +
                    " " +
                    (dropDirection === "BottomLeft" ||
                    dropDirection === "BottomMiddle" ||
                    dropDirection === "BottomRight"
                      ? "origin-top"
                      : "origin-bottom") +
                    " " +
                    dropdownOuterClass +
                    " z-20 " +
                    marginBottom +
                    " bg-gray-50 dark:bg-jp-gray-950 " +
                    (fullLength ? "w-full" : ""),
                },
                optionsElement,
                showCustomBtnAtEnd ? customButton : null,
              ),
            })
        : !isInitialRender && isGrowDown && !isMobileView$1
          ? React.createElement(
              "div",
              {
                ref: Caml_option.some(dropdownRef),
                className:
                  marginTop +
                  " absolute animate-growUp " +
                  widthClass +
                  " " +
                  (dropDirection === "BottomLeft" ||
                  dropDirection === "BottomMiddle" ||
                  dropDirection === "BottomRight"
                    ? "origin-top"
                    : "origin-bottom") +
                  " " +
                  dropdownOuterClass +
                  " z-20 " +
                  marginBottom +
                  " bg-gray-50 dark:bg-jp-gray-950",
              },
              optionsElement,
            )
          : null,
    ),
    tmp$1,
  );
}

var BaseDropdown = {
  make: FilterSelectBox$BaseDropdown,
};

function FilterSelectBox$ChipFilterSelectBox(props) {
  var __customStyleForChips = props.customStyleForChips;
  var __isTickRequired = props.isTickRequired;
  var __allowMultiSelect = props.allowMultiSelect;
  var __deselectDisable = props.deselectDisable;
  var input = props.input;
  var deselectDisable =
    __deselectDisable !== undefined ? __deselectDisable : false;
  var allowMultiSelect =
    __allowMultiSelect !== undefined ? __allowMultiSelect : true;
  var isTickRequired = __isTickRequired !== undefined ? __isTickRequired : true;
  var customStyleForChips =
    __customStyleForChips !== undefined ? __customStyleForChips : "";
  var transformedOptions = useTransformed(props.options);
  var values = input.value;
  var saneValue = React.useMemo(
    function () {
      return LogicUtils.getStrArrayFromJsonArray(
        LogicUtils.getArrayFromJson(values, []),
      );
    },
    [values],
  );
  return React.createElement(
    "div",
    {
      className: "md:max-h-72 overflow-auto font-medium flex flex-wrap gap-4 ",
    },
    transformedOptions.map(function (option, i) {
      var isSelected = saneValue.includes(option.value);
      var selectedClass = isSelected
        ? "flex items-center m-2 bg-blue-400 dark:text-gray-800 border-gray-300 inline-block text-s px-2 py-1 rounded-2xl"
        : " m-2 bg-gray-200 dark:text-gray-800 border-jp-gray-800 inline-block text-s px-2 py-1 rounded-2xl";
      var chipsCss = LogicUtils.isEmptyString(customStyleForChips)
        ? selectedClass
        : customStyleForChips;
      return React.createElement(
        "div",
        {
          key: i.toString(),
          className:
            "px-4 py-1 mr-1 mt-0.5 border rounded-full flex flex-row gap-2 items-center cursor-pointer " +
            chipsCss,
          onClick: function (param) {
            var itemDataValue = option.value;
            var isDisabled = option.isDisabled;
            if (isDisabled) {
              return;
            }
            if (!allowMultiSelect) {
              return input.onChange([itemDataValue]);
            }
            var data = saneValue.includes(itemDataValue)
              ? deselectDisable
                ? saneValue
                : saneValue.filter(function (x) {
                    return x !== itemDataValue;
                  })
              : saneValue.concat([itemDataValue]);
            input.onChange(data);
          },
        },
        isTickRequired
          ? isSelected
            ? React.createElement(Icon.make, {
                name: "check-circle",
                size: 9,
                className: "fill-blue-150 mr-1 mt-0.5",
              })
            : React.createElement(Icon.make, {
                name: "check-circle",
                size: 9,
                className: "fill-gray-150 mr-1 mt-0.5",
              })
          : null,
        option.label,
      );
    }),
  );
}

var ChipFilterSelectBox = {
  make: FilterSelectBox$ChipFilterSelectBox,
};

function FilterSelectBox(props) {
  var __wrapBasis = props.wrapBasis;
  var __onItemSelect = props.onItemSelect;
  var __dropdownClassName = props.dropdownClassName;
  var __showBtnTextToolTip = props.showBtnTextToolTip;
  var __textEllipsisForDropDownOptions = props.textEllipsisForDropDownOptions;
  var __showToolTipOptions = props.showToolTipOptions;
  var __checkboxDimension = props.checkboxDimension;
  var __showSelectCountButton = props.showSelectCountButton;
  var __toggleProps = props.toggleProps;
  var __selectClass = props.selectClass;
  var __optionClass = props.optionClass;
  var __showDescriptionAsTool = props.showDescriptionAsTool;
  var showAllSelectedOptions = props.showAllSelectedOptions;
  var onApply = props.onApply;
  var hasApplyButton = props.hasApplyButton;
  var __isPhoneDropdown = props.isPhoneDropdown;
  var __customSelectStyle = props.customSelectStyle;
  var __ellipsisOnly = props.ellipsisOnly;
  var __baseComponentCustomStyle = props.baseComponentCustomStyle;
  var __listFlexDirection = props.listFlexDirection;
  var __buttonStyleOnDropDownOpened = props.buttonStyleOnDropDownOpened;
  var __setExtSearchString = props.setExtSearchString;
  var customMarginStyle = props.customMarginStyle;
  var dropdownCustomWidth = props.dropdownCustomWidth;
  var __descriptionOnHover = props.descriptionOnHover;
  var __customButton = props.customButton;
  var __showMatchingRecordsText = props.showMatchingRecordsText;
  var __addDynamicValue = props.addDynamicValue;
  var __dropDownCustomBtnClick = props.dropDownCustomBtnClick;
  var __showCustomBtnAtEnd = props.showCustomBtnAtEnd;
  var __showNameAsToolTip = props.showNameAsToolTip;
  var __showToolTip = props.showToolTip;
  var __customMargin = props.customMargin;
  var __showSearchIcon = props.showSearchIcon;
  var searchInputPlaceHolder = props.searchInputPlaceHolder;
  var __customSearchStyle = props.customSearchStyle;
  var __allSelectType = props.allSelectType;
  var __hideBorder = props.hideBorder;
  var __fill = props.fill;
  var searchable = props.searchable;
  var maxHeight = props.maxHeight;
  var __showToggle = props.showToggle;
  var __showSelectionAsChips = props.showSelectionAsChips;
  var __customStyle = props.customStyle;
  var __marginTop = props.marginTop;
  var __textStyle = props.textStyle;
  var __fullLength = props.fullLength;
  var __disableSelect = props.disableSelect;
  var __buttonType = props.buttonType;
  var __showSelectAll = props.showSelectAll;
  var __showClearAll = props.showClearAll;
  var __deselectDisable = props.deselectDisable;
  var __isHorizontal = props.isHorizontal;
  var __isSelectedStateMinus = props.isSelectedStateMinus;
  var __optionSize = props.optionSize;
  var options = props.options;
  var __hideMultiSelectButtons = props.hideMultiSelectButtons;
  var __isDropDown = props.isDropDown;
  var __allowMultiSelect = props.allowMultiSelect;
  var __buttonText = props.buttonText;
  var input = props.input;
  var buttonText =
    __buttonText !== undefined ? __buttonText : "Normal Selection";
  var allowMultiSelect =
    __allowMultiSelect !== undefined ? __allowMultiSelect : false;
  var isDropDown = __isDropDown !== undefined ? __isDropDown : true;
  var hideMultiSelectButtons =
    __hideMultiSelectButtons !== undefined ? __hideMultiSelectButtons : false;
  var optionSize = __optionSize !== undefined ? __optionSize : "Small";
  var isSelectedStateMinus =
    __isSelectedStateMinus !== undefined ? __isSelectedStateMinus : false;
  var isHorizontal = __isHorizontal !== undefined ? __isHorizontal : false;
  var deselectDisable =
    __deselectDisable !== undefined ? __deselectDisable : false;
  var showClearAll = __showClearAll !== undefined ? __showClearAll : true;
  var showSelectAll = __showSelectAll !== undefined ? __showSelectAll : true;
  var buttonType =
    __buttonType !== undefined ? __buttonType : "SecondaryFilled";
  var disableSelect = __disableSelect !== undefined ? __disableSelect : false;
  var fullLength = __fullLength !== undefined ? __fullLength : false;
  var textStyle = __textStyle !== undefined ? __textStyle : "";
  var marginTop = __marginTop !== undefined ? __marginTop : "mt-12";
  var customStyle = __customStyle !== undefined ? __customStyle : "";
  var showSelectionAsChips =
    __showSelectionAsChips !== undefined ? __showSelectionAsChips : true;
  var showToggle = __showToggle !== undefined ? __showToggle : false;
  var fill = __fill !== undefined ? __fill : "#0EB025";
  var hideBorder = __hideBorder !== undefined ? __hideBorder : false;
  var allSelectType = __allSelectType !== undefined ? __allSelectType : "Icon";
  var customSearchStyle =
    __customSearchStyle !== undefined
      ? __customSearchStyle
      : "bg-jp-gray-100 dark:bg-jp-gray-950 p-2";
  var showSearchIcon = __showSearchIcon !== undefined ? __showSearchIcon : true;
  var customMargin = __customMargin !== undefined ? __customMargin : "";
  var showToolTip = __showToolTip !== undefined ? __showToolTip : false;
  var showNameAsToolTip =
    __showNameAsToolTip !== undefined ? __showNameAsToolTip : false;
  var showCustomBtnAtEnd =
    __showCustomBtnAtEnd !== undefined ? __showCustomBtnAtEnd : false;
  var dropDownCustomBtnClick =
    __dropDownCustomBtnClick !== undefined ? __dropDownCustomBtnClick : false;
  var addDynamicValue =
    __addDynamicValue !== undefined ? __addDynamicValue : false;
  var showMatchingRecordsText =
    __showMatchingRecordsText !== undefined ? __showMatchingRecordsText : true;
  var customButton =
    __customButton !== undefined
      ? Caml_option.valFromOption(__customButton)
      : null;
  var descriptionOnHover =
    __descriptionOnHover !== undefined ? __descriptionOnHover : false;
  var setExtSearchString =
    __setExtSearchString !== undefined
      ? __setExtSearchString
      : function (param) {};
  var buttonStyleOnDropDownOpened =
    __buttonStyleOnDropDownOpened !== undefined
      ? __buttonStyleOnDropDownOpened
      : "";
  var listFlexDirection =
    __listFlexDirection !== undefined ? __listFlexDirection : "";
  var baseComponentCustomStyle =
    __baseComponentCustomStyle !== undefined ? __baseComponentCustomStyle : "";
  var ellipsisOnly = __ellipsisOnly !== undefined ? __ellipsisOnly : false;
  var customSelectStyle =
    __customSelectStyle !== undefined ? __customSelectStyle : "";
  var isPhoneDropdown =
    __isPhoneDropdown !== undefined ? __isPhoneDropdown : false;
  var showDescriptionAsTool =
    __showDescriptionAsTool !== undefined ? __showDescriptionAsTool : true;
  var optionClass = __optionClass !== undefined ? __optionClass : "";
  var selectClass = __selectClass !== undefined ? __selectClass : "";
  var toggleProps = __toggleProps !== undefined ? __toggleProps : "";
  var showSelectCountButton =
    __showSelectCountButton !== undefined ? __showSelectCountButton : false;
  var checkboxDimension =
    __checkboxDimension !== undefined ? __checkboxDimension : "";
  var showToolTipOptions =
    __showToolTipOptions !== undefined ? __showToolTipOptions : false;
  var textEllipsisForDropDownOptions =
    __textEllipsisForDropDownOptions !== undefined
      ? __textEllipsisForDropDownOptions
      : false;
  var showBtnTextToolTip =
    __showBtnTextToolTip !== undefined ? __showBtnTextToolTip : false;
  var dropdownClassName =
    __dropdownClassName !== undefined ? __dropdownClassName : "";
  var onItemSelect =
    __onItemSelect !== undefined
      ? __onItemSelect
      : function (param, param$1) {};
  var wrapBasis = __wrapBasis !== undefined ? __wrapBasis : "";
  var isMobileView = MatchMedia.useMobileChecker();
  var match = React.useState(function () {
    return "";
  });
  if (isDropDown) {
    return React.createElement(FilterSelectBox$BaseDropdown, {
      buttonText: buttonText,
      buttonSize: props.buttonSize,
      allowMultiSelect: allowMultiSelect,
      input: input,
      showClearAll: showClearAll,
      showSelectAll: showSelectAll,
      options: options,
      optionSize: optionSize,
      isSelectedStateMinus: isSelectedStateMinus,
      hideMultiSelectButtons: hideMultiSelectButtons,
      deselectDisable: deselectDisable,
      buttonType: buttonType,
      baseComponent: props.baseComponent,
      baseComponentMethod: props.baseComponentMethod,
      disableSelect: disableSelect,
      textStyle: textStyle,
      buttonTextWeight: props.buttonTextWeight,
      defaultLeftIcon: props.leftIcon,
      fullLength: fullLength,
      customButtonStyle: "bg-white rounded-lg !px-4 !py-2 !h-10",
      fixedDropDownDirection: props.fixedDropDownDirection,
      marginTop: marginTop,
      customStyle: customStyle,
      customSearchStyle: customSearchStyle,
      showSelectionAsChips: showSelectionAsChips,
      showToolTip: showToolTip,
      showNameAsToolTip: showNameAsToolTip,
      searchable: searchable,
      showBorder: props.showBorder,
      dropDownCustomBtnClick: dropDownCustomBtnClick,
      showCustomBtnAtEnd: showCustomBtnAtEnd,
      customButton: Caml_option.some(customButton),
      descriptionOnHover: descriptionOnHover,
      addDynamicValue: addDynamicValue,
      showMatchingRecordsText: showMatchingRecordsText,
      hasApplyButton: hasApplyButton,
      dropdownCustomWidth: dropdownCustomWidth,
      customMarginStyle: customMarginStyle,
      customButtonLeftIcon: props.customButtonLeftIcon,
      customTextPaddingClass: props.customTextPaddingClass,
      customButtonPaddingClass: props.customButtonPaddingClass,
      customButtonIconMargin: props.customButtonIconMargin,
      buttonStyleOnDropDownOpened: buttonStyleOnDropDownOpened,
      selectedString: match[0],
      setSelectedString: match[1],
      setExtSearchString: setExtSearchString,
      listFlexDirection: listFlexDirection,
      ellipsisOnly: ellipsisOnly,
      isPhoneDropdown: isPhoneDropdown,
      onApply: onApply,
      showAllSelectedOptions: showAllSelectedOptions,
      buttonClickFn: props.buttonClickFn,
      showSelectCountButton: showSelectCountButton,
      maxHeight: maxHeight,
      customBackColor: props.customBackColor,
      showToolTipOptions: showToolTipOptions,
      textEllipsisForDropDownOptions: textEllipsisForDropDownOptions,
      showBtnTextToolTip: showBtnTextToolTip,
      dropdownClassName: dropdownClassName,
      searchInputPlaceHolder: searchInputPlaceHolder,
      showSearchIcon: showSearchIcon,
    });
  } else if (allowMultiSelect) {
    return React.createElement(FilterSelectBox$BaseSelect, {
      showSelectAll: showSelectAll,
      isDropDown: isDropDown,
      options: options,
      optionSize: optionSize,
      isSelectedStateMinus: isSelectedStateMinus,
      onSelect: input.onChange,
      value: input.value,
      onBlur: input.onBlur,
      showClearAll: showClearAll,
      isHorizontal: isHorizontal,
      customLabelStyle: props.customLabelStyle,
      showToggle: showToggle,
      heading: buttonText,
      showSelectionAsChips: showSelectionAsChips,
      maxHeight: maxHeight,
      searchable: searchable,
      optionRigthElement: props.optionRigthElement,
      searchInputPlaceHolder: searchInputPlaceHolder,
      showSearchIcon: showSearchIcon,
      customStyle: customStyle,
      customMargin: customMargin,
      disableSelect: disableSelect,
      hideBorder: hideBorder,
      allSelectType: allSelectType,
      isMobileView: isMobileView,
      customSearchStyle: customSearchStyle,
      hasApplyButton: hasApplyButton,
      dropdownCustomWidth: dropdownCustomWidth,
      customMarginStyle: customMarginStyle,
      listFlexDirection: listFlexDirection,
      onApply: onApply,
      showAllSelectedOptions: showAllSelectedOptions,
      showDescriptionAsTool: showDescriptionAsTool,
      optionClass: optionClass,
      selectClass: selectClass,
      toggleProps: toggleProps,
      customSelectAllStyle: props.customSelectAllStyle,
      checkboxDimension: checkboxDimension,
      dropdownClassName: dropdownClassName,
      onItemSelect: onItemSelect,
      wrapBasis: wrapBasis,
    });
  } else {
    return React.createElement(FilterSelectBox$BaseRadio, {
      isDropDown: isDropDown,
      isHorizontal: isHorizontal,
      options: options,
      optionSize: optionSize,
      isSelectedStateMinus: isSelectedStateMinus,
      onSelect: input.onChange,
      value: input.value,
      deselectDisable: deselectDisable,
      onBlur: input.onBlur,
      fill: fill,
      customStyle: customStyle,
      searchable: searchable,
      isMobileView: isMobileView,
      customSearchStyle: customSearchStyle,
      descriptionOnHover: descriptionOnHover,
      listFlexDirection: listFlexDirection,
      baseComponentCustomStyle: baseComponentCustomStyle,
      customSelectStyle: customSelectStyle,
      maxHeight: maxHeight,
      searchInputPlaceHolder: searchInputPlaceHolder,
      showSearchIcon: showSearchIcon,
      showToolTipOptions: showToolTipOptions,
    });
  }
}

var make = FilterSelectBox;

export {
  regex,
  ListItem,
  makeNonOptional,
  useTransformed,
  makeOptions,
  BaseSelect,
  BaseSelectButton,
  RenderListItemInBaseRadio,
  getHashMappedOptionValues,
  getSortedKeys,
  BaseRadio,
  InfraSelectBox,
  BaseDropdown,
  ChipFilterSelectBox,
  make,
};
/* Icon Not a pure module */
