type sortTyp = ASC | DSC
type sortOb = {sortKey: string, sortType: sortTyp}
type checkBoxProps = {
  showCheckBox: bool,
  selectedData: array<JSON.t>,
  setSelectedData: (array<JSON.t> => array<JSON.t>) => unit,
}
let checkBoxPropDefaultVal: checkBoxProps
let sortAtom: Recoil.recoilAtom<RescriptCore.Dict.t<sortOb>>
let backgroundClass: string
let useSortedObj: (
  string,
  option<Table.sortedObject>,
) => (
  option<Table.sortedObject>,
  (option<Table.sortedObject> => option<Table.sortedObject>) => unit,
)
let sortArray: (array<'a>, string, Table.sortOrder) => array<'a>
type pageDetails = {offset: int, resultsPerPage: int}
let table_pageDetails: Recoil.recoilAtom<RescriptCore.Dict.t<pageDetails>>
@react.component
let make: (
  ~visibleColumns: array<'a>=?,
  ~defaultSort: Table.sortedObject=?,
  ~title: string,
  ~titleSize: NewThemeUtils.headingSize=?,
  ~description: string=?,
  ~tableActions: React.element=?,
  ~isTableActionBesideFilters: bool=?,
  ~hideFilterTopPortals: bool=?,
  ~rightTitleElement: React.element=?,
  ~clearFormattedDataButton: React.element=?,
  ~bottomActions: React.element=?,
  ~showSerialNumber: bool=?,
  ~actualData: array<Nullable.t<'b>>,
  ~totalResults: int,
  ~resultsPerPage: int,
  ~offset: int,
  ~setOffset: ('c => int) => unit,
  ~handleRefetch: unit => unit=?,
  ~entity: EntityType.entityType<'a, 'b>,
  ~onEntityClick: 'b => unit=?,
  ~onEntityDoubleClick: 'b => unit=?,
  ~onExpandClickData: 'd=?,
  ~currrentFetchCount: int,
  ~filters: React.element=?,
  ~showFilterBorder: bool=?,
  ~headBottomMargin: string=?,
  ~removeVerticalLines: bool=?,
  ~removeHorizontalLines: bool=?,
  ~evenVertivalLines: bool=?,
  ~showPagination: bool=?,
  ~downloadCsv: React.element=?,
  ~ignoreUrlUpdate: bool=?,
  ~hideTitle: bool=?,
  ~ignoreHeaderBg: bool=?,
  ~tableDataLoading: bool=?,
  ~dataLoading: bool=?,
  ~advancedSearchComponent: React.element=?,
  ~setData: ('e => option<array<Nullable.t<'b>>>) => unit=?,
  ~setSummary: ('f => EntityType.summary) => unit=?,
  ~customGetObjects: JSON.t => array<'g>=?,
  ~dataNotFoundComponent: React.element=?,
  ~renderCard: (~index: int, ~item: 'b, ~onRowClick: React.callback<int, unit>) => React.element=?,
  ~tableLocalFilter: bool=?,
  ~tableheadingClass: string=?,
  ~tableBorderClass: string=?,
  ~tableDataBorderClass: string=?,
  ~collapseTableRow: bool=?,
  ~getRowDetails: Nullable.t<'b> => React.element=?,
  ~onMouseEnter: 'b => unit=?,
  ~onMouseLeave: 'b => unit=?,
  ~frozenUpto: int=?,
  ~heightHeadingClass: string=?,
  ~highlightText: string=?,
  ~enableEqualWidthCol: bool=?,
  ~clearFormatting: bool=?,
  ~rowHeightClass: string=?,
  ~allowNullableRows: bool=?,
  ~titleTooltip: bool=?,
  ~isAnalyticsModule: bool=?,
  ~rowCustomClass: string=?,
  ~isHighchartLegend: bool=?,
  ~filterObj: array<Table.filterObject>=?,
  ~setFilterObj: (array<Table.filterObject> => array<Table.filterObject>) => unit=?,
  ~headingCenter: bool=?,
  ~filterIcon: React.element=?,
  ~filterDropdownClass: string=?,
  ~maxTableHeight: string=?,
  ~showTableOnMobileView: bool=?,
  ~labelMargin: string=?,
  ~customFilterRowStyle: string=?,
  ~noDataMsg: string=?,
  ~tableActionBorder: string=?,
  ~isEllipsisTextRelative: bool=?,
  ~customMoneyStyle: string=?,
  ~ellipseClass: string=?,
  ~checkBoxProps: checkBoxProps=?,
  ~selectedRowColor: string=?,
  ~paginationClass: string=?,
  ~lastHeadingClass: string=?,
  ~lastColClass: string=?,
  ~fixLastCol: bool=?,
  ~headerCustomBgColor: string=?,
  ~alignCellContent: string=?,
  ~minTableHeightClass: string=?,
  ~setExtFilteredDataLength: ('h => int) => unit=?,
  ~filterDropdownMaxHeight: string=?,
  ~showResultsPerPageSelector: bool=?,
  ~customCellColor: string=?,
  ~defaultResultsPerPage: bool=?,
  ~noScrollbar: bool=?,
  ~tableDataBackgroundClass: string=?,
  ~customBorderClass: string=?,
  ~showborderColor: bool=?,
  ~tableHeadingTextClass: string=?,
) => React.element
