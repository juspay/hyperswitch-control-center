// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import Dayjs from "dayjs";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as TimeInput from "./TimeInput.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as BottomModal from "./BottomModal.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CalendarList from "./CalendarList.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as OutsideClick from "../hooks/OutsideClick.bs.js";
import * as TimeZoneHook from "../hooks/TimeZoneHook.bs.js";
import * as FormErrorIcon from "./custom-icons/FormErrorIcon.bs.js";
import * as DateRangeUtils from "../utils/DateRangeUtils.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as TableFilterSectionContext from "../context/TableFilterSectionContext.bs.js";

function defaultCellHighlighter(param) {
  return {
    highlightSelf: false,
    highlightLeft: false,
    highlightRight: false,
  };
}

function useErroryValueResetter(value, setValue) {
  React.useEffect(function () {
    var isErroryTimeValue = function (param) {
      try {
        return false;
      } catch (_error) {
        return true;
      }
    };
    if (isErroryTimeValue(value)) {
      setValue(function (param) {
        return "";
      });
    }
  }, []);
}

function getDateStringForValue(value, isoStringToCustomTimeZone) {
  if (LogicUtils.isEmptyString(value)) {
    return "";
  }
  try {
    var check = TimeZoneHook.formattedISOString(
      value,
      "YYYY-MM-DDTHH:mm:ss.SSS[Z]",
    );
    var match = isoStringToCustomTimeZone(check);
    return match.year + "-" + match.month + "-" + match.date;
  } catch (_error) {
    return "";
  }
}

function getTimeStringForValue(value, isoStringToCustomTimeZone) {
  if (LogicUtils.isEmptyString(value)) {
    return "";
  }
  try {
    var check = TimeZoneHook.formattedISOString(
      value,
      "YYYY-MM-DDTHH:mm:ss.SSS[Z]",
    );
    var match = isoStringToCustomTimeZone(check);
    return match.hour + ":" + match.minute + ":" + match.second;
  } catch (_error) {
    return "";
  }
}

function getFormattedDate(date, format) {
  return TimeZoneHook.formattedISOString(new Date(date).toISOString(), format);
}

function isStartBeforeEndDate(start, end) {
  var getDate = function (date) {
    return new Date(
      Number(Core__Option.getOr(date[0], "")),
      Number(String(Number(Core__Option.getOr(date[1], "")) - 1.0)),
      Number(Core__Option.getOr(date[2], "")),
    );
  };
  var startDate = getDate(start.split("-"));
  var endDate = getDate(end.split("-"));
  return Caml_obj.lessthan(startDate, endDate);
}

function getStartEndDiff(startDate, endDate) {
  return Math.abs(new Date(endDate).getTime() - new Date(startDate).getTime());
}

function DateRangePicker$PredefinedOption(props) {
  var __isTooltipVisible = props.isTooltipVisible;
  var formatDateTime = props.formatDateTime;
  var disableFutureDates = props.disableFutureDates;
  var onClick = props.onClick;
  var value = props.value;
  var isTooltipVisible =
    __isTooltipVisible !== undefined ? __isTooltipVisible : true;
  var optionBG =
    props.predefinedOptionSelected === value
      ? "bg-blue-100 dark:bg-jp-gray-850 py-2"
      : "bg-transparent md:bg-white md:dark:bg-jp-gray-lightgray_background py-2";
  var match = DateRangeUtils.getPredefinedStartAndEndDate(
    props.todayDayJsObj,
    props.isoStringToCustomTimeZone,
    props.isoStringToCustomTimezoneInFloat,
    props.customTimezoneToISOString,
    value,
    disableFutureDates,
    props.disablePastDates,
    props.todayDate,
    props.todayTime,
  );
  var startDate = getFormattedDate(
    match[0] + "T" + match[2] + "Z",
    formatDateTime,
  );
  var endDate = getFormattedDate(
    match[1] + "T" + match[3] + "Z",
    formatDateTime,
  );
  var handleClick = function (_value) {
    onClick(value, disableFutureDates);
  };
  var dateRangeDropdownVal = DateRangeUtils.datetext(value, disableFutureDates);
  return React.createElement(ToolTip.make, {
    description: isTooltipVisible ? startDate + " - " + endDate : "",
    toolTipFor: Caml_option.some(
      React.createElement(AddDataAttributes.make, {
        attributes: [["data-daterange-dropdown-value", dateRangeDropdownVal]],
        children: React.createElement(
          "div",
          undefined,
          React.createElement(
            "div",
            {
              className:
                optionBG +
                " px-4 py-2 hover:bg-jp-gray-100 hover:bg-opacity-75 dark:hover:bg-jp-gray-850 dark:hover:bg-opacity-100  cursor-pointer text-sm text-gray-500 dark:text-gray-400",
              onClick: handleClick,
            },
            dateRangeDropdownVal,
          ),
        ),
      }),
    ),
    tooltipWidthClass: "w-fit",
    tooltipForWidthClass: "!block w-full",
    toolTipPosition: "Right",
    contentAlign: "Left",
  });
}

var PredefinedOption = {
  make: DateRangePicker$PredefinedOption,
};

function DateRangePicker$Base(props) {
  var __isTooltipVisible = props.isTooltipVisible;
  var __customborderCSS = props.customborderCSS;
  var __removeConversion = props.removeConversion;
  var __standardTimeToday = props.standardTimeToday;
  var __buttonText = props.buttonText;
  var __selectStandardTime = props.selectStandardTime;
  var __hideDate = props.hideDate;
  var __showSeconds = props.showSeconds;
  var __textHideInMobileView = props.textHideInMobileView;
  var dateRangeLimit = props.dateRangeLimit;
  var __removeFilterOption = props.removeFilterOption;
  var __disableApply = props.disableApply;
  var __numMonths = props.numMonths;
  var __format = props.format;
  var __predefinedDays = props.predefinedDays;
  var __disableFutureDates = props.disableFutureDates;
  var __disablePastDates = props.disablePastDates;
  var __disable = props.disable;
  var __showTime = props.showTime;
  var setEndDateVal = props.setEndDateVal;
  var endDateVal = props.endDateVal;
  var setStartDateVal = props.setStartDateVal;
  var startDateVal = props.startDateVal;
  var showTime = __showTime !== undefined ? __showTime : false;
  var disable = __disable !== undefined ? __disable : false;
  var disablePastDates =
    __disablePastDates !== undefined ? __disablePastDates : true;
  var disableFutureDates =
    __disableFutureDates !== undefined ? __disableFutureDates : false;
  var predefinedDays = __predefinedDays !== undefined ? __predefinedDays : [];
  var format = __format !== undefined ? __format : "YYYY-MM-DDTHH:mm:ss.SSS[Z]";
  var numMonths = __numMonths !== undefined ? __numMonths : 1;
  var disableApply = __disableApply !== undefined ? __disableApply : true;
  var removeFilterOption =
    __removeFilterOption !== undefined ? __removeFilterOption : false;
  var textHideInMobileView =
    __textHideInMobileView !== undefined ? __textHideInMobileView : true;
  var showSeconds = __showSeconds !== undefined ? __showSeconds : true;
  var hideDate = __hideDate !== undefined ? __hideDate : false;
  var selectStandardTime =
    __selectStandardTime !== undefined ? __selectStandardTime : false;
  var buttonText = __buttonText !== undefined ? __buttonText : "";
  var standardTimeToday =
    __standardTimeToday !== undefined ? __standardTimeToday : false;
  var removeConversion =
    __removeConversion !== undefined ? __removeConversion : false;
  var customborderCSS =
    __customborderCSS !== undefined ? __customborderCSS : "";
  var isTooltipVisible =
    __isTooltipVisible !== undefined ? __isTooltipVisible : true;
  var match = React.useState(function () {
    return predefinedDays.length === 0;
  });
  var setIsCustomSelected = match[1];
  var isCustomSelected = match[0];
  var formatDateTime = showSeconds
    ? "MMM DD, YYYY HH:mm:ss"
    : "MMM DD, YYYY HH:mm";
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowOption = match$1[1];
  var customTimezoneToISOString = TimeZoneHook.useCustomTimeZoneToIsoString();
  var isoStringToCustomTimeZone = TimeZoneHook.useIsoStringToCustomTimeZone();
  var isoStringToCustomTimezoneInFloat =
    TimeZoneHook.useIsoStringToCustomTimeZoneInFloat();
  var match$2 = React.useState(function () {
    return [];
  });
  var setClickedDates = match$2[1];
  var clickedDates = match$2[0];
  var match$3 = React.useState(function () {
    return startDateVal;
  });
  var setLocalStartDate = match$3[1];
  var localStartDate = match$3[0];
  var match$4 = React.useState(function () {
    return endDateVal;
  });
  var setLocalEndDate = match$4[1];
  var localEndDate = match$4[0];
  var match$5 = React.useState(function () {
    return "";
  });
  var setLocalOpt = match$5[1];
  var match$6 = React.useState(function () {
    return false;
  });
  var setShowMsg = match$6[1];
  var match$7 = React.useState(function () {
    return false;
  });
  var setIsDropdownExpanded = match$7[1];
  var isDropdownExpanded = match$7[0];
  var match$8 = React.useState(function () {
    return false;
  });
  var setCalendarVisibility = match$8[1];
  var calendarVisibility = match$8[0];
  var isMobileView = MatchMedia.useMobileChecker();
  var isFilterSection = React.useContext(
    TableFilterSectionContext.filterSectionContext,
  );
  var dropdownPosition =
    isFilterSection && !isMobileView && isCustomSelected ? "right-0" : "";
  var todayDayJsObj = React.useMemo(
    function () {
      return Dayjs(new Date().toString());
    },
    [isDropdownExpanded],
  );
  var currentTime = todayDayJsObj.format("HH:mm");
  var todayDate = todayDayJsObj.format("YYYY-MM-DD");
  var todayTime = React.useMemo(
    function () {
      return todayDayJsObj.format("HH:mm:ss");
    },
    [currentTime],
  );
  var initialStartTime =
    disableFutureDates || selectStandardTime ? "00:00:00" : "23:59:59";
  var initialEndTime =
    disableFutureDates || selectStandardTime ? "23:59:59" : "00:00:00";
  React.useEffect(
    function () {
      setLocalStartDate(function (param) {
        return startDateVal;
      });
      setLocalEndDate(function (param) {
        return endDateVal;
      });
      setLocalOpt(function (param) {
        return "";
      });
    },
    [startDateVal, endDateVal],
  );
  var resetStartEndInput = function () {
    setLocalStartDate(function (param) {
      return "";
    });
    setLocalEndDate(function (param) {
      return "";
    });
    setLocalOpt(function (param) {
      return "";
    });
  };
  React.useEffect(
    function () {
      if (dateRangeLimit !== undefined) {
        var diff = getStartEndDiff(localStartDate, localEndDate);
        if (diff > (dateRangeLimit * 24 * 60 * 60 - 1) * 1000) {
          setShowMsg(function (param) {
            return true;
          });
          resetStartEndInput();
        }
      }
    },
    [localStartDate, localEndDate],
  );
  var dateRangeRef = React.useRef(null);
  var dropdownRef = React.useRef(null);
  useErroryValueResetter(startDateVal, setStartDateVal);
  useErroryValueResetter(endDateVal, setEndDateVal);
  var startDate = getDateStringForValue(
    localStartDate,
    isoStringToCustomTimeZone,
  );
  var endDate = getDateStringForValue(localEndDate, isoStringToCustomTimeZone);
  var isDropdownExpandedActual = isDropdownExpanded && calendarVisibility;
  var dropdownVisibilityClass = isDropdownExpandedActual
    ? "inline-block"
    : "hidden";
  var saveDates = function () {
    if (
      LogicUtils.isNonEmptyString(localStartDate) &&
      LogicUtils.isNonEmptyString(localEndDate)
    ) {
      setStartDateVal(function (param) {
        return localStartDate;
      });
      return setEndDateVal(function (param) {
        return localEndDate;
      });
    }
  };
  var resetToInitalValues = function () {
    setLocalStartDate(function (param) {
      return startDateVal;
    });
    setLocalEndDate(function (param) {
      return endDateVal;
    });
    setLocalOpt(function (param) {
      return "";
    });
  };
  OutsideClick.useOutsideClick(
    {
      TAG: "ArrayOfRef",
      _0: [dateRangeRef, dropdownRef],
    },
    undefined,
    isDropdownExpanded || calendarVisibility,
    undefined,
    function () {
      setIsDropdownExpanded(function (param) {
        return false;
      });
      setCalendarVisibility(function (p) {
        return !p;
      });
      if (isDropdownExpandedActual && isCustomSelected) {
        return resetToInitalValues();
      }
    },
    undefined,
  );
  var changeEndDate = function (ele, isFromCustomInput, time) {
    if (disableApply) {
      setIsDropdownExpanded(function (param) {
        return false;
      });
    }
    if (localEndDate === ele && isFromCustomInput) {
      return setEndDateVal(function (param) {
        return "";
      });
    }
    var endDateSplit = ele.split("-");
    var endDateDate = Core__Option.getOr(endDateSplit[2], "");
    var endDateYear = Core__Option.getOr(endDateSplit[0], "");
    var endDateMonth = Core__Option.getOr(endDateSplit[1], "");
    var splitTime =
      time !== undefined
        ? time
        : disableFutureDates && ele === todayDate
          ? todayTime
          : initialEndTime;
    var timeSplit = splitTime.split(":");
    var timeHour = Core__Option.getOr(timeSplit[0], "00");
    var timeMinute = Core__Option.getOr(timeSplit[1], "00");
    var timeSecond = Core__Option.getOr(timeSplit[2], "00");
    var endDateTimeCheck = customTimezoneToISOString(
      endDateYear,
      endDateMonth,
      endDateDate,
      timeHour,
      timeMinute,
      timeSecond,
    );
    setLocalEndDate(function (param) {
      return TimeZoneHook.formattedISOString(endDateTimeCheck, format);
    });
  };
  var changeStartDate = function (ele, isFromCustomInput, time) {
    var setDate = function (str) {
      var startDateSplit = str.split("-");
      var startDateDay = Core__Option.getOr(startDateSplit[2], "");
      var startDateYear = Core__Option.getOr(startDateSplit[0], "");
      var startDateMonth = Core__Option.getOr(startDateSplit[1], "");
      var splitTime =
        time !== undefined
          ? time
          : !disableFutureDates && ele === todayDate && !standardTimeToday
            ? todayTime
            : initialStartTime;
      var timeSplit = splitTime.split(":");
      var timeHour = Core__Option.getOr(timeSplit[0], "00");
      var timeMinute = Core__Option.getOr(timeSplit[1], "00");
      var timeSecond = Core__Option.getOr(timeSplit[2], "00");
      var startDateTimeCheck = customTimezoneToISOString(
        startDateYear,
        startDateMonth,
        startDateDay,
        timeHour,
        timeMinute,
        timeSecond,
      );
      setLocalStartDate(function (param) {
        return TimeZoneHook.formattedISOString(startDateTimeCheck, format);
      });
    };
    var resetStartDate = function () {
      resetStartEndInput();
      setDate(ele);
    };
    if (
      LogicUtils.isNonEmptyString(startDate) &&
      startDate === ele &&
      isFromCustomInput
    ) {
      changeEndDate(ele, isFromCustomInput, undefined);
    } else if (
      (LogicUtils.isNonEmptyString(startDate) &&
        startDate > ele &&
        isFromCustomInput) ||
      (LogicUtils.isNonEmptyString(endDate) &&
        startDate === ele &&
        isFromCustomInput) ||
      (ele > startDate &&
        ele < endDate &&
        LogicUtils.isNonEmptyString(startDate) &&
        LogicUtils.isNonEmptyString(endDate) &&
        isFromCustomInput) ||
      (LogicUtils.isNonEmptyString(startDate) &&
        LogicUtils.isNonEmptyString(endDate) &&
        ele > endDate &&
        isFromCustomInput)
    ) {
      resetStartDate();
    }
    if (!isFromCustomInput || LogicUtils.isEmptyString(startDate)) {
      setDate(ele);
    }
    if (
      (LogicUtils.isNonEmptyString(startDate) &&
        LogicUtils.isEmptyString(endDate) &&
        !isFromCustomInput) ||
      (LogicUtils.isNonEmptyString(startDate) &&
        LogicUtils.isEmptyString(endDate) &&
        isStartBeforeEndDate(startDate, ele) &&
        isFromCustomInput)
    ) {
      return changeEndDate(ele, isFromCustomInput, undefined);
    }
  };
  var onDateClick = function (str) {
    var _d = clickedDates.find(function (x) {
      return x === str;
    });
    var data =
      _d !== undefined
        ? Belt_Array.keep(clickedDates, function (x) {
            return x !== str;
          })
        : clickedDates.concat([str]);
    var dat = data.map(function (x) {
      return x;
    });
    setClickedDates(function (param) {
      return dat;
    });
    changeStartDate(str, true, undefined);
  };
  var handleApply = function (_ev) {
    setShowOption(function (param) {
      return false;
    });
    setCalendarVisibility(function (p) {
      return !p;
    });
    setIsDropdownExpanded(function (param) {
      return false;
    });
    saveDates();
  };
  var cancelButton = function (param) {
    resetToInitalValues();
    setCalendarVisibility(function (p) {
      return !p;
    });
    setIsDropdownExpanded(function (param) {
      return false;
    });
  };
  var selectedStartDate = LogicUtils.isNonEmptyString(localStartDate)
    ? getFormattedDate(
        getDateStringForValue(localStartDate, isoStringToCustomTimeZone),
        "YYYY-MM-DD",
      )
    : "";
  var selectedEndDate = LogicUtils.isNonEmptyString(localEndDate)
    ? getFormattedDate(
        getDateStringForValue(localEndDate, isoStringToCustomTimeZone),
        "YYYY-MM-DD",
      )
    : "";
  var setStartDate = function (date, time) {
    if (!LogicUtils.isNonEmptyString(date)) {
      return;
    }
    var timestamp = DateRangeUtils.changeTimeFormat(
      customTimezoneToISOString,
      date,
      time,
      format,
    );
    setLocalStartDate(function (param) {
      return timestamp;
    });
  };
  var setEndDate = function (date, time) {
    if (!LogicUtils.isNonEmptyString(date)) {
      return;
    }
    var timestamp = DateRangeUtils.changeTimeFormat(
      customTimezoneToISOString,
      date,
      time,
      format,
    );
    setLocalEndDate(function (param) {
      return timestamp;
    });
  };
  var startTimeInput_onBlur = function (_ev) {};
  var startTimeInput_onChange = function (timeValEv) {
    var endTime = getTimeStringForValue(
      localEndDate,
      isoStringToCustomTimeZone,
    );
    if (LogicUtils.isNonEmptyString(localStartDate)) {
      if (
        disableFutureDates &&
        selectedStartDate === todayDate &&
        timeValEv > todayTime
      ) {
        return setStartDate(startDate, todayTime);
      } else if (
        disableFutureDates &&
        selectedStartDate === selectedEndDate &&
        timeValEv > endTime
      ) {
        return;
      } else {
        return setStartDate(startDate, timeValEv);
      }
    }
  };
  var startTimeInput_onFocus = function (_ev) {};
  var startTimeInput_value = getTimeStringForValue(
    localStartDate,
    isoStringToCustomTimeZone,
  );
  var startTimeInput = {
    name: "string",
    onBlur: startTimeInput_onBlur,
    onChange: startTimeInput_onChange,
    onFocus: startTimeInput_onFocus,
    value: startTimeInput_value,
    checked: false,
  };
  var endTimeInput_onBlur = function (_ev) {};
  var endTimeInput_onChange = function (timeValEv) {
    var startTime = getTimeStringForValue(
      localStartDate,
      isoStringToCustomTimeZone,
    );
    if (LogicUtils.isNonEmptyString(localEndDate)) {
      if (
        disableFutureDates &&
        selectedEndDate === todayDate &&
        timeValEv > todayTime
      ) {
        return setEndDate(startDate, todayTime);
      } else if (
        disableFutureDates &&
        selectedStartDate === selectedEndDate &&
        timeValEv < startTime
      ) {
        return;
      } else {
        return setEndDate(endDate, timeValEv);
      }
    }
  };
  var endTimeInput_onFocus = function (_ev) {};
  var endTimeInput_value = getTimeStringForValue(
    localEndDate,
    isoStringToCustomTimeZone,
  );
  var endTimeInput = {
    name: "string",
    onBlur: endTimeInput_onBlur,
    onChange: endTimeInput_onChange,
    onFocus: endTimeInput_onFocus,
    value: endTimeInput_value,
    checked: false,
  };
  var startDateStr = LogicUtils.isNonEmptyString(startDateVal)
    ? getFormattedDate(
        getDateStringForValue(startDateVal, isoStringToCustomTimeZone),
        "MMM DD, YYYY",
      )
    : LogicUtils.isNonEmptyString(buttonText)
      ? buttonText
      : "[From-Date]";
  var endDateStr = LogicUtils.isNonEmptyString(endDateVal)
    ? getFormattedDate(
        getDateStringForValue(endDateVal, isoStringToCustomTimeZone),
        "MMM DD, YYYY",
      )
    : LogicUtils.isNonEmptyString(buttonText)
      ? ""
      : "[To-Date]";
  var startTimeStr = LogicUtils.isNonEmptyString(startDateVal)
    ? getTimeStringForValue(startDateVal, isoStringToCustomTimeZone)
    : "00:00:00";
  var endTimeStr = LogicUtils.isNonEmptyString(startDateVal)
    ? getTimeStringForValue(endDateVal, isoStringToCustomTimeZone)
    : "23:59:59";
  var timeArr = endTimeStr.split(":");
  var endTimeTxt =
    Core__Option.getOr(timeArr[0], "00") +
    ":" +
    Core__Option.getOr(timeArr[1], "00");
  var endTimeStr$1 = showSeconds
    ? endTimeTxt + ":" + Core__Option.getOr(timeArr[2], "00")
    : endTimeTxt;
  var timeArr$1 = startTimeStr.split(":");
  var startTimeTxt =
    Core__Option.getOr(timeArr$1[0], "00") +
    ":" +
    Core__Option.getOr(timeArr$1[1], "00");
  var startTimeStr$1 = showSeconds
    ? startTimeTxt + ":" + Core__Option.getOr(timeArr$1[2], "00")
    : startTimeTxt;
  var buttonText$1 =
    LogicUtils.isEmptyString(startDateVal) &&
    LogicUtils.isEmptyString(endDateVal)
      ? "Select Date " + (showTime ? "and Time" : "")
      : showTime
        ? startDateStr +
          " " +
          startTimeStr$1 +
          " - " +
          endDateStr +
          " " +
          endTimeStr$1
        : startDateStr +
          " " +
          (startDateStr === buttonText ? "" : "-") +
          " " +
          endDateStr;
  var buttonIcon = isDropdownExpanded ? "angle-up" : "angle-down";
  var handlePredefinedOptionClick = function (value, disableFutureDates) {
    setIsCustomSelected(function (param) {
      return false;
    });
    setCalendarVisibility(function (param) {
      return false;
    });
    setIsDropdownExpanded(function (param) {
      return false;
    });
    setShowOption(function (param) {
      return false;
    });
    var match = DateRangeUtils.getPredefinedStartAndEndDate(
      todayDayJsObj,
      isoStringToCustomTimeZone,
      isoStringToCustomTimezoneInFloat,
      customTimezoneToISOString,
      value,
      disableFutureDates,
      disablePastDates,
      todayDate,
      todayTime,
    );
    var enTime = match[3];
    var stTime = match[2];
    resetStartEndInput();
    setStartDate(startDate, stTime);
    setEndDate(endDate, enTime);
    setLocalOpt(function (param) {
      return DateRangeUtils.datetext(value, disableFutureDates)
        .toLowerCase()
        .split(" ")
        .join("_");
    });
    changeStartDate(match[0], false, stTime);
    changeEndDate(match[1], false, enTime);
  };
  var handleDropdownClick = function () {
    if (predefinedDays.length > 0) {
      if (calendarVisibility) {
        setCalendarVisibility(function (param) {
          return false;
        });
        setShowOption(function (param) {
          return !isDropdownExpanded;
        });
        setIsDropdownExpanded(function (param) {
          return !isDropdownExpanded;
        });
        return setShowOption(function (param) {
          return !isCustomSelected;
        });
      } else {
        setIsDropdownExpanded(function (param) {
          return true;
        });
        setShowOption(function (param) {
          return true;
        });
        return setCalendarVisibility(function (param) {
          return true;
        });
      }
    } else {
      setIsDropdownExpanded(function (_p) {
        return !isDropdownExpanded;
      });
      return setCalendarVisibility(function (param) {
        return !isDropdownExpanded;
      });
    }
  };
  var displayStartDate = DateRangeUtils.convertTimeStamp(
    isoStringToCustomTimeZone,
    localStartDate,
    formatDateTime,
  );
  var modifiedStartDate = removeConversion
    ? Dayjs(displayStartDate)
        .subtract(330, "minute")
        .format("YYYY-MM-DDTHH:mm:ss[Z]")
    : displayStartDate;
  var displayEndDate = DateRangeUtils.convertTimeStamp(
    isoStringToCustomTimeZone,
    localEndDate,
    formatDateTime,
  );
  var modifiedEndDate = removeConversion
    ? Dayjs(displayEndDate)
        .subtract(330, "minute")
        .format("YYYY-MM-DDTHH:mm:ss[Z]")
    : displayEndDate;
  React.useEffect(
    function () {
      if (
        LogicUtils.isNonEmptyString(startDate) &&
        LogicUtils.isNonEmptyString(endDate)
      ) {
        if (
          LogicUtils.isNonEmptyString(localStartDate) &&
          LogicUtils.isNonEmptyString(localEndDate) &&
          (disableApply || !isCustomSelected)
        ) {
          saveDates();
        }
        if (disableApply) {
          setShowOption(function (param) {
            return false;
          });
        }
      }
    },
    [startDate, endDate, localStartDate, localEndDate],
  );
  var btnStyle = Core__Option.getOr(props.customButtonStyle, "");
  var customStyleForBtn = LogicUtils.isNonEmptyString(btnStyle) ? btnStyle : "";
  var timeVisibilityClass = showTime ? "block" : "hidden";
  var getDiffForPredefined = function (predefinedDay) {
    var match = DateRangeUtils.getPredefinedStartAndEndDate(
      todayDayJsObj,
      isoStringToCustomTimeZone,
      isoStringToCustomTimezoneInFloat,
      customTimezoneToISOString,
      predefinedDay,
      disableFutureDates,
      disablePastDates,
      todayDate,
      todayTime,
    );
    var startTimestamp = DateRangeUtils.changeTimeFormat(
      customTimezoneToISOString,
      match[0],
      match[2],
      "YYYY-MM-DDTHH:mm:00[Z]",
    );
    var endTimestamp = DateRangeUtils.changeTimeFormat(
      customTimezoneToISOString,
      match[1],
      match[3],
      "YYYY-MM-DDTHH:mm:00[Z]",
    );
    return getStartEndDiff(startTimestamp, endTimestamp);
  };
  var predefinedOptionSelected = predefinedDays.find(function (item) {
    var startDate = DateRangeUtils.convertTimeStamp(
      isoStringToCustomTimeZone,
      startDateVal,
      "YYYY-MM-DDTHH:mm:00[Z]",
    );
    var endDate = DateRangeUtils.convertTimeStamp(
      isoStringToCustomTimeZone,
      endDateVal,
      "YYYY-MM-DDTHH:mm:00[Z]",
    );
    var difference = getStartEndDiff(startDate, endDate);
    return getDiffForPredefined(item) === difference;
  });
  var filteredPredefinedDays =
    dateRangeLimit !== undefined
      ? predefinedDays.filter(function (item) {
          return (
            getDiffForPredefined(item) <=
            (dateRangeLimit * 24 * 60 * 60 - 1) * 1000
          );
        })
      : predefinedDays;
  var customeRangeBg =
    predefinedOptionSelected !== undefined
      ? "bg-white dark:bg-jp-gray-lightgray_background"
      : "bg-jp-gray-100 dark:bg-jp-gray-850";
  var removeApplyFilter = function (ev) {
    ev.stopPropagation();
    resetToInitalValues();
    setStartDateVal(function (param) {
      return "";
    });
    setEndDateVal(function (param) {
      return "";
    });
  };
  var strokeColor = disable
    ? "stroke-jp-2-light-gray-600"
    : isDropdownExpandedActual
      ? "stroke-jp-2-light-gray-1700"
      : "stroke-jp-2-light-gray-1100";
  var iconElement = React.createElement(
    "div",
    {
      className: "flex flex-row gap-2",
    },
    React.createElement(Icon.make, {
      name: buttonIcon,
      size: 14,
      className: strokeColor,
    }),
    removeFilterOption &&
      LogicUtils.isNonEmptyString(startDateVal) &&
      LogicUtils.isNonEmptyString(endDateVal)
      ? React.createElement(Icon.make, {
          name: "crossicon",
          size: 16,
          onClick: removeApplyFilter,
        })
      : null,
  );
  var tmp;
  if (disableApply) {
    tmp = null;
  } else {
    var tmp$1;
    if (
      LogicUtils.isNonEmptyString(displayStartDate) &&
      LogicUtils.isNonEmptyString(displayEndDate) &&
      !disableApply &&
      !hideDate
    ) {
      tmp$1 = React.createElement(
        "div",
        {
          className: "flex flex-col",
        },
        React.createElement(AddDataAttributes.make, {
          attributes: [["data-date-range-start", displayStartDate]],
          children: React.createElement("div", undefined, modifiedStartDate),
        }),
        React.createElement(AddDataAttributes.make, {
          attributes: [["data-date-range-end", displayEndDate]],
          children: React.createElement("div", undefined, modifiedEndDate),
        }),
      );
    } else if (match$6[0]) {
      var msg =
        "Date Range should not exceed " +
        Core__Option.getOr(dateRangeLimit, 0).toString() +
        " days";
      tmp$1 = React.createElement(
        "span",
        {
          className: "w-full flex flex-row items-center mr-0 text-red-500",
        },
        React.createElement(FormErrorIcon.make, {}),
        msg,
      );
    } else {
      tmp$1 = null;
    }
    tmp = React.createElement(
      "div",
      {
        className:
          "flex flex-row flex-wrap gap-4 bg-white dark:bg-jp-gray-lightgray_background p-3 align-center justify-end ",
        id: "neglectTopbarTheme",
      },
      React.createElement(
        "div",
        {
          className:
            "text-gray-700 font-fira-code dark:text-gray-400 flex-wrap font-medium self-center text-sm",
        },
        tmp$1,
      ),
      React.createElement(Button.make, {
        buttonState: "Normal",
        text: "Cancel",
        buttonType: "Secondary",
        buttonSize: "Small",
        onClick: cancelButton,
      }),
      React.createElement(Button.make, {
        buttonState: LogicUtils.isEmptyString(endDate) ? "Disabled" : "Normal",
        text: "Apply",
        buttonType: "Primary",
        buttonSize: "Small",
        onClick: handleApply,
      }),
    );
  }
  var calendarElement = React.createElement(
    "div",
    {
      className: "flex md:flex-row flex-col w-full",
    },
    predefinedDays.length > 0 && match$1[0]
      ? React.createElement(AddDataAttributes.make, {
          attributes: [["data-date-picker-predifined", "predefined-options"]],
          children: React.createElement(
            "div",
            {
              className: "flex flex-wrap md:flex-col",
            },
            filteredPredefinedDays.map(function (value, i) {
              return React.createElement(
                "div",
                {
                  key: i.toString(),
                  className:
                    "w-1/3 md:w-full md:min-w-max text-center md:text-start",
                },
                React.createElement(DateRangePicker$PredefinedOption, {
                  predefinedOptionSelected: predefinedOptionSelected,
                  value: value,
                  onClick: handlePredefinedOptionClick,
                  disableFutureDates: disableFutureDates,
                  disablePastDates: disablePastDates,
                  todayDayJsObj: todayDayJsObj,
                  isoStringToCustomTimeZone: isoStringToCustomTimeZone,
                  isoStringToCustomTimezoneInFloat:
                    isoStringToCustomTimezoneInFloat,
                  customTimezoneToISOString: customTimezoneToISOString,
                  todayDate: todayDate,
                  todayTime: todayTime,
                  formatDateTime: formatDateTime,
                  isTooltipVisible: isTooltipVisible,
                }),
              );
            }),
            React.createElement(
              "div",
              {
                className:
                  "text-center md:text-start min-w-max bg-white dark:bg-jp-gray-lightgray_background w-1/3 px-4 py-2  hover:bg-jp-gray-100 hover:bg-opacity-75 dark:hover:bg-jp-gray-850 dark:hover:bg-opacity-100 cursor-pointer text-sm text-gray-500 dark:text-gray-400 " +
                  customeRangeBg +
                  "}",
                onClick: function (param) {
                  setCalendarVisibility(function (param) {
                    return true;
                  });
                  setIsCustomSelected(function (param) {
                    return true;
                  });
                },
              },
              "Custom Range",
            ),
          ),
        })
      : null,
    React.createElement(AddDataAttributes.make, {
      attributes: [["data-date-picker-section", "date-picker-calendar"]],
      children: React.createElement(
        "div",
        {
          className:
            calendarVisibility && isCustomSelected
              ? "w-auto md:w-max h-auto"
              : "hidden",
        },
        React.createElement(CalendarList.make, {
          calendarContaierStyle: "md:m-3 border-0 md:border",
          onDateClick: onDateClick,
          count: numMonths,
          cellHighlighter: defaultCellHighlighter,
          startDate: startDate,
          endDate: endDate,
          disablePastDates: disablePastDates,
          disableFutureDates: disableFutureDates,
          dateRangeLimit: dateRangeLimit,
          setShowMsg: setShowMsg,
          allowedDateRange: props.allowedDateRange,
        }),
        React.createElement(
          "div",
          {
            className:
              timeVisibilityClass +
              " w-full flex flex-row md:gap-4 p-3 justify-around md:justify-start dark:text-gray-400 text-gray-700 ",
          },
          React.createElement(TimeInput.make, {
            label: "From",
            input: startTimeInput,
            showSeconds: showSeconds,
          }),
          React.createElement(TimeInput.make, {
            label: "To",
            input: endTimeInput,
            showSeconds: showSeconds,
          }),
        ),
        tmp,
      ),
    }),
  );
  return React.createElement(React.Fragment, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "md:relative daterangSelection",
        },
        React.createElement(AddDataAttributes.make, {
          attributes: [
            [
              "data-date-picker",
              "dateRangePicker" + (isFilterSection ? "-Filter" : ""),
            ],
            [
              "data-date-picker-start-date",
              startDateStr + " " + startTimeStr$1,
            ],
            ["data-date-picker-end-date", endDateStr + " " + endTimeStr$1],
          ],
          children: React.createElement(
            "div",
            {
              ref: Caml_option.some(dateRangeRef),
            },
            React.createElement(Button.make, {
              buttonState: disable ? "Disabled" : "Normal",
              text: isMobileView && textHideInMobileView ? "" : buttonText$1,
              buttonType: props.buttonType,
              isDropdownOpen: isDropdownExpandedActual,
              buttonSize: "XSmall",
              leftIcon: {
                TAG: "FontAwesome",
                _0: "calendar",
              },
              rightIcon: {
                TAG: "CustomIcon",
                _0: iconElement,
              },
              onClick: function (param) {
                handleDropdownClick();
              },
              textStyle: props.textStyle,
              iconBorderColor: customborderCSS,
              customButtonStyle: customStyleForBtn,
            }),
          ),
        }),
        isDropdownExpandedActual
          ? isMobileView
            ? React.createElement(BottomModal.make, {
                onCloseClick: cancelButton,
                children: calendarElement,
                headerText: buttonText$1,
              })
            : React.createElement(
                "div",
                {
                  ref: Caml_option.some(dropdownRef),
                  className:
                    dropdownVisibilityClass +
                    " absolute " +
                    dropdownPosition +
                    " z-20 bg-white dark:bg-jp-gray-lightgray_background rounded border-jp-gray-500 dark:border-jp-gray-960 shadow-md dark:shadow-sm dark:shadow-gray-700 max-h-min max-w-min overflow-auto",
                },
                calendarElement,
              )
          : null,
      ),
    ),
  });
}

var Base = {
  make: DateRangePicker$Base,
};

function useStateForInput(input) {
  return React.useMemo(
    function () {
      var val = Core__Option.getOr(Core__JSON.Decode.string(input.value), "");
      var onChange = function (fn) {
        var newVal = fn(val);
        input.onChange(newVal);
      };
      return [val, onChange];
    },
    [input],
  );
}

function DateRangePicker(props) {
  var __isTooltipVisible = props.isTooltipVisible;
  var __removeConversion = props.removeConversion;
  var __standardTimeToday = props.standardTimeToday;
  var __buttonText = props.buttonText;
  var __selectStandardTime = props.selectStandardTime;
  var __hideDate = props.hideDate;
  var __showSeconds = props.showSeconds;
  var __textHideInMobileView = props.textHideInMobileView;
  var __removeFilterOption = props.removeFilterOption;
  var __disableApply = props.disableApply;
  var __numMonths = props.numMonths;
  var __format = props.format;
  var __predefinedDays = props.predefinedDays;
  var __disableFutureDates = props.disableFutureDates;
  var __disablePastDates = props.disablePastDates;
  var __disable = props.disable;
  var __showTime = props.showTime;
  var showTime = __showTime !== undefined ? __showTime : false;
  var disable = __disable !== undefined ? __disable : false;
  var disablePastDates =
    __disablePastDates !== undefined ? __disablePastDates : true;
  var disableFutureDates =
    __disableFutureDates !== undefined ? __disableFutureDates : false;
  var predefinedDays = __predefinedDays !== undefined ? __predefinedDays : [];
  var format = __format !== undefined ? __format : "YYYY-MM-DDTHH:mm:ss.SSS[Z]";
  var numMonths = __numMonths !== undefined ? __numMonths : 1;
  var disableApply = __disableApply !== undefined ? __disableApply : true;
  var removeFilterOption =
    __removeFilterOption !== undefined ? __removeFilterOption : false;
  var textHideInMobileView =
    __textHideInMobileView !== undefined ? __textHideInMobileView : true;
  var showSeconds = __showSeconds !== undefined ? __showSeconds : true;
  var hideDate = __hideDate !== undefined ? __hideDate : false;
  var selectStandardTime =
    __selectStandardTime !== undefined ? __selectStandardTime : false;
  var buttonText = __buttonText !== undefined ? __buttonText : "";
  var standardTimeToday =
    __standardTimeToday !== undefined ? __standardTimeToday : false;
  var removeConversion =
    __removeConversion !== undefined ? __removeConversion : false;
  var isTooltipVisible =
    __isTooltipVisible !== undefined ? __isTooltipVisible : true;
  var startInput = ReactFinalForm.useField(props.startKey).input;
  var endInput = ReactFinalForm.useField(props.endKey).input;
  var match = useStateForInput(startInput);
  var match$1 = useStateForInput(endInput);
  return React.createElement(DateRangePicker$Base, {
    startDateVal: match[0],
    setStartDateVal: match[1],
    endDateVal: match$1[0],
    setEndDateVal: match$1[1],
    showTime: showTime,
    disable: disable,
    disablePastDates: disablePastDates,
    disableFutureDates: disableFutureDates,
    predefinedDays: predefinedDays,
    format: format,
    numMonths: numMonths,
    disableApply: disableApply,
    removeFilterOption: removeFilterOption,
    dateRangeLimit: props.dateRangeLimit,
    optFieldKey: props.optFieldKey,
    textHideInMobileView: textHideInMobileView,
    showSeconds: showSeconds,
    hideDate: hideDate,
    selectStandardTime: selectStandardTime,
    customButtonStyle: props.customButtonStyle,
    buttonText: buttonText,
    allowedDateRange: props.allowedDateRange,
    textStyle: props.textStyle,
    standardTimeToday: standardTimeToday,
    removeConversion: removeConversion,
    isTooltipVisible: isTooltipVisible,
  });
}

var make = DateRangePicker;

export {
  defaultCellHighlighter,
  useErroryValueResetter,
  getDateStringForValue,
  getTimeStringForValue,
  getFormattedDate,
  isStartBeforeEndDate,
  getStartEndDiff,
  PredefinedOption,
  Base,
  useStateForInput,
  make,
};
/* Icon Not a pure module */
