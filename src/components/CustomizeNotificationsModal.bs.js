// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Modal from "../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function CustomizeNotificationsModal(props) {
  var __customIcon = props.customIcon;
  var __headerAlignmentClass = props.headerAlignmentClass;
  var __isBackdropBlurReq = props.isBackdropBlurReq;
  var __overlayBG = props.overlayBG;
  var __headingClassOverride = props.headingClassOverride;
  var __onCloseClickCustomFun = props.onCloseClickCustomFun;
  var __showModalHeadingIconName = props.showModalHeadingIconName;
  var __refresh = props.refresh;
  var __refreshOutages = props.refreshOutages;
  var __showMarkAllRead = props.showMarkAllRead;
  var onMarkAllAsReadClick = props.onMarkAllAsReadClick;
  var __showCloseIcon = props.showCloseIcon;
  var __iconName = props.iconName;
  var __btnRequired = props.btnRequired;
  var __modalWidth = props.modalWidth;
  var __notificationCount = props.notificationCount;
  var setNotificationCount = props.setNotificationCount;
  var __totalNotifications = props.totalNotifications;
  var __showLoderButton = props.showLoderButton;
  var __submitButtonText = props.submitButtonText;
  var __closeOnOutsideClick = props.closeOnOutsideClick;
  var __revealFrom = props.revealFrom;
  var __headerTextClass = props.headerTextClass;
  var __modalHeading = props.modalHeading;
  var modalHeading =
    __modalHeading !== undefined ? __modalHeading : "Select Options";
  var headerTextClass =
    __headerTextClass !== undefined
      ? __headerTextClass
      : "text-2xl font-extrabold tracking-tight ml-3.5";
  var revealFrom = __revealFrom !== undefined ? __revealFrom : "Right";
  var closeOnOutsideClick =
    __closeOnOutsideClick !== undefined ? __closeOnOutsideClick : true;
  var submitButtonText =
    __submitButtonText !== undefined ? __submitButtonText : "Update";
  var showLoderButton =
    __showLoderButton !== undefined ? __showLoderButton : false;
  var totalNotifications =
    __totalNotifications !== undefined ? __totalNotifications : 0;
  var notificationCount =
    __notificationCount !== undefined ? __notificationCount : 0;
  var modalWidth =
    __modalWidth !== undefined ? __modalWidth : "w-[430px] !border-none";
  var btnRequired = __btnRequired !== undefined ? __btnRequired : false;
  var iconName = __iconName !== undefined ? __iconName : "";
  var showCloseIcon = __showCloseIcon !== undefined ? __showCloseIcon : true;
  var showMarkAllRead =
    __showMarkAllRead !== undefined ? __showMarkAllRead : false;
  var refreshOutages =
    __refreshOutages !== undefined ? __refreshOutages : false;
  var refresh = __refresh !== undefined ? __refresh : false;
  var showModalHeadingIconName =
    __showModalHeadingIconName !== undefined ? __showModalHeadingIconName : "";
  var onCloseClickCustomFun =
    __onCloseClickCustomFun !== undefined
      ? __onCloseClickCustomFun
      : function () {};
  var headingClassOverride =
    __headingClassOverride !== undefined ? __headingClassOverride : "";
  var overlayBG =
    __overlayBG !== undefined
      ? __overlayBG
      : "!shadow-xl !blur-none !bg-none !backdrop-blur-none !rounded-none !border-transparent";
  var isBackdropBlurReq =
    __isBackdropBlurReq !== undefined ? __isBackdropBlurReq : true;
  var headerAlignmentClass =
    __headerAlignmentClass !== undefined ? __headerAlignmentClass : "flex-row";
  var customIcon =
    __customIcon !== undefined
      ? Caml_option.valFromOption(__customIcon)
      : undefined;
  var customHeight = btnRequired === false ? "h-full" : "h-screen";
  var customButton = React.createElement(Button.make, {
    buttonState: refreshOutages && !refresh ? "Disabled" : "Normal",
    text: submitButtonText,
    buttonType: "Primary",
    leftIcon: {
      TAG: "CustomIcon",
      _0: React.createElement(Icon.make, {
        name: iconName,
        size: 17,
        className:
          "-mr-1 jp-gray-900 fill-opacity-50 dark:jp-gray-text_darktheme ml-3",
      }),
    },
    onClick: props.onSubmitModal,
  });
  return React.createElement(
    Modal.make,
    {
      showModal: props.showModal,
      setShowModal: props.setShowModal,
      children: null,
      modalHeading: modalHeading,
      modalClass:
        modalWidth +
        " " +
        customHeight +
        " float-right overflow-hidden !bg-white dark:!bg-jp-gray-lightgray_background !rounded-none !shadow-xl !backdrop-blur-none",
      childClass: "p-0 m-0",
      headingClass:
        "py-6 px-2.5 border-b border-solid border-slate-300 dark:border-slate-500 " +
        headingClassOverride,
      paddingClass: "pt-0 overflow-hidden",
      closeOnOutsideClick: closeOnOutsideClick,
      headerTextClass: headerTextClass,
      showCloseIcon: showCloseIcon,
      showBackIcon: props.showBackIcon,
      onBackClick: props.onBackClick,
      revealFrom: revealFrom,
      onCloseClickCustomFun: onCloseClickCustomFun,
      overlayBG: overlayBG,
      showModalHeadingIconName: showModalHeadingIconName,
      headerAlignmentClass: headerAlignmentClass,
      isBackdropBlurReq: isBackdropBlurReq,
      customIcon: Caml_option.some(customIcon),
    },
    showLoderButton && showMarkAllRead
      ? React.createElement(
          "div",
          {
            className:
              "text-xs text-sky-500 relative -top-10 left-64 w-fit cursor-pointer",
            onClick: function (param) {
              if (onMarkAllAsReadClick !== undefined) {
                return onMarkAllAsReadClick();
              }
            },
          },
          "Mark all as read",
        )
      : null,
    React.createElement(
      "div",
      {
        className:
          "overflow-auto p-6 border-b border-solid  border-slate-300 dark:border-slate-500 relative",
        style: {
          height: btnRequired ? "calc(100vh - 9.6rem)" : "100vh",
        },
      },
      props.element,
      showLoderButton && notificationCount > 10
        ? React.createElement(
            "div",
            {
              className: "flex fixed items-center justify-center",
              style: {
                right: "100px",
                top: "100px",
              },
            },
            React.createElement(Button.make, {
              text: "Load Previous",
              rightIcon: {
                TAG: "FontAwesome",
                _0: "arrow-up",
              },
              onClick: function (param) {
                if (setNotificationCount !== undefined) {
                  return setNotificationCount(function (param) {
                    return (notificationCount - 10) | 0;
                  });
                }
              },
              customButtonStyle: "rounded-full ",
            }),
          )
        : null,
      ((totalNotifications - notificationCount) | 0) > 0 && showLoderButton
        ? React.createElement(
            "div",
            {
              className: "sticky bottom-20 flex items-center justify-center",
            },
            React.createElement(Button.make, {
              text: "Load More",
              rightIcon: {
                TAG: "FontAwesome",
                _0: "arrow-down",
              },
              onClick: function (param) {
                if (setNotificationCount !== undefined) {
                  return setNotificationCount(function (param) {
                    return (notificationCount + 10) | 0;
                  });
                }
              },
              customButtonStyle: "rounded-full bg-stone-800/50",
            }),
          )
        : null,
    ),
    btnRequired
      ? React.createElement(
          "div",
          {
            className: "flex items-center justify-center my-5",
          },
          refreshOutages && !refresh
            ? React.createElement(ToolTip.make, {
                description: "kindly wait at least 1 minute to make a refresh",
                toolTipFor: Caml_option.some(customButton),
                toolTipPosition: "Top",
              })
            : customButton,
        )
      : null,
  );
}

var make = CustomizeNotificationsModal;

export { make };
/* Icon Not a pure module */
