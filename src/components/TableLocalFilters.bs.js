// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as SelectBox from "./SelectBox.bs.js";
import * as TextInput from "./form/TextInput.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as PopUpState from "../hooks/PopUpState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as RangeSlider from "./RangeSlider.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as OutsideClick from "../hooks/OutsideClick.bs.js";
import * as DatatableContext from "../context/DatatableContext.bs.js";

function TableLocalFilters$RangeSliderLocalFilter(props) {
  var filterKey = props.filterKey;
  var match = React.useContext(DatatableContext.datatableContext);
  var setLclFltrState = match[1];
  var dropdownRef = React.useRef(null);
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowDropDown = match$1[1];
  var showDropDown = match$1[0];
  var selectedFilterVal = match[0][filterKey];
  var rightIcon =
    selectedFilterVal !== undefined
      ? React.createElement(
          "div",
          {
            className: "flex flex-row justify-between w-full",
          },
          React.createElement(
            "div",
            {
              className: "px-2 text-fs-13 font-medium truncate whitespace-pre ",
            },
            Core__Array.reduce(
              selectedFilterVal.map(function (item, index) {
                if (index > 0) {
                  return "..." + String(item);
                } else {
                  return String(item);
                }
              }),
              "",
              function (acc, item) {
                return acc + item;
              },
            ),
          ),
          React.createElement(
            "span",
            {
              className: "flex items-center ",
            },
            React.createElement(Icon.make, {
              name: "cross",
              className: "align-middle",
              onClick: function (param) {
                setLclFltrState(filterKey, []);
              },
            }),
          ),
        )
      : React.createElement(
          "div",
          {
            className: "flex flex-row justify-between w-full",
          },
          React.createElement(
            "div",
            {
              className: "px-2 text-fs-13 font-medium truncate whitespace-pre ",
            },
            "All",
          ),
          React.createElement(
            "span",
            {
              className: "flex items-center ",
            },
            React.createElement(Icon.make, {
              name: "bars-filter",
              size: 12,
              className: "align-middle ",
            }),
          ),
        );
  OutsideClick.useOutsideClick(
    {
      TAG: "ArrayOfRef",
      _0: [dropdownRef],
    },
    undefined,
    showDropDown,
    undefined,
    function () {
      setShowDropDown(function (param) {
        return false;
      });
    },
    undefined,
  );
  var min = props.minVal.toString();
  var max = props.maxVal.toString();
  return React.createElement(
    "div",
    {
      className: "flex relative flex-row flex-wrap",
    },
    React.createElement(
      "div",
      {
        className: "flex relative flex-row flex-wrap w-full",
      },
      React.createElement(
        "div",
        {
          className:
            "flex justify-center relative h-10 flex flex-row min-w-min items-center bg-white text-jp-gray-900 text-opacity-75 hover:shadow hover:text-jp-gray-900 hover:text-opacity-75 dark:bg-jp-gray-darkgray_background dark:hover:bg-jp-gray-950 dark:text-jp-gray-text_darktheme dark:text-opacity-50 focus:outline-none rounded-md border border-jp-gray-950 border-opacity-20 dark:border-jp-gray-960 dark:border-opacity-100 text-jp-gray-950 hover:text-black dark:text-jp-gray-text_darktheme dark:hover:text-jp-gray-text_darktheme dark:hover:text-opacity-75 cursor-pointer px-2 w-full justify-between overflow-hidden w-full",
          type: "button",
          onClick: function (param) {
            setShowDropDown(function (prev) {
              return !prev;
            });
          },
        },
        rightIcon,
      ),
      React.createElement(RenderIf.make, {
        condition: min !== max && showDropDown,
        children: React.createElement(
          "div",
          {
            ref: Caml_option.some(dropdownRef),
            className:
              " top-3.5 px-4 pt-4 pb-2 bg-white border dark:bg-jp-gray-lightgray_background border-jp-gray-lightmode_steelgray border-opacity-75 dark:border-jp-gray-960 rounded shadow-generic_shadow dark:shadow-generic_shadow_dark mt-8 absolute border border-jp-gray-lightmode_steelgray border-opacity-75 dark:border-jp-gray-960 rounded shadow-generic_shadow dark:shadow-generic_shadow_dark z-20 ",
          },
          React.createElement(
            "div",
            {
              className: "flex",
            },
            React.createElement(RangeSlider.make, {
              max: max,
              min: min,
              maxSlide: props.maxSlide,
              minSlide: props.minSlide,
            }),
          ),
        ),
      }),
    ),
  );
}

var RangeSliderLocalFilter = {
  make: TableLocalFilters$RangeSliderLocalFilter,
};

function TableLocalFilters$FilterDropDown(props) {
  var __arr = props.arr;
  var val = props.val;
  var arr = __arr !== undefined ? __arr : [];
  var match = React.useContext(DatatableContext.datatableContext);
  var setLclFltrState = match[1];
  var filterIconName = "bars-filter";
  var dummyDict = {};
  LogicUtils.getStrArrayFromJsonArray(arr).forEach(function (item) {
    dummyDict[item] = "";
  });
  var options = SelectBox.makeOptions(
    Object.keys(dummyDict).filter(function (item) {
      return LogicUtils.isNonEmptyString(item);
    }),
  );
  var selectedValue = Core__Option.getOr(match[0][val], []);
  var filterInput_onBlur = function (_ev) {};
  var filterInput_onChange = function (ev) {
    setLclFltrState(val, ev);
  };
  var filterInput_onFocus = function (_ev) {};
  var filterInput = {
    name: val,
    onBlur: filterInput_onBlur,
    onChange: filterInput_onChange,
    onFocus: filterInput_onFocus,
    value: selectedValue,
    checked: true,
  };
  var match$1 =
    selectedValue.length > 0
      ? [
          JSON.stringify(selectedValue),
          {
            TAG: "CustomIcon",
            _0: React.createElement(
              "div",
              {
                onClick: function (e) {
                  e.stopPropagation();
                },
              },
              React.createElement(
                "span",
                {
                  className: "flex items-center ",
                  onClick: function (_e) {
                    setLclFltrState(val, []);
                  },
                },
                React.createElement(Icon.make, {
                  name: "cross",
                  className: "align-middle",
                }),
              ),
            ),
          },
        ]
      : [
          "All",
          {
            TAG: "Euler",
            _0: filterIconName,
          },
        ];
  if (options.length <= 1) {
    return React.createElement(
      "div",
      {
        className:
          "flex justify-center relative h-10 flex flex-row min-w-min items-center bg-white text-jp-gray-900 text-opacity-75 hover:shadow hover:text-jp-gray-900 hover:text-opacity-75 dark:bg-jp-gray-darkgray_background dark:hover:bg-jp-gray-950 dark:text-jp-gray-text_darktheme dark:text-opacity-50 focus:outline-none rounded-md border border-jp-gray-950 border-opacity-20 dark:border-jp-gray-960 dark:border-opacity-100 text-jp-gray-950 hover:text-black dark:text-jp-gray-text_darktheme dark:hover:text-jp-gray-text_darktheme dark:hover:text-opacity-75 cursor-pointer px-2 w-full justify-between overflow-hidden w-full",
        type: "button",
      },
      React.createElement(
        "div",
        {
          className: "max-w-[250px] md:max-w-xs",
        },
        React.createElement(
          "div",
          {
            className: "px-2 text-fs-13 font-medium truncate whitespace-pre ",
          },
          "All",
        ),
      ),
      React.createElement(
        "span",
        {
          className: "flex items-center ",
        },
        React.createElement(Icon.make, {
          name: filterIconName,
          size: 12,
          className: "align-middle ",
        }),
      ),
    );
  }
  var buttonText = match$1[0];
  return React.createElement(SelectBox.BaseDropdown.make, {
    buttonText: buttonText,
    allowMultiSelect: true,
    input: filterInput,
    showClearAll: false,
    showSelectAll: false,
    options: options,
    hideMultiSelectButtons: true,
    baseComponent: Caml_option.some(
      React.createElement(Button.make, {
        text: buttonText,
        buttonType: "Secondary",
        buttonSize: "Small",
        rightIcon: match$1[1],
        disableRipple: true,
        customButtonStyle: "w-full justify-between",
        ellipsisOnly: true,
      }),
    ),
    autoApply: true,
    fullLength: false,
    fixedDropDownDirection: "BottomRight",
    addButton: true,
    searchable: true,
  });
}

var FilterDropDown = {
  make: TableLocalFilters$FilterDropDown,
};

function TableLocalFilters$TextFilterCell(props) {
  var val = props.val;
  var match = React.useContext(DatatableContext.datatableContext);
  var setLclFltrState = match[1];
  var showPopUp = PopUpState.useShowPopUp();
  var selectedValue = Core__Option.getOr(
    Core__Option.getOr(match[0][val], [])[0],
    "",
  );
  var localInput = React.useMemo(
    function () {
      return {
        name: "--",
        onBlur: function (_ev) {},
        onChange: function (ev) {
          var value = ev.target.value;
          if (value.includes("<script>") || value.includes("</script>")) {
            showPopUp({
              heading: "Script Tags are not allowed",
              description: "Input cannot contain <script>, </script> tags",
              popUpType: ["Warning", "WithIcon"],
              handleConfirm: {
                text: "OK",
              },
            });
          }
          var value$1 = value.replace("<script>", "").replace("</script>", "");
          setLclFltrState(val, [value$1]);
        },
        onFocus: function (_ev) {},
        value: selectedValue,
        checked: false,
      };
    },
    [selectedValue],
  );
  var rightIcon =
    selectedValue === ""
      ? React.createElement(
          "span",
          {
            className: "flex items-center ",
          },
          React.createElement(Icon.make, {
            name: "bars-filter",
            size: 12,
            className: "align-middle ",
          }),
        )
      : React.createElement(
          "span",
          {
            className: "flex items-center ",
            onClick: function (param) {
              setLclFltrState(val, [""]);
            },
          },
          React.createElement(Icon.make, {
            name: "cross",
            className: "align-middle",
          }),
        );
  return React.createElement(
    "div",
    {
      className: "flex",
    },
    React.createElement(TextInput.make, {
      input: localInput,
      placeholder: "All",
      isDisabled: false,
      inputMode: "text",
      rightIcon: Caml_option.some(rightIcon),
      customStyle:
        "flex justify-center h-10 flex flex-row items-center text-opacity-50 hover:text-opacity-100 dark:hover:text-jp-gray-text_darktheme dark:hover:text-opacity-75 rounded-md border-jp-gray-500 dark:border-jp-gray-960 to-jp-gray-200 dark:from-jp-gray-lightgray_background dark:to-jp-gray-lightgray_background hover:shadow dark:text-jp-gray-text_darktheme dark:text-opacity-50 px-2 w-full justify-between ",
    }),
  );
}

var TextFilterCell = {
  make: TableLocalFilters$TextFilterCell,
};

function TableLocalFilters$RangeFilterCell(props) {
  var val = props.val;
  var match = React.useContext(DatatableContext.datatableContext);
  var setLclFltrState = match[1];
  var minVal = Math.floor(props.minVal);
  var maxVal = Math.ceil(props.maxVal);
  var selectedValueStr = Core__Option.getOr(match[0][val], [minVal, maxVal]);
  var minSlide = React.useMemo(
    function () {
      return {
        name: "--",
        onBlur: function (_ev) {},
        onChange: function (ev) {
          var value = ev.target.value;
          var leftVal = Number(value);
          var rightvalue = Core__Option.getOr(selectedValueStr[1], null);
          var ele = selectedValueStr[1];
          if (ele !== undefined) {
            return setLclFltrState(val, [
              Caml_obj.greaterthan(leftVal, rightvalue) ? rightvalue : leftVal,
              ele,
            ]);
          }
        },
        onFocus: function (_ev) {},
        value: Core__Option.getOr(selectedValueStr[0], 0.0),
        checked: false,
      };
    },
    [selectedValueStr],
  );
  var maxSlide = React.useMemo(
    function () {
      return {
        name: "--",
        onBlur: function (_ev) {},
        onChange: function (ev) {
          var value = ev.target.value;
          var rightvalue = Number(value);
          var ele = selectedValueStr[0];
          if (ele !== undefined) {
            return setLclFltrState(val, [
              ele,
              Caml_obj.greaterthan(ele, rightvalue) ? ele : rightvalue,
            ]);
          }
        },
        onFocus: function (_ev) {},
        value: Core__Option.getOr(selectedValueStr[1], 0.0),
        checked: false,
      };
    },
    [selectedValueStr],
  );
  return React.createElement(TableLocalFilters$RangeSliderLocalFilter, {
    filterKey: val,
    minVal: minVal,
    maxVal: maxVal,
    maxSlide: maxSlide,
    minSlide: minSlide,
  });
}

var RangeFilterCell = {
  make: TableLocalFilters$RangeFilterCell,
};

export {
  RangeSliderLocalFilter,
  FilterDropDown,
  TextFilterCell,
  RangeFilterCell,
};
/* Icon Not a pure module */
