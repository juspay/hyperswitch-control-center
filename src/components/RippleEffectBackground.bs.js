// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";

function useLinearRippleHook(ref, shouldRipple) {
  React.useEffect(
    function () {
      var handleMouseOver = function (_ev) {
        var splash = ref.current;
        if (splash == null) {
          return;
        }
        var link = document.createElement("div");
        link.setAttribute(
          "class",
          "absolute bg-[#0000000a] dark:bg-[#ffffff1f] w-0 h-0 animate-textTransitionSideBar ",
        );
        splash.prepend(link);
        link.style.opacity = "60";
        link.style.height = "70px";
        link.style.width = "400px";
        link.style.animationTimingFunction = "linear";
        setTimeout(function () {
          splash.removeChild(link);
        }, 300);
      };
      var elem = ref.current;
      if (!(elem == null) && shouldRipple) {
        elem.addEventListener("mousedown", handleMouseOver);
        return function () {
          elem.removeEventListener("mousedown", handleMouseOver);
        };
      }
    },
    [ref],
  );
}

function useHorizontalRippleHook(ref) {
  React.useEffect(
    function () {
      var handleMouseOver = function (_ev) {
        var splash = ref.current;
        if (splash == null) {
          return;
        }
        var link = document.createElement("div");
        link.setAttribute(
          "class",
          "absolute bg-[#00000014] dark:bg-[#ffffff1f] top-1/2 left-1/2 -translate-x-2/4 -translate-y-2/4 rounded-full",
        );
        splash.prepend(link);
        link.style.opacity = "20";
        link.style.transitionDuration = ".4s";
        link.style.height = "70px";
        link.style.width = "70px";
        setTimeout(function () {
          link.style.height = "400px";
          link.style.width = "400px";
          link.style.opacity = "20";
          link.style.animationTimingFunction =
            "cubic-bezier(0.25, 0.1, 0.25, 1)";
        }, 0);
        setTimeout(function () {
          splash.removeChild(link);
        }, 400);
      };
      var elem = ref.current;
      if (!(elem == null)) {
        elem.addEventListener("mousedown", handleMouseOver);
        return function () {
          elem.removeEventListener("mousedown", handleMouseOver);
        };
      }
    },
    [ref],
  );
}

export { useLinearRippleHook, useHorizontalRippleHook };
/* react Not a pure module */
