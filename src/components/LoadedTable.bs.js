// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "./Table.bs.js";
import * as React from "react";
import * as Portal from "./portal/Portal.bs.js";
import * as Recoil from "../libraries/Recoil.bs.js";
import * as Recoil$1 from "recoil";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as CardTable from "./CardTable.bs.js";
import * as Paginator from "./Paginator.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as GlobalVars from "../utils/GlobalVars.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as PopUpState from "../hooks/PopUpState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as DesktopView from "./DesktopView.bs.js";
import * as NoDataFound from "./NoDataFound.bs.js";
import * as CheckBoxIcon from "./custom-icons/CheckBoxIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as NewThemeUtils from "./NewThemeUtils.bs.js";
import * as PortalCapture from "./portal/PortalCapture.bs.js";
import * as DictionaryUtils from "../utils/DictionaryUtils.bs.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as DatatableContext from "../context/DatatableContext.bs.js";
import * as JsonFlattenUtils from "../utils/JsonFlattenUtils.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as DynamicTableUtils from "./DynamicTableUtils.bs.js";
import * as LoadedTableContext from "../context/LoadedTableContext.bs.js";
import * as AdvancedSearchModal from "./AdvancedSearchModal.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as AdvancedSearchComponent from "./AdvancedSearchComponent.bs.js";
import * as TableFilterSectionContext from "../context/TableFilterSectionContext.bs.js";
import * as DataTableFilterOpenContext from "../context/DataTableFilterOpenContext.bs.js";

var checkBoxPropDefaultVal_selectedData = [];

function checkBoxPropDefaultVal_setSelectedData(param) {}

var checkBoxPropDefaultVal = {
  showCheckBox: false,
  selectedData: checkBoxPropDefaultVal_selectedData,
  setSelectedData: checkBoxPropDefaultVal_setSelectedData,
};

var sortAtom = Recoil.atom("sortAtom", {});

var backgroundClass = "bg-gray-50 dark:bg-jp-gray-darkgray_background";

function useSortedObj(title, defaultSort) {
  var match = Recoil$1.useRecoilState(sortAtom);
  var setDict = match[1];
  var filters = match[0][title];
  var match$1 = React.useState(function () {
    return defaultSort;
  });
  var setSortedObj = match$1[1];
  var sortedObj = match$1[0];
  React.useEffect(function () {
    if (filters !== undefined) {
      var match = filters.sortType;
      var tmp;
      tmp = match === "ASC" ? "INC" : "DEC";
      var sortObj_key = filters.sortKey;
      var sortObj = {
        key: sortObj_key,
        order: tmp,
      };
      setSortedObj(function (param) {
        return sortObj;
      });
    }
  }, []);
  React.useEffect(
    function () {
      if (sortedObj !== undefined) {
        var match = sortedObj.order;
        var tmp;
        switch (match) {
          case "DEC":
            tmp = "DSC";
            break;
          case "INC":
          case "NONE":
            tmp = "ASC";
            break;
        }
        var sortOb_sortKey = sortedObj.key;
        var sortOb = {
          sortKey: sortOb_sortKey,
          sortType: tmp,
        };
        setDict(function (dict) {
          var nDict = Object.fromEntries(Object.entries(dict));
          nDict[title] = sortOb;
          return nDict;
        });
      }
    },
    [sortedObj],
  );
  return [sortedObj, setSortedObj];
}

function sortArray(originalData, key, sortOrder) {
  var getValue = function (val) {
    if (val === undefined) {
      return "";
    }
    var str = Core__JSON.Classify.classify(val);
    if (typeof str !== "object") {
      return "";
    }
    switch (str.TAG) {
      case "Bool":
        if (str._0) {
          return "true";
        } else {
          return "false";
        }
      case "String":
        return str._0.toLowerCase();
      case "Number":
        return val;
      default:
        return "";
    }
  };
  return originalData.toSorted(function (i1, i2) {
    var item1 = LogicUtils.safeParse(
      Core__Option.getOr(JSON.stringify(i1), ""),
    );
    var item2 = LogicUtils.safeParse(
      Core__Option.getOr(JSON.stringify(i2), ""),
    );
    var val1 = Core__Option.flatMap(
      Core__JSON.Decode.object(JsonFlattenUtils.flattenObject(item1, true)),
      function (dict) {
        return dict[key];
      },
    );
    var val2 = Core__Option.flatMap(
      Core__JSON.Decode.object(JsonFlattenUtils.flattenObject(item2, true)),
      function (dict) {
        return dict[key];
      },
    );
    var value1 = getValue(val1);
    var value2 = getValue(val2);
    if (value1 === "" || value2 === "") {
      if (value1 === value2) {
        return 0;
      } else if (value2 === "") {
        if (sortOrder === "DEC") {
          return 1;
        } else {
          return -1;
        }
      } else if (sortOrder === "DEC") {
        return -1;
      } else {
        return 1;
      }
    } else if (value1 === value2) {
      return 0;
    } else if (Caml_obj.greaterthan(value1, value2)) {
      if (sortOrder === "DEC") {
        return 1;
      } else {
        return -1;
      }
    } else if (sortOrder === "DEC") {
      return -1;
    } else {
      return 1;
    }
  });
}

var table_pageDetails = Recoil.atom("table_pageDetails", {});

function LoadedTable(props) {
  var __tableHeadingTextClass = props.tableHeadingTextClass;
  var __tableDataBackgroundClass = props.tableDataBackgroundClass;
  var __noScrollbar = props.noScrollbar;
  var __showResultsPerPageSelector = props.showResultsPerPageSelector;
  var setExtFilteredDataLength = props.setExtFilteredDataLength;
  var __minTableHeightClass = props.minTableHeightClass;
  var __fixLastCol = props.fixLastCol;
  var __lastColClass = props.lastColClass;
  var __lastHeadingClass = props.lastHeadingClass;
  var __paginationClass = props.paginationClass;
  var __checkBoxProps = props.checkBoxProps;
  var __ellipseClass = props.ellipseClass;
  var __customMoneyStyle = props.customMoneyStyle;
  var __isEllipsisTextRelative = props.isEllipsisTextRelative;
  var __tableActionBorder = props.tableActionBorder;
  var __noDataMsg = props.noDataMsg;
  var __customFilterRowStyle = props.customFilterRowStyle;
  var __labelMargin = props.labelMargin;
  var __showTableOnMobileView = props.showTableOnMobileView;
  var __maxTableHeight = props.maxTableHeight;
  var __headingCenter = props.headingCenter;
  var __isHighchartLegend = props.isHighchartLegend;
  var __rowCustomClass = props.rowCustomClass;
  var __isAnalyticsModule = props.isAnalyticsModule;
  var __allowNullableRows = props.allowNullableRows;
  var __rowHeightClass = props.rowHeightClass;
  var __clearFormatting = props.clearFormatting;
  var __enableEqualWidthCol = props.enableEqualWidthCol;
  var __highlightText = props.highlightText;
  var frozenUpto = props.frozenUpto;
  var onMouseLeave = props.onMouseLeave;
  var onMouseEnter = props.onMouseEnter;
  var __collapseTableRow = props.collapseTableRow;
  var __tableDataBorderClass = props.tableDataBorderClass;
  var __tableBorderClass = props.tableBorderClass;
  var __tableheadingClass = props.tableheadingClass;
  var __tableLocalFilter = props.tableLocalFilter;
  var renderCard = props.renderCard;
  var dataNotFoundComponent = props.dataNotFoundComponent;
  var advancedSearchComponent = props.advancedSearchComponent;
  var __dataLoading = props.dataLoading;
  var __tableDataLoading = props.tableDataLoading;
  var __ignoreHeaderBg = props.ignoreHeaderBg;
  var __hideTitle = props.hideTitle;
  var __ignoreUrlUpdate = props.ignoreUrlUpdate;
  var __showPagination = props.showPagination;
  var __evenVertivalLines = props.evenVertivalLines;
  var __removeHorizontalLines = props.removeHorizontalLines;
  var __showFilterBorder = props.showFilterBorder;
  var filters = props.filters;
  var currrentFetchCount = props.currrentFetchCount;
  var onEntityDoubleClick = props.onEntityDoubleClick;
  var onEntityClick = props.onEntityClick;
  var entity = props.entity;
  var handleRefetch = props.handleRefetch;
  var setOffset = props.setOffset;
  var offset = props.offset;
  var resultsPerPage = props.resultsPerPage;
  var totalResults = props.totalResults;
  var actualData = props.actualData;
  var __showSerialNumber = props.showSerialNumber;
  var bottomActions = props.bottomActions;
  var clearFormattedDataButton = props.clearFormattedDataButton;
  var __rightTitleElement = props.rightTitleElement;
  var __hideFilterTopPortals = props.hideFilterTopPortals;
  var __isTableActionBesideFilters = props.isTableActionBesideFilters;
  var tableActions = props.tableActions;
  var __titleSize = props.titleSize;
  var title = props.title;
  var visibleColumns = props.visibleColumns;
  var titleSize = __titleSize !== undefined ? __titleSize : "Large";
  var isTableActionBesideFilters =
    __isTableActionBesideFilters !== undefined
      ? __isTableActionBesideFilters
      : false;
  var hideFilterTopPortals =
    __hideFilterTopPortals !== undefined ? __hideFilterTopPortals : true;
  var rightTitleElement =
    __rightTitleElement !== undefined
      ? Caml_option.valFromOption(__rightTitleElement)
      : null;
  var showSerialNumber =
    __showSerialNumber !== undefined ? __showSerialNumber : false;
  var showFilterBorder =
    __showFilterBorder !== undefined ? __showFilterBorder : false;
  var removeHorizontalLines =
    __removeHorizontalLines !== undefined ? __removeHorizontalLines : false;
  var evenVertivalLines =
    __evenVertivalLines !== undefined ? __evenVertivalLines : false;
  var showPagination = __showPagination !== undefined ? __showPagination : true;
  var ignoreUrlUpdate =
    __ignoreUrlUpdate !== undefined ? __ignoreUrlUpdate : false;
  var hideTitle = __hideTitle !== undefined ? __hideTitle : false;
  var ignoreHeaderBg =
    __ignoreHeaderBg !== undefined ? __ignoreHeaderBg : false;
  var tableDataLoading =
    __tableDataLoading !== undefined ? __tableDataLoading : false;
  var dataLoading = __dataLoading !== undefined ? __dataLoading : false;
  var tableLocalFilter =
    __tableLocalFilter !== undefined ? __tableLocalFilter : false;
  var tableheadingClass =
    __tableheadingClass !== undefined ? __tableheadingClass : "";
  var tableBorderClass =
    __tableBorderClass !== undefined ? __tableBorderClass : "";
  var tableDataBorderClass =
    __tableDataBorderClass !== undefined ? __tableDataBorderClass : "";
  var collapseTableRow =
    __collapseTableRow !== undefined ? __collapseTableRow : false;
  var highlightText = __highlightText !== undefined ? __highlightText : "";
  var enableEqualWidthCol =
    __enableEqualWidthCol !== undefined ? __enableEqualWidthCol : false;
  var clearFormatting =
    __clearFormatting !== undefined ? __clearFormatting : false;
  var rowHeightClass = __rowHeightClass !== undefined ? __rowHeightClass : "";
  var allowNullableRows =
    __allowNullableRows !== undefined ? __allowNullableRows : false;
  var isAnalyticsModule =
    __isAnalyticsModule !== undefined ? __isAnalyticsModule : false;
  var rowCustomClass = __rowCustomClass !== undefined ? __rowCustomClass : "";
  var isHighchartLegend =
    __isHighchartLegend !== undefined ? __isHighchartLegend : false;
  var headingCenter = __headingCenter !== undefined ? __headingCenter : false;
  var maxTableHeight = __maxTableHeight !== undefined ? __maxTableHeight : "";
  var showTableOnMobileView =
    __showTableOnMobileView !== undefined ? __showTableOnMobileView : false;
  var labelMargin = __labelMargin !== undefined ? __labelMargin : "";
  var customFilterRowStyle =
    __customFilterRowStyle !== undefined ? __customFilterRowStyle : "";
  var noDataMsg = __noDataMsg !== undefined ? __noDataMsg : "No Data Available";
  var tableActionBorder =
    __tableActionBorder !== undefined ? __tableActionBorder : "";
  var isEllipsisTextRelative =
    __isEllipsisTextRelative !== undefined ? __isEllipsisTextRelative : true;
  var customMoneyStyle =
    __customMoneyStyle !== undefined ? __customMoneyStyle : "";
  var ellipseClass = __ellipseClass !== undefined ? __ellipseClass : "";
  var checkBoxProps =
    __checkBoxProps !== undefined ? __checkBoxProps : checkBoxPropDefaultVal;
  var paginationClass =
    __paginationClass !== undefined ? __paginationClass : "";
  var lastHeadingClass =
    __lastHeadingClass !== undefined ? __lastHeadingClass : "";
  var lastColClass = __lastColClass !== undefined ? __lastColClass : "";
  var fixLastCol = __fixLastCol !== undefined ? __fixLastCol : false;
  var minTableHeightClass =
    __minTableHeightClass !== undefined ? __minTableHeightClass : "";
  var showResultsPerPageSelector =
    __showResultsPerPageSelector !== undefined
      ? __showResultsPerPageSelector
      : true;
  var noScrollbar = __noScrollbar !== undefined ? __noScrollbar : false;
  var tableDataBackgroundClass =
    __tableDataBackgroundClass !== undefined ? __tableDataBackgroundClass : "";
  var tableHeadingTextClass =
    __tableHeadingTextClass !== undefined ? __tableHeadingTextClass : "";
  var showPopUp = PopUpState.useShowPopUp();
  React.useEffect(function () {
    if (LogicUtils.isEmptyString(title) && GlobalVars.isLocalhost) {
      showPopUp({
        heading: "Title cannot be empty!",
        description:
          "Please put valid title and use hideTitle prop to hide the title as offset recoil uses title",
        popUpType: ["Denied", "WithIcon"],
        handleConfirm: {
          text: "OK",
        },
      });
    }
  }, []);
  var defaultValue = {
    offset: offset,
    resultsPerPage: resultsPerPage,
  };
  var match = React.useState(function () {
    return true;
  });
  var setFirstRender = match[1];
  var firstRender = match[0];
  var setPageDetails = Recoil$1.useSetRecoilState(table_pageDetails);
  var pageDetailDict = Recoil$1.useRecoilValue(table_pageDetails);
  var pageDetail = Core__Option.getOr(pageDetailDict[title], defaultValue);
  var match$1 = React.useState(function () {});
  var setSelectAllCheckBox = match$1[1];
  var selectAllCheckBox = match$1[0];
  var newSetOffset = function (offsetVal) {
    var val = pageDetailDict[title];
    var value =
      val !== undefined
        ? {
            offset: offsetVal(0),
            resultsPerPage: val.resultsPerPage,
          }
        : {
            offset: offsetVal(0),
            resultsPerPage: resultsPerPage,
          };
    var newDict = Object.fromEntries(Object.entries(pageDetailDict));
    newDict[title] = value;
    setOffset(function (param) {
      return offsetVal(0);
    });
    setPageDetails(function (param) {
      return newDict;
    });
  };
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  React.useEffect(
    function () {
      setFirstRender(function (param) {
        return false;
      });
      setOffset(function (param) {
        return pageDetail.offset;
      });
    },
    [Core__List.toArray(url.path).join("/")],
  );
  React.useEffect(
    function () {
      if (pageDetail.offset !== offset && !firstRender) {
        var val = pageDetailDict[title];
        var value =
          val !== undefined
            ? {
                offset: offset,
                resultsPerPage: val.resultsPerPage,
              }
            : {
                offset: offset,
                resultsPerPage: resultsPerPage,
              };
        var newDict = Object.fromEntries(Object.entries(pageDetailDict));
        newDict[title] = value;
        setPageDetails(function (param) {
          return newDict;
        });
      }
    },
    [offset],
  );
  var setLocalResultsPerPageOrig = function (localResultsPerPage) {
    var val = pageDetailDict[title];
    var value =
      val !== undefined
        ? totalResults > val.offset || tableDataLoading
          ? {
              offset: val.offset,
              resultsPerPage: localResultsPerPage(0),
            }
          : {
              offset: 0,
              resultsPerPage: resultsPerPage,
            }
        : {
            offset: offset,
            resultsPerPage: localResultsPerPage(0),
          };
    var newDict = Object.fromEntries(Object.entries(pageDetailDict));
    newDict[title] = value;
    setPageDetails(function (param) {
      return newDict;
    });
  };
  var match$2 = React.useState(function () {
    return {};
  });
  var setColumnFilterOrig = match$2[1];
  var columnFilter = match$2[0];
  var isMobileView = MatchMedia.useMobileChecker();
  var url$1 = RescriptReactRouter.useUrl(undefined, undefined);
  var dateFormatConvertor = DynamicTableUtils.useDateFormatConvertor();
  var match$3 = React.useState(function () {
    if (isMobileView && !showTableOnMobileView) {
      return "Card";
    } else {
      return "Table";
    }
  });
  var setDataView = match$3[1];
  var localResultsPerPage = pageDetail.resultsPerPage;
  var setColumnFilter = React.useMemo(
    function () {
      return function (filterKey, filterValue) {
        setColumnFilterOrig(function (oldFitlers) {
          var newObj = Object.fromEntries(Object.entries(oldFitlers));
          var filterValue$1 = filterValue.filter(function (item) {
            var updatedItem = String(item);
            return LogicUtils.isNonEmptyString(updatedItem);
          });
          if (filterValue$1.length === 0) {
            return Object.fromEntries(
              Object.entries(newObj).filter(function (entry) {
                return entry[0] !== filterKey;
              }),
            );
          } else {
            newObj[filterKey] = filterValue$1;
            return newObj;
          }
        });
      };
    },
    [setColumnFilterOrig],
  );
  React.useEffect(
    function () {
      if (Caml_obj.notequal(columnFilter, {})) {
        newSetOffset(function (param) {
          return 0;
        });
      }
    },
    [columnFilter],
  );
  var filterValue = React.useMemo(
    function () {
      return [columnFilter, setColumnFilter];
    },
    [columnFilter, setColumnFilter],
  );
  var match$4 = React.useState(function () {
    return {};
  });
  var setIsFilterOpenOrig = match$4[1];
  var isFilterOpen = match$4[0];
  var setIsFilterOpen = React.useMemo(
    function () {
      return function (filterKey, value) {
        setIsFilterOpenOrig(function (oldFitlers) {
          var newObj = DictionaryUtils.copyOfDict(oldFitlers);
          newObj[filterKey] = value;
          return newObj;
        });
      };
    },
    [setColumnFilterOrig],
  );
  var filterOpenValue = React.useMemo(
    function () {
      return [isFilterOpen, setIsFilterOpen];
    },
    [isFilterOpen, setIsFilterOpen],
  );
  var heading = Core__Option.getOr(visibleColumns, entity.defaultColumns).map(
    entity.getHeading,
  );
  var handleRemoveLines = Core__Option.getOr(props.removeVerticalLines, true);
  if (showSerialNumber) {
    heading.unshift(
      Table.makeHeaderInfo(
        "serial_number",
        "S.No",
        "NumericType",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    );
  }
  if (checkBoxProps.showCheckBox) {
    heading.unshift(
      Table.makeHeaderInfo(
        "select",
        "",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        true,
        undefined,
        undefined,
        undefined,
      ),
    );
  }
  var setLocalResultsPerPage = React.useCallback(
    function (fn) {
      setLocalResultsPerPageOrig(function (prev) {
        var newVal = fn(prev);
        if (newVal === 0) {
          return localResultsPerPage;
        } else {
          return newVal;
        }
      });
    },
    [setLocalResultsPerPageOrig],
  );
  var searchFields = entity.searchFields;
  var getShowLink = entity.getShowLink;
  var match$5 = useSortedObj(title, props.defaultSort);
  var sortedObj = match$5[0];
  React.useEffect(
    function () {
      setDataView(function (_prev) {
        if (isMobileView && !showTableOnMobileView) {
          return "Card";
        } else {
          return "Table";
        }
      });
    },
    [isMobileView],
  );
  var defaultOffset = Math.imul(
    Caml_int32.div(totalResults, localResultsPerPage),
    localResultsPerPage,
  );
  var offsetVal = offset < totalResults ? offset : defaultOffset;
  var offsetVal$1 = ignoreUrlUpdate ? offset : offsetVal;
  React.useEffect(
    function () {
      if (
        offset > currrentFetchCount &&
        offset <= totalResults &&
        !tableDataLoading &&
        handleRefetch !== undefined
      ) {
        handleRefetch();
      }
    },
    [offset, currrentFetchCount, totalResults, tableDataLoading],
  );
  var actualData$1 = React.useMemo(
    function () {
      if (tableLocalFilter) {
        return DynamicTableUtils.filteredData(
          actualData,
          columnFilter,
          visibleColumns,
          entity,
          dateFormatConvertor,
        );
      } else {
        return actualData;
      }
    },
    [actualData, columnFilter, visibleColumns, entity, dateFormatConvertor],
  );
  var columnFilterRow = React.useMemo(
    function () {
      if (!tableLocalFilter) {
        return;
      }
      var columnFilterRow = Core__Option.getOr(
        visibleColumns,
        entity.defaultColumns,
      ).map(function (item) {
        var headingEntity = entity.getHeading(item);
        var key = headingEntity.key;
        var dataType = headingEntity.dataType;
        var filterValueArray = [];
        var columnFilterCopy = DictionaryUtils.deleteKey(columnFilter, key);
        var actualData$2 = Object.keys(columnFilter).includes(headingEntity.key)
          ? actualData
          : actualData$1;
        DynamicTableUtils.filteredData(
          actualData$2,
          columnFilterCopy,
          visibleColumns,
          entity,
          dateFormatConvertor,
        ).forEach(function (rows) {
          if (rows == null) {
            return;
          }
          var num = entity.getCell(rows, item);
          var value;
          var exit = 0;
          switch (num.TAG) {
            case "Progress":
              value = DynamicTableUtils.convertFloatCellToStr(dataType, num._0);
              break;
            case "CustomCell":
              value = DynamicTableUtils.convertStrCellToFloat(dataType, num._1);
              break;
            case "StartEndDate":
            case "InputField":
            case "TrimmedText":
            case "DropDown":
              value = DynamicTableUtils.convertStrCellToFloat(dataType, "");
              break;
            case "Currency":
            case "DeltaPercentage":
            case "Numeric":
              exit = 1;
              break;
            case "Label":
            case "ColoredText":
              value = DynamicTableUtils.convertStrCellToFloat(
                dataType,
                num._0.title,
              );
              break;
            default:
              value = DynamicTableUtils.convertStrCellToFloat(dataType, num._0);
          }
          if (exit === 1) {
            value = DynamicTableUtils.convertFloatCellToStr(dataType, num._0);
          }
          filterValueArray.push(value);
        });
        switch (dataType) {
          case "LabelType":
          case "TextType":
            return {
              TAG: "TextFilter",
              _0: key,
            };
          case "DropDown":
            return {
              TAG: "DropDownFilter",
              _0: key,
              _1: filterValueArray,
            };
          default:
            var newArr = filterValueArray.map(function (item) {
              return Core__Option.getOr(Core__JSON.Decode.$$float(item), 0);
            });
            if (newArr.length >= 1) {
              return {
                TAG: "Range",
                _0: key,
                _1: Caml_splice_call.spliceApply(Math.min, [newArr]),
                _2: Caml_splice_call.spliceApply(Math.max, [newArr]),
              };
            } else {
              return {
                TAG: "Range",
                _0: key,
                _1: 0.0,
                _2: 0.0,
              };
            }
        }
      });
      return showSerialNumber && tableLocalFilter
        ? [
            {
              TAG: "Range",
              _0: "s_no",
              _1: 0,
              _2: actualData$1.length,
            },
          ].concat(columnFilterRow)
        : columnFilterRow;
    },
    [actualData$1, totalResults, visibleColumns, columnFilter],
  );
  var filteredDataLength =
    Object.keys(columnFilter).length !== 0 ? actualData$1.length : totalResults;
  React.useEffect(
    function () {
      if (setExtFilteredDataLength !== undefined) {
        setExtFilteredDataLength(function (param) {
          return filteredDataLength;
        });
      }
    },
    [filteredDataLength],
  );
  var filteredData = React.useMemo(
    function () {
      if (sortedObj !== undefined) {
        return sortArray(actualData$1, sortedObj.key, sortedObj.order);
      } else {
        return actualData$1;
      }
    },
    [sortedObj, props.customGetObjects, actualData$1, entity.getObjects],
  );
  React.useEffect(
    function () {
      var selectedRowDataLength = checkBoxProps.selectedData.length;
      var isCompleteDataSelected =
        selectedRowDataLength === filteredData.length;
      if (isCompleteDataSelected) {
        setSelectAllCheckBox(function (param) {
          return "ALL";
        });
      } else if (checkBoxProps.selectedData.length === 0) {
        setSelectAllCheckBox(function (param) {});
      } else {
        setSelectAllCheckBox(function (param) {
          return "PARTIAL";
        });
      }
    },
    [checkBoxProps.selectedData, filteredData],
  );
  React.useEffect(
    function () {
      if (selectAllCheckBox === "ALL") {
        checkBoxProps.setSelectedData(function (param) {
          return filteredData.map(function (ele) {
            return ele;
          });
        });
      } else if (selectAllCheckBox === undefined) {
        checkBoxProps.setSelectedData(function (param) {
          return [];
        });
      }
    },
    [selectAllCheckBox],
  );
  var sNoArr = Core__Option.getOr(columnFilter["s_no"], []);
  var nullableRows = filteredData.map(function (nullableItem, index) {
    var actualRows;
    if (nullableItem == null) {
      actualRows = [];
    } else {
      var visibleCell = Core__Option.getOr(
        visibleColumns,
        entity.defaultColumns,
      ).map(function (colType) {
        return entity.getCell(nullableItem, colType);
      });
      var startPoint = Core__Option.getOr(sNoArr[0], 1);
      var endPoint = Core__Option.getOr(sNoArr[1], 1);
      var jsonIndex = (index + 1) | 0;
      actualRows =
        sNoArr.length > 0 &&
        !(
          Caml_obj.lessequal(startPoint, jsonIndex) &&
          Caml_obj.greaterequal(endPoint, jsonIndex)
        )
          ? []
          : visibleCell;
    }
    var setIsSelected = function (isSelected) {
      if (isSelected) {
        return checkBoxProps.setSelectedData(function (prev) {
          return prev.concat([nullableItem]);
        });
      } else {
        return checkBoxProps.setSelectedData(function (prev) {
          return prev.filter(function (item) {
            return item !== nullableItem;
          });
        });
      }
    };
    if (actualRows.length > 0) {
      if (showSerialNumber) {
        actualRows.unshift({
          TAG: "Numeric",
          _0: (1 + index) | 0,
          _1: function (val) {
            return val.toString();
          },
        });
      }
      if (checkBoxProps.showCheckBox) {
        var selectedRowIndex = checkBoxProps.selectedData.findIndex(
          function (item) {
            return item === nullableItem;
          },
        );
        actualRows.unshift({
          TAG: "CustomCell",
          _0: React.createElement(
            "div",
            {
              onClick: function (ev) {
                ev.stopPropagation();
              },
            },
            React.createElement(CheckBoxIcon.make, {
              isSelected: selectedRowIndex !== -1,
              setIsSelected: setIsSelected,
              checkboxDimension: "h-4 w-4",
            }),
          ),
          _1: LogicUtils.getStringFromBool(selectedRowIndex !== -1),
        });
      }
    }
    return actualRows;
  });
  var rows = allowNullableRows
    ? nullableRows
    : Belt_Array.keepMap(nullableRows, function (item) {
        if (item.length === 0) {
          return;
        } else {
          return item;
        }
      });
  var dataExists = rows.length > 0;
  var heading$1 = heading.map(function (head, index) {
    var getValue = function (row) {
      return Core__Option.mapOr(row[index], "", Table.getTableCellValue);
    };
    var ele = rows[0];
    var $$default = ele !== undefined ? getValue(ele) : "";
    return {
      key: head.key,
      title: head.title,
      dataType: head.dataType,
      showSort:
        head.showSort &&
        dataExists &&
        (totalResults === rows.length
          ? rows.some(function (row) {
              return getValue(row) !== $$default;
            })
          : true),
      showFilter: head.showFilter,
      highlightCellOnHover: head.highlightCellOnHover,
      headerElement: head.headerElement,
      description: head.description,
      data: head.data,
      isMandatory: head.isMandatory,
      showMultiSelectCheckBox: head.showMultiSelectCheckBox,
      hideOnShrink: head.hideOnShrink,
      customWidth: head.customWidth,
    };
  });
  var paginatedData = filteredData.slice(
    offsetVal$1,
    (offsetVal$1 + localResultsPerPage) | 0,
  );
  var rows$1 = rows.slice(offsetVal$1, (offsetVal$1 + localResultsPerPage) | 0);
  var handleRowClick = React.useCallback(
    function (index) {
      var ele = filteredData[index];
      var actualVal =
        ele !== undefined
          ? Caml_option.nullable_to_opt(Caml_option.valFromOption(ele))
          : undefined;
      if (actualVal === undefined) {
        return;
      }
      var value = Caml_option.valFromOption(actualVal);
      if (onEntityClick !== undefined) {
        return onEntityClick(value);
      }
      if (getShowLink === undefined) {
        return;
      }
      var link = getShowLink(value);
      var finalUrl = LogicUtils.isNonEmptyString(url$1.search)
        ? link + "?" + url$1.search
        : link;
      RescriptReactRouter.push(finalUrl);
    },
    [filteredData, getShowLink, onEntityClick, url$1.search],
  );
  var onRowDoubleClick = React.useCallback(
    function (index) {
      var ele = filteredData[index];
      var actualVal =
        ele !== undefined
          ? Caml_option.nullable_to_opt(Caml_option.valFromOption(ele))
          : undefined;
      if (actualVal === undefined) {
        return;
      }
      var value = Caml_option.valFromOption(actualVal);
      if (onEntityDoubleClick !== undefined) {
        return onEntityDoubleClick(value);
      }
      if (getShowLink === undefined) {
        return;
      }
      var link = getShowLink(value);
      var finalUrl = LogicUtils.isNonEmptyString(url$1.search)
        ? link + "?" + url$1.search
        : link;
      RescriptReactRouter.push(finalUrl);
    },
    [filteredData, getShowLink, onEntityDoubleClick, url$1.search],
  );
  var handleMouseEnter = React.useCallback(
    function (index) {
      var ele = filteredData[index];
      var actualVal =
        ele !== undefined
          ? Caml_option.nullable_to_opt(Caml_option.valFromOption(ele))
          : undefined;
      if (actualVal !== undefined && onMouseEnter !== undefined) {
        return onMouseEnter(Caml_option.valFromOption(actualVal));
      }
    },
    [filteredData, getShowLink, onMouseEnter, url$1.search],
  );
  var handleMouseLeaeve = React.useCallback(
    function (index) {
      var ele = filteredData[index];
      var actualVal =
        ele !== undefined
          ? Caml_option.nullable_to_opt(Caml_option.valFromOption(ele))
          : undefined;
      if (actualVal !== undefined && onMouseLeave !== undefined) {
        return onMouseLeave(Caml_option.valFromOption(actualVal));
      }
    },
    [filteredData, getShowLink, onMouseLeave, url$1.search],
  );
  var match$6;
  if (totalResults > 0) {
    var paginationUI = showPagination
      ? React.createElement(AddDataAttributes.make, {
          attributes: [["data-paginator", "dynamicTablePaginator"]],
          children: React.createElement(Paginator.make, {
            totalResults: filteredDataLength,
            offset: offsetVal$1,
            resultsPerPage: localResultsPerPage,
            setOffset: newSetOffset,
            handleRefetch: handleRefetch,
            currrentFetchCount: currrentFetchCount,
            downloadCsv: props.downloadCsv,
            actualData: actualData$1,
            tableDataLoading: tableDataLoading,
            setResultsPerPage: setLocalResultsPerPage,
            paginationClass: paginationClass,
            showResultsPerPageSelector: showResultsPerPageSelector,
          }),
        })
      : null;
    var isMinHeightRequired =
      noScrollbar ||
      (tableLocalFilter &&
        rows$1.length <= 5 &&
        Core__Option.isNone(frozenUpto));
    var scrollBarClass = Core__Array.reduce(
      Object.values(isFilterOpen),
      false,
      function (acc, item) {
        if (item) {
          return true;
        } else {
          return acc;
        }
      },
    )
      ? ""
      : isMinHeightRequired
        ? noScrollbar
          ? ""
          : "overflow-x-scroll"
        : "overflow-scroll";
    var tmp;
    if (match$3[0] === "Table") {
      var children = React.createElement(Table.make, {
        title: title,
        heading: heading$1,
        rows: rows$1,
        offset: offsetVal$1,
        onRowClick: handleRowClick,
        onRowDoubleClick: onRowDoubleClick,
        onRowClickPresent:
          Core__Option.isSome(onEntityClick) ||
          Core__Option.isSome(getShowLink),
        removeVerticalLines: handleRemoveLines,
        removeHorizontalLines: removeHorizontalLines,
        evenVertivalLines: evenVertivalLines,
        setSortedObj: match$5[1],
        sortedObj: sortedObj,
        setFilterObj: props.setFilterObj,
        filterObj: props.filterObj,
        columnFilterRow: columnFilterRow,
        tableheadingClass: tableheadingClass,
        tableBorderClass: tableBorderClass,
        tableDataBorderClass: tableDataBorderClass,
        collapseTableRow: collapseTableRow,
        getRowDetails: props.getRowDetails,
        actualData: actualData$1,
        onExpandClickData: props.onExpandClickData,
        onMouseEnter: handleMouseEnter,
        onMouseLeave: handleMouseLeaeve,
        highlightText: highlightText,
        heightHeadingClass: props.heightHeadingClass,
        frozenUpto: frozenUpto,
        clearFormatting: clearFormatting,
        rowHeightClass: rowHeightClass,
        isMinHeightRequired: isMinHeightRequired,
        rowCustomClass: rowCustomClass,
        enableEqualWidthCol: enableEqualWidthCol,
        isHighchartLegend: isHighchartLegend,
        headingCenter: headingCenter,
        filterIcon: props.filterIcon,
        filterDropdownClass: props.filterDropdownClass,
        maxTableHeight: maxTableHeight,
        labelMargin: labelMargin,
        customFilterRowStyle: customFilterRowStyle,
        selectAllCheckBox: selectAllCheckBox,
        setSelectAllCheckBox: setSelectAllCheckBox,
        isEllipsisTextRelative: isEllipsisTextRelative,
        customMoneyStyle: customMoneyStyle,
        ellipseClass: ellipseClass,
        selectedRowColor: props.selectedRowColor,
        lastHeadingClass: lastHeadingClass,
        showCheckbox: checkBoxProps.showCheckBox,
        lastColClass: lastColClass,
        fixLastCol: fixLastCol,
        headerCustomBgColor: props.headerCustomBgColor,
        alignCellContent: props.alignCellContent,
        minTableHeightClass: minTableHeightClass,
        filterDropdownMaxHeight: props.filterDropdownMaxHeight,
        customCellColor: props.customCellColor,
        customBorderClass: props.customBorderClass,
        showborderColor: props.showborderColor,
        tableHeadingTextClass: tableHeadingTextClass,
      });
      tmp = tableLocalFilter
        ? React.createElement(DatatableContext.make, {
            value: filterValue,
            children: React.createElement(DataTableFilterOpenContext.make, {
              value: filterOpenValue,
              children: children,
            }),
          })
        : children;
    } else {
      tmp =
        renderCard !== undefined
          ? React.createElement(
              "div",
              {
                className: "overflow-auto flex flex-col",
              },
              Belt_Array.keepMap(paginatedData, function (prim) {
                if (prim == null) {
                  return;
                } else {
                  return Caml_option.some(prim);
                }
              }).map(function (item, rowIndex) {
                return renderCard(
                  (rowIndex + offset) | 0,
                  item,
                  handleRowClick,
                );
              }),
            )
          : React.createElement(CardTable.make, {
              heading: heading$1,
              rows: rows$1,
              offset: offsetVal$1,
              onRowClick: handleRowClick,
              isAnalyticsModule: isAnalyticsModule,
            });
    }
    var loadedTable = React.createElement(
      "div",
      {
        className: "no-scrollbar " + scrollBarClass,
      },
      tmp,
    );
    match$6 = [loadedTable, paginationUI];
  } else if (totalResults === 0 && !tableDataLoading) {
    var noDataTable =
      dataNotFoundComponent !== undefined
        ? Caml_option.valFromOption(dataNotFoundComponent)
        : React.createElement(NoDataFound.make, {
            message: noDataMsg,
            renderType: "Painting",
            customCssClass: "my-6",
          });
    match$6 = [noDataTable, null];
  } else {
    match$6 = [null, null];
  }
  var tableActionBorder$1 = isMobileView
    ? tableActionBorder
    : showFilterBorder
      ? "p-2 bg-white dark:bg-black border border-jp-2-light-gray-400 rounded-lg"
      : "";
  var filterBottomPadding = isMobileView ? "" : "pb-3";
  var filtersOuterMargin = hideTitle ? "" : "my-2";
  var tableActionElements = React.createElement(
    "div",
    {
      className: "flex flex-row",
    },
    advancedSearchComponent !== undefined
      ? React.createElement(AdvancedSearchComponent.make, {
          children: Caml_option.valFromOption(advancedSearchComponent),
          setData: props.setData,
          entity: entity,
          setSummary: props.setSummary,
        })
      : React.createElement(RenderIf.make, {
          condition: searchFields.length > 0,
          children: React.createElement(AdvancedSearchModal.make, {
            searchFields: searchFields,
            url: entity.searchUrl,
            entity: entity,
          }),
        }),
    React.createElement(DesktopView.make, {
      children:
        tableActions !== undefined
          ? React.createElement(LoadedTableContext.make, {
              value: actualData$1,
              children: React.createElement(
                "div",
                {
                  className: filterBottomPadding,
                },
                Caml_option.valFromOption(tableActions),
              ),
            })
          : null,
    }),
  );
  var customizeColumsButtons =
    clearFormattedDataButton !== undefined
      ? React.createElement(
          "div",
          {
            className:
              "flex flex-row mobile:gap-7 desktop:gap-10 " +
              filterBottomPadding,
          },
          Caml_option.valFromOption(clearFormattedDataButton),
          React.createElement(Portal.make, {
            to: "",
            children: rightTitleElement,
          }),
        )
      : React.createElement(
          "div",
          {
            className: Caml_obj.notequal(rightTitleElement, null)
              ? filterBottomPadding
              : "",
          },
          React.createElement(Portal.make, {
            to: "",
            children: rightTitleElement,
          }),
        );
  var addDataAttributesClass = isHighchartLegend
    ? "visibility: hidden"
    : (ignoreHeaderBg ? "" : backgroundClass) + " empty:hidden";
  var dataId = Core__Option.getOr(title.split("-")[0], "");
  var topBottomActions =
    Core__Option.isSome(bottomActions) || !isMobileView
      ? bottomActions
      : tableActions;
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-loaded-table", dataId]],
    children: React.createElement(
      "div",
      {
        className: "w-full",
      },
      React.createElement(
        "div",
        {
          className: addDataAttributesClass,
          style: {
            zIndex: "2",
          },
        },
        React.createElement(
          "div",
          {
            className:
              "flex flex-row justify-between items-center" +
              (hideTitle ? "" : " mt-4 mb-2"),
          },
          React.createElement(
            "div",
            {
              className: "w-full",
            },
            React.createElement(RenderIf.make, {
              condition: !hideTitle,
              children: React.createElement(
                NewThemeUtils.NewThemeHeading.make,
                {
                  heading: title,
                  description: props.description,
                  headingSize: titleSize,
                  rightActions: Caml_option.some(
                    React.createElement(RenderIf.make, {
                      condition: !isMobileView && !isTableActionBesideFilters,
                      children: tableActionElements,
                    }),
                  ),
                  outerMargin: "",
                },
              ),
            }),
          ),
        ),
        React.createElement(RenderIf.make, {
          condition: !hideFilterTopPortals,
          children: React.createElement(
            "div",
            {
              className: "flex justify-between items-center",
            },
            JsxPPXReactSupportU.createElementWithKey(
              "tableFilterTopLeft-" + title,
              PortalCapture.make,
              {
                name: "tableFilterTopLeft-" + title,
                customStyle: "flex items-center gap-x-2",
              },
            ),
            JsxPPXReactSupportU.createElementWithKey(
              "tableFilterTopRight-" + title,
              PortalCapture.make,
              {
                name: "tableFilterTopRight-" + title,
                customStyle: "flex flex-row-reverse items-center gap-x-2",
              },
            ),
          ),
        }),
        React.createElement(
          "div",
          {
            className:
              "flex flex-row mobile:flex-wrap items-center " +
              tableActionBorder$1 +
              " " +
              filtersOuterMargin,
          },
          React.createElement(TableFilterSectionContext.make, {
            children: React.createElement(
              "div",
              {
                className: "flex-1 " + tableDataBackgroundClass,
              },
              filters !== undefined
                ? React.Children.map(
                    Caml_option.valFromOption(filters),
                    function (element) {
                      if (element === null) {
                        return null;
                      } else {
                        return React.createElement(
                          "div",
                          {
                            className: filterBottomPadding,
                          },
                          element,
                        );
                      }
                    },
                  )
                : null,
              JsxPPXReactSupportU.createElementWithKey(
                "extraFilters-" + title,
                PortalCapture.make,
                {
                  name: "extraFilters-" + title,
                },
              ),
            ),
            isFilterSection: true,
          }),
          React.createElement(RenderIf.make, {
            condition: isTableActionBesideFilters || isMobileView || hideTitle,
            children: tableActionElements,
          }),
          customizeColumsButtons,
        ),
      ),
      dataLoading
        ? React.createElement(
            DynamicTableUtils.TableDataLoadingIndicator.make,
            {
              showWithData: rows$1.length !== 0,
            },
          )
        : match$6[0],
      React.createElement(RenderIf.make, {
        condition: tableDataLoading && !dataLoading,
        children: React.createElement(
          DynamicTableUtils.TableDataLoadingIndicator.make,
          {
            showWithData: rows$1.length !== 0,
          },
        ),
      }),
      React.createElement(
        "div",
        {
          className:
            Core__Option.isSome(tableActions) && isMobileView
              ? "flex flex-row-reverse justify-between mb-10 " +
                tableDataBackgroundClass
              : tableDataBackgroundClass,
        },
        match$6[1],
        topBottomActions !== undefined
          ? React.createElement(LoadedTableContext.make, {
              value: actualData$1,
              children: Caml_option.valFromOption(topBottomActions),
            })
          : null,
      ),
    ),
  });
}

var make = LoadedTable;

export {
  checkBoxPropDefaultVal,
  sortAtom,
  backgroundClass,
  useSortedObj,
  sortArray,
  table_pageDetails,
  make,
};
/* sortAtom Not a pure module */
