// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as SelectModal from "./SelectModal.bs.js";

function CustomizeTableColumns(props) {
  var __showSerialNumber = props.showSerialNumber;
  var __sortingBasedOnDisabled = props.sortingBasedOnDisabled;
  var __orderdColumnBasedOnDefaultCol = props.orderdColumnBasedOnDefaultCol;
  var __isModalView = props.isModalView;
  var getHeading = props.getHeading;
  var setColumns = props.setColumns;
  var __visibleColumns = props.visibleColumns;
  var __allHeadersArray = props.allHeadersArray;
  var allHeadersArray =
    __allHeadersArray !== undefined ? __allHeadersArray : [];
  var visibleColumns = __visibleColumns !== undefined ? __visibleColumns : [];
  var isModalView = __isModalView !== undefined ? __isModalView : true;
  var orderdColumnBasedOnDefaultCol =
    __orderdColumnBasedOnDefaultCol !== undefined
      ? __orderdColumnBasedOnDefaultCol
      : false;
  var sortingBasedOnDisabled =
    __sortingBasedOnDisabled !== undefined ? __sortingBasedOnDisabled : true;
  var showSerialNumber =
    __showSerialNumber !== undefined ? __showSerialNumber : true;
  var headingDict = Object.fromEntries(
    allHeadersArray.map(function (item, index) {
      return [getHeading(item).title, index];
    }),
  );
  var sortByOrderOderedArr = function (a, b) {
    var positionInHeader = LogicUtils.getInt(
      headingDict,
      getHeading(a).title,
      0,
    );
    var positionInHeading = LogicUtils.getInt(
      headingDict,
      getHeading(b).title,
      0,
    );
    if (positionInHeader < positionInHeading) {
      return -1;
    } else if (positionInHeader > positionInHeading) {
      return 1;
    } else {
      return 0;
    }
  };
  var defaultColumnsString = props.defaultColumns.map(function (head) {
    return getHeading(head).title;
  });
  var initalHeadingData = allHeadersArray.map(function (head) {
    var columnName = getHeading(head).title;
    var isDisabled = defaultColumnsString.includes(columnName);
    return {
      label: columnName,
      value: columnName,
      isDisabled: isDisabled,
    };
  });
  var initialValues = visibleColumns.map(function (head) {
    return getHeading(head).title;
  });
  var onSubmit = function (values) {
    var getHeadingCol = function (text) {
      var index = allHeadersArray
        .map(function (head) {
          return getHeading(head).title;
        })
        .indexOf(text);
      return allHeadersArray[index];
    };
    var headers = Belt_Array.keepMap(values, getHeadingCol);
    var headers$1 = orderdColumnBasedOnDefaultCol
      ? headers.slice().toSorted(sortByOrderOderedArr)
      : headers;
    setColumns(function (param) {
      return headers$1;
    });
  };
  return React.createElement(SelectModal.make, {
    modalHeading: "Table Columns",
    showModal: props.showModal,
    setShowModal: props.setShowModal,
    isModalView: isModalView,
    onSubmit: onSubmit,
    initialValues: initialValues,
    options: initalHeadingData,
    sortingBasedOnDisabled: sortingBasedOnDisabled,
    showSerialNumber: showSerialNumber,
  });
}

var make = CustomizeTableColumns;

export { make };
/* react Not a pure module */
