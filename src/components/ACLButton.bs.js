// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "./Button.bs.js";
import * as HSwitchUtils from "../screens/HSwitchUtils.bs.js";

function ACLButton(props) {
  var __tooltipText = props.tooltipText;
  var __access = props.access;
  var __allowButtonTextMinWidth = props.allowButtonTextMinWidth;
  var __customButtonStyle = props.customButtonStyle;
  var __disableRipple = props.disableRipple;
  var __fullLength = props.fullLength;
  var __textStyle = props.textStyle;
  var __type_ = props.type_;
  var __showBorder = props.showBorder;
  var __rightIcon = props.rightIcon;
  var __leftIcon = props.leftIcon;
  var __buttonVariant = props.buttonVariant;
  var __buttonType = props.buttonType;
  var __buttonState = props.buttonState;
  var buttonState = __buttonState !== undefined ? __buttonState : "Normal";
  var buttonType =
    __buttonType !== undefined ? __buttonType : "SecondaryFilled";
  var buttonVariant = __buttonVariant !== undefined ? __buttonVariant : "Fit";
  var leftIcon = __leftIcon !== undefined ? __leftIcon : "NoIcon";
  var rightIcon = __rightIcon !== undefined ? __rightIcon : "NoIcon";
  var showBorder = __showBorder !== undefined ? __showBorder : true;
  var type_ = __type_ !== undefined ? __type_ : "button";
  var textStyle = __textStyle !== undefined ? __textStyle : "";
  var fullLength = __fullLength !== undefined ? __fullLength : false;
  var disableRipple = __disableRipple !== undefined ? __disableRipple : false;
  var customButtonStyle =
    __customButtonStyle !== undefined ? __customButtonStyle : "";
  var allowButtonTextMinWidth =
    __allowButtonTextMinWidth !== undefined ? __allowButtonTextMinWidth : true;
  var access = __access !== undefined ? __access : "Access";
  var tooltipText =
    __tooltipText !== undefined
      ? __tooltipText
      : HSwitchUtils.noAccessControlText;
  var buttonState$1;
  buttonState$1 = access === "NoAccess" ? "Disabled" : buttonState;
  var showBtnTextToolTip = access === "NoAccess";
  return React.createElement(Button.make, {
    buttonState: buttonState$1,
    text: props.text,
    buttonType: buttonType,
    buttonVariant: buttonVariant,
    buttonSize: props.buttonSize,
    leftIcon: leftIcon,
    rightIcon: rightIcon,
    showBorder: showBorder,
    type_: type_,
    onClick: props.onClick,
    textStyle: textStyle,
    customIconMargin: props.customIconMargin,
    customTextSize: props.customTextSize,
    customIconSize: props.customIconSize,
    textWeight: props.textWeight,
    fullLength: fullLength,
    disableRipple: disableRipple,
    customButtonStyle: customButtonStyle,
    textStyleClass: props.textStyleClass,
    customTextPaddingClass: props.customTextPaddingClass,
    allowButtonTextMinWidth: allowButtonTextMinWidth,
    customPaddingClass: props.customPaddingClass,
    customRoundedClass: props.customRoundedClass,
    customHeightClass: props.customHeightClass,
    customBackColor: props.customBackColor,
    showBtnTextToolTip: showBtnTextToolTip,
    tooltipText: tooltipText,
    toolTipPosition: props.toolTipPosition,
  });
}

var make = ACLButton;

export { make };
/* react Not a pure module */
