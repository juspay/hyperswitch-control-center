// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "./Button.bs.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FramerMotion from "../libraries/FramerMotion.bs.js";
import * as ErrorBoundary from "./ErrorBoundary.bs.js";
import * as FramerMotion$1 from "framer-motion";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";

function Tabs$TabInfo(props) {
  var __onTabSelection = props.onTabSelection;
  var __showBottomBorder = props.showBottomBorder;
  var __borderDefaultStyle = props.borderDefaultStyle;
  var __borderSelectionStyle = props.borderSelectionStyle;
  var __backgroundStyle = props.backgroundStyle;
  var __darkThemeColor = props.darkThemeColor;
  var __lightThemeColor = props.lightThemeColor;
  var __textStyle = props.textStyle;
  var __disabledTab = props.disabledTab;
  var __isDisabled = props.isDisabled;
  var handleSelectedIndex = props.handleSelectedIndex;
  var index = props.index;
  var __isScrollIntoViewRequired = props.isScrollIntoViewRequired;
  var isSelected = props.isSelected;
  var title = props.title;
  var isScrollIntoViewRequired =
    __isScrollIntoViewRequired !== undefined
      ? __isScrollIntoViewRequired
      : false;
  var isDisabled = __isDisabled !== undefined ? __isDisabled : false;
  var disabledTab = __disabledTab !== undefined ? __disabledTab : [];
  var textStyle = __textStyle !== undefined ? __textStyle : "";
  var lightThemeColor =
    __lightThemeColor !== undefined ? __lightThemeColor : "blue-500";
  var darkThemeColor =
    __darkThemeColor !== undefined ? __darkThemeColor : "blue-500";
  var backgroundStyle =
    __backgroundStyle !== undefined ? __backgroundStyle : "bg-gradient-to-b";
  var borderSelectionStyle =
    __borderSelectionStyle !== undefined ? __borderSelectionStyle : "";
  var borderDefaultStyle =
    __borderDefaultStyle !== undefined ? __borderDefaultStyle : "";
  var showBottomBorder =
    __showBottomBorder !== undefined ? __showBottomBorder : true;
  var onTabSelection =
    __onTabSelection !== undefined ? __onTabSelection : function () {};
  var tabRef = React.useRef(null);
  var fontClass = "font-inter-style";
  var defaultBorderClass = "border-0";
  var tabTextPadding = "px-6";
  var roundedClass = "rounded-t-md";
  var defaultClasses =
    isDisabled && disabledTab.includes(title)
      ? "cursor-not-allowed " +
        fontClass +
        " w-max flex flex-auto flex-row items-center justify-center " +
        roundedClass +
        " " +
        tabTextPadding +
        " " +
        backgroundStyle +
        " from-white to-white dark:from-jp-gray-950 dark:to-jp-gray-950 border-b-0 border-jp-gray-500 dark:border-jp-gray-960 " +
        defaultBorderClass +
        " font-semibold dark:text-jp-gray-text_darktheme dark:text-opacity-50 text-opacity-50 hover:text-opacity-50 dark:hover:text-opacity-50"
      : fontClass +
        " w-max flex flex-auto flex-row items-center justify-center " +
        tabTextPadding +
        " " +
        roundedClass +
        " " +
        defaultBorderClass +
        "  font-semibold text-body";
  var selectionClasses = isSelected
    ? "font-semibold text-" +
      lightThemeColor +
      " dark:text-" +
      darkThemeColor +
      " " +
      textStyle +
      " " +
      borderSelectionStyle +
      " "
    : "text-jp-gray-900 dark:text-jp-gray-text_darktheme dark:text-opacity-75 text-opacity-50 hover:text-opacity-75 dark:hover:text-opacity-100  " +
      borderDefaultStyle;
  var handleClick = React.useCallback(
    function (_ev) {
      if (isDisabled && disabledTab.includes(title)) {
      } else {
        handleSelectedIndex(index);
      }
      onTabSelection();
    },
    [index, handleSelectedIndex],
  );
  var lineStyle = showBottomBorder ? "bg-black w-full h-0.5 rounded-full" : "";
  React.useEffect(
    function () {
      if (isSelected && isScrollIntoViewRequired) {
        Core__Option.forEach(
          Caml_option.nullable_to_opt(tabRef.current),
          function (input) {
            input.scrollIntoView({
              behavior: "smooth",
              block: "nearest",
              inline: "nearest",
            });
          },
        );
      }
    },
    [isSelected, isScrollIntoViewRequired],
  );
  return React.createElement(
    "div",
    {
      className: "flex flex-col cursor-pointer w-max",
    },
    React.createElement(
      "div",
      {
        className:
          defaultClasses + " " + selectionClasses + " select-none pb-2",
        onClick: handleClick,
      },
      title,
    ),
    isSelected
      ? React.createElement(FramerMotion$1.motion.div, {
          className: lineStyle,
          layoutId: "underline",
        })
      : React.createElement("div", {
          className: "h-0.5",
        }),
  );
}

var TabInfo = {
  make: Tabs$TabInfo,
};

function Tabs$IndicationArrow(props) {
  var refElement = props.refElement;
  var side = props.side;
  var onClick = function (_ev) {
    Core__Option.forEach(
      Caml_option.nullable_to_opt(refElement.current),
      function (input) {
        input.scrollIntoView({
          behavior: "smooth",
          block: "nearest",
          inline: "start",
        });
      },
    );
  };
  var roundness = side === "left" ? "rounded-tr-md" : "rounded-tl-md";
  var className = props.isVisible
    ? "absolute " +
      side +
      "-0 bottom-0 shadow-side_shadow 2xl:hidden  " +
      roundness +
      " bg-gray-50"
    : "hidden";
  return React.createElement(
    "div",
    {
      className: className,
    },
    React.createElement(Button.make, {
      buttonType: "Secondary",
      leftIcon: {
        TAG: "FontAwesome",
        _0: props.iconName,
      },
      flattenBottom: true,
      onClick: onClick,
    }),
  );
}

var IndicationArrow = {
  make: Tabs$IndicationArrow,
};

function getBoundingRectInfo(ref, getter) {
  return Core__Option.mapOr(
    Core__Option.map(Caml_option.nullable_to_opt(ref.current), function (prim) {
      return prim.getBoundingClientRect();
    }),
    0,
    getter,
  );
}

function Tabs(props) {
  var __contentHeight = props.contentHeight;
  var __showStickyHeader = props.showStickyHeader;
  var __showBottomBorder = props.showBottomBorder;
  var __borderDefaultStyle = props.borderDefaultStyle;
  var __borderSelectionStyle = props.borderSelectionStyle;
  var __gapBetweenTabs = props.gapBetweenTabs;
  var __tabView = props.tabView;
  var __backgroundStyle = props.backgroundStyle;
  var __includeMargin = props.includeMargin;
  var __renderedTabClassName = props.renderedTabClassName;
  var __showBorder = props.showBorder;
  var __darkThemeColor = props.darkThemeColor;
  var __lightThemeColor = props.lightThemeColor;
  var __tabBottomShadow = props.tabBottomShadow;
  var __disabledTab = props.disabledTab;
  var __isDisabled = props.isDisabled;
  var __textStyle = props.textStyle;
  var __isScrollIntoViewRequired = props.isScrollIntoViewRequired;
  var __borderBottomStyle = props.borderBottomStyle;
  var __tabContainerClass = props.tabContainerClass;
  var onTitleClick = props.onTitleClick;
  var __tabsCustomClass = props.tabsCustomClass;
  var tabs = props.tabs;
  var tabsCustomClass =
    __tabsCustomClass !== undefined ? __tabsCustomClass : "";
  var tabContainerClass =
    __tabContainerClass !== undefined ? __tabContainerClass : "";
  var borderBottomStyle =
    __borderBottomStyle !== undefined ? __borderBottomStyle : "";
  var isScrollIntoViewRequired =
    __isScrollIntoViewRequired !== undefined
      ? __isScrollIntoViewRequired
      : false;
  var textStyle = __textStyle !== undefined ? __textStyle : "";
  var isDisabled = __isDisabled !== undefined ? __isDisabled : false;
  var disabledTab = __disabledTab !== undefined ? __disabledTab : [];
  var tabBottomShadow =
    __tabBottomShadow !== undefined ? __tabBottomShadow : "shadow-md";
  var lightThemeColor =
    __lightThemeColor !== undefined ? __lightThemeColor : "blue-500";
  var darkThemeColor =
    __darkThemeColor !== undefined ? __darkThemeColor : "blue-500";
  var showBorder = __showBorder !== undefined ? __showBorder : true;
  var renderedTabClassName =
    __renderedTabClassName !== undefined ? __renderedTabClassName : "";
  var includeMargin = __includeMargin !== undefined ? __includeMargin : true;
  var backgroundStyle =
    __backgroundStyle !== undefined ? __backgroundStyle : "bg-gradient-to-b";
  var tabView = __tabView !== undefined ? __tabView : "Compress";
  var gapBetweenTabs =
    __gapBetweenTabs !== undefined ? __gapBetweenTabs : "gap-1.5";
  var borderSelectionStyle =
    __borderSelectionStyle !== undefined ? __borderSelectionStyle : "";
  var borderDefaultStyle =
    __borderDefaultStyle !== undefined ? __borderDefaultStyle : "";
  var showBottomBorder =
    __showBottomBorder !== undefined ? __showBottomBorder : true;
  var showStickyHeader =
    __showStickyHeader !== undefined ? __showStickyHeader : false;
  var contentHeight = __contentHeight !== undefined ? __contentHeight : "";
  var initialIndex = Core__Option.getOr(props.initialIndex, 0);
  var match = React.useState(function () {
    return initialIndex;
  });
  var setSelectedIndex = match[1];
  var selectedIndex = match[0];
  var tabOuterClass = tabBottomShadow + " " + gapBetweenTabs;
  React.useEffect(
    function () {
      setSelectedIndex(function (param) {
        return initialIndex;
      });
    },
    [initialIndex],
  );
  var match$1 = React.useState(function () {
    return false;
  });
  var setIsLeftArrowVisible = match$1[1];
  var match$2 = React.useState(function () {
    return true;
  });
  var setIsRightArrowVisible = match$2[1];
  var firstTabRef = React.useRef(null);
  var scrollRef = React.useRef(null);
  var lastTabRef = React.useRef(null);
  var numberOfTabs = tabs.length;
  var onScroll = function (_ev) {
    var leftVal = getBoundingRectInfo(firstTabRef, function (val) {
      return val.x;
    });
    var rightVal = getBoundingRectInfo(lastTabRef, function (val) {
      return val.right;
    });
    var scrollValLeft = getBoundingRectInfo(scrollRef, function (val) {
      return val.x;
    });
    var scrollValRight = getBoundingRectInfo(scrollRef, function (val) {
      return val.right;
    });
    var newIsLeftArrowVisible = ((leftVal - scrollValLeft) | 0) < 0;
    var newIsRightArrowVisible = ((rightVal - scrollValRight) | 0) >= 10;
    setIsLeftArrowVisible(function (param) {
      return newIsLeftArrowVisible;
    });
    setIsRightArrowVisible(function (param) {
      return newIsRightArrowVisible;
    });
  };
  var handleSelectedIndex = function (index) {
    if (onTitleClick !== undefined) {
      onTitleClick(index);
    }
    setSelectedIndex(function (param) {
      return index;
    });
  };
  var tabClass;
  tabClass = tabView === "Compress" ? "" : "w-full";
  var stickyHeader = showStickyHeader
    ? "top-0 height-50 sticky bg-white border-b dark:bg-black border-jp-gray-500 dark:border-jp-gray-960"
    : "";
  var selectedTab = tabs[selectedIndex];
  var tmp;
  if (selectedTab !== undefined) {
    var component = selectedTab.renderContent();
    tmp = React.createElement(FramerMotion.TransitionComponent.make, {
      id: selectedIndex.toString(),
      children: component,
      className: contentHeight,
    });
  } else {
    tmp = "No tabs found";
  }
  return React.createElement(ErrorBoundary.make, {
    children: React.createElement(
      "div",
      {
        className: "flex flex-col " + contentHeight,
      },
      React.createElement(
        "div",
        {
          className: "py-0 " + stickyHeader,
        },
        React.createElement(
          "div",
          {
            ref: Caml_option.some(scrollRef),
            className: "overflow-x-auto no-scrollbar overflow-y-hidden",
            onScroll: onScroll,
          },
          React.createElement(
            "div",
            {
              className:
                "flex flex-row mt-5 pr-8 " +
                tabOuterClass +
                "\n          " +
                (showBorder && includeMargin ? "ml-5" : "") +
                "  " +
                tabContainerClass,
            },
            tabs.map(function (tab, i) {
              var ref =
                i === 0
                  ? Caml_option.some(firstTabRef)
                  : i === ((numberOfTabs - 1) | 0)
                    ? Caml_option.some(lastTabRef)
                    : undefined;
              return React.createElement(
                "div",
                {
                  key: i.toString(),
                  ref: ref,
                  className: tabClass,
                },
                React.createElement(Tabs$TabInfo, {
                  title: tab.title,
                  tabElement: Caml_option.some(tab.tabElement),
                  isSelected: selectedIndex === i,
                  isScrollIntoViewRequired: isScrollIntoViewRequired,
                  index: i,
                  handleSelectedIndex: handleSelectedIndex,
                  isDisabled: isDisabled,
                  disabledTab: disabledTab,
                  textStyle: textStyle,
                  tabsCustomClass: tabsCustomClass,
                  borderBottomStyle: borderBottomStyle,
                  lightThemeColor: lightThemeColor,
                  darkThemeColor: darkThemeColor,
                  backgroundStyle: backgroundStyle,
                  tabView: tabView,
                  borderSelectionStyle: borderSelectionStyle,
                  borderDefaultStyle: borderDefaultStyle,
                  showBottomBorder: showBottomBorder,
                  onTabSelection: tab.onTabSelection,
                }),
              );
            }),
          ),
        ),
      ),
      React.createElement(RenderIf.make, {
        condition: !showStickyHeader && showBorder,
        children: React.createElement("div", {
          className: "border-b border-jp-gray-500 dark:border-jp-gray-960",
        }),
      }),
      React.createElement(
        "div",
        {
          className: renderedTabClassName,
        },
        JsxPPXReactSupportU.createElementWithKey(
          selectedIndex.toString(),
          ErrorBoundary.make,
          {
            children: tmp,
          },
        ),
      ),
    ),
  });
}

var make = Tabs;

export { TabInfo, IndicationArrow, getBoundingRectInfo, make };
/* react Not a pure module */
