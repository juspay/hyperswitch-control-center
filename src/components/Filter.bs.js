// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../utils/Form.bs.js";
import * as Icon from "./Icon.bs.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as FilterUtils from "./FilterUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "./form/FormRenderer.bs.js";
import * as FilterContext from "../context/FilterContext.bs.js";
import * as ReactFinalForm from "../libraries/ReactFinalForm.bs.js";
import * as JsonFlattenUtils from "../utils/JsonFlattenUtils.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as React$1 from "@headlessui/react";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as RemoteFiltersUtils from "./RemoteFiltersUtils.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";

function Filter$ClearFilters(props) {
  var __outsidefilter = props.outsidefilter;
  var clearFilters = props.clearFilters;
  var __defaultFilterKeys = props.defaultFilterKeys;
  var defaultFilterKeys =
    __defaultFilterKeys !== undefined ? __defaultFilterKeys : [];
  var outsidefilter = __outsidefilter !== undefined ? __outsidefilter : false;
  var match = React.useContext(FilterContext.filterContext);
  var updateExistingKeys = match.updateExistingKeys;
  var leftIcon = {
    TAG: "CustomIcon",
    _0: React.createElement(Icon.make, {
      name: "trash-outline",
      size: 24,
    }),
  };
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values", "initialValues"]),
  );
  var handleClearFilter =
    clearFilters !== undefined
      ? function (param) {
          clearFilters();
        }
      : function (param) {
          var searchStr = Belt_Array.keepMap(
            Object.entries(
              Core__Option.getOr(
                Core__JSON.Decode.object(formState.values),
                {},
              ),
            ),
            function (entry) {
              var key = entry[0];
              if (!defaultFilterKeys.includes(key)) {
                return;
              }
              var str = Core__JSON.Classify.classify(entry[1]);
              if (typeof str !== "object") {
                return;
              }
              switch (str.TAG) {
                case "String":
                  return key + "=" + str._0;
                case "Number":
                  return key + "=" + String(str._0);
                case "Array":
                  return key + "=[" + String(str._0) + "]";
                default:
                  return;
              }
            },
          ).join("&");
          updateExistingKeys(FilterUtils.parseFilterString(searchStr));
        };
  var hasExtraFilters = React.useMemo(
    function () {
      return (
        Object.entries(
          Core__Option.getOr(
            Core__JSON.Decode.object(formState.initialValues),
            {},
          ),
        ).filter(function (entry) {
          var str = Core__JSON.Classify.classify(entry[1]);
          var tmp;
          if (typeof str !== "object") {
            tmp = true;
          } else {
            switch (str.TAG) {
              case "String":
                tmp = LogicUtils.isEmptyString(str._0);
                break;
              case "Array":
                tmp = str._0.length === 0;
                break;
              default:
                tmp = false;
            }
          }
          return !tmp;
        }).length > 0
      );
    },
    [formState.initialValues, defaultFilterKeys],
  );
  return React.createElement(RenderIf.make, {
    condition: hasExtraFilters || outsidefilter,
    children: React.createElement(Button.make, {
      text: "Clear All",
      buttonType: "Secondary",
      leftIcon: leftIcon,
      showBorder: false,
      onClick: handleClearFilter,
      textStyle: "text-red-900",
      customButtonStyle: "bg-white rounded-lg !p-2 !h-10 !border mt-3",
    }),
  });
}

var ClearFilters = {
  make: Filter$ClearFilters,
};

function Filter$AutoSubmitter(props) {
  var defaultFilterKeys = props.defaultFilterKeys;
  var submit = props.submit;
  var autoApply = props.autoApply;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values", "dirtyFields"]),
  );
  var values = formState.values;
  React.useEffect(
    function () {
      if (formState.dirty) {
        var defaultFieldsHaveChanged = defaultFilterKeys.some(function (key) {
          return Core__Option.getOr(formState.dirtyFields[key], false);
        });
        if (autoApply || defaultFieldsHaveChanged) {
          submit(formState.values, 0);
        }
      }
    },
    [values],
  );
  return null;
}

var AutoSubmitter = {
  make: Filter$AutoSubmitter,
};

function getStrFromJson(key, val) {
  var str = Core__JSON.Classify.classify(val);
  if (typeof str !== "object") {
    return "";
  }
  switch (str.TAG) {
    case "String":
      return str._0;
    case "Number":
      if (key === "offset") {
        return "0";
      } else {
        return (str._0 | 0).toString();
      }
    case "Array":
      var array = str._0;
      if (array.length > 0) {
        return "[" + array.join(",") + "]";
      } else {
        return "";
      }
    default:
      return "";
  }
}

function Filter(props) {
  var __initalCount = props.initalCount;
  var updateUrlWith = props.updateUrlWith;
  var __customLeftView = props.customLeftView;
  var __customRightView = props.customRightView;
  var __defaultFilterKeys = props.defaultFilterKeys;
  var __autoApply = props.autoApply;
  var tableName = props.tableName;
  var __mandatoryRemoteKeys = props.mandatoryRemoteKeys;
  var localFilters = props.localFilters;
  var remoteOptions = props.remoteOptions;
  var remoteFilters = props.remoteFilters;
  var __path = props.path;
  var setOffset = props.setOffset;
  var __fixedFilters = props.fixedFilters;
  var defaultFilters = props.defaultFilters;
  var fixedFilters = __fixedFilters !== undefined ? __fixedFilters : [];
  var path = __path !== undefined ? __path : "";
  var mandatoryRemoteKeys =
    __mandatoryRemoteKeys !== undefined ? __mandatoryRemoteKeys : [];
  var autoApply = __autoApply !== undefined ? __autoApply : false;
  var defaultFilterKeys =
    __defaultFilterKeys !== undefined ? __defaultFilterKeys : [];
  if (__customRightView !== undefined) {
    Caml_option.valFromOption(__customRightView);
  }
  var customLeftView =
    __customLeftView !== undefined
      ? Caml_option.valFromOption(__customLeftView)
      : null;
  var initalCount = __initalCount !== undefined ? __initalCount : 0;
  var isMobileView = MatchMedia.useMobileChecker();
  var match = React.useContext(FilterContext.filterContext);
  var setfilterKeys = match.setfilterKeys;
  var filterKeys = match.filterKeys;
  var match$1 = React.useState(function () {
    return remoteFilters.map(function (item) {
      return item.field;
    });
  });
  var setAllFilters = match$1[1];
  var allFilters = match$1[0];
  var match$2 = React.useState(function () {
    return {};
  });
  var setInitialValueJson = match$2[1];
  var match$3 = React.useState(function () {
    return [];
  });
  var setFilterList = match$3[1];
  var filterList = match$3[0];
  var match$4 = React.useState(function () {
    return initalCount;
  });
  var setCount = match$4[1];
  var searchParams = decodeURI(match.query);
  var verticalGap = isMobileView ? "" : "gap-y-3";
  React.useEffect(
    function () {
      var updatedAllFilters = remoteFilters.map(function (item) {
        return item.field;
      });
      setAllFilters(function (param) {
        return updatedAllFilters;
      });
    },
    [remoteFilters],
  );
  var localFilterJson = RemoteFiltersUtils.getInitialValuesFromUrl(
    searchParams,
    localFilters.concat(fixedFilters),
    undefined,
    undefined,
    undefined,
  );
  var clearFilterJson = Object.keys(
    LogicUtils.getDictFromJsonObject(
      RemoteFiltersUtils.getInitialValuesFromUrl(
        searchParams,
        localFilters,
        remoteOptions,
        undefined,
        undefined,
      ),
    ),
  ).length;
  React.useEffect(
    function () {
      var initialValues = RemoteFiltersUtils.getInitialValuesFromUrl(
        searchParams,
        remoteFilters.concat(fixedFilters),
        remoteOptions,
        mandatoryRemoteKeys,
        undefined,
      );
      if (updateUrlWith !== undefined) {
        updateUrlWith(
          Object.fromEntries(
            Object.entries(LogicUtils.getDictFromJsonObject(initialValues)).map(
              function (item) {
                var key = item[0];
                return [key, getStrFromJson(key, item[1])];
              },
            ),
          ),
        );
      }
      var match = Core__JSON.Decode.object(initialValues);
      if (match !== undefined) {
        var selectedFilters = [];
        var filtersUnseletced = [];
        filterKeys.forEach(function (key) {
          var item = remoteFilters.find(function (item) {
            return Core__Option.getOr(item.field.inputNames[0], "") === key;
          });
          if (item !== undefined) {
            selectedFilters.push(item.field);
            return;
          }
        });
        remoteFilters.forEach(function (item) {
          if (!selectedFilters.includes(item.field)) {
            filtersUnseletced.push(item.field);
            return;
          }
        });
        setFilterList(function (param) {
          return selectedFilters;
        });
        setCount(function (_prev) {
          return (clearFilterJson + initalCount) | 0;
        });
        setAllFilters(function (_prev) {
          return filtersUnseletced;
        });
        var finalInitialValueJson =
          JsonFlattenUtils.unflattenObject(initialValues);
        setInitialValueJson(function (param) {
          return finalInitialValueJson;
        });
      }
    },
    [searchParams, filterKeys],
  );
  var onSubmit = function (values, param) {
    var obj = Object.fromEntries(
      Object.entries(Core__Option.getOr(Core__JSON.Decode.object(values), {})),
    );
    var flattendDict = JsonFlattenUtils.flattenObject(obj, false);
    var localFilterDict = JsonFlattenUtils.flattenObject(
      localFilterJson,
      false,
    );
    if (updateUrlWith !== undefined) {
      RemoteFiltersUtils.applyFilters(
        flattendDict,
        defaultFilters,
        setOffset,
        path,
        localFilterDict,
        remoteOptions,
        undefined,
        undefined,
        tableName,
        updateUrlWith,
        undefined,
      );
    } else {
      RemoteFiltersUtils.applyFilters(
        flattendDict,
        defaultFilters,
        setOffset,
        path,
        localFilterDict,
        remoteOptions,
        undefined,
        undefined,
        tableName,
        undefined,
        undefined,
      );
    }
    return Promise.resolve(null);
  };
  return React.createElement(
    Form.make,
    {
      children: null,
      onSubmit: onSubmit,
      initialValues: match$2[0],
    },
    React.createElement(Filter$AutoSubmitter, {
      autoApply: autoApply,
      submit: onSubmit,
      defaultFilterKeys: defaultFilterKeys,
    }),
    React.createElement(AddDataAttributes.make, {
      attributes: [["data-filter", "remoteFilters"]],
      children: React.createElement(
        "div",
        undefined,
        React.createElement(
          "div",
          {
            className: "flex gap-3 items-center flex-wrap " + verticalGap,
          },
          customLeftView,
          React.createElement(RenderIf.make, {
            condition: fixedFilters.length > 0,
            children: React.createElement(FormRenderer.FieldsRenderer.make, {
              fields: fixedFilters.map(function (item) {
                return item.field;
              }),
              fieldWrapperClass: "p-0",
              labelClass: "hidden",
            }),
          }),
        ),
        React.createElement(
          "div",
          {
            className: "flex gap-3 flex-wrap",
          },
          React.createElement(RenderIf.make, {
            condition: allFilters.length > 0,
            children: React.createElement(React$1.Menu, {
              as: "div",
              className: "relative inline-block text-left mt-3",
              children: function (_menuProps) {
                return React.createElement(
                  "div",
                  undefined,
                  React.createElement(React$1.Menu.Button, {
                    className:
                      "flex items-center whitespace-pre leading-5 justify-center text-sm  px-4 py-2 font-medium rounded-lg h-10 hover:bg-opacity-80 bg-white border",
                    children: function (_buttonProps) {
                      return React.createElement(
                        React.Fragment,
                        {},
                        React.createElement(Icon.make, {
                          name: "plus",
                          size: 15,
                          className: "mr-2",
                        }),
                        "Add Filters",
                      );
                    },
                  }),
                  React.createElement(React$1.Transition, {
                    as: "span",
                    enter: "transition ease-out duration-100",
                    enterFrom: "transform opacity-0 scale-95",
                    enterTo: "transform opacity-100 scale-100",
                    leave: "transition ease-in duration-75",
                    leaveFrom: "transform opacity-100 scale-100",
                    leaveTo: "transform opacity-0 scale-95",
                    children: Caml_option.some(
                      React.createElement(React$1.Menu.Items, {
                        className:
                          "absolute left-0 w-fit z-50 mt-2 origin-top-right bg-white dark:bg-jp-gray-950 divide-y divide-gray-100 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none",
                        children: function (_props) {
                          return React.createElement(React.Fragment, {
                            children: Caml_option.some(
                              React.createElement(
                                "div",
                                {
                                  className: "px-1 py-1",
                                },
                                allFilters.map(function (option, i) {
                                  return JsxPPXReactSupportU.createElementWithKey(
                                    i.toString(),
                                    React$1.Menu.Item,
                                    {
                                      children: function (props) {
                                        var activeClasses = props.active
                                          ? "group flex rounded-md items-center w-48 px-2 py-2 text-sm bg-gray-100 dark:bg-black"
                                          : "group flex rounded-md items-center w-48 px-2 py-2 text-sm";
                                        return React.createElement(
                                          "div",
                                          {
                                            className: "relative w-max",
                                          },
                                          React.createElement(
                                            "button",
                                            {
                                              className:
                                                activeClasses + " font-medium",
                                              onClick: function (param) {
                                                var updatedFilters =
                                                  filterList.concat([option]);
                                                var keys = [];
                                                updatedFilters.forEach(
                                                  function (item) {
                                                    var val =
                                                      item.inputNames[0];
                                                    if (val !== undefined) {
                                                      keys.push(val);
                                                      return;
                                                    }
                                                  },
                                                );
                                                setfilterKeys(function (param) {
                                                  return keys;
                                                });
                                              },
                                            },
                                            React.createElement(RenderIf.make, {
                                              condition:
                                                LogicUtils.isNonEmptyString(
                                                  option.label,
                                                ),
                                              children: React.createElement(
                                                "div",
                                                {
                                                  className: "mr-5",
                                                },
                                                LogicUtils.snakeToTitle(
                                                  option.label,
                                                ),
                                              ),
                                            }),
                                            React.createElement(RenderIf.make, {
                                              condition:
                                                LogicUtils.isEmptyString(
                                                  option.label,
                                                ),
                                              children: React.createElement(
                                                "div",
                                                {
                                                  className: "mr-5",
                                                },
                                                LogicUtils.snakeToTitle(
                                                  Core__Option.getOr(
                                                    option.inputNames[0],
                                                    "",
                                                  ),
                                                ),
                                              ),
                                            }),
                                          ),
                                        );
                                      },
                                    },
                                  );
                                }),
                              ),
                            ),
                          });
                        },
                      }),
                    ),
                  }),
                );
              },
            }),
          }),
        ),
        React.createElement(
          "div",
          {
            className: "flex gap-3 flex-wrap",
          },
          React.createElement(FormRenderer.FieldsRenderer.make, {
            fields: filterList,
            fieldWrapperClass: "p-0 mt-3",
            labelClass: "hidden",
          }),
          React.createElement(RenderIf.make, {
            condition: match$4[0] > 0,
            children: React.createElement(Filter$ClearFilters, {
              defaultFilterKeys: defaultFilterKeys,
              clearFilters: props.clearFilters,
              outsidefilter: initalCount > 0,
            }),
          }),
        ),
      ),
    }),
  );
}

var makeFieldInfo = FormRenderer.makeFieldInfo;

var make = Filter;

export { makeFieldInfo, ClearFilters, AutoSubmitter, getStrFromJson, make };
/* Form Not a pure module */
