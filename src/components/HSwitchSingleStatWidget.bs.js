// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as React from "react";
import * as Shimmer from "../libraries/Shimmer.bs.js";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as ApexCharts from "../libraries/ApexCharts.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import ReactApexcharts from "react-apexcharts";

function HSwitchSingleStatWidget(props) {
  var __fullWidth = props.fullWidth;
  var __loaderType = props.loaderType;
  var __singleStatLoading = props.singleStatLoading;
  var __borderRounded = props.borderRounded;
  var __statType = props.statType;
  var data = props.data;
  var value = props.value;
  var __deltaTooltipComponent = props.deltaTooltipComponent;
  if (__deltaTooltipComponent !== undefined) {
    Caml_option.valFromOption(__deltaTooltipComponent);
  }
  var statType = __statType !== undefined ? __statType : "";
  var borderRounded =
    __borderRounded !== undefined ? __borderRounded : "rounded-lg";
  var singleStatLoading =
    __singleStatLoading !== undefined ? __singleStatLoading : false;
  var loaderType = __loaderType !== undefined ? __loaderType : "Shimmer";
  var fullWidth = __fullWidth !== undefined ? __fullWidth : false;
  var statValue = function (statType) {
    if (statType === "Amount") {
      return LogicUtils.indianShortNum(value);
    } else if (statType === "Rate" || statType === "NegativeRate") {
      if (Number.isNaN(value)) {
        return "-";
      } else {
        return value.toFixed(2) + "%";
      }
    } else if (statType === "Volume") {
      return LogicUtils.indianShortNum(value);
    } else if (statType === "Latency") {
      return LogicUtils.latencyShortNum(value, undefined, undefined);
    } else if (statType === "LatencyMs") {
      return LogicUtils.latencyShortNum(value, true, undefined);
    } else {
      return value.toString();
    }
  };
  var isMobileWidth = MatchMedia.useMatchMedia("(max-width: 700px)");
  var sortedData1 = React.useMemo(
    function () {
      return data
        .toSorted(function (item1, item2) {
          var x2 = item2[0];
          var x1 = item1[0];
          if (x1 > x2) {
            return -1;
          } else if (x1 === x2) {
            return 0;
          } else {
            return 1;
          }
        })
        .map(function (item) {
          return {
            x: item[0],
            y: item[1],
          };
        });
    },
    [data],
  );
  var options1_chart = {
    height: 10,
    toolbar: {
      show: false,
    },
  };
  var options1_dataLabels = {
    enabled: false,
  };
  var options1_stroke = {
    curve: "smooth",
  };
  var options1_legend = {
    show: false,
  };
  var options1_grid = {
    show: false,
  };
  var options1_xaxis = {
    labels: {
      show: false,
    },
    axisBorder: {
      show: false,
    },
    axisTicks: {
      show: false,
    },
  };
  var options1_yaxis = {
    labels: {
      show: false,
    },
    axisBorder: {
      show: false,
    },
    axisTicks: {
      show: false,
    },
  };
  var options1_tooltip = {
    enabled: false,
  };
  var options1_colors = ["#006DF9"];
  var options1 = {
    chart: options1_chart,
    dataLabels: options1_dataLabels,
    stroke: options1_stroke,
    legend: options1_legend,
    grid: options1_grid,
    xaxis: options1_xaxis,
    yaxis: options1_yaxis,
    tooltip: options1_tooltip,
    colors: options1_colors,
  };
  var series = [
    {
      type: "area",
      data: sortedData1,
    },
  ];
  if (singleStatLoading && loaderType === "Shimmer") {
    return React.createElement(
      "div",
      {
        className: "p-4",
        style: {
          width: fullWidth || isMobileWidth ? "100%" : "33.33%",
        },
      },
      React.createElement(Shimmer.make, {
        styleClass: "w-full h-28",
      }),
    );
  } else {
    return React.createElement(
      "div",
      {
        className: "h-full mt-4",
        style: {
          width: fullWidth || isMobileWidth ? "100%" : "33.33%",
        },
      },
      React.createElement(
        "div",
        {
          className:
            "h-full flex flex-col border " +
            borderRounded +
            " dark:border-jp-gray-850 bg-white dark:bg-jp-gray-lightgray_background overflow-hidden singlestatBox p-2 md:mr-4",
        },
        React.createElement(
          "div",
          {
            className: "p-4 flex flex-col justify-between h-full gap-auto",
          },
          React.createElement(RenderIf.make, {
            condition: singleStatLoading && loaderType === "SideLoader",
            children: React.createElement(
              "div",
              {
                className: "animate-spin self-end absolute",
              },
              React.createElement(Icon.make, {
                name: "spinner",
                size: 16,
              }),
            ),
          }),
          React.createElement(
            "div",
            {
              className: "flex justify-between w-full h-1/2 items-end",
            },
            React.createElement(
              "div",
              {
                className: "font-bold text-3xl w-1/3",
              },
              statValue(statType).toLowerCase(),
            ),
            React.createElement(
              "div",
              {
                className: "h-16 w-2/3 scale-[0.4]",
              },
              React.createElement(ReactApexcharts, {
                options: options1,
                series: ApexCharts.objToJson(series),
                type: "area",
                height: "170",
                width: "380",
              }),
            ),
          ),
          React.createElement(
            "div",
            {
              className:
                "flex gap-2 items-center pt-4 text-jp-gray-700 font-bold self-start h-1/2",
            },
            React.createElement(
              "div",
              {
                className: "font-semibold text-base text-black dark:text-white",
              },
              props.title,
            ),
            React.createElement(ToolTip.make, {
              description: props.tooltipText,
              toolTipFor: Caml_option.some(
                React.createElement(
                  "div",
                  {
                    className: "cursor-pointer",
                  },
                  React.createElement(Icon.make, {
                    name: "info-vacent",
                    size: 13,
                  }),
                ),
              ),
              toolTipPosition: "Top",
              newDesign: true,
            }),
          ),
        ),
      ),
    );
  }
}

var make = HSwitchSingleStatWidget;

export { make };
/* Icon Not a pure module */
