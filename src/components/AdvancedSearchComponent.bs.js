// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../utils/Form.bs.js";
import * as Modal from "../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as AuthHooks from "../hooks/AuthHooks.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as ToastState from "../hooks/ToastState.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "./form/FormRenderer.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";

function getSummary(json) {
  var dict = Core__JSON.Decode.object(json);
  if (dict === undefined) {
    return {
      totalCount: 0,
      count: 0,
    };
  }
  var rowsCount = LogicUtils.getArrayFromDict(dict, "rows", []).length;
  var totalCount = LogicUtils.getInt(dict, "entries", 0);
  return {
    totalCount: totalCount,
    count: rowsCount,
  };
}

function AdvancedSearchComponent(props) {
  var entity = props.entity;
  var url = entity.searchUrl;
  var getObjects = entity.getObjects;
  var setSummary = props.setSummary;
  var setData = props.setData;
  var fetchApi = AuthHooks.useApiFetcher();
  var initialValueJson = {};
  var showToast = ToastState.useShowToast();
  var match = React.useState(function () {
    return false;
  });
  var setShowModal = match[1];
  var onSubmit = function (values, form) {
    return Core__Promise.$$catch(
      fetchApi(
        url,
        JSON.stringify(values),
        undefined,
        undefined,
        "Post",
        undefined,
        undefined,
        undefined,
      )
        .then(function (res) {
          return res.json();
        })
        .then(function (json) {
          var jsonData = Core__Option.flatMap(
            Core__JSON.Decode.object(json),
            function (dict) {
              return dict["rows"];
            },
          );
          var newData =
            jsonData !== undefined
              ? getObjects(jsonData).map(function (obj) {
                  return obj;
                })
              : [];
          var summaryData = Core__Option.flatMap(
            Core__JSON.Decode.object(json),
            function (dict) {
              return dict["summary"];
            },
          );
          var summary =
            summaryData !== undefined
              ? getSummary(summaryData)
              : {
                  totalCount: 0,
                  count: 0,
                };
          if (setSummary !== undefined) {
            setSummary(function (param) {
              return summary;
            });
          }
          if (setData !== undefined) {
            setData(function (param) {
              return newData;
            });
          }
          setShowModal(function (param) {
            return false;
          });
          form.reset({});
          return Promise.resolve(json);
        }),
      function (_err) {
        showToast(
          "Something went wrong. Please try again",
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
        return Promise.resolve(null);
      },
    );
  };
  var validateForm = function (values) {
    var dict = Core__JSON.Decode.object(values);
    var finalValuesDict = dict !== undefined ? dict : {};
    var keys = Object.keys(finalValuesDict);
    var errors = {};
    if (keys.length === 0) {
      errors["Please Choose One of the fields"] = "";
    }
    return errors;
  };
  return React.createElement(
    "div",
    {
      className: "mr-2",
    },
    React.createElement(Button.make, {
      text: "Search",
      buttonType: "Primary",
      leftIcon: {
        TAG: "FontAwesome",
        _0: "search",
      },
      onClick: function (param) {
        setShowModal(function (param) {
          return true;
        });
      },
    }),
    React.createElement(Modal.make, {
      showModal: match[0],
      setShowModal: setShowModal,
      children: React.createElement(
        Form.make,
        {
          children: null,
          onSubmit: onSubmit,
          initialValues: initialValueJson,
          validate: validateForm,
        },
        props.children,
        React.createElement(
          "div",
          {
            className: "flex justify-center mb-2",
          },
          React.createElement(
            "div",
            {
              className: "flex justify-between p-1",
            },
            React.createElement(FormRenderer.SubmitButton.make, {
              text: "Submit",
            }),
          ),
        ),
      ),
      modalHeading: "Search",
      modalClass: "w-full md:w-5/12 mx-auto",
    }),
  );
}

var make = AdvancedSearchComponent;

export { getSummary, make };
/* Form Not a pure module */
