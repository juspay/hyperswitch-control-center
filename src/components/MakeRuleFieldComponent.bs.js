// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ThemeProvider from "../context/ThemeProvider.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";

function validateConditionJson(json) {
  var dict = Core__JSON.Decode.object(json);
  if (
    dict !== undefined &&
    ["operator", "real_field"].every(function (key) {
      return Core__Option.isSome(dict[key]);
    })
  ) {
    if (
      LogicUtils.getArrayFromDict(dict, "value", []).filter(function (ele) {
        return Caml_obj.notequal(ele, "");
      }).length > 0 ||
      LogicUtils.isNonEmptyString(LogicUtils.getString(dict, "value", "")) ||
      LogicUtils.getFloat(dict, "value", -1.0) !== -1.0 ||
      LogicUtils.getString(dict, "operator", "") === "IS NULL"
    ) {
      return true;
    } else {
      return LogicUtils.getString(dict, "operator", "") === "IS NOT NULL";
    }
  } else {
    return false;
  }
}

function MakeRuleFieldComponent$TextView(props) {
  var __fontWeight = props.fontWeight;
  var __fontColor = props.fontColor;
  var str = props.str;
  var fontColor =
    __fontColor !== undefined
      ? __fontColor
      : "text-jp-gray-800 dark:text-jp-gray-600";
  var fontWeight = __fontWeight !== undefined ? __fontWeight : "font-medium";
  if (LogicUtils.isNonEmptyString(str)) {
    return React.createElement(AddDataAttributes.make, {
      attributes: [["data-plc-text", str]],
      children: React.createElement(
        "div",
        {
          className:
            "text-opacity-75 dark:text-opacity-75 hover:text-opacity-100 dark:hover:text-opacity-100 mx-1 " +
            fontColor +
            " " +
            fontWeight +
            " ",
        },
        str,
      ),
    });
  } else {
    return null;
  }
}

var TextView = {
  make: MakeRuleFieldComponent$TextView,
};

function MakeRuleFieldComponent$CompressedView(props) {
  var match = React.useContext(ThemeProvider.themeContext);
  var conditionInput = ReactFinalForm.useField(props.id).input;
  var displayForValue = function (value) {
    var arr = Core__JSON.Classify.classify(value);
    if (typeof arr !== "object") {
      return "";
    }
    switch (arr.TAG) {
      case "Bool":
        return "";
      case "String":
        return arr._0;
      case "Number":
        return arr._0.toString();
      case "Object":
        return LogicUtils.getString(arr._0, "value", "");
      case "Array":
        return arr._0.join(", ");
    }
  };
  var condition = Core__Option.flatMap(
    Core__JSON.Decode.object(conditionInput.value),
    function (dict) {
      return [
        LogicUtils.getString(dict, "logical", ""),
        LogicUtils.getString(dict, "lhs", ""),
        LogicUtils.getString(dict, "comparison", ""),
        displayForValue(
          LogicUtils.getJsonObjectFromDict(
            LogicUtils.getDictfromDict(dict, "value"),
            "value",
          ),
        ),
        LogicUtils.getOptionString(
          LogicUtils.getDictfromDict(dict, "metadata"),
          "key",
        ),
      ];
    },
  );
  if (condition === undefined) {
    return null;
  }
  var key = condition[4];
  return React.createElement(
    "div",
    {
      className: "flex flex-wrap items-center gap-4",
    },
    props.isFirst
      ? null
      : React.createElement(MakeRuleFieldComponent$TextView, {
          str: condition[0],
          fontColor: match.globalUIConfig.font.textColor.primaryNormal,
          fontWeight: "font-semibold",
        }),
    React.createElement(MakeRuleFieldComponent$TextView, {
      str: condition[1],
    }),
    key !== undefined
      ? React.createElement(MakeRuleFieldComponent$TextView, {
          str: key,
        })
      : null,
    React.createElement(MakeRuleFieldComponent$TextView, {
      str: condition[2],
      fontColor: "text-red-500",
      fontWeight: "font-semibold",
    }),
    React.createElement(MakeRuleFieldComponent$TextView, {
      str: condition[3],
    }),
  );
}

var CompressedView = {
  make: MakeRuleFieldComponent$CompressedView,
};

export { validateConditionJson, TextView, CompressedView };
/* react Not a pure module */
