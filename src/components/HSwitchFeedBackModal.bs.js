// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../utils/Form.bs.js";
import * as Modal from "../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as APIUtils from "../screens/APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as ToastState from "../hooks/ToastState.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "./form/FormRenderer.bs.js";
import * as HSwitchUtils from "../screens/HSwitchUtils.bs.js";
import * as RatingOptions from "./RatingOptions.bs.js";
import * as CommonAuthHooks from "../entryPoints/AuthModule/Common/CommonAuthHooks.bs.js";
import * as LabelVisibilityContext from "./form/LabelVisibilityContext.bs.js";
import * as HSwitchFeedBackModalUtils from "./HSwitchFeedBackModalUtils.bs.js";

function HSwitchFeedBackModal(props) {
  var __modalType = props.modalType;
  var setShowModal = props.setShowModal;
  var modalType = __modalType !== undefined ? __modalType : "FeedBackModal";
  var match = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  var email = match.email;
  var showToast = ToastState.useShowToast();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var getURL = APIUtils.useGetURL();
  var onSubmit = async function (values, param) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "USER_DATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = LogicUtils.getJsonFromArrayOfJson([
        [
          "Feedback",
          HSwitchUtils.getBodyForFeedBack(email, values, modalType, undefined),
        ],
      ]);
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var successMessage;
      successMessage =
        modalType === "FeedBackModal"
          ? "Thanks for feedback"
          : "Request submitted succesfully";
      showToast(
        successMessage,
        "ToastSuccess",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {}
    setShowModal(function (param) {
      return false;
    });
    return null;
  };
  var showLabel;
  showLabel = modalType === "FeedBackModal" ? false : true;
  var modalFormFields;
  modalFormFields =
    modalType === "FeedBackModal"
      ? React.createElement(
          React.Fragment,
          {},
          React.createElement(RatingOptions.make, {
            icons: ["angry", "frown", "smile", "smile-beam", "grin-hearts"],
            size: 30,
          }),
          React.createElement(
            "div",
            {
              className:
                "text-md w-full font-medium mt-7 -mb-1 text-dark_black opacity-80 my-5",
            },
            "Type of feedback",
          ),
          React.createElement(
            "div",
            {
              className: "mb-5 mt-1",
            },
            React.createElement(FormRenderer.FieldRenderer.make, {
              field: HSwitchFeedBackModalUtils.selectFeedbackType,
            }),
          ),
          React.createElement(
            "div",
            {
              className:
                "text-md w-full font-medium mt-3 ml-2 -mb-1 text-dark_black opacity-80 my-5",
            },
            "How can we improve your hyperswitch experience?",
          ),
          React.createElement(
            "div",
            {
              className: "mt-2",
            },
            React.createElement(FormRenderer.FieldRenderer.make, {
              field: HSwitchFeedBackModalUtils.feedbackTextBox,
            }),
          ),
        )
      : React.createElement(
          "div",
          {
            className: "flex flex-col gap-1",
          },
          React.createElement(FormRenderer.FieldRenderer.make, {
            field: HSwitchFeedBackModalUtils.connectorNameField,
          }),
          React.createElement(FormRenderer.FieldRenderer.make, {
            field: HSwitchFeedBackModalUtils.connectorDescription,
          }),
        );
  var submitBtnText;
  submitBtnText = modalType === "FeedBackModal" ? "Send" : "Submit Request";
  return React.createElement(Modal.make, {
    showModal: props.showModal,
    setShowModal: setShowModal,
    children: React.createElement(Form.make, {
      children: React.createElement(LabelVisibilityContext.make, {
        children: React.createElement(
          "div",
          {
            className: "flex flex-col justify-center",
          },
          modalFormFields,
          React.createElement(
            "div",
            {
              className: "flex justify-end gap-3 p-1 mt-4",
            },
            React.createElement(Button.make, {
              text: "Cancel",
              buttonType: "Secondary",
              onClick: function (param) {
                setShowModal(function (param) {
                  return false;
                });
              },
            }),
            React.createElement(FormRenderer.SubmitButton.make, {
              text: submitBtnText,
            }),
          ),
        ),
        showLabel: showLabel,
      }),
      onSubmit: onSubmit,
      validate: function (values) {
        return HSwitchFeedBackModalUtils.validateFields(values, modalType);
      },
    }),
    modalHeading: props.modalHeading,
    modalClass:
      "w-full max-w-xl m-auto dark:!bg-jp-gray-lightgray_background pb-3",
    headingClass: "!bg-transparent dark:!bg-jp-gray-lightgray_background",
    closeOnOutsideClick: true,
    borderBottom: true,
  });
}

var make = HSwitchFeedBackModal;

export { make };
/* Form Not a pure module */
