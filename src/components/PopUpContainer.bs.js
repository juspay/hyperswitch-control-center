// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Recoil from "recoil";
import * as PopUpState from "../hooks/PopUpState.bs.js";
import * as PopUpConfirm from "./PopUpConfirm.bs.js";

function PopUpContainer(props) {
  var match = Recoil.useRecoilState(PopUpState.openPopUp);
  var setOpenPopUp = match[1];
  var activePopUp = match[0][0];
  var popUp;
  if (activePopUp !== undefined) {
    var handleConfirm = function (ev) {
      setOpenPopUp(function (prevArr) {
        return prevArr.slice(1);
      });
      var onClick = activePopUp.handleConfirm.onClick;
      if (onClick !== undefined) {
        return onClick(ev);
      }
    };
    var handlePopUp = function (ev) {
      setOpenPopUp(function (prevArr) {
        return prevArr.slice(1);
      });
      var fn = activePopUp.handleCancel;
      if (fn === undefined) {
        return;
      }
      var onClick = fn.onClick;
      if (onClick !== undefined) {
        return onClick(ev);
      } else {
        ev.stopPropagation();
        return;
      }
    };
    var handleCancel = function (ev) {
      setOpenPopUp(function (prevArr) {
        return prevArr.slice(1);
      });
      var fn = activePopUp.handleCancel;
      if (fn === undefined) {
        return;
      }
      var onClick = fn.onClick;
      if (onClick !== undefined) {
        return onClick(ev);
      } else {
        ev.stopPropagation();
        return;
      }
    };
    var popUpType = activePopUp.popUpType;
    var size = activePopUp.popUpSize;
    var popUpSize = size !== undefined ? size : "Large";
    var buttonText = activePopUp.handleConfirm.text;
    var confirmButtonIcon = activePopUp.handleConfirm.icon;
    var obj = activePopUp.handleCancel;
    var match$1 =
      obj !== undefined
        ? [obj.text, true, obj.icon]
        : [undefined, undefined, undefined];
    var showIcon;
    showIcon = popUpType[1] === "WithIcon" ? true : false;
    popUp = React.createElement(PopUpConfirm.make, {
      handlePopUp: handlePopUp,
      handleConfirm: handleConfirm,
      handleCancel: handleCancel,
      confirmType: activePopUp.heading,
      confirmText: activePopUp.description,
      buttonText: buttonText,
      confirmButtonIcon: confirmButtonIcon,
      cancelButtonIcon: match$1[2],
      popUpType: popUpType[0],
      cancelButtonText: match$1[0],
      showIcon: showIcon,
      showPopUp: true,
      showCloseIcon: match$1[1],
      popUpSize: popUpSize,
    });
  } else {
    popUp = null;
  }
  return React.createElement(
    "div",
    {
      className: "relative",
    },
    props.children,
    popUp,
  );
}

var make = PopUpContainer;

export { make };
/* react Not a pure module */
