// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../Icon.bs.js";
import * as React from "react";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as Core__Int from "@rescript/core/src/Core__Int.bs.js";
import * as SelectBox from "../SelectBox.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as NewThemeUtils from "../NewThemeUtils.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";
import * as ConnectorTableUtils from "../../screens/Connectors/ConnectorTableUtils.bs.js";

function AddPLGateway$GatewayView(props) {
  var match = React.useContext(ThemeProvider.themeContext);
  var textColor = match.globalUIConfig.font.textColor;
  return React.createElement(
    "div",
    {
      className: "flex flex-wrap gap-4 items-center",
    },
    props.gateways.map(function (ruleGateway, index) {
      return React.createElement(
        "div",
        {
          key: index.toString(),
          className:
            "my-2 h-6 md:h-8 flex items-center rounded-md  border border-jp-gray-500 dark:border-jp-gray-960 font-medium\n                            " +
            textColor.primaryNormal +
            " hover:" +
            textColor.primaryNormal +
            " bg-gradient-to-b from-jp-gray-250 to-jp-gray-200\n                            dark:from-jp-gray-950 dark:to-jp-gray-950 focus:outline-none px-2 gap-1",
        },
        ruleGateway.connector.connector,
        React.createElement(RenderIf.make, {
          condition: ruleGateway.split !== 0,
          children: React.createElement(
            "span",
            {
              className: "text-jp-gray-700 dark:text-jp-gray-600 ml-1",
            },
            ruleGateway.split.toString() + "%",
          ),
        }),
      );
    }),
  );
}

var GatewayView = {
  make: AddPLGateway$GatewayView,
};

function AddPLGateway(props) {
  var connectorList = props.connectorList;
  var __dropDownButtonText = props.dropDownButtonText;
  var __isExpanded = props.isExpanded;
  var __isFirst = props.isFirst;
  var id = props.id;
  var isFirst = __isFirst !== undefined ? __isFirst : false;
  var isExpanded = __isExpanded !== undefined ? __isExpanded : false;
  var dropDownButtonText =
    __dropDownButtonText !== undefined ? __dropDownButtonText : "Add Gateways";
  var gateWaysInput = ReactFinalForm.useField(id).input;
  var gatewayName = function (name) {
    return ConnectorTableUtils.getConnectorObjectFromListViaId(
      Core__Option.getOr(connectorList, [
        ConnectorListMapper.getProcessorPayloadType({}),
      ]),
      name,
    ).connector_name;
  };
  var isDistribute =
    id === "algorithm.data" ||
    !LogicUtils.getArrayFromJson(gateWaysInput.value, []).some(function (ele) {
      return (
        LogicUtils.getFloat(
          LogicUtils.getDictFromJsonObject(ele),
          "distribution",
          0.0,
        ) === 100.0
      );
    });
  var selectedOptions = Belt_Array.keepMap(
    Core__Option.getOr(Core__JSON.Decode.array(gateWaysInput.value), []),
    function (item) {
      return Core__Option.flatMap(
        Core__JSON.Decode.object(item),
        function (dict) {
          var connectorDict = LogicUtils.getDictfromDict(dict, "connector");
          return {
            split: LogicUtils.getInt(dict, "split", 100),
            connector: {
              connector: LogicUtils.getString(connectorDict, "connector", ""),
              merchant_connector_id: LogicUtils.getString(
                connectorDict,
                "merchant_connector_id",
                "",
              ),
            },
          };
        },
      );
    },
  );
  var input_onBlur = function (_ev) {};
  var input_onChange = function (ev) {
    if (ev.length === 0) {
      return gateWaysInput.onChange([]);
    }
    var sharePercent = isDistribute ? Caml_int32.div(100, ev.length) : 100;
    var gatewaysArr = ev.map(function (item, i) {
      var sharePercent$1 =
        i === ((ev.length - 1) | 0) && isDistribute
          ? (100 - Math.imul(sharePercent, i)) | 0
          : sharePercent;
      return {
        split: sharePercent$1,
        connector: {
          connector: gatewayName(item),
          merchant_connector_id: item,
        },
      };
    });
    gateWaysInput.onChange(gatewaysArr);
  };
  var input_onFocus = function (_ev) {};
  var input_value = selectedOptions.map(function (selectedOption) {
    return selectedOption.connector.merchant_connector_id;
  });
  var input = {
    name: "gateways",
    onBlur: input_onBlur,
    onChange: input_onChange,
    onFocus: input_onFocus,
    value: input_value,
    checked: true,
  };
  if (isExpanded) {
    return React.createElement(
      "div",
      {
        className: "flex flex-row ml-2",
      },
      React.createElement(RenderIf.make, {
        condition: !isFirst,
        children: React.createElement("div", {
          className:
            "w-8 h-10 border-jp-gray-700 ml-10 border-dashed border-b border-l ",
        }),
      }),
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-6 mt-6 mb-4 pt-0.5",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-wrap gap-4",
          },
          React.createElement(
            "div",
            {
              className: "flex",
            },
            React.createElement(SelectBox.BaseDropdown.make, {
              buttonText: dropDownButtonText,
              allowMultiSelect: true,
              input: input,
              options: props.gatewayOptions,
              hideMultiSelectButtons: true,
              buttonType: "SecondaryFilled",
              defaultLeftIcon: {
                TAG: "FontAwesome",
                _0: "plus",
              },
              customButtonStyle: "bg-white dark:bg-jp-gray-darkgray_background",
              fixedDropDownDirection: "TopRight",
              searchable: true,
              maxHeight: "max-h-full sm:max-h-64",
            }),
            React.createElement(
              "span",
              {
                className: "text-lg text-red-500 ml-1",
              },
              "*",
            ),
          ),
          selectedOptions.map(function (item, i) {
            var key = ((i + 1) | 0).toString();
            return React.createElement(
              "div",
              {
                key: key,
                className: "flex flex-row",
              },
              React.createElement(
                "div",
                {
                  className:
                    "w-min flex flex-row items-center justify-around gap-2 h-10 rounded-md  border border-jp-gray-500 dark:border-jp-gray-960\n               text-jp-gray-900  hover:text-opacity-100 dark:text-jp-gray-text_darktheme dark:hover:text-jp-gray-text_darktheme\n               dark:hover:text-opacity-75  text-opacity-50 hover:text-jp-gray-900 bg-gradient-to-b\n               from-jp-gray-250 to-jp-gray-200 dark:from-jp-gray-950 dark:to-jp-gray-950 \n               dark:text-opacity-50 focus:outline-none px-1 ",
                },
                React.createElement(NewThemeUtils.Badge.make, {
                  number: (i + 1) | 0,
                }),
                React.createElement("div", undefined, item.connector.connector),
                React.createElement(Icon.make, {
                  name: "close",
                  size: 10,
                  className: "mr-2 cursor-pointer ",
                  onClick: function (ev) {
                    ev.stopPropagation();
                    input_onChange(
                      selectedOptions
                        .map(function (selectedOption) {
                          return selectedOption.connector.connector;
                        })
                        .filter(function (param, i$1) {
                          return i$1 !== i;
                        }),
                    );
                  },
                }),
                React.createElement(RenderIf.make, {
                  condition: isDistribute && selectedOptions.length > 0,
                  children: React.createElement(
                    React.Fragment,
                    {},
                    React.createElement("input", {
                      className:
                        "w-10 text-right outline-none bg-white dark:bg-jp-gray-970 px-1 border border-jp-gray-300 dark:border-jp-gray-850 rounded-md",
                      inputMode: "text",
                      name: key,
                      type: "text",
                      value: item.split.toString(),
                      onChange: function (ev) {
                        var val = ev.target.value;
                        var value = Core__Option.getOr(
                          Core__Int.fromString(undefined, val),
                          0,
                        );
                        if (value >= 100) {
                          return;
                        }
                        var newList = selectedOptions.map(function (option) {
                          if (
                            option.connector.connector ===
                            item.connector.connector
                          ) {
                            return {
                              split: value,
                              connector: option.connector,
                            };
                          } else {
                            return option;
                          }
                        });
                        gateWaysInput.onChange(newList);
                      },
                    }),
                    React.createElement("div", undefined, "%"),
                  ),
                }),
              ),
            );
          }),
        ),
      ),
    );
  } else {
    return React.createElement(AddPLGateway$GatewayView, {
      gateways: selectedOptions,
    });
  }
}

var make = AddPLGateway;

export { GatewayView, make };
/* Icon Not a pure module */
