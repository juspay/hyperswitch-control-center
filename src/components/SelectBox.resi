type retType = CheckBox(array<string>) | Radiobox(string)
external toDict: 'a => RescriptCore.Dict.t<'t> = "%identity"
@send external getClientRects: Dom.element => Dom.domRect = "getClientRects"
@send external focus: Dom.element => unit = "focus"
external ffInputToSelectInput: ReactFinalForm.fieldRenderPropsInput => ReactFinalForm.fieldRenderPropsCustomInput<
  array<string>,
> = "%identity"
external ffInputToRadioInput: ReactFinalForm.fieldRenderPropsInput => ReactFinalForm.fieldRenderPropsCustomInput<
  string,
> = "%identity"
let regex: (string, string) => Js.Re.t
module ListItem: {
  @react.component
  let make: (
    ~isDropDown: bool,
    ~searchString: string,
    ~multiSelect: bool,
    ~optionSize: CheckBoxIcon.size=?,
    ~isSelectedStateMinus: bool=?,
    ~isSelected: bool,
    ~isPrevSelected: bool=?,
    ~isNextSelected: bool=?,
    ~onClick: JsxEvent.Mouse.t => unit,
    ~text: string,
    ~fill: string=?,
    ~labelValue: string=?,
    ~isDisabled: bool=?,
    ~icon: Button.iconType,
    ~leftVacennt: bool=?,
    ~showToggle: bool=?,
    ~customStyle: string=?,
    ~serialNumber: option<string>=?,
    ~isMobileView: bool=?,
    ~description: option<string>=?,
    ~customLabelStyle: option<string>=?,
    ~customMarginStyle: string=?,
    ~listFlexDirection: string=?,
    ~customSelectStyle: string=?,
    ~textOverflowClass: string=?,
    ~dataId: int,
    ~showDescriptionAsTool: bool=?,
    ~optionClass: string=?,
    ~selectClass: string=?,
    ~toggleProps: string=?,
    ~checkboxDimension: string=?,
    ~iconStroke: string=?,
    ~showToolTipOptions: bool=?,
    ~textEllipsisForDropDownOptions: bool=?,
    ~textColorClass: string=?,
  ) => React.element
}
type dropdownOptionWithoutOptional = {
  label: string,
  value: string,
  isDisabled: bool,
  icon: Button.iconType,
  description: option<string>,
  iconStroke: string,
  textColor: string,
  optGroup: string,
}
type dropdownOption = {
  label: string,
  value: string,
  optGroup?: string,
  isDisabled?: bool,
  icon?: Button.iconType,
  description?: string,
  iconStroke?: string,
  textColor?: string,
}
let makeNonOptional: dropdownOption => dropdownOptionWithoutOptional
let useTransformed: array<dropdownOption> => array<dropdownOptionWithoutOptional>
type allSelectType = Icon | Text
type opt = {name_: string}
let makeOptions: array<string> => array<dropdownOption>
module BaseSelect: {
  @react.component
  let make: (
    ~showSelectAll: bool=?,
    ~showDropDown: bool=?,
    ~isDropDown: bool=?,
    ~options: array<dropdownOption>,
    ~optionSize: CheckBoxIcon.size=?,
    ~isSelectedStateMinus: bool=?,
    ~onSelect: array<string> => unit,
    ~value: JSON.t,
    ~onBlur: ReactEvent.Focus.t => unit=?,
    ~showClearAll: bool=?,
    ~isHorizontal: bool=?,
    ~insertselectBtnRef: ReactDOM.Ref.callbackDomRef=?,
    ~insertclearBtnRef: ReactDOM.Ref.callbackDomRef=?,
    ~customLabelStyle: string=?,
    ~showToggle: bool=?,
    ~showSerialNumber: bool=?,
    ~heading: string=?,
    ~showSelectionAsChips: bool=?,
    ~maxHeight: string=?,
    ~searchable: bool=?,
    ~optionRigthElement: React.element=?,
    ~searchInputPlaceHolder: string=?,
    ~showSearchIcon: bool=?,
    ~customStyle: string=?,
    ~customMargin: string=?,
    ~disableSelect: bool=?,
    ~deselectDisable: bool=?,
    ~hideBorder: bool=?,
    ~allSelectType: allSelectType=?,
    ~isMobileView: bool=?,
    ~isModalView: bool=?,
    ~customSearchStyle: string=?,
    ~hasApplyButton: bool=?,
    ~setShowDropDown: ('a => bool) => unit=?,
    ~dropdownCustomWidth: string=?,
    ~sortingBasedOnDisabled: bool=?,
    ~customMarginStyle: string=?,
    ~listFlexDirection: string=?,
    ~onApply: JsxEvent.Mouse.t => unit=?,
    ~showAllSelectedOptions: bool=?,
    ~showDescriptionAsTool: bool=?,
    ~optionClass: string=?,
    ~selectClass: string=?,
    ~toggleProps: string=?,
    ~showSelectCountButton: bool=?,
    ~customSelectAllStyle: string=?,
    ~checkboxDimension: string=?,
    ~dropdownClassName: string=?,
    ~onItemSelect: (JsxEvent.Mouse.t, Js_string.t) => unit=?,
    ~wrapBasis: string=?,
    ~preservedAppliedOptions: array<Js_string.t>=?,
  ) => React.element
}
module BaseSelectButton: {
  @react.component
  let make: (
    ~showDropDown: bool=?,
    ~isDropDown: bool=?,
    ~isHorizontal: bool=?,
    ~options: array<dropdownOption>,
    ~optionSize: CheckBoxIcon.size=?,
    ~isSelectedStateMinus: bool=?,
    ~onSelect: string => unit,
    ~value: JSON.t,
    ~deselectDisable: bool=?,
    ~onBlur: ReactEvent.Focus.t => unit=?,
    ~setShowDropDown: ('a => bool) => unit=?,
    ~onAssignClick: string => unit=?,
    ~customSearchStyle: string,
    ~disableSelect: bool=?,
    ~isMobileView: bool=?,
    ~hideAssignBtn: bool=?,
    ~searchInputPlaceHolder: string=?,
    ~showSearchIcon: bool=?,
    ~allowButtonTextMinWidth: bool=?,
  ) => React.element
}
module RenderListItemInBaseRadio: {
  @react.component
  let make: (
    ~newOptions: array<dropdownOptionWithoutOptional>,
    ~value: JSON.t,
    ~descriptionOnHover: bool,
    ~isDropDown: bool,
    ~textIconPresent: bool,
    ~searchString: string,
    ~optionSize: CheckBoxIcon.size,
    ~isSelectedStateMinus: bool,
    ~onItemClick: (string, bool, JsxEvent.Mouse.t) => unit,
    ~fill: string,
    ~customStyle: string,
    ~isMobileView: bool,
    ~listFlexDirection: string,
    ~customSelectStyle: string,
    ~textOverflowClass: option<string>,
    ~showToolTipOptions: bool,
    ~textEllipsisForDropDownOptions: bool,
    ~isHorizontal: bool,
    ~customMarginStyleOfListItem: string=?,
  ) => React.element
}
let getHashMappedOptionValues: array<dropdownOptionWithoutOptional> => RescriptCore.Dict.t<
  array<dropdownOptionWithoutOptional>,
>
let getSortedKeys: RescriptCore.Dict.t<'a> => array<string>
module BaseRadio: {
  @react.component
  let make: (
    ~showDropDown: bool=?,
    ~isDropDown: bool=?,
    ~isHorizontal: bool=?,
    ~options: array<dropdownOption>,
    ~optionSize: CheckBoxIcon.size=?,
    ~isSelectedStateMinus: bool=?,
    ~onSelect: string => unit,
    ~value: JSON.t,
    ~deselectDisable: bool=?,
    ~onBlur: ReactEvent.Focus.t => unit=?,
    ~fill: string=?,
    ~customStyle: string=?,
    ~searchable: bool=?,
    ~isMobileView: bool=?,
    ~customSearchStyle: string=?,
    ~descriptionOnHover: bool=?,
    ~addDynamicValue: bool=?,
    ~dropdownCustomWidth: string=?,
    ~dropdownRef: React.ref<Nullable.t<Dom.element>>=?,
    ~showMatchingRecordsText: bool=?,
    ~fullLength: bool=?,
    ~selectedString: string=?,
    ~setSelectedString: ('a => Js_string.t) => unit=?,
    ~setExtSearchString: ('b => string) => unit=?,
    ~listFlexDirection: string=?,
    ~baseComponentCustomStyle: string=?,
    ~customSelectStyle: string=?,
    ~maxHeight: string=?,
    ~textOverflowClass: string=?,
    ~searchInputPlaceHolder: string=?,
    ~showSearchIcon: bool=?,
    ~showToolTipOptions: bool=?,
    ~textEllipsisForDropDownOptions: bool=?,
  ) => React.element
}
type direction = BottomLeft | BottomMiddle | BottomRight | TopLeft | TopMiddle | TopRight
module BaseDropdown: {
  @react.component
  let make: (
    ~buttonText: string,
    ~buttonSize: Button.buttonSize=?,
    ~allowMultiSelect: bool,
    ~input: ReactFinalForm.fieldRenderPropsInput,
    ~showClearAll: bool=?,
    ~showSelectAll: bool=?,
    ~options: array<dropdownOption>,
    ~optionSize: CheckBoxIcon.size=?,
    ~isSelectedStateMinus: bool=?,
    ~hideMultiSelectButtons: bool,
    ~deselectDisable: bool=?,
    ~buttonType: Button.buttonType=?,
    ~baseComponent: React.element=?,
    ~baseComponentMethod: bool => React.element=?,
    ~disableSelect: bool=?,
    ~textStyle: string=?,
    ~buttonTextWeight: string=?,
    ~defaultLeftIcon: Button.iconType=?,
    ~autoApply: bool=?,
    ~fullLength: bool=?,
    ~customButtonStyle: string=?,
    ~onAssignClick: string => unit=?,
    ~fixedDropDownDirection: direction=?,
    ~addButton: bool=?,
    ~marginTop: string=?,
    ~customStyle: string=?,
    ~customSearchStyle: string=?,
    ~showSelectionAsChips: bool=?,
    ~showToolTip: bool=?,
    ~showNameAsToolTip: bool=?,
    ~searchable: bool=?,
    ~showBorder: bool=?,
    ~dropDownCustomBtnClick: bool=?,
    ~showCustomBtnAtEnd: bool=?,
    ~customButton: React.element=?,
    ~descriptionOnHover: bool=?,
    ~addDynamicValue: bool=?,
    ~showMatchingRecordsText: bool=?,
    ~hasApplyButton: bool=?,
    ~dropdownCustomWidth: string=?,
    ~allowButtonTextMinWidth: bool=?,
    ~customMarginStyle: string=?,
    ~customButtonLeftIcon: Button.iconType=?,
    ~customTextPaddingClass: string=?,
    ~customButtonPaddingClass: string=?,
    ~customButtonIconMargin: string=?,
    ~textStyleClass: string=?,
    ~buttonStyleOnDropDownOpened: string=?,
    ~selectedString: string=?,
    ~setSelectedString: ('a => Js_string.t) => unit=?,
    ~setExtSearchString: ('b => string) => unit=?,
    ~listFlexDirection: string=?,
    ~ellipsisOnly: bool=?,
    ~isPhoneDropdown: bool=?,
    ~onApply: JsxEvent.Mouse.t => unit=?,
    ~showAllSelectedOptions: bool=?,
    ~buttonClickFn: string => unit=?,
    ~showSelectCountButton: bool=?,
    ~maxHeight: string=?,
    ~customBackColor: string=?,
    ~showToolTipOptions: bool=?,
    ~textEllipsisForDropDownOptions: bool=?,
    ~showBtnTextToolTip: bool=?,
    ~dropdownClassName: string=?,
    ~searchInputPlaceHolder: string=?,
    ~showSearchIcon: bool=?,
    ~sortingBasedOnDisabled: bool=?,
  ) => React.element
}
module InfraSelectBox: {
  @react.component
  let make: (
    ~options: array<dropdownOption>,
    ~input: ReactFinalForm.fieldRenderPropsInput,
    ~deselectDisable: bool=?,
    ~allowMultiSelect: bool=?,
    ~borderRadius: string=?,
    ~selectedClass: string=?,
    ~nonSelectedClass: string=?,
    ~showTickMark: bool=?,
  ) => React.element
}
module ChipFilterSelectBox: {
  @react.component
  let make: (
    ~options: array<dropdownOption>,
    ~input: ReactFinalForm.fieldRenderPropsInput,
    ~deselectDisable: bool=?,
    ~allowMultiSelect: bool=?,
    ~isTickRequired: bool=?,
    ~customStyleForChips: string=?,
  ) => React.element
}
@react.component
let make: (
  ~input: ReactFinalForm.fieldRenderPropsInput,
  ~buttonText: string=?,
  ~buttonSize: Button.buttonSize=?,
  ~allowMultiSelect: bool=?,
  ~isDropDown: bool=?,
  ~hideMultiSelectButtons: bool=?,
  ~options: array<dropdownOption>,
  ~optionSize: CheckBoxIcon.size=?,
  ~isSelectedStateMinus: bool=?,
  ~isHorizontal: bool=?,
  ~deselectDisable: bool=?,
  ~showClearAll: bool=?,
  ~showSelectAll: bool=?,
  ~buttonType: Button.buttonType=?,
  ~disableSelect: bool=?,
  ~fullLength: bool=?,
  ~customButtonStyle: string=?,
  ~textStyle: string=?,
  ~marginTop: string=?,
  ~customStyle: string=?,
  ~showSelectionAsChips: bool=?,
  ~showToggle: bool=?,
  ~maxHeight: string=?,
  ~searchable: bool=?,
  ~fill: string=?,
  ~optionRigthElement: React.element=?,
  ~hideBorder: bool=?,
  ~allSelectType: allSelectType=?,
  ~customSearchStyle: string=?,
  ~searchInputPlaceHolder: string=?,
  ~showSearchIcon: bool=?,
  ~customLabelStyle: string=?,
  ~customMargin: string=?,
  ~showToolTip: bool=?,
  ~showNameAsToolTip: bool=?,
  ~showBorder: bool=?,
  ~showCustomBtnAtEnd: bool=?,
  ~dropDownCustomBtnClick: bool=?,
  ~addDynamicValue: bool=?,
  ~showMatchingRecordsText: bool=?,
  ~customButton: React.element=?,
  ~descriptionOnHover: bool=?,
  ~fixedDropDownDirection: direction=?,
  ~dropdownCustomWidth: string=?,
  ~allowButtonTextMinWidth: bool=?,
  ~baseComponent: React.element=?,
  ~baseComponentMethod: bool => React.element=?,
  ~customMarginStyle: string=?,
  ~buttonTextWeight: string=?,
  ~customButtonLeftIcon: Button.iconType=?,
  ~customTextPaddingClass: string=?,
  ~customButtonPaddingClass: string=?,
  ~customButtonIconMargin: string=?,
  ~textStyleClass: string=?,
  ~setExtSearchString: ('a => string) => unit=?,
  ~buttonStyleOnDropDownOpened: string=?,
  ~listFlexDirection: string=?,
  ~baseComponentCustomStyle: string=?,
  ~ellipsisOnly: bool=?,
  ~customSelectStyle: string=?,
  ~isPhoneDropdown: bool=?,
  ~hasApplyButton: bool=?,
  ~onApply: JsxEvent.Mouse.t => unit=?,
  ~showAllSelectedOptions: bool=?,
  ~buttonClickFn: string => unit=?,
  ~showDescriptionAsTool: bool=?,
  ~optionClass: string=?,
  ~selectClass: string=?,
  ~toggleProps: string=?,
  ~showSelectCountButton: bool=?,
  ~leftIcon: Button.iconType=?,
  ~customBackColor: string=?,
  ~customSelectAllStyle: string=?,
  ~checkboxDimension: string=?,
  ~showToolTipOptions: bool=?,
  ~textEllipsisForDropDownOptions: bool=?,
  ~showBtnTextToolTip: bool=?,
  ~dropdownClassName: string=?,
  ~onItemSelect: (JsxEvent.Mouse.t, Js_string.t) => unit=?,
  ~wrapBasis: string=?,
) => React.element
