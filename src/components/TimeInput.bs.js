// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Core__Int from "@rescript/core/src/Core__Int.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

function padNum(num) {
  var str = num.toString();
  if (str.length === 1) {
    return "0" + str;
  } else {
    return str;
  }
}

function TimeInput$OptionVals(props) {
  var isDisabled = props.isDisabled;
  var __upto = props.upto;
  var upto = __upto !== undefined ? __upto : 60;
  var cursorClass = isDisabled ? "cursor-not-allowed" : "";
  return React.createElement(
    "select",
    {
      className:
        "dark:bg-jp-gray-lightgray_background font-medium border border-gray-400 rounded-md self-start " +
        cursorClass +
        " outline-none",
      disabled: isDisabled,
      value: props.value.toString(),
      onChange: props.onChange,
    },
    Core__Array.make(upto, 0).map(function (param, i) {
      return React.createElement(
        "option",
        {
          key: i.toString(),
          value: i.toString(),
        },
        padNum(i),
      );
    }),
  );
}

var OptionVals = {
  make: TimeInput$OptionVals,
};

function TimeInput(props) {
  var __showSeconds = props.showSeconds;
  var __isDisabled = props.isDisabled;
  var input = props.input;
  var label = props.label;
  var isDisabled = __isDisabled !== undefined ? __isDisabled : false;
  var showSeconds = __showSeconds !== undefined ? __showSeconds : true;
  var str = Core__JSON.Decode.string(input.value);
  var value = str !== undefined ? str : "";
  var arr = value.split(":");
  var hourVal = Core__Option.getOr(
    Core__Option.flatMap(arr[0], Belt_Int.fromString),
    0,
  );
  var minuteVal = Core__Option.getOr(
    Core__Option.flatMap(arr[1], Belt_Int.fromString),
    0,
  );
  var secondsVal = Core__Option.getOr(
    Core__Option.flatMap(arr[2], Belt_Int.fromString),
    0,
  );
  var changeVal = React.useCallback(
    function (index) {
      return function (ev) {
        var newVal = Core__Option.getOr(
          Core__Int.fromString(undefined, ev.target.value),
          0,
        );
        var arr = [hourVal, minuteVal, secondsVal];
        arr[index] = newVal;
        input.onChange(arr.map(padNum).join(":"));
      };
    },
    [hourVal, minuteVal, secondsVal, input.onChange],
  );
  var onHourChange = React.useCallback(changeVal(0), [changeVal]);
  var onMinuteChange = React.useCallback(changeVal(1), [changeVal]);
  var onSecondsChange = React.useCallback(changeVal(2), [changeVal]);
  return React.createElement(
    "div",
    {
      className: "h-8 max-w-min flex flex-row gap-1 text-sm",
    },
    label !== undefined
      ? React.createElement(
          "div",
          {
            className: "font-semibold mr-1",
          },
          label,
        )
      : null,
    React.createElement(TimeInput$OptionVals, {
      upto: 24,
      value: hourVal,
      onChange: onHourChange,
      isDisabled: isDisabled,
    }),
    React.createElement("div", undefined, ":"),
    React.createElement(TimeInput$OptionVals, {
      value: minuteVal,
      onChange: onMinuteChange,
      isDisabled: isDisabled,
    }),
    showSeconds
      ? React.createElement(
          React.Fragment,
          {},
          React.createElement("div", undefined, ":"),
          React.createElement(TimeInput$OptionVals, {
            value: secondsVal,
            onChange: onSecondsChange,
            isDisabled: isDisabled,
          }),
        )
      : null,
  );
}

var make = TimeInput;

export { padNum, OptionVals, make };
/* react Not a pure module */
