// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as DayJs from "../libraries/DayJs.bs.js";
import * as React from "react";
import * as Calendar from "./Calendar.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";

function CalendarList(props) {
  var allowedDateRange = props.allowedDateRange;
  var __customDisabledFutureDays = props.customDisabledFutureDays;
  var __firstCalendar = props.firstCalendar;
  var __secondCalendar = props.secondCalendar;
  var setShowMsg = props.setShowMsg;
  var dateRangeLimit = props.dateRangeLimit;
  var __disableFutureDates = props.disableFutureDates;
  var __disablePastDates = props.disablePastDates;
  var __endDate = props.endDate;
  var __startDate = props.startDate;
  var cellRenderer = props.cellRenderer;
  var cellHighlighter = props.cellHighlighter;
  var __count = props.count;
  var onDateClick = props.onDateClick;
  var year = props.year;
  var month = props.month;
  var __calendarContaierStyle = props.calendarContaierStyle;
  var __changeHighlightCellStyle = props.changeHighlightCellStyle;
  var changeHighlightCellStyle =
    __changeHighlightCellStyle !== undefined ? __changeHighlightCellStyle : "";
  var calendarContaierStyle =
    __calendarContaierStyle !== undefined ? __calendarContaierStyle : "";
  var count = __count !== undefined ? __count : 1;
  var startDate = __startDate !== undefined ? __startDate : "";
  var endDate = __endDate !== undefined ? __endDate : "";
  var disablePastDates =
    __disablePastDates !== undefined ? __disablePastDates : true;
  var disableFutureDates =
    __disableFutureDates !== undefined ? __disableFutureDates : false;
  var secondCalendar =
    __secondCalendar !== undefined ? __secondCalendar : false;
  var firstCalendar = __firstCalendar !== undefined ? __firstCalendar : false;
  var customDisabledFutureDays =
    __customDisabledFutureDays !== undefined ? __customDisabledFutureDays : 0.0;
  var match = React.useState(function () {
    return "";
  });
  var setHoverdDate = match[1];
  var hoverdDate = match[0];
  var months = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ];
  var getMonthFromFloat = function (value) {
    var valueInt = value | 0;
    return Core__Option.getOr(months[valueInt], "Jan");
  };
  var getMonthInStr = function (mon) {
    switch (mon) {
      case "Jan":
        return "January, ";
      case "Feb":
        return "February, ";
      case "Mar":
        return "March, ";
      case "Apr":
        return "April, ";
      case "May":
        return "May, ";
      case "Jun":
        return "June, ";
      case "Jul":
        return "July, ";
      case "Aug":
        return "August, ";
      case "Sep":
        return "September, ";
      case "Oct":
        return "October, ";
      case "Nov":
        return "November, ";
      case "Dec":
        return "December, ";
    }
  };
  var startMonth;
  if (month !== undefined) {
    startMonth = months.indexOf(month) | 0;
  } else {
    var tMonth = new Date().getMonth() | 0;
    startMonth = disableFutureDates && count > 1 ? tMonth - 1.0 : tMonth;
  }
  var startYear = year !== undefined ? year : new Date().getFullYear();
  var match$1 = React.useState(function () {
    return new Date(startYear, startMonth);
  });
  var setCurrDate = match$1[1];
  var currDateIm = match$1[0];
  var handleChangeMonthBy = function (month) {
    var currDateTemp = new Date(currDateIm.valueOf());
    var newDate = new Date(
      currDateTemp.setMonth(((currDateTemp.getMonth() | 0) + month) | 0),
    );
    setCurrDate(function (param) {
      return newDate;
    });
  };
  var dummyRow = Core__Array.make(count, 1);
  return React.createElement(
    "div",
    {
      className:
        "flex flex-1 flex-row justify-center overflow-auto bg-jp-gray-100 bg-opacity-20 rounded-md border select-none " +
        calendarContaierStyle,
    },
    dummyRow.map(function (_item, i) {
      var currDateTemp = new Date(currDateIm.valueOf());
      var tempDate = currDateTemp.setMonth(
        ((currDateTemp.getMonth() | 0) + i) | 0,
      );
      var tempMonth = disableFutureDates
        ? new Date(
            DayJs.getDayJsForJsDate(new Date(tempDate)).toString(),
          ).getMonth()
        : new Date(tempDate).getMonth();
      var tempYear = new Date(tempDate).getFullYear();
      var showLeft = i === 0 && !secondCalendar;
      var showRight = ((i + 1) | 0) === dummyRow.length && !firstCalendar;
      var monthAndYear = getMonthInStr(getMonthFromFloat(tempMonth)).concat(
        tempYear.toString(),
      );
      var iconClass =
        "inline-block text-jp-gray-600 dark:text-jp-gray-text_darktheme dark:text-opacity-25 cursor-pointer";
      return React.createElement(
        "div",
        {
          key: i.toString(),
        },
        React.createElement(
          "div",
          {
            className: "flex flex-row justify-between items-center p-3",
          },
          showLeft
            ? React.createElement(
                React.Fragment,
                {},
                React.createElement(Icon.make, {
                  name: "angle-double-left",
                  size: 24,
                  className: iconClass,
                  onClick: function (param) {
                    handleChangeMonthBy(-12);
                  },
                }),
                React.createElement(Icon.make, {
                  name: "chevron-left",
                  className: iconClass,
                  onClick: function (param) {
                    handleChangeMonthBy(-1);
                  },
                }),
              )
            : null,
          React.createElement(AddDataAttributes.make, {
            attributes: [["data-calendar-date", monthAndYear]],
            children: React.createElement(
              "div",
              {
                className:
                  "font-medium text-sm md:text-base text-jp-gray-900 dark:text-jp-gray-text_darktheme dark:text-opacity-75",
              },
              monthAndYear,
            ),
          }),
          showRight
            ? React.createElement(
                React.Fragment,
                {},
                React.createElement(Icon.make, {
                  name: "chevron-right",
                  className: iconClass,
                  onClick: function (param) {
                    handleChangeMonthBy(1);
                  },
                }),
                React.createElement(Icon.make, {
                  name: "angle-double-right",
                  size: 24,
                  className: iconClass,
                  onClick: function (param) {
                    handleChangeMonthBy(12);
                  },
                }),
              )
            : null,
        ),
        JsxPPXReactSupportU.createElementWithKey(i.toString(), Calendar.make, {
          changeHighlightCellStyle: changeHighlightCellStyle,
          month: getMonthFromFloat(tempMonth),
          year: tempYear | 0,
          onDateClick: onDateClick,
          hoverdDate: hoverdDate,
          setHoverdDate: setHoverdDate,
          showTitle: false,
          cellHighlighter: cellHighlighter,
          cellRenderer: cellRenderer,
          startDate: startDate,
          endDate: endDate,
          disablePastDates: disablePastDates,
          disableFutureDates: disableFutureDates,
          dateRangeLimit: dateRangeLimit,
          setShowMsg: setShowMsg,
          customDisabledFutureDays: customDisabledFutureDays,
          allowedDateRange: allowedDateRange,
        }),
      );
    }),
  );
}

var make = CalendarList;

export { make };
/* Icon Not a pure module */
