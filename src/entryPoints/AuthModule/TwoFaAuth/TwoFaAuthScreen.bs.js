// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Recoil from "recoil";
import * as AuthUtils from "../AuthUtils.bs.js";
import * as TwoFaAuth from "./TwoFaAuth.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as AuthModuleHooks from "../AuthModuleHooks.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function TwoFaAuthScreen(props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useState(function () {
    return "TestButtonMode";
  });
  var setMode = match[1];
  var match$1 = AuthModuleHooks.useAuthMethods();
  var isMagicLinkEnabled = match$1.isMagicLinkEnabled;
  var checkAuthMethodExists = match$1.checkAuthMethodExists;
  var match$2 = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var isLiveMode = match$2.isLiveMode;
  var authInitState = isMagicLinkEnabled()
    ? "LoginWithEmail"
    : "LoginWithPassword";
  var match$3 = React.useState(function () {
    return authInitState;
  });
  var setAuthType = match$3[1];
  var authType = match$3[0];
  var match$4 = React.useState(function () {
    return authInitState;
  });
  var setActualAuthType = match$4[1];
  var actualAuthType = match$4[0];
  React.useEffect(
    function () {
      if (isLiveMode) {
        setMode(function (param) {
          return "LiveButtonMode";
        });
      } else {
        setMode(function (param) {
          return "TestButtonMode";
        });
      }
      var match = url.path;
      if (match) {
        switch (match.hd) {
          case "forget-password":
            if (match.tl || !checkAuthMethodExists(["PASSWORD"])) {
            } else {
              setActualAuthType(function (param) {
                return "ForgetPassword";
              });
            }
            break;
          case "login":
            if (match.tl) {
            } else {
              setActualAuthType(function (param) {
                if (isMagicLinkEnabled()) {
                  return "LoginWithEmail";
                } else {
                  return "LoginWithPassword";
                }
              });
            }
            break;
          case "register":
            if (match.tl) {
            } else if (isLiveMode) {
              AuthUtils.redirectToLogin();
            } else {
              setActualAuthType(function (param) {
                return "SignUP";
              });
            }
            break;
          case "user":
            var match$1 = match.tl;
            if (match$1) {
              switch (match$1.hd) {
                case "accept_invite_from_email":
                  if (match$1.tl) {
                  } else {
                    setActualAuthType(function (param) {
                      return "ActivateFromEmail";
                    });
                  }
                  break;
                case "set_password":
                  if (match$1.tl || !checkAuthMethodExists(["PASSWORD"])) {
                  } else {
                    setActualAuthType(function (param) {
                      return "ResetPassword";
                    });
                  }
                  break;
                case "verify_email":
                  if (match$1.tl) {
                  } else {
                    setActualAuthType(function (param) {
                      return "EmailVerify";
                    });
                  }
                  break;
                default:
              }
            }
            break;
          default:
        }
      }
    },
    [url.path],
  );
  React.useEffect(
    function () {
      if (authType !== actualAuthType) {
        setAuthType(function (param) {
          return actualAuthType;
        });
      }
    },
    [actualAuthType],
  );
  React.useEffect(
    function () {
      var match = url.path;
      var exit = 0;
      switch (authType) {
        case "LoginWithPassword":
        case "LoginWithEmail":
          exit = 1;
          break;
        case "SignUP":
          if (!(match && match.hd === "register")) {
            RescriptReactRouter.push(
              GlobalVars.appendDashboardPath("/register"),
            );
          }
          break;
        case "ForgetPassword":
        case "ForgetPasswordEmailSent":
          exit = 2;
          break;
        case "ResendVerifyEmailSent":
        case "ResendVerifyEmail":
          exit = 3;
          break;
        default:
      }
      switch (exit) {
        case 1:
          if (match) {
            switch (match.hd) {
              case "register":
                break;
              case "user":
                var match$1 = match.tl;
                if (match$1) {
                  var exit$1 = 0;
                  switch (match$1.hd) {
                    case "accept_invite_from_email":
                    case "login":
                    case "set_password":
                    case "verify_email":
                      exit$1 = 4;
                      break;
                    default:
                      AuthUtils.redirectToLogin();
                  }
                  if (exit$1 === 4) {
                    if (match$1.tl) {
                      AuthUtils.redirectToLogin();
                    }
                  }
                } else {
                  AuthUtils.redirectToLogin();
                }
                break;
              default:
                AuthUtils.redirectToLogin();
            }
          } else {
            AuthUtils.redirectToLogin();
          }
          break;
        case 2:
          if (!(match && match.hd === "forget-password")) {
            RescriptReactRouter.push(
              GlobalVars.appendDashboardPath("/forget-password"),
            );
          }
          break;
        case 3:
          if (!(match && match.hd === "resend-mail")) {
            RescriptReactRouter.push(
              GlobalVars.appendDashboardPath("/resend-mail"),
            );
          }
          break;
      }
    },
    [authType],
  );
  return React.createElement(TwoFaAuth.make, {
    setAuthStatus: props.setAuthStatus,
    authType: authType,
    setAuthType: setAuthType,
  });
}

var make = TwoFaAuthScreen;

export { make };
/* react Not a pure module */
