// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as DownloadUtils from "../../../utils/DownloadUtils.bs.js";
import * as CommonAuthUtils from "../Common/CommonAuthUtils.bs.js";

function getEmailToken(authStatus) {
  if (typeof authStatus !== "object" || authStatus.TAG !== "PreLogin") {
    return;
  } else {
    return authStatus._0.email_token;
  }
}

function validateTotpForm(values, keys) {
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  var errors = {};
  keys.forEach(function (key) {
    var value = LogicUtils.getString(valuesDict, key, "");
    if (LogicUtils.isEmptyString(value)) {
      switch (key) {
        case "comfirm_password":
          errors[key] = "Please enter your Password Once Again";
          break;
        case "email":
          errors[key] = "Please enter your Email ID";
          break;
        case "create_password":
        case "password":
          errors[key] = "Please enter your Password";
          break;
        default:
          errors[key] = LogicUtils.capitalizeString(key) + " cannot be empty";
      }
    }
    if (
      LogicUtils.isNonEmptyString(value) &&
      key === "email" &&
      CommonAuthUtils.isValidEmail(value)
    ) {
      errors[key] = "Please enter valid Email ID";
    }
    if (key === "password") {
      CommonAuthUtils.passwordKeyValidation(value, key, "password", errors);
    } else {
      CommonAuthUtils.passwordKeyValidation(
        value,
        key,
        "create_password",
        errors,
      );
    }
    CommonAuthUtils.confirmPasswordCheck(
      value,
      key,
      "comfirm_password",
      "create_password",
      valuesDict,
      errors,
    );
  });
  return errors;
}

function downloadRecoveryCodes(recoveryCodes) {
  DownloadUtils.downloadOld(
    "recoveryCodes.txt",
    JSON.stringify(LogicUtils.getJsonFromArrayOfString(recoveryCodes), null, 3),
  );
}

export { getEmailToken, validateTotpForm, downloadRecoveryCodes };
/* LogicUtils Not a pure module */
