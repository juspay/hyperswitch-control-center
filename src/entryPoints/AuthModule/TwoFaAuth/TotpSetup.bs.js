// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../../../screens/APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as AuthUtils from "../AuthUtils.bs.js";
import * as TotpHooks from "../../../screens/Hooks/TotpHooks.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../../../screens/HSwitchUtils.bs.js";
import * as TwoFaElements from "./TwoFaElements.bs.js";
import * as CommonAuthUtils from "../Common/CommonAuthUtils.bs.js";
import * as AuthInfoProvider from "../../../context/AuthInfoProvider.bs.js";
import * as PageLoaderWrapper from "../../../screens/Helpers/PageLoaderWrapper.bs.js";
import * as TotpRecoveryCodes from "./TotpRecoveryCodes.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var h2TextStyle = HSwitchUtils.getTextClass(["H2", "Optional"]);

var p2Regular = HSwitchUtils.getTextClass(["P2", "Regular"]);

var p3Regular = HSwitchUtils.getTextClass(["P3", "Regular"]);

function TotpSetup$EnterAccessCode(props) {
  var onClickVerifyAccessCode = props.onClickVerifyAccessCode;
  var setTwoFaPageState = props.setTwoFaPageState;
  var showToast = ToastState.useShowToast();
  var verifyRecoveryCodeLogic = TotpHooks.useVerifyRecoveryCode();
  var match = React.useState(function () {
    return "";
  });
  var setRecoveryCode = match[1];
  var recoveryCode = match[0];
  var match$1 = React.useState(function () {
    return "Normal";
  });
  var setButtonState = match$1[1];
  var verifyAccessCode = async function () {
    try {
      setButtonState(function (param) {
        return "Loading";
      });
      if (recoveryCode.length > 0) {
        var body = LogicUtils.getJsonFromArrayOfJson([
          ["recovery_code", recoveryCode],
        ]);
        await verifyRecoveryCodeLogic(body);
        onClickVerifyAccessCode(false);
      } else {
        showToast(
          "Recovery code cannot be empty!",
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      }
      return setButtonState(function (param) {
        return "Normal";
      });
    } catch (exn) {
      setRecoveryCode(function (param) {
        return "";
      });
      return setButtonState(function (param) {
        return "Normal";
      });
    }
  };
  var handleKeyUp = function (ev) {
    var key = ev.key;
    var keyCode = ev.keyCode;
    if (key === "Enter" || keyCode === 13) {
      verifyAccessCode();
      return;
    }
  };
  React.useEffect(
    function () {
      if (recoveryCode.length === 9) {
        window.addEventListener("keyup", handleKeyUp);
      } else {
        window.removeEventListener("keyup", handleKeyUp);
      }
      return function () {
        window.removeEventListener("keyup", handleKeyUp);
      };
    },
    [recoveryCode],
  );
  return React.createElement(
    "div",
    {
      className: "bg-white h-20-rem w-200 rounded-2xl flex flex-col",
    },
    React.createElement(
      "div",
      {
        className: "p-6 border-b-2 flex justify-between items-center",
      },
      React.createElement(
        "p",
        {
          className: h2TextStyle + " text-grey-900",
        },
        "Enter access code",
      ),
    ),
    React.createElement(
      "div",
      {
        className: "px-12 py-8 flex flex-col gap-12 justify-between flex-1",
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col justify-center items-center gap-4",
        },
        React.createElement(TwoFaElements.RecoveryCodesInput.make, {
          recoveryCode: recoveryCode,
          setRecoveryCode: setRecoveryCode,
        }),
        React.createElement(
          "p",
          {
            className: p2Regular + " text-jp-gray-700",
          },
          "Didn't get a code? ",
          React.createElement(
            "span",
            {
              className:
                "cursor-pointer underline underline-offset-2 text-blue-600",
              onClick: function (param) {
                setTwoFaPageState(function (param) {
                  return "TOTP_SHOW_QR";
                });
              },
            },
            "Use totp instead",
          ),
        ),
      ),
      React.createElement(
        "div",
        {
          className: "flex justify-end gap-4",
        },
        React.createElement(Button.make, {
          text: "Skip now",
          buttonType: "Secondary",
          buttonSize: "Small",
          onClick: function (param) {
            onClickVerifyAccessCode(true);
          },
        }),
        React.createElement(Button.make, {
          buttonState: recoveryCode.length < 9 ? "Disabled" : match$1[0],
          text: "Verify recovery code",
          buttonType: "Primary",
          buttonSize: "Small",
          rightIcon: {
            TAG: "CustomIcon",
            _0: React.createElement(Icon.make, {
              name: "thin-right-arrow",
              size: 20,
              className: "group-hover:scale-125 cursor-pointer",
            }),
          },
          onClick: function (param) {
            verifyAccessCode();
          },
          customButtonStyle: "group",
        }),
      ),
    ),
  );
}

var EnterAccessCode = {
  make: TotpSetup$EnterAccessCode,
};

function TotpSetup$ConfigureTotpScreen(props) {
  var terminateTwoFactorAuth = props.terminateTwoFactorAuth;
  var setTwoFaPageState = props.setTwoFaPageState;
  var twoFaStatus = props.twoFaStatus;
  var verifyTotpLogic = TotpHooks.useVerifyTotp();
  var showToast = ToastState.useShowToast();
  var match = React.useState(function () {
    return "";
  });
  var setOtp = match[1];
  var otp = match[0];
  var match$1 = React.useState(function () {
    return "Normal";
  });
  var setButtonState = match$1[1];
  var verifyTOTP = async function () {
    try {
      setButtonState(function (param) {
        return "Loading";
      });
      if (otp.length > 0) {
        var body = LogicUtils.getJsonFromArrayOfJson([["totp", otp]]);
        var methodType = twoFaStatus === "TWO_FA_SET" ? "Post" : "Put";
        await verifyTotpLogic(body, methodType);
        if (twoFaStatus === "TWO_FA_SET") {
          terminateTwoFactorAuth(false);
        } else {
          setTwoFaPageState(function (param) {
            return "TOTP_SHOW_RC";
          });
        }
      } else {
        showToast(
          "OTP field cannot be empty!",
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      }
      return setButtonState(function (param) {
        return "Normal";
      });
    } catch (exn) {
      setOtp(function (param) {
        return "";
      });
      return setButtonState(function (param) {
        return "Normal";
      });
    }
  };
  var skipTotpSetup = async function () {
    terminateTwoFactorAuth(true);
  };
  var buttonText = twoFaStatus === "TWO_FA_SET" ? "Verify OTP" : "Enable 2FA";
  var modalHeaderText =
    twoFaStatus === "TWO_FA_SET"
      ? "Enter TOTP Code"
      : "Enable Two Factor Authentication";
  var handleKeyUp = function (ev) {
    var key = ev.key;
    var keyCode = ev.keyCode;
    if (key === "Enter" || keyCode === 13) {
      verifyTOTP();
      return;
    }
  };
  React.useEffect(
    function () {
      if (otp.length === 6) {
        window.addEventListener("keyup", handleKeyUp);
      } else {
        window.removeEventListener("keyup", handleKeyUp);
      }
      return function () {
        window.removeEventListener("keyup", handleKeyUp);
      };
    },
    [otp],
  );
  return React.createElement(
    "div",
    {
      className:
        "bg-white " +
        (twoFaStatus === "TWO_FA_SET" ? "h-20-rem" : "h-40-rem") +
        " w-200 rounded-2xl flex flex-col",
    },
    React.createElement(
      "div",
      {
        className: "p-6 border-b-2 flex justify-between items-center",
      },
      React.createElement(
        "p",
        {
          className: h2TextStyle + " text-grey-900",
        },
        modalHeaderText,
      ),
    ),
    React.createElement(
      "div",
      {
        className: "px-12 py-8 flex flex-col gap-12 justify-between flex-1",
      },
      React.createElement(RenderIf.make, {
        condition: twoFaStatus === "TWO_FA_NOT_SET",
        children: React.createElement(TwoFaElements.TotpScanQR.make, {
          totpUrl: props.totpUrl,
          isQrVisible: props.isQrVisible,
        }),
      }),
      React.createElement(
        "div",
        {
          className: "flex flex-col justify-center items-center gap-4",
        },
        React.createElement(TwoFaElements.TotpInput.make, {
          otp: otp,
          setOtp: setOtp,
        }),
        React.createElement(RenderIf.make, {
          condition: twoFaStatus === "TWO_FA_SET",
          children: React.createElement(
            "p",
            {
              className: p2Regular + " text-jp-gray-700",
            },
            "Didn't get a code? ",
            React.createElement(
              "span",
              {
                className:
                  "cursor-pointer underline underline-offset-2 text-blue-600",
                onClick: function (param) {
                  setTwoFaPageState(function (param) {
                    return "TOTP_INPUT_RECOVERY_CODE";
                  });
                },
              },
              "Use recovery-code",
            ),
          ),
        }),
      ),
      React.createElement(
        "div",
        {
          className: "flex justify-end gap-4",
        },
        React.createElement(Button.make, {
          text: "Skip now",
          buttonType: "Secondary",
          buttonSize: "Small",
          onClick: function (param) {
            skipTotpSetup();
          },
        }),
        React.createElement(Button.make, {
          buttonState: otp.length === 6 ? match$1[0] : "Disabled",
          text: buttonText,
          buttonType: "Primary",
          buttonSize: "Small",
          rightIcon: {
            TAG: "CustomIcon",
            _0: React.createElement(Icon.make, {
              name: "thin-right-arrow",
              size: 20,
              className: "group-hover:scale-125 cursor-pointer",
            }),
          },
          onClick: function (param) {
            verifyTOTP();
          },
          customButtonStyle: "group",
        }),
      ),
    ),
  );
}

var ConfigureTotpScreen = {
  make: TotpSetup$ConfigureTotpScreen,
};

function TotpSetup(props) {
  var getURL = APIUtils.useGetURL();
  var showToast = ToastState.useShowToast();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStatus = match.setAuthStatus;
  var match$1 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$1[1];
  var match$2 = React.useState(function () {
    return false;
  });
  var setIsQrVisible = match$2[1];
  var match$3 = React.useState(function () {
    return "";
  });
  var setTotpUrl = match$3[1];
  var match$4 = React.useState(function () {
    return "TWO_FA_NOT_SET";
  });
  var setTwoFaStatus = match$4[1];
  var match$5 = React.useState(function () {
    return "TOTP_SHOW_QR";
  });
  var setTwoFaPageState = match$5[1];
  var match$6 = React.useState(function () {
    return false;
  });
  var setShowNewQR = match$6[1];
  var delayTimer = function () {
    var timeoutId = setTimeout(function () {
      setIsQrVisible(function (param) {
        return true;
      });
    }, 1000);
    return function () {
      clearTimeout(timeoutId);
    };
  };
  var terminateTwoFactorAuth = async function (skip_2fa) {
    try {
      var url = getURL(
        "USERS",
        "Get",
        undefined,
        undefined,
        "TERMINATE_TWO_FACTOR_AUTH",
        undefined,
        undefined,
        Caml_option.some(
          "skip_two_factor_auth=" + LogicUtils.getStringFromBool(skip_2fa),
        ),
        undefined,
      );
      var response = await fetchDetails(url);
      return setAuthStatus({
        TAG: "PreLogin",
        _0: AuthUtils.getPreLoginInfo(undefined, response),
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Something went wrong");
        var errorCode = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "code",
          "",
        );
        if (
          CommonAuthUtils.errorSubCodeMapper(errorCode) === "UR_40" ||
          CommonAuthUtils.errorSubCodeMapper(errorCode) === "UR_41"
        ) {
          setTwoFaPageState(function (param) {
            return "TOTP_SHOW_QR";
          });
          showToast(
            "Failed to complete 2fa!",
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          return setShowNewQR(function (prev) {
            return !prev;
          });
        } else {
          showToast(
            "Something went wrong",
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          return setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: err,
            };
          });
        }
      }
      throw e;
    }
  };
  var getTOTPString = async function () {
    try {
      setTotpUrl(function (param) {
        return "";
      });
      var url = getURL(
        "USERS",
        "Get",
        undefined,
        undefined,
        "BEGIN_TOTP",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await fetchDetails(url);
      var responseDict = LogicUtils.getJsonObjectFromDict(
        LogicUtils.getDictFromJsonObject(response),
        "secret",
      );
      var objectValue = Core__JSON.Classify.classify(responseDict);
      var exit = 0;
      if (typeof objectValue !== "object" || objectValue.TAG !== "Object") {
        exit = 1;
      } else {
        var otpUrl = LogicUtils.getString(objectValue._0, "totp_url", "");
        setTotpUrl(function (param) {
          return otpUrl;
        });
      }
      if (exit === 1) {
        setTwoFaStatus(function (param) {
          return "TWO_FA_SET";
        });
      }
      setScreenState(function (param) {
        return "Success";
      });
      delayTimer();
      return;
    } catch (exn) {
      setScreenState(function (param) {
        return {
          TAG: "Error",
          _0: "Failed to fetch!",
        };
      });
      return setAuthStatus("LoggedOut");
    }
  };
  React.useEffect(
    function () {
      getTOTPString();
    },
    [match$6[0]],
  );
  var tmp;
  switch (match$5[0]) {
    case "TOTP_SHOW_QR":
      tmp = React.createElement(TotpSetup$ConfigureTotpScreen, {
        isQrVisible: match$2[0],
        totpUrl: match$3[0],
        twoFaStatus: match$4[0],
        setTwoFaPageState: setTwoFaPageState,
        terminateTwoFactorAuth: terminateTwoFactorAuth,
      });
      break;
    case "TOTP_SHOW_RC":
      tmp = React.createElement(TotpRecoveryCodes.make, {
        setTwoFaPageState: setTwoFaPageState,
        onClickDownload: terminateTwoFactorAuth,
        setShowNewQR: setShowNewQR,
      });
      break;
    case "TOTP_INPUT_RECOVERY_CODE":
      tmp = React.createElement(TotpSetup$EnterAccessCode, {
        setTwoFaPageState: setTwoFaPageState,
        onClickVerifyAccessCode: terminateTwoFactorAuth,
      });
      break;
  }
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(HSwitchUtils.BackgroundImageWrapper.make, {
        children: Caml_option.some(
          React.createElement(
            "div",
            {
              className:
                "h-full w-full flex flex-col gap-4 items-center justify-center p-6",
            },
            tmp,
            React.createElement(
              "div",
              {
                className: "text-grey-200 flex gap-2",
              },
              "Log in with a different account?",
              React.createElement(
                "p",
                {
                  className:
                    "underline cursor-pointer underline-offset-2 hover:text-blue-700",
                  onClick: function (param) {
                    setAuthStatus("LoggedOut");
                  },
                },
                "Click here to log out.",
              ),
            ),
          ),
        ),
      }),
    ),
    screenState: match$1[0],
  });
}

var make = TotpSetup;

export {
  h2TextStyle,
  p2Regular,
  p3Regular,
  EnterAccessCode,
  ConfigureTotpScreen,
  make,
};
/* h2TextStyle Not a pure module */
