// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../../../screens/APIUtils/APIUtils.bs.js";
import * as Clipboard from "../../../libraries/Clipboard.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as TwoFaUtils from "./TwoFaUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../../../screens/HSwitchUtils.bs.js";
import * as TwoFaElements from "./TwoFaElements.bs.js";
import * as CommonAuthUtils from "../Common/CommonAuthUtils.bs.js";
import * as PageLoaderWrapper from "../../../screens/Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var h2TextStyle = HSwitchUtils.getTextClass(["H2", "Optional"]);

function TotpRecoveryCodes(props) {
  var setShowNewQR = props.setShowNewQR;
  var onClickDownload = props.onClickDownload;
  var setTwoFaPageState = props.setTwoFaPageState;
  var showToast = ToastState.useShowToast();
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match = React.useState(function () {
    return [];
  });
  var setRecoveryCodes = match[1];
  var recoveryCodes = match[0];
  var match$1 = React.useState(function () {
    return "Success";
  });
  var setScreenState = match$1[1];
  var generateRecoveryCodes = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var url = getURL(
        "USERS",
        "Get",
        undefined,
        undefined,
        "GENERATE_RECOVERY_CODES",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await fetchDetails(url);
      var recoveryCodesValue = LogicUtils.getStrArray(
        LogicUtils.getDictFromJsonObject(response),
        "recovery_codes",
      );
      setRecoveryCodes(function (param) {
        return recoveryCodesValue;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Something went wrong");
        var errorCode = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "code",
          "",
        );
        if (CommonAuthUtils.errorSubCodeMapper(errorCode) === "UR_38") {
          setTwoFaPageState(function (param) {
            return "TOTP_SHOW_QR";
          });
          return setShowNewQR(function (prev) {
            return !prev;
          });
        } else {
          showToast(
            "Something went wrong",
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          return setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: err,
            };
          });
        }
      }
      throw e;
    }
  };
  var copyRecoveryCodes = function (ev) {
    ev.stopPropagation();
    Clipboard.writeText(
      JSON.stringify(
        LogicUtils.getJsonFromArrayOfString(recoveryCodes),
        null,
        3,
      ),
    );
    showToast(
      "Copied to Clipboard!",
      "ToastSuccess",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
  };
  React.useEffect(function () {
    generateRecoveryCodes();
  }, []);
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "bg-white h-40-rem w-133 rounded-2xl flex flex-col",
        },
        React.createElement(
          "div",
          {
            className: "p-6 border-b-2 flex justify-between items-center",
          },
          React.createElement(
            "p",
            {
              className: h2TextStyle + " text-grey-900",
            },
            "Two factor recovery codes",
          ),
        ),
        React.createElement(
          "div",
          {
            className: "px-8 py-8 flex flex-col flex-1 justify-between",
          },
          React.createElement(
            "div",
            {
              className: "flex flex-col  gap-6",
            },
            React.createElement(
              "p",
              {
                className: "text-jp-gray-700",
              },
              "Recovery codes provide a way to access your account if you lose your device and can't receive two-factor authentication codes.",
            ),
            React.createElement(HSwitchUtils.WarningArea.make, {
              warningText:
                "These codes are the last resort for accessing your account in case you lose your password and second factors. If you cannot find these codes, you will lose access to your account.",
            }),
            React.createElement(TwoFaElements.ShowRecoveryCodes.make, {
              recoveryCodes: recoveryCodes,
            }),
          ),
          React.createElement(
            "div",
            {
              className: "flex gap-4 justify-end",
            },
            React.createElement(Button.make, {
              text: "Copy",
              buttonType: "Secondary",
              buttonSize: "Small",
              leftIcon: {
                TAG: "CustomIcon",
                _0: React.createElement("img", {
                  alt: "copy",
                  src: "/assets/CopyToClipboard.svg",
                }),
              },
              onClick: copyRecoveryCodes,
            }),
            React.createElement(Button.make, {
              text: "Download",
              buttonType: "Primary",
              buttonSize: "Small",
              leftIcon: {
                TAG: "FontAwesome",
                _0: "download-api-key",
              },
              onClick: function (param) {
                TwoFaUtils.downloadRecoveryCodes(recoveryCodes);
                onClickDownload(false);
              },
            }),
          ),
        ),
      ),
    ),
    screenState: match$1[0],
  });
}

var make = TotpRecoveryCodes;

export { h2TextStyle, make };
/* h2TextStyle Not a pure module */
