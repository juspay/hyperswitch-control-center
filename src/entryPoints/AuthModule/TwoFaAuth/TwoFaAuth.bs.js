// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../../screens/APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as AuthUtils from "../AuthUtils.bs.js";
import * as ResendBtn from "../Common/ResendBtn.bs.js";
import * as CommonAuth from "../Common/CommonAuth.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as TwoFaUtils from "./TwoFaUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as CountryUtils from "../../../utils/CountryUtils.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../../../screens/HSwitchUtils.bs.js";
import * as MixpanelHook from "../../../screens/MixpanelHook.bs.js";
import * as CommonAuthForm from "../Common/CommonAuthForm.bs.js";
import * as HSLocalStorage from "../../../screens/HSLocalStorage.bs.js";
import * as ReactFinalForm from "../../../libraries/ReactFinalForm.bs.js";
import * as AuthModuleHooks from "../AuthModuleHooks.bs.js";
import * as CommonAuthUtils from "../Common/CommonAuthUtils.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as AddDataAttributes from "../../../components/AddDataAttributes.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as HyperSwitchEntryUtils from "../../HyperSwitchEntryUtils.bs.js";

function TwoFaAuth(props) {
  var setAuthType = props.setAuthType;
  var authType = props.authType;
  var setAuthStatus = props.setAuthStatus;
  var getURL = APIUtils.useGetURL();
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var initialValues = {};
  var clientCountry = HSwitchUtils.getBrowswerDetails().clientCountry;
  var country = CountryUtils.getCountryCodeStringFromVarient(
    clientCountry.isoAlpha2,
  );
  var showToast = ToastState.useShowToast();
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var match = React.useState(function () {
    return "";
  });
  var setEmail = match[1];
  var email = match[0];
  var featureFlagValues = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var authId = HyperSwitchEntryUtils.getSessionData(
    "auth_id",
    undefined,
    undefined,
  );
  var domain = HyperSwitchEntryUtils.getSessionData(
    "domain",
    undefined,
    undefined,
  );
  var match$1 = AuthModuleHooks.useAuthMethods();
  var isMagicLinkEnabled = match$1.isMagicLinkEnabled;
  var checkAuthMethodExists = match$1.checkAuthMethodExists;
  var match$2 = match$1.isSignUpAllowed();
  var signupMethod = match$2[1];
  var signUpAllowed = match$2[0];
  var handleAuthError = function (e) {
    var error = CommonAuthUtils.parseErrorMessage(e);
    var match = CommonAuthUtils.errorSubCodeMapper(error.code);
    switch (match) {
      case "UR_01":
        return "Incorrect email or password";
      case "UR_03":
        return "An account already exists with this email";
      case "UR_05":
        setAuthType(function (param) {
          return "ResendVerifyEmail";
        });
        return "Kindly verify your account";
      case "UR_16":
        return "Please use a valid email";
      default:
        return "Register failed, Try again";
    }
  };
  console.log(domain, "domain");
  var getUserWithEmail = async function (body) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "CONNECT_ACCOUNT",
        undefined,
        undefined,
        Caml_option.some("auth_id=" + authId + "&domain=" + domain),
        undefined,
      );
      var res = await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var valuesDict = LogicUtils.getDictFromJsonObject(res);
      var magicLinkSent = LogicUtils.getBool(
        valuesDict,
        "is_email_sent",
        false,
      );
      if (magicLinkSent) {
        setAuthType(function (param) {
          return "MagicLinkEmailSent";
        });
      } else {
        showToast(
          "Failed to send an email, Try again",
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      }
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        showToast(
          handleAuthError(e._1),
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      } else {
        throw e;
      }
    }
    return null;
  };
  var getUserWithEmailPassword = async function (body, userType) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        userType,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setAuthStatus({
        TAG: "PreLogin",
        _0: AuthUtils.getPreLoginInfo(undefined, res),
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        showToast(
          handleAuthError(e._1),
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      } else {
        throw e;
      }
    }
    return null;
  };
  var openPlayground = function (param) {
    var body = CommonAuthUtils.getEmailPasswordBody(
      GlobalVars.playgroundUserEmail,
      GlobalVars.playgroundUserPassword,
      country,
    );
    getUserWithEmailPassword(body, "SIGNINV2");
    HSLocalStorage.setIsPlaygroundInLocalStorage(true);
  };
  var setResetPassword = async function (body) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "RESET_PASSWORD",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      localStorage.clear();
      showToast(
        "Password Changed Successfully",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setAuthType(function (param) {
        return "LoginWithEmail";
      });
    } catch (exn) {
      showToast(
        "Password Reset Failed, Try again",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return null;
  };
  var setForgetPassword = async function (body) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "FORGOT_PASSWORD",
        undefined,
        undefined,
        Caml_option.some("auth_id=" + authId),
        undefined,
      );
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setAuthType(function (param) {
        return "ForgetPasswordEmailSent";
      });
      showToast(
        "Please check your registered e-mail",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {
      showToast(
        "Forgot Password Failed, Try again",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return null;
  };
  var resendVerifyEmail = async function (body) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "VERIFY_EMAIL_REQUEST",
        undefined,
        undefined,
        Caml_option.some("auth_id=" + authId),
        undefined,
      );
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setAuthType(function (param) {
        return "ResendVerifyEmailSent";
      });
      showToast(
        "Please check your registered e-mail",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {
      showToast(
        "Resend mail failed, Try again",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return null;
  };
  var logMixpanelEvents = function (email) {
    switch (authType) {
      case "LoginWithPassword":
        return mixpanelEvent(
          "signin_using_email&password",
          email,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      case "LoginWithEmail":
        return mixpanelEvent(
          "signin_using_magic_link",
          email,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      case "SignUP":
        return mixpanelEvent(
          "signup_using_magic_link",
          email,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      default:
        return;
    }
  };
  var onSubmit = async function (values, param) {
    try {
      var valuesDict = LogicUtils.getDictFromJsonObject(values);
      var email = LogicUtils.getString(valuesDict, "email", "");
      setEmail(function (param) {
        return email;
      });
      logMixpanelEvents(email);
      var match = isMagicLinkEnabled();
      var tmp;
      var exit = 0;
      var exit$1 = 0;
      var exit$2 = 0;
      switch (signupMethod) {
        case "PASSWORD":
          if (signUpAllowed) {
            switch (authType) {
              case "LoginWithEmail":
                exit$2 = 3;
                break;
              case "SignUP":
                var password = LogicUtils.getString(valuesDict, "password", "");
                var body = CommonAuthUtils.getEmailPasswordBody(
                  email,
                  password,
                  country,
                );
                tmp = getUserWithEmailPassword(body, "SIGNUP_TOKEN_ONLY");
                break;
              case "LoginWithPassword":
              case "ForgetPassword":
              case "ResetPassword":
              case "ResendVerifyEmail":
                exit$1 = 2;
                break;
              default:
                exit = 1;
            }
          } else {
            exit$2 = 3;
          }
          break;
        case "MAGIC_LINK":
          if (signUpAllowed) {
            if (match) {
              switch (authType) {
                case "LoginWithEmail":
                  exit$2 = 3;
                  break;
                case "SignUP":
                  var body$1 = CommonAuthUtils.getEmailBody(
                    email,
                    country,
                    undefined,
                  );
                  tmp = getUserWithEmail(body$1);
                  break;
                case "LoginWithPassword":
                case "ForgetPassword":
                case "ResetPassword":
                case "ResendVerifyEmail":
                  exit$1 = 2;
                  break;
                default:
                  exit = 1;
              }
            } else {
              exit$1 = 2;
            }
          } else {
            exit$2 = 3;
          }
          break;
        case "OPEN_ID_CONNECT":
        case "INVALID":
          exit$2 = 3;
          break;
      }
      if (exit$2 === 3) {
        if (match) {
          switch (authType) {
            case "LoginWithEmail":
              var body$2 = CommonAuthUtils.getEmailBody(
                email,
                country,
                undefined,
              );
              tmp = getUserWithEmail(body$2);
              break;
            case "LoginWithPassword":
            case "ForgetPassword":
            case "ResetPassword":
            case "ResendVerifyEmail":
              exit$1 = 2;
              break;
            default:
              exit = 1;
          }
        } else {
          exit$1 = 2;
        }
      }
      if (exit$1 === 2) {
        switch (authType) {
          case "LoginWithPassword":
            var password$1 = LogicUtils.getString(valuesDict, "password", "");
            var body$3 = CommonAuthUtils.getEmailPasswordBody(
              email,
              password$1,
              country,
            );
            tmp = getUserWithEmailPassword(body$3, "SIGNINV2_TOKEN_ONLY");
            break;
          case "ForgetPassword":
            var exists = checkAuthMethodExists(["PASSWORD"]);
            if (exists) {
              var body$4 = CommonAuthUtils.getEmailBody(
                email,
                undefined,
                undefined,
              );
              tmp = setForgetPassword(body$4);
            } else {
              tmp = new Promise(function (resolve, param) {
                resolve(null);
              });
            }
            break;
          case "ResetPassword":
            var queryDict = LogicUtils.getDictFromUrlSearchParams(url.search);
            var password_reset_token = Core__Option.getOr(
              queryDict["token"],
              "",
            );
            var password$2 = LogicUtils.getString(
              valuesDict,
              "create_password",
              "",
            );
            var body$5 = CommonAuthUtils.getResetpasswordBodyJson(
              password$2,
              password_reset_token,
            );
            tmp = setResetPassword(body$5);
            break;
          case "ResendVerifyEmail":
            var exists$1 = checkAuthMethodExists(["PASSWORD"]);
            if (exists$1) {
              var body$6 = CommonAuthUtils.getEmailBody(
                email,
                undefined,
                undefined,
              );
              tmp = resendVerifyEmail(body$6);
            } else {
              tmp = new Promise(function (resolve, param) {
                resolve(null);
              });
            }
            break;
          default:
            exit = 1;
        }
      }
      if (exit === 1) {
        var match$1 = featureFlagValues.email;
        var exit$3 = 0;
        if (match$1 && authType === "ForgetPassword") {
          var body$7 = CommonAuthUtils.getEmailBody(
            email,
            undefined,
            undefined,
          );
          tmp = setForgetPassword(body$7);
        } else {
          exit$3 = 2;
        }
        if (exit$3 === 2) {
          tmp = new Promise(function (resolve, param) {
            resolve(null);
          });
        }
      }
      await tmp;
    } catch (exn) {
      showToast(
        "Something went wrong, Try again",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return null;
  };
  var resendEmail = function () {
    var body = CommonAuthUtils.getEmailBody(email, undefined, undefined);
    switch (authType) {
      case "ForgetPasswordEmailSent":
        setForgetPassword(body);
        return;
      case "ResendVerifyEmailSent":
        resendVerifyEmail(body);
        return;
      case "MagicLinkEmailSent":
        getUserWithEmail(body);
        return;
      default:
        return;
    }
  };
  var submitBtnText;
  switch (authType) {
    case "LoginWithPassword":
    case "LoginWithEmail":
      submitBtnText = "Continue";
      break;
    case "ForgetPassword":
      submitBtnText = "Reset password";
      break;
    case "ResetPassword":
      submitBtnText = "Confirm";
      break;
    case "ResendVerifyEmail":
      submitBtnText = "Send mail";
      break;
    default:
      submitBtnText = "Get started, for free!";
  }
  var validateKeys;
  switch (authType) {
    case "LoginWithPassword":
      validateKeys = ["email", "password"];
      break;
    case "SignUP":
      validateKeys = featureFlagValues.email
        ? ["email"]
        : ["email", "password"];
      break;
    case "ResetPassword":
      validateKeys = ["create_password", "comfirm_password"];
      break;
    case "LoginWithEmail":
    case "ForgetPassword":
    case "ResendVerifyEmail":
      validateKeys = ["email"];
      break;
    default:
      validateKeys = [];
  }
  React.useEffect(function () {
    if (url.hash === "playground") {
      openPlayground();
    }
  }, []);
  var note = AuthModuleHooks.useNote(authType, setAuthType, undefined);
  return JsxPPXReactSupportU.createElementWithKey(
    "auth",
    ReactFinalForm$1.Form,
    {
      initialValues: initialValues,
      onSubmit: onSubmit,
      render: function (param) {
        var tmp;
        var exit = 0;
        switch (authType) {
          case "LoginWithPassword":
            tmp = React.createElement(CommonAuthForm.EmailPasswordForm.make, {
              setAuthType: setAuthType,
            });
            break;
          case "LoginWithEmail":
            tmp = isMagicLinkEnabled()
              ? React.createElement(CommonAuthForm.EmailForm.make, {})
              : React.createElement(CommonAuthForm.EmailPasswordForm.make, {
                  setAuthType: setAuthType,
                });
            break;
          case "ForgetPassword":
            tmp = React.createElement(RenderIf.make, {
              condition:
                featureFlagValues.email && checkAuthMethodExists(["PASSWORD"]),
              children: React.createElement(CommonAuthForm.EmailForm.make, {}),
            });
            break;
          case "ForgetPasswordEmailSent":
          case "ResendVerifyEmailSent":
          case "MagicLinkEmailSent":
            tmp = React.createElement(ResendBtn.make, {
              callBackFun: resendEmail,
            });
            break;
          case "ResetPassword":
            tmp = React.createElement(
              CommonAuthForm.ResetPasswordForm.make,
              {},
            );
            break;
          case "SignUP":
          case "ResendVerifyEmail":
            exit = 1;
            break;
          default:
            tmp = null;
        }
        if (exit === 1) {
          tmp = React.createElement(
            React.Fragment,
            {},
            React.createElement(RenderIf.make, {
              condition: signUpAllowed && signupMethod === "MAGIC_LINK",
              children: React.createElement(CommonAuthForm.EmailForm.make, {}),
            }),
            React.createElement(RenderIf.make, {
              condition: signUpAllowed && signupMethod === "PASSWORD",
              children: React.createElement(
                CommonAuthForm.EmailPasswordForm.make,
                {
                  setAuthType: setAuthType,
                },
              ),
            }),
          );
        }
        var tmp$1;
        var exit$1 = 0;
        switch (authType) {
          case "LoginWithPassword":
          case "LoginWithEmail":
          case "SignUP":
          case "ForgetPassword":
          case "ResetPassword":
          case "ResendVerifyEmail":
            exit$1 = 1;
            break;
          default:
            tmp$1 = null;
        }
        if (exit$1 === 1) {
          tmp$1 = React.createElement(FormRenderer.SubmitButton.make, {
            text: submitBtnText,
            customSumbitButtonStyle: "!w-full !rounded",
            showToolTip: false,
            loadingText: "Loading...",
            userInteractionRequired: true,
          });
        }
        return React.createElement(
          React.Fragment,
          {},
          React.createElement(CommonAuth.Header.make, {
            authType: authType,
            setAuthType: setAuthType,
            email: email,
          }),
          React.createElement(
            "form",
            {
              className:
                "flex flex-col justify-evenly gap-5 h-full w-full !overflow-visible text-grey-600",
              onSubmit: param.handleSubmit,
            },
            tmp,
            React.createElement(
              "div",
              {
                className: "flex flex-col gap-2",
                id: "auth-submit-btn",
              },
              tmp$1,
            ),
            React.createElement(AddDataAttributes.make, {
              attributes: [["data-testid", "card-foot-text"]],
              children: React.createElement("div", undefined, note),
            }),
          ),
        );
      },
      subscription: ReactFinalForm.subscribeToValues,
      validate: function (values) {
        return TwoFaUtils.validateTotpForm(values, validateKeys);
      },
    },
  );
}

var make = TwoFaAuth;

export { make };
/* react Not a pure module */
