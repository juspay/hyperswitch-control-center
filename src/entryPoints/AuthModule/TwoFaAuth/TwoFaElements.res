let h2TextStyle = HSwitchUtils.getTextClass((H2, Optional))
let h3TextStyle = HSwitchUtils.getTextClass((H3, Leading_1))
let p2Regular = HSwitchUtils.getTextClass((P2, Regular))
let p3Regular = HSwitchUtils.getTextClass((P3, Regular))

module TotpScanQR = {
  @react.component
  let make = (~totpUrl, ~isQrVisible) => {
    <>
      <div className="grid grid-cols-4 gap-4 w-full">
        <div className="flex flex-col gap-10 col-span-3">
          <div className="flex flex-col gap-4">
            <p className="text-fs-16 text-nd_gray-400 !opacity-100 font-medium !mt-1 ml-1">
              {"Follow these steps to configure 2FA:"->React.string}
            </p>
            <div className="flex flex-col gap-4 ml-2">
              <p className="text-fs-15 font-medium opacity-70 flex gap-3 items-center">
                <div
                  className="text-black bg-blue-100 border border-blue-200 px-2 py-0.5 rounded-[28%] w-6 text-center">
                  {"1"->React.string}
                </div>
                {"Scan the QR code with your authenticator app"->React.string}
              </p>
              <p className="text-fs-15 font-medium opacity-70 flex gap-3 items-center">
                <div
                  className="text-black bg-blue-100 border border-blue-200 px-2 py-0.5 rounded-[28%] w-6 text-center">
                  {"2"->React.string}
                </div>
                {"Enter the 6-digit code shown in your app below"->React.string}
              </p>
            </div>
          </div>
        </div>
        <div
          className={`flex flex-col gap-2 col-span-1 items-center justify-center  ${totpUrl->String.length > 0
              ? "blur-none"
              : "blur-sm"}`}>
          <p className=p3Regular> {"Scan the QR Code into your app"->React.string} </p>
          {if isQrVisible {
            <ReactQRCode value=totpUrl size=170 />
          } else {
            <Icon
              name="spinner"
              size=20
              className="animate-spin"
              parentClass="w-full h-full flex justify-center items-center"
            />
          }}
        </div>
      </div>
      <div className="flex items-center my-4">
        <div className="flex-grow h-px bg-grey-200 opacity-50" />
        <span className="text-fs-15 mx-4 opacity-80 text-gray-700 whitespace-nowrap">
          {"Then, Enter a 6-digit code generated by your authenticator."->React.string}
        </span>
        <div className="flex-grow h-px bg-grey-200 opacity-50" />
      </div>
    </>
  }
}

module TotpInput = {
  @react.component
  let make = (~otp, ~setOtp, ~hasError=false) => {
    <div className="flex flex-col gap-4 items-center">
      <OtpInput value={otp} setValue={setOtp} hasError={hasError} />
      <div className="h-10 flex items-center justify-center">
        <RenderIf condition={hasError}>
          <p className="text-red-500 text-fs-14 font-medium"> {"Each time you set up, a new QR code is generated. Use the code from the latest QR shown to complete setup."->React.string} </p>
        </RenderIf>
      </div>
    </div>
  }
}

module ShowRecoveryCodes = {
  @react.component
  let make = (~recoveryCodes) => {
    <div
      className="border border-gray-200 rounded-md bg-jp-gray-100 py-6 px-12 flex gap-8 justify-evenly">
      <div className="grid grid-cols-2 gap-4">
        {recoveryCodes
        ->Array.map(recoveryCode =>
          <div className="flex items-center  gap-2">
            <div className="p-1 rounded-full bg-jp-gray-600" />
            <p className="text-jp-gray-700 text-xl"> {recoveryCode->React.string} </p>
          </div>
        )
        ->React.array}
      </div>
    </div>
  }
}

module RecoveryCodesInput = {
  @react.component
  let make = (~recoveryCode, ~setRecoveryCode) => {
    let recoveryCodeInput: ReactFinalForm.fieldRenderPropsInput = {
      name: "recovery_code_input",
      onBlur: _ => (),
      onChange: ev => {
        let value = ReactEvent.Form.target(ev)["value"]
        setRecoveryCode(_ => value)
      },
      onFocus: _ => (),
      value: recoveryCode->JSON.Encode.string,
      checked: true,
    }

    <div className="flex flex-col gap-4 items-center">
      <p> {"Enter a 8-digit recovery code generated provided during signup."->React.string} </p>
      <TextInput
        input=recoveryCodeInput
        placeholder="XXXX-XXXX"
        customWidth="w-96"
        customStyle="h-16 text-xl justify-center text-center"
        maxLength=9
      />
    </div>
  }
}
