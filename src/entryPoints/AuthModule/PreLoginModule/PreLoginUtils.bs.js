// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";

function flowTypeStrToVariantMapperForNewFlow(val) {
  switch (val) {
    case "accept_invitation_from_email":
      return "ACCEPT_INVITATION_FROM_EMAIL";
    case "accept_invite":
      return "ACCEPT_INVITE";
    case "auth_select":
      return "AUTH_SELECT";
    case "force_set_password":
      return "FORCE_SET_PASSWORD";
    case "merchant_select":
      return "MERCHANT_SELECT";
    case "reset_password":
      return "RESET_PASSWORD";
    case "sso":
      return "SSO";
    case "totp":
      return "TOTP";
    case "user_info":
      return "USER_INFO";
    case "verify_email":
      return "VERIFY_EMAIL";
    default:
      return "ERROR";
  }
}

function variantToStringFlowMapper(val) {
  switch (val) {
    case "AUTH_SELECT":
      return "auth_select";
    case "SSO":
      return "sso";
    case "MERCHANT_SELECT":
      return "merchant_select";
    case "TOTP":
      return "totp";
    case "FORCE_SET_PASSWORD":
      return "force_set_password";
    case "ACCEPT_INVITE":
      return "accept_invite";
    case "VERIFY_EMAIL":
      return "verify_email";
    case "ACCEPT_INVITATION_FROM_EMAIL":
      return "accept_invitation_from_email";
    case "RESET_PASSWORD":
      return "reset_password";
    case "USER_INFO":
      return "user_info";
    case "ERROR":
      return "";
  }
}

var divider = React.createElement(
  "div",
  {
    className: "flex gap-2 items-center ",
  },
  React.createElement("hr", {
    className: "w-full",
  }),
  React.createElement(
    "p",
    {
      className: " text-gray-400",
    },
    "OR",
  ),
  React.createElement("hr", {
    className: "w-full",
  }),
);

export {
  flowTypeStrToVariantMapperForNewFlow,
  variantToStringFlowMapper,
  divider,
};
/* divider Not a pure module */
