// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../../utils/Form.bs.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../../screens/APIUtils/APIUtils.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as TwoFaUtils from "../TwoFaAuth/TwoFaUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../../../screens/HSwitchUtils.bs.js";
import * as FramerMotion from "framer-motion";
import * as CommonAuthForm from "../Common/CommonAuthForm.bs.js";
import * as CommonAuthUtils from "../Common/CommonAuthUtils.bs.js";
import * as HyperSwitchLogo from "../../../components/HyperSwitchLogo.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as AuthInfoProvider from "../../../context/AuthInfoProvider.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function ResetPassword(props) {
  var flowType = props.flowType;
  var getURL = APIUtils.useGetURL();
  var initialValues = {};
  var showToast = ToastState.useShowToast();
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStatus = match.setAuthStatus;
  var authStatus = match.authStatus;
  var setResetPassword = async function (body) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "RESET_PASSWORD_TOKEN_ONLY",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      showToast(
        "Password Changed Successfully",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setAuthStatus("LoggedOut");
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to update!"),
        );
      }
      throw e;
    }
  };
  var rotatePassword = async function (password) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "ROTATE_PASSWORD",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = LogicUtils.getJsonFromArrayOfJson([["password", password]]);
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      showToast(
        "Password Changed Successfully",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setAuthStatus("LoggedOut");
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to update!"),
        );
      }
      throw e;
    }
  };
  Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var match$1 = window._env_.logoUrl;
  var match$2 =
    match$1 !== undefined
      ? ["IconWithURL", match$1]
      : ["IconWithText", undefined];
  var confirmButtonAction = async function (password) {
    try {
      if (flowType === "FORCE_SET_PASSWORD") {
        return await rotatePassword(password);
      }
      var emailToken = TwoFaUtils.getEmailToken(authStatus);
      if (emailToken === undefined) {
        return Js_exn.raiseError("Missing Token");
      }
      var body = CommonAuthUtils.getResetpasswordBodyJson(password, emailToken);
      return await setResetPassword(body);
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to update!"),
        );
      }
      throw e;
    }
  };
  var onSubmit = async function (values, param) {
    try {
      var valuesDict = LogicUtils.getDictFromJsonObject(values);
      var password = LogicUtils.getString(valuesDict, "create_password", "");
      await confirmButtonAction(password);
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Something went wrong");
        var errorCode = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "code",
          "",
        );
        var errorMessage = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "message",
          "",
        );
        if (CommonAuthUtils.errorSubCodeMapper(errorCode) === "UR_29") {
          showToast(
            errorMessage,
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
        } else {
          showToast(
            "Password Reset Failed, Try again",
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          setAuthStatus("LoggedOut");
        }
      } else {
        throw e;
      }
    }
    return null;
  };
  var headerText;
  headerText =
    flowType === "FORCE_SET_PASSWORD" ? "Set password" : "Reset password";
  React.useEffect(function () {
    RescriptReactRouter.replace(
      GlobalVars.appendDashboardPath("/reset_password"),
    );
  }, []);
  return React.createElement(HSwitchUtils.BackgroundImageWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className:
            "h-full flex flex-col items-center justify-between overflow-scoll text-grey-0 w-full mobile:w-30-rem",
        },
        React.createElement(
          "div",
          {
            className:
              "flex flex-col items-center justify-center gap-6 flex-1 mt-4 w-30-rem",
          },
          React.createElement(
            FramerMotion.motion.div,
            {
              className: "bg-white w-full text-black mobile:border rounded-lg",
              layoutId: "form",
              children: Caml_option.some(null),
            },
            React.createElement(
              "div",
              {
                className: "px-7 py-6",
              },
              React.createElement(FramerMotion.motion.div, {
                layoutId: "logo",
                children: Caml_option.some(
                  React.createElement(HyperSwitchLogo.make, {
                    logoVariant: match$2[0],
                    logoHeight: "h-8",
                    theme: "Dark",
                    iconUrl: Caml_option.some(match$2[1]),
                  }),
                ),
              }),
            ),
            React.createElement(FramerMotion.motion.div, {
              className: "border-b w-full",
              layoutId: "border",
            }),
            React.createElement(
              "div",
              {
                className: "p-7",
              },
              JsxPPXReactSupportU.createElementWithKey("auth", Form.make, {
                children: React.createElement(
                  "div",
                  {
                    className: "flex flex-col gap-6",
                  },
                  React.createElement(
                    "h1",
                    {
                      className: "font-semibold text-xl md:text-2xl",
                      id: "card-header",
                    },
                    headerText,
                  ),
                  React.createElement(
                    "div",
                    {
                      className:
                        "flex flex-col justify-evenly gap-5 h-full w-full !overflow-visible text-grey-600",
                    },
                    React.createElement(
                      CommonAuthForm.ResetPasswordForm.make,
                      {},
                    ),
                    React.createElement(
                      "div",
                      {
                        className: "flex flex-col gap-2",
                        id: "auth-submit-btn",
                      },
                      React.createElement(FormRenderer.SubmitButton.make, {
                        text: "Confirm",
                        customSumbitButtonStyle: "!w-full !rounded",
                        showToolTip: false,
                        loadingText: "Loading...",
                        userInteractionRequired: true,
                      }),
                    ),
                  ),
                ),
                onSubmit: onSubmit,
                initialValues: initialValues,
                validate: function (values) {
                  return TwoFaUtils.validateTotpForm(values, [
                    "create_password",
                    "comfirm_password",
                  ]);
                },
              }),
            ),
          ),
        ),
      ),
    ),
    customPageCss: "flex flex-col items-center justify-center overflow-scroll ",
  });
}

var make = ResetPassword;

export { make };
/* Form Not a pure module */
