// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../../../screens/APIUtils/APIUtils.bs.js";
import * as AuthUtils from "../AuthUtils.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as TwoFaUtils from "../TwoFaAuth/TwoFaUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as CommonAuthUtils from "../Common/CommonAuthUtils.bs.js";
import * as AuthInfoProvider from "../../../context/AuthInfoProvider.bs.js";
import * as EmailVerifyScreen from "../Common/EmailVerifyScreen.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function AcceptInviteScreen(props) {
  var getURL = APIUtils.useGetURL();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match = React.useState(function () {
    return "";
  });
  var setErrorMessage = match[1];
  var match$1 = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStatus = match$1.setAuthStatus;
  var authStatus = match$1.authStatus;
  var acceptInviteFromEmailWithSPT = async function (body) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "ACCEPT_INVITE_FROM_EMAIL_TOKEN_ONLY",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setAuthStatus({
        TAG: "PreLogin",
        _0: AuthUtils.getPreLoginInfo(undefined, res),
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Verification Failed");
        setErrorMessage(function (param) {
          return err;
        });
        return setAuthStatus("LoggedOut");
      }
      throw e;
    }
  };
  React.useEffect(function () {
    RescriptReactRouter.replace(
      GlobalVars.appendDashboardPath("/accept_invite_from_email"),
    );
    var emailToken = TwoFaUtils.getEmailToken(authStatus);
    if (emailToken !== undefined) {
      acceptInviteFromEmailWithSPT(
        CommonAuthUtils.generateBodyForEmailRedirection(emailToken),
      );
    } else {
      setErrorMessage(function (param) {
        return "Token not received";
      });
    }
  }, []);
  return React.createElement(EmailVerifyScreen.make, {
    errorMessage: match[0],
    onClick: props.onClick,
    trasitionMessage:
      "Accepting invite... You will be redirecting to the Dashboard..",
  });
}

var make = AcceptInviteScreen;

export { make };
/* react Not a pure module */
