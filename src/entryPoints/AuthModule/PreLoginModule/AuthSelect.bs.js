// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as APIUtils from "../../../screens/APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as AuthUtils from "../AuthUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as HSwitchUtils from "../../../screens/HSwitchUtils.bs.js";
import * as PreLoginUtils from "./PreLoginUtils.bs.js";
import * as FramerMotion from "framer-motion";
import * as AuthModuleHooks from "../AuthModuleHooks.bs.js";
import * as HyperSwitchLogo from "../../../components/HyperSwitchLogo.bs.js";
import * as AuthInfoProvider from "../../../context/AuthInfoProvider.bs.js";
import * as PageLoaderWrapper from "../../../screens/Helpers/PageLoaderWrapper.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";

function AuthSelect(props) {
  var setSelectedAuthId = props.setSelectedAuthId;
  var getURL = APIUtils.useGetURL();
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var authMethods = match.authMethods;
  var setAuthStatus = match.setAuthStatus;
  var match$1 = AuthModuleHooks.useAuthMethods();
  var fetchAuthMethods = match$1.fetchAuthMethods;
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match$2 = React.useState(function () {
    return "Success";
  });
  var setScreenState = match$2[1];
  var url = window._env_.logoUrl;
  var match$3 =
    url !== undefined ? ["IconWithURL", url] : ["IconWithText", undefined];
  var getAuthMethods = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      await fetchAuthMethods();
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      return setScreenState(function (param) {
        return "Success";
      });
    }
  };
  var handleTerminateSSO = async function (method_id) {
    try {
      var body = {};
      LogicUtils.setOptionString(body, "id", method_id);
      var terminateURL = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "AUTH_SELECT",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await updateDetails(
        terminateURL,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setSelectedAuthId(function (param) {
        return method_id;
      });
      return setAuthStatus({
        TAG: "PreLogin",
        _0: AuthUtils.getPreLoginInfo(undefined, response),
      });
    } catch (exn) {
      return setAuthStatus("LoggedOut");
    }
  };
  React.useEffect(function () {
    getAuthMethods();
  }, []);
  var renderComponentForAuthTypes = function (method) {
    var authMethodType = method.auth_method.type;
    var authMethodName = method.auth_method.name;
    switch (authMethodType) {
      case "PASSWORD":
        if (authMethodName === "Password") {
          return React.createElement(Button.make, {
            text: "Continue with Password",
            buttonType: "Primary",
            buttonSize: "Large",
            onClick: function (param) {
              handleTerminateSSO(method.id);
            },
          });
        } else {
          return null;
        }
      case "OPEN_ID_CONNECT":
        if (
          authMethodName === "Okta" ||
          authMethodName === "Github" ||
          authMethodName === "Google"
        ) {
          return React.createElement(Button.make, {
            text: "Login with " + authMethodName,
            buttonType: "PrimaryOutline",
            onClick: function (param) {
              handleTerminateSSO(method.id);
            },
          });
        } else {
          return null;
        }
      case "MAGIC_LINK":
      case "INVALID":
        return null;
    }
  };
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(HSwitchUtils.BackgroundImageWrapper.make, {
        children: Caml_option.some(
          React.createElement(
            "div",
            {
              className:
                "h-full flex flex-col items-center justify-between overflow-scoll text-grey-0 w-full mobile:w-30-rem",
            },
            React.createElement(
              "div",
              {
                className:
                  "flex flex-col items-center gap-6 flex-1 mt-32 w-30-rem",
              },
              React.createElement(
                FramerMotion.motion.div,
                {
                  className:
                    "bg-white w-full text-black mobile:border rounded-lg",
                  layoutId: "form",
                  children: Caml_option.some(null),
                },
                React.createElement(
                  "div",
                  {
                    className: "px-7 py-6",
                  },
                  React.createElement(FramerMotion.motion.div, {
                    layoutId: "logo",
                    children: Caml_option.some(
                      React.createElement(HyperSwitchLogo.make, {
                        logoVariant: match$3[0],
                        logoHeight: "h-8",
                        theme: "Dark",
                        iconUrl: Caml_option.some(match$3[1]),
                      }),
                    ),
                  }),
                ),
                React.createElement(FramerMotion.motion.div, {
                  className: "border-b w-full",
                  layoutId: "border",
                }),
                React.createElement(
                  "div",
                  {
                    className: "flex flex-col gap-4 p-7",
                  },
                  authMethods.map(function (authMethod, index) {
                    return JsxPPXReactSupportU.createElementVariadicWithKey(
                      index.toString(),
                      React.Fragment,
                      {
                        children: null,
                      },
                      [
                        renderComponentForAuthTypes(authMethod),
                        React.createElement(RenderIf.make, {
                          condition: index === 0 && authMethods.length !== 2,
                          children: PreLoginUtils.divider,
                        }),
                      ],
                    );
                  }),
                ),
              ),
            ),
          ),
        ),
        customPageCss: "flex flex-col items-center  overflow-scroll ",
      }),
    ),
    screenState: match$2[0],
  });
}

var make = AuthSelect;

export { make };
/* react Not a pure module */
