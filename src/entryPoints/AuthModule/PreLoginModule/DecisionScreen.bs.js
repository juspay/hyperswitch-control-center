// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as TotpSetup from "../TwoFaAuth/TotpSetup.bs.js";
import * as AuthSelect from "./AuthSelect.bs.js";
import * as PreLoginUtils from "./PreLoginUtils.bs.js";
import * as ResetPassword from "./ResetPassword.bs.js";
import * as UserInfoScreen from "../UserInfoScreen.bs.js";
import * as CommonAuthError from "../Common/CommonAuthError.bs.js";
import * as AuthInfoProvider from "../../../context/AuthInfoProvider.bs.js";
import * as SSODecisionScreen from "../SSOAuth/SSODecisionScreen.bs.js";
import * as AcceptInviteScreen from "./AcceptInviteScreen.bs.js";
import * as VerifyUserFromEmail from "./VerifyUserFromEmail.bs.js";
import * as MerchantSelectScreen from "./MerchantSelectScreen.bs.js";

function DecisionScreen(props) {
  var match = React.useState(function () {});
  var match$1 = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStatus = match$1.setAuthStatus;
  var authStatus = match$1.authStatus;
  var flowType;
  flowType =
    typeof authStatus !== "object" || authStatus.TAG !== "PreLogin"
      ? "ERROR"
      : PreLoginUtils.flowTypeStrToVariantMapperForNewFlow(
          authStatus._0.token_type,
        );
  var onClickErrorPageButton = function () {
    setAuthStatus("LoggedOut");
  };
  switch (flowType) {
    case "AUTH_SELECT":
      return React.createElement(AuthSelect.make, {
        setSelectedAuthId: match[1],
      });
    case "SSO":
      return React.createElement(SSODecisionScreen.make, {
        auth_id: match[0],
      });
    case "TOTP":
      return React.createElement(TotpSetup.make, {});
    case "MERCHANT_SELECT":
    case "ACCEPT_INVITE":
      return React.createElement(MerchantSelectScreen.make, {});
    case "VERIFY_EMAIL":
      return React.createElement(VerifyUserFromEmail.make, {
        onClick: onClickErrorPageButton,
      });
    case "ACCEPT_INVITATION_FROM_EMAIL":
      return React.createElement(AcceptInviteScreen.make, {
        onClick: onClickErrorPageButton,
      });
    case "FORCE_SET_PASSWORD":
    case "RESET_PASSWORD":
      return React.createElement(ResetPassword.make, {
        flowType: flowType,
      });
    case "USER_INFO":
      return React.createElement(UserInfoScreen.make, {
        onClick: onClickErrorPageButton,
      });
    case "ERROR":
      return React.createElement(CommonAuthError.make, {
        onClick: onClickErrorPageButton,
      });
  }
}

var make = DecisionScreen;

export { make };
/* react Not a pure module */
