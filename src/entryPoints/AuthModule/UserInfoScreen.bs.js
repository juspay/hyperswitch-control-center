// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../../screens/APIUtils/APIUtils.bs.js";
import * as AuthUtils from "./AuthUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSLocalStorage from "../../screens/HSLocalStorage.bs.js";
import * as SidebarProvider from "../../screens/Sidebar/SidebarProvider.bs.js";
import * as AuthInfoProvider from "../../context/AuthInfoProvider.bs.js";
import * as EmailVerifyScreen from "./Common/EmailVerifyScreen.bs.js";
import * as PageLoaderWrapper from "../../screens/Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function UserInfoScreen(props) {
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match = React.useState(function () {
    return "";
  });
  var setErrorMessage = match[1];
  var match$1 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$1[1];
  var match$2 = React.useContext(SidebarProvider.defaultContext);
  var setIsSidebarDetails = match$2.setIsSidebarDetails;
  var match$3 = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStatus = match$3.setAuthStatus;
  var authStatus = match$3.authStatus;
  var token;
  token =
    typeof authStatus !== "object" || authStatus.TAG !== "PreLogin"
      ? undefined
      : authStatus._0.token;
  var userInfo = async function () {
    try {
      var url = getURL(
        "USERS",
        "Get",
        undefined,
        undefined,
        "USER_INFO",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await fetchDetails(url);
      var dict = LogicUtils.getDictFromJsonObject(response);
      dict["token"] = Core__Option.getOr(token, "");
      var info = AuthUtils.getAuthInfo(dict);
      setAuthStatus({
        TAG: "LoggedIn",
        _0: {
          TAG: "Auth",
          _0: info,
        },
      });
      setIsSidebarDetails("isPinned", false);
      HSLocalStorage.removeItemFromLocalStorage("PRE_LOGIN_INFO");
      HSLocalStorage.removeItemFromLocalStorage("email_token");
      HSLocalStorage.removeItemFromLocalStorage("code");
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Verification Failed");
        setErrorMessage(function (param) {
          return err;
        });
        return setAuthStatus("LoggedOut");
      }
      throw e;
    }
  };
  React.useEffect(function () {
    userInfo();
  }, []);
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(EmailVerifyScreen.make, {
        errorMessage: match[0],
        onClick: props.onClick,
        trasitionMessage: "You will be redirecting to the dashboard..",
      }),
    ),
    screenState: match$1[0],
  });
}

var make = UserInfoScreen;

export { make };
/* react Not a pure module */
