// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../screens/APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as SSOUtils from "./SSOAuth/SSOUtils.bs.js";
import * as AuthUtils from "./AuthUtils.bs.js";
import * as CommonAuth from "./Common/CommonAuth.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../../screens/HSwitchUtils.bs.js";
import * as PreLoginUtils from "./PreLoginModule/PreLoginUtils.bs.js";
import * as FramerMotion from "framer-motion";
import * as DecisionScreen from "./PreLoginModule/DecisionScreen.bs.js";
import * as AuthModuleHooks from "./AuthModuleHooks.bs.js";
import * as CommonAuthUtils from "./Common/CommonAuthUtils.bs.js";
import * as HyperSwitchLogo from "../../components/HyperSwitchLogo.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as TwoFaAuthScreen from "./TwoFaAuth/TwoFaAuthScreen.bs.js";
import * as AuthInfoProvider from "../../context/AuthInfoProvider.bs.js";
import * as PageLoaderWrapper from "../../screens/Helpers/PageLoaderWrapper.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function AuthWrapper$AuthHeaderWrapper(props) {
  var __childrenStyle = props.childrenStyle;
  var childrenStyle = __childrenStyle !== undefined ? __childrenStyle : "";
  var match = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var branding = match.branding;
  var match$1 = window._env_.logoUrl;
  var match$2 =
    match$1 !== undefined
      ? ["IconWithURL", match$1]
      : ["IconWithText", undefined];
  return React.createElement(HSwitchUtils.BackgroundImageWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className:
            "h-full flex flex-col items-center justify-between overflow-scoll text-grey-0 w-full mobile:w-30-rem",
        },
        React.createElement(
          "div",
          {
            className:
              "flex flex-col items-center gap-6 flex-1 mt-4 mobile:my-20",
          },
          React.createElement(
            FramerMotion.motion.div,
            {
              className: "bg-white w-full text-black mobile:border rounded-lg",
              layoutId: "form",
              children: Caml_option.some(null),
            },
            React.createElement(
              "div",
              {
                className: "px-7 py-6",
              },
              React.createElement(FramerMotion.motion.div, {
                layoutId: "logo",
                children: Caml_option.some(
                  React.createElement(HyperSwitchLogo.make, {
                    logoVariant: match$2[0],
                    logoHeight: "h-8",
                    theme: "Dark",
                    iconUrl: Caml_option.some(match$2[1]),
                  }),
                ),
              }),
            ),
            React.createElement(FramerMotion.motion.div, {
              className: "border-b w-full",
              layoutId: "border",
            }),
            React.createElement(
              "div",
              {
                className: "p-7 " + childrenStyle,
              },
              props.children,
            ),
          ),
          React.createElement(RenderIf.make, {
            condition: !branding,
            children: React.createElement(FramerMotion.motion.div, {
              className:
                "justify-center text-sm mobile:text-base flex flex-col mobile:flex-row mobile:gap-3 items-center w-full max-w-xl text-center",
              layoutId: "footer-links",
              children: Caml_option.some(
                React.createElement(CommonAuth.TermsAndCondition.make, {}),
              ),
            }),
          }),
        ),
        React.createElement(RenderIf.make, {
          condition: !branding,
          children: React.createElement(CommonAuth.PageFooterSection.make, {}),
        }),
      ),
    ),
    customPageCss: "flex flex-col items-center justify-center overflow-scroll",
  });
}

var AuthHeaderWrapper = {
  make: AuthWrapper$AuthHeaderWrapper,
};

function AuthWrapper(props) {
  var getURL = APIUtils.useGetURL();
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match = AuthModuleHooks.useAuthMethods();
  var fetchAuthMethods = match.fetchAuthMethods;
  var checkAuthMethodExists = match.checkAuthMethodExists;
  var match$1 = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStateToLogout = match$1.setAuthStateToLogout;
  var setAuthStatus = match$1.setAuthStatus;
  var authStatus = match$1.authStatus;
  var match$2 = React.useState(function () {
    return "Success";
  });
  var setScreenState = match$2[1];
  var getAuthDetails = function () {
    var preLoginInfo = AuthUtils.getPreLoginDetailsFromLocalStorage();
    var loggedInInfo = AuthUtils.getUserInfoDetailsFromLocalStorage();
    if (
      Core__Option.isSome(loggedInInfo.token) &&
      LogicUtils.isNonEmptyString(loggedInInfo.merchant_id) &&
      LogicUtils.isNonEmptyString(loggedInInfo.email)
    ) {
      return setAuthStatus({
        TAG: "LoggedIn",
        _0: {
          TAG: "Auth",
          _0: loggedInInfo,
        },
      });
    } else if (
      Core__Option.isSome(preLoginInfo.token) &&
      LogicUtils.isNonEmptyString(preLoginInfo.token_type)
    ) {
      return setAuthStatus({
        TAG: "PreLogin",
        _0: preLoginInfo,
      });
    } else {
      return setAuthStatus("LoggedOut");
    }
  };
  var getDetailsFromEmail = async function () {
    try {
      var tokenFromUrl = LogicUtils.getDictFromUrlSearchParams(url.search)[
        "token"
      ];
      var url$1 = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "FROM_EMAIL",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      if (tokenFromUrl === undefined) {
        return setAuthStatus("LoggedOut");
      }
      var response = await updateDetails(
        url$1,
        CommonAuthUtils.generateBodyForEmailRedirection(tokenFromUrl),
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setAuthStatus({
        TAG: "PreLogin",
        _0: AuthUtils.getPreLoginInfo(Caml_option.some(tokenFromUrl), response),
      });
    } catch (exn) {
      setAuthStatus("LoggedOut");
      return setScreenState(function (param) {
        return "Success";
      });
    }
  };
  var handleRedirectFromSSO = function () {
    var info = SSOUtils.ssoDefaultValue(
      AuthUtils.getPreLoginDetailsFromLocalStorage(),
    );
    setAuthStatus({
      TAG: "PreLogin",
      _0: info,
    });
  };
  React.useEffect(function () {
    var match = url.path;
    if (match) {
      switch (match.hd) {
        case "redirect":
          var match$1 = match.tl;
          if (match$1 && match$1.hd === "oidc") {
            handleRedirectFromSSO();
          } else {
            getAuthDetails();
          }
          break;
        case "register":
          if (match.tl) {
            getAuthDetails();
          } else {
            setAuthStateToLogout();
          }
          break;
        case "user":
          var match$2 = match.tl;
          if (match$2) {
            var exit = 0;
            switch (match$2.hd) {
              case "login":
                if (match$2.tl) {
                  getAuthDetails();
                } else {
                  setAuthStateToLogout();
                }
                break;
              case "accept_invite_from_email":
              case "set_password":
              case "verify_email":
                exit = 1;
                break;
              default:
                getAuthDetails();
            }
            if (exit === 1) {
              if (match$2.tl) {
                getAuthDetails();
              } else {
                getDetailsFromEmail();
              }
            }
          } else {
            getAuthDetails();
          }
          break;
        default:
          getAuthDetails();
      }
    } else {
      getAuthDetails();
    }
  }, []);
  var getAuthMethods = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      await fetchAuthMethods();
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      return setScreenState(function (param) {
        return "Success";
      });
    }
  };
  React.useEffect(
    function () {
      if (authStatus === "LoggedOut") {
        getAuthMethods();
      }
    },
    [authStatus],
  );
  var renderComponentForAuthTypes = function (method) {
    var authMethodType = method.auth_method.type;
    var authMethodName = method.auth_method.name;
    if (
      authMethodType === "OPEN_ID_CONNECT" &&
      (authMethodName === "Okta" ||
        authMethodName === "Github" ||
        authMethodName === "Google")
    ) {
      return React.createElement(Button.make, {
        text: "Continue with " + authMethodName,
        buttonType: "PrimaryOutline",
        onClick: function (param) {
          var id = method.id;
          if (id !== undefined) {
            window.location.replace(
              window._env_.apiBaseUrl + "/user/auth/url?id=" + id,
            );
            return;
          }
        },
      });
    } else {
      return null;
    }
  };
  var tmp;
  tmp =
    typeof authStatus !== "object"
      ? authStatus === "LoggedOut"
        ? React.createElement(PageLoaderWrapper.make, {
            children: Caml_option.some(
              React.createElement(
                AuthWrapper$AuthHeaderWrapper,
                {
                  children: null,
                  childrenStyle: "flex flex-col gap-4",
                },
                React.createElement(RenderIf.make, {
                  condition: checkAuthMethodExists(["PASSWORD", "MAGIC_LINK"]),
                  children: React.createElement(TwoFaAuthScreen.make, {
                    setAuthStatus: setAuthStatus,
                  }),
                }),
                React.createElement(
                  RenderIf.make,
                  {
                    condition: checkAuthMethodExists(["OPEN_ID_CONNECT"]),
                    children: null,
                  },
                  React.createElement(RenderIf.make, {
                    condition: checkAuthMethodExists([
                      "PASSWORD",
                      "MAGIC_LINK",
                    ]),
                    children: PreLoginUtils.divider,
                  }),
                  match$1.authMethods.map(function (authMethod, index) {
                    return JsxPPXReactSupportU.createElementWithKey(
                      index.toString(),
                      React.Fragment,
                      {
                        children: renderComponentForAuthTypes(authMethod),
                      },
                    );
                  }),
                ),
              ),
            ),
            screenState: match$2[0],
          })
        : React.createElement(PageLoaderWrapper.ScreenLoader.make, {})
      : authStatus.TAG === "PreLogin"
        ? React.createElement(DecisionScreen.make, {})
        : props.children;
  return React.createElement(
    "div",
    {
      className: "font-inter-style",
    },
    tmp,
  );
}

var make = AuthWrapper;

export { AuthHeaderWrapper, make };
/* react Not a pure module */
