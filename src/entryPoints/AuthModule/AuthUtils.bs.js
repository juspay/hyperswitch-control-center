// Generated by ReScript, PLEASE EDIT WITH CARE

import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as LocalStorage from "../../libraries/LocalStorage.bs.js";
import * as JsonFlattenUtils from "../../utils/JsonFlattenUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as HyperSwitchEntryUtils from "../HyperSwitchEntryUtils.bs.js";

function getAuthInfo(json) {
  var dict = JsonFlattenUtils.flattenObject(json, false);
  return {
    token: LogicUtils.getNonEmptyString(
      LogicUtils.getString(dict, "token", ""),
    ),
    merchant_id: LogicUtils.getString(dict, "merchant_id", ""),
    name: LogicUtils.getString(dict, "name", ""),
    email: LogicUtils.getString(dict, "email", ""),
    role_id: LogicUtils.getString(dict, "role_id", ""),
    is_two_factor_auth_setup: LogicUtils.getBool(
      dict,
      "is_two_factor_auth_setup",
      false,
    ),
    recovery_codes_left: LogicUtils.getInt(
      dict,
      "recovery_codes_left",
      GlobalVars.maximumRecoveryCodes,
    ),
  };
}

function storeEmailTokenTmp(emailToken) {
  LocalStorage.setItem("email_token", emailToken);
}

function getEmailTmpToken() {
  return Caml_option.nullable_to_opt(localStorage.getItem("email_token"));
}

function getEmailTokenValue(email_token) {
  if (email_token !== undefined) {
    LocalStorage.setItem("email_token", email_token);
    return email_token;
  } else {
    return Caml_option.nullable_to_opt(localStorage.getItem("email_token"));
  }
}

function getPreLoginInfo(email_tokenOpt, json) {
  var email_token =
    email_tokenOpt !== undefined
      ? Caml_option.valFromOption(email_tokenOpt)
      : undefined;
  var dict = JsonFlattenUtils.flattenObject(json, false);
  return {
    token: LogicUtils.getNonEmptyString(
      LogicUtils.getString(dict, "token", ""),
    ),
    token_type: LogicUtils.getString(dict, "token_type", ""),
    email_token: getEmailTokenValue(email_token),
  };
}

function setDetailsToLocalStorage(json, key) {
  LocalStorage.setItem(key, Core__Option.getOr(JSON.stringify(json), ""));
}

function getPreLoginDetailsFromLocalStorage() {
  var json = LogicUtils.safeParse(
    LogicUtils.getValFromNullableValue(
      localStorage.getItem("PRE_LOGIN_INFO"),
      "",
    ),
  );
  return getPreLoginInfo(undefined, json);
}

function getUserInfoDetailsFromLocalStorage() {
  var json = LogicUtils.safeParse(
    LogicUtils.getValFromNullableValue(localStorage.getItem("USER_INFO"), ""),
  );
  return getAuthInfo(json);
}

var defaultListOfAuth = [
  {
    id: undefined,
    auth_id: "defaultpasswordAuthId",
    auth_method: {
      type: "PASSWORD",
      name: "Password",
    },
    allow_signup: true,
  },
  {
    id: undefined,
    auth_id: "defaultmagicLinkId",
    auth_method: {
      type: "MAGIC_LINK",
      name: "Magic_Link",
    },
    allow_signup: true,
  },
];

function redirectToLogin() {
  var authId = HyperSwitchEntryUtils.getSessionData(
    "auth_id",
    undefined,
    undefined,
  );
  var domain = HyperSwitchEntryUtils.getSessionData(
    "domain",
    undefined,
    undefined,
  );
  var match = LogicUtils.isNonEmptyString(authId);
  var match$1 = LogicUtils.isNonEmptyString(domain);
  var urlToRedirect = match
    ? match$1
      ? "/login?auth_id=" + authId + "&domain=" + domain
      : "/login?auth_id=" + authId
    : match$1
      ? "/login?domain=" + domain
      : "/login";
  RescriptReactRouter.push(GlobalVars.appendDashboardPath(urlToRedirect));
}

export {
  getAuthInfo,
  storeEmailTokenTmp,
  getEmailTmpToken,
  getEmailTokenValue,
  getPreLoginInfo,
  setDetailsToLocalStorage,
  getPreLoginDetailsFromLocalStorage,
  getUserInfoDetailsFromLocalStorage,
  defaultListOfAuth,
  redirectToLogin,
};
/* GlobalVars Not a pure module */
