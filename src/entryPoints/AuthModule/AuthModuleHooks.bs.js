// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../screens/APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as SSOUtils from "./SSOAuth/SSOUtils.bs.js";
import * as AuthUtils from "./AuthUtils.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as AuthInfoProvider from "../../context/AuthInfoProvider.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as HyperSwitchEntryUtils from "../HyperSwitchEntryUtils.bs.js";

function useAuthMethods() {
  var getURL = APIUtils.useGetURL();
  var featureFlagValues = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var fetchDetails = APIUtils.useGetMethod(false, undefined);
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var authMethods = match.authMethods;
  var setAuthMethods = match.setAuthMethods;
  var fetchAuthMethods = React.useCallback(async function () {
    try {
      var authId = HyperSwitchEntryUtils.getSessionData(
        "auth_id",
        undefined,
        undefined,
      );
      var authListUrl = getURL(
        "USERS",
        "Get",
        undefined,
        undefined,
        "GET_AUTH_LIST",
        undefined,
        undefined,
        Caml_option.some("auth_id=" + authId),
        undefined,
      );
      var json = await fetchDetails(authListUrl);
      var arrayFromJson = LogicUtils.getArrayFromJson(json, []);
      var methods;
      if (arrayFromJson.length === 0) {
        methods = AuthUtils.defaultListOfAuth;
      } else {
        var typedvalue = SSOUtils.getAuthVariants(arrayFromJson);
        typedvalue.sort(function (item1, item2) {
          if (item1.auth_method.type === "PASSWORD") {
            return -1;
          } else if (item2.auth_method.type === "PASSWORD") {
            return 1;
          } else {
            return 0;
          }
        });
        methods = typedvalue;
      }
      return setAuthMethods(function (param) {
        return methods;
      });
    } catch (raw__e) {
      var _e = Caml_js_exceptions.internalToOCamlException(raw__e);
      if (_e.RE_EXN_ID === Js_exn.$$Error) {
        return setAuthMethods(function (param) {
          return AuthUtils.defaultListOfAuth;
        });
      }
      throw _e;
    }
  }, []);
  var checkAuthMethodExists = React.useCallback(
    function (methods) {
      return authMethods.some(function (v) {
        var authMethod = v.auth_method.type;
        return methods.includes(authMethod);
      });
    },
    [authMethods],
  );
  var getAuthMethod = React.useCallback(
    function (authMethod) {
      var value = authMethods.filter(function (v) {
        var method = v.auth_method.type;
        return authMethod === method;
      });
      return LogicUtils.getNonEmptyArray(value);
    },
    [authMethods],
  );
  var isMagicLinkEnabled = React.useCallback(
    function () {
      if (featureFlagValues.email) {
        return Core__Option.isSome(getAuthMethod("MAGIC_LINK"));
      } else {
        return false;
      }
    },
    [authMethods],
  );
  var isPasswordEnabled = React.useCallback(
    function () {
      if (featureFlagValues.email) {
        return Core__Option.isSome(getAuthMethod("PASSWORD"));
      } else {
        return false;
      }
    },
    [authMethods],
  );
  var isSignUpAllowed = React.useCallback(
    function () {
      var magicLinkmethod = getAuthMethod("MAGIC_LINK");
      var passwordmethod = getAuthMethod("PASSWORD");
      var isSingUpAllowedinMagicLink =
        magicLinkmethod !== undefined
          ? magicLinkmethod.some(function (v) {
              return v.allow_signup;
            })
          : false;
      var isSingUpAllowedinPassword =
        passwordmethod !== undefined
          ? passwordmethod.some(function (v) {
              return v.allow_signup;
            })
          : false;
      var emailFeatureFlagEnable = featureFlagValues.email;
      var isTotpFeatureDisable = featureFlagValues.totp;
      var isLiveMode = featureFlagValues.isLiveMode;
      if (isLiveMode) {
        return [false, "INVALID"];
      } else if (isSingUpAllowedinMagicLink && emailFeatureFlagEnable) {
        return [true, "MAGIC_LINK"];
      } else if (isSingUpAllowedinPassword) {
        return [true, "PASSWORD"];
      } else if (!isTotpFeatureDisable && emailFeatureFlagEnable) {
        return [true, "MAGIC_LINK"];
      } else if (isTotpFeatureDisable) {
        return [false, "INVALID"];
      } else {
        return [true, "PASSWORD"];
      }
    },
    [authMethods],
  );
  return {
    checkAuthMethodExists: checkAuthMethodExists,
    getAuthMethod: getAuthMethod,
    fetchAuthMethods: fetchAuthMethods,
    isPasswordEnabled: isPasswordEnabled,
    isMagicLinkEnabled: isMagicLinkEnabled,
    isSignUpAllowed: isSignUpAllowed,
  };
}

function useNote(authType, setAuthType, param) {
  var match = React.useContext(ThemeProvider.themeContext);
  var textColor = match.globalUIConfig.font.textColor;
  var authId = HyperSwitchEntryUtils.getSessionData(
    "auth_id",
    undefined,
    undefined,
  );
  var match$1 = useAuthMethods();
  var isMagicLinkEnabled = match$1.isMagicLinkEnabled;
  var getFooterLinkComponent = function (btnText, authType, path) {
    return React.createElement(
      "div",
      {
        className:
          "text-sm text-center " +
          textColor.primaryNormal +
          " cursor-pointer hover:underline underline-offset-2",
        onClick: function (param) {
          setAuthType(function (param) {
            return authType;
          });
          RescriptReactRouter.push(GlobalVars.appendDashboardPath(path));
        },
      },
      btnText,
    );
  };
  var tmp;
  var exit = 0;
  switch (authType) {
    case "LoginWithPassword":
      tmp = React.createElement(RenderIf.make, {
        condition: isMagicLinkEnabled(),
        children: getFooterLinkComponent(
          "sign in with an email",
          "LoginWithEmail",
          "/login?auth_id" + authId,
        ),
      });
      break;
    case "LoginWithEmail":
      tmp = React.createElement(RenderIf.make, {
        condition: match$1.isPasswordEnabled() && isMagicLinkEnabled(),
        children: getFooterLinkComponent(
          "sign in using password",
          "LoginWithPassword",
          "/login?auth_id" + authId,
        ),
      });
      break;
    case "SignUP":
      tmp = React.createElement(RenderIf.make, {
        condition: isMagicLinkEnabled(),
        children: React.createElement(
          "p",
          {
            className: "text-center text-sm",
          },
          "We'll be emailing you a magic link for a password-free experience, you can always choose to setup a password later.",
        ),
      });
      break;
    case "ForgetPassword":
    case "ForgetPasswordEmailSent":
    case "ResendVerifyEmailSent":
    case "MagicLinkEmailSent":
      exit = 1;
      break;
    default:
      tmp = null;
  }
  if (exit === 1) {
    tmp = React.createElement(
      "div",
      {
        className: "w-full flex justify-center",
      },
      React.createElement(
        "div",
        {
          className:
            "text-sm text-center " +
            textColor.primaryNormal +
            " hover:underline underline-offset-2 cursor-pointer w-fit",
          onClick: function (param) {
            var backState;
            switch (authType) {
              case "ForgetPasswordEmailSent":
                backState = "ForgetPassword";
                break;
              case "ResendVerifyEmailSent":
                backState = "ResendVerifyEmail";
                break;
              case "MagicLinkEmailSent":
                backState = "SignUP";
                break;
              default:
                backState = "LoginWithPassword";
            }
            setAuthType(function (param) {
              return backState;
            });
          },
        },
        "Cancel",
      ),
    );
  }
  return React.createElement(
    "div",
    {
      className: "w-96",
    },
    tmp,
  );
}

export { useAuthMethods, useNote };
/* react Not a pure module */
