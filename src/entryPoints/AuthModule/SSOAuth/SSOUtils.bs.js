// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../../../utils/LogicUtils.bs.js";

function authMethodsNameToVariantMapper(value) {
  var match = value.toLowerCase();
  switch (match) {
    case "github":
      return "Github";
    case "google":
      return "Google";
    case "magic_link":
      return "Magic_Link";
    case "okta":
      return "Okta";
    default:
      return "Password";
  }
}

function authMethodsTypeToVariantMapper(value) {
  var match = value.toLowerCase();
  switch (match) {
    case "magic_link":
      return "MAGIC_LINK";
    case "open_id_connect":
      return "OPEN_ID_CONNECT";
    default:
      return "PASSWORD";
  }
}

function getTypedValueFromResponse(dict) {
  var authMethodsDict = LogicUtils.getDictfromDict(dict, "auth_method");
  var name = LogicUtils.getOptionString(authMethodsDict, "name");
  return {
    id: LogicUtils.getOptionString(dict, "id"),
    auth_id: LogicUtils.getString(dict, "auth_id", ""),
    auth_method: {
      type: authMethodsTypeToVariantMapper(
        LogicUtils.getString(authMethodsDict, "type", ""),
      ),
      name:
        name !== undefined
          ? authMethodsNameToVariantMapper(name)
          : authMethodsNameToVariantMapper(
              LogicUtils.getString(authMethodsDict, "type", ""),
            ),
    },
    allow_signup: LogicUtils.getBool(dict, "allow_signup", false),
  };
}

function getAuthVariants(auth_methods) {
  return auth_methods.map(function (item) {
    var dictFromJson = LogicUtils.getDictFromJsonObject(item);
    return getTypedValueFromResponse(dictFromJson);
  });
}

function ssoDefaultValue(values) {
  return {
    token: values.token,
    token_type: "sso",
    email_token: values.email_token,
  };
}

export {
  authMethodsNameToVariantMapper,
  authMethodsTypeToVariantMapper,
  getTypedValueFromResponse,
  getAuthVariants,
  ssoDefaultValue,
};
/* LogicUtils Not a pure module */
