// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as APIUtils from "../../../screens/APIUtils/APIUtils.bs.js";
import * as AuthUtils from "../AuthUtils.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as HSwitchUtils from "../../../screens/HSwitchUtils.bs.js";
import * as AuthInfoProvider from "../../../context/AuthInfoProvider.bs.js";
import * as PageLoaderWrapper from "../../../screens/Helpers/PageLoaderWrapper.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function SSODecisionScreen$SSOFromRedirect(props) {
  var localSSOState = props.localSSOState;
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var getURL = APIUtils.useGetURL();
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStatus = match.setAuthStatus;
  var signInWithSSO = async function () {
    try {
      var body;
      if (typeof localSSOState !== "object") {
        body = {};
      } else {
        var match = localSSOState._0;
        body =
          typeof match === "object"
            ? match.NAME === "Okta"
              ? match.VAL
              : {}
            : {};
      }
      var ssoUrl = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "SIGN_IN_WITH_SSO",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await updateDetails(
        ssoUrl,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setAuthStatus({
        TAG: "PreLogin",
        _0: AuthUtils.getPreLoginInfo(undefined, response),
      });
    } catch (exn) {
      return setAuthStatus("LoggedOut");
    }
  };
  React.useEffect(function () {
    signInWithSSO();
  }, []);
  return React.createElement(HSwitchUtils.BackgroundImageWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className:
            "h-full w-full flex justify-center items-center text-white opacity-90",
        },
        "You will be redirecting to the dashboard...",
      ),
    ),
    customPageCss: "font-semibold md:text-3xl p-16",
  });
}

var SSOFromRedirect = {
  make: SSODecisionScreen$SSOFromRedirect,
};

function SSODecisionScreen(props) {
  var auth_id = props.auth_id;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var path = Core__List.toArray(url.path).join("/");
  var match = React.useState(function () {
    return "LOADING";
  });
  var setLocalSSOState = match[1];
  var localSSOState = match[0];
  var oktaMethod = function () {
    var dict = LogicUtils.getDictFromUrlSearchParams(url.search);
    var okta_code = dict["code"];
    var okta_state = dict["state"];
    var okta = {
      code: okta_code,
      state: okta_state,
    };
    setLocalSSOState(function (param) {
      return {
        TAG: "SSO_FROM_REDIRECT",
        _0: {
          NAME: "Okta",
          VAL: okta,
        },
      };
    });
  };
  React.useEffect(
    function () {
      var match = url.path;
      var exit = 0;
      if (match && match.hd === "redirect") {
        var match$1 = match.tl;
        if (match$1 && match$1.hd === "oidc") {
          var match$2 = match$1.tl;
          if (match$2 && match$2.hd === "okta" && !match$2.tl) {
            oktaMethod();
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
      } else {
        exit = 1;
      }
      if (exit === 1) {
        if (auth_id !== undefined) {
          window.location.replace(
            window._env_.apiBaseUrl + "/user/auth/url?id=" + auth_id,
          );
        }
      }
    },
    [path],
  );
  if (typeof localSSOState !== "object") {
    return React.createElement(PageLoaderWrapper.ScreenLoader.make, {});
  } else {
    return React.createElement(SSODecisionScreen$SSOFromRedirect, {
      localSSOState: localSSOState,
    });
  }
}

var make = SSODecisionScreen;

export { SSOFromRedirect, make };
/* react Not a pure module */
