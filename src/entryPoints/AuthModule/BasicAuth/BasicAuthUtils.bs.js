// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as LocalStorage from "../../../libraries/LocalStorage.bs.js";
import * as CommonAuthUtils from "../Common/CommonAuthUtils.bs.js";
import * as JsonFlattenUtils from "../../../utils/JsonFlattenUtils.bs.js";

function flowTypeStrToVariantMapper(val) {
  if (val === undefined) {
    return "DASHBOARD_ENTRY";
  }
  switch (val) {
    case "merchant_select":
      return "MERCHANT_SELECT";
    default:
      return "DASHBOARD_ENTRY";
  }
}

function getBasicAuthInfo(json) {
  var dict = JsonFlattenUtils.flattenObject(json, false);
  return {
    token: LogicUtils.getOptionString(dict, "token"),
    merchant_id: LogicUtils.getOptionString(dict, "merchant_id"),
    name: LogicUtils.getOptionString(dict, "name"),
    email: LogicUtils.getOptionString(dict, "email"),
    flow_type: LogicUtils.getOptionString(dict, "flow_type"),
    user_role: LogicUtils.getOptionString(dict, "user_role"),
    verification_days_left: LogicUtils.getOptionBool(
      dict,
      "verification_days_left",
    ),
    merchants: LogicUtils.getOptionalArrayFromDict(dict, "merchants"),
  };
}

function setBasicAuthResToStorage(json) {
  LocalStorage.setItem(
    "USER_INFO",
    Core__Option.getOr(JSON.stringify(json), ""),
  );
}

function getBasicAuthInfoFromStrorage() {
  var json = LogicUtils.safeParse(
    LogicUtils.getValFromNullableValue(localStorage.getItem("USER_INFO"), ""),
  );
  return getBasicAuthInfo(json);
}

function validateForm(values, keys) {
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  var errors = {};
  keys.forEach(function (key) {
    var value = LogicUtils.getString(valuesDict, key, "");
    if (LogicUtils.isEmptyString(value)) {
      switch (key) {
        case "comfirm_password":
          errors[key] = "Please enter your Password Once Again";
          break;
        case "email":
          errors[key] = "Please enter your Email ID";
          break;
        case "create_password":
        case "password":
          errors[key] = "Please enter your Password";
          break;
        default:
          errors[key] = LogicUtils.capitalizeString(key) + " cannot be empty";
      }
    }
    if (
      LogicUtils.isNonEmptyString(value) &&
      key === "email" &&
      CommonAuthUtils.isValidEmail(value)
    ) {
      errors[key] = "Please enter valid Email ID";
    }
    if (key === "password") {
      CommonAuthUtils.passwordKeyValidation(value, key, "password", errors);
    } else {
      CommonAuthUtils.passwordKeyValidation(
        value,
        key,
        "create_password",
        errors,
      );
    }
    CommonAuthUtils.confirmPasswordCheck(
      value,
      key,
      "comfirm_password",
      "create_password",
      valuesDict,
      errors,
    );
  });
  return errors;
}

export {
  flowTypeStrToVariantMapper,
  getBasicAuthInfo,
  setBasicAuthResToStorage,
  getBasicAuthInfoFromStrorage,
  validateForm,
};
/* LogicUtils Not a pure module */
