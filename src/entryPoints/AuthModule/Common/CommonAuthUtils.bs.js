// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FramerMotion from "framer-motion";

function passwordKeyValidation(value, key, keyVal, errors) {
  var mustHave = [];
  if (LogicUtils.isNonEmptyString(value) && key === keyVal) {
    if (value.length < 8) {
      errors[key] =
        "Your password is not strong enough. Password size must be more than 8";
      return;
    } else {
      if (!/^(?=.*[A-Z])/.test(value)) {
        mustHave.push("uppercase");
      }
      if (!/^(?=.*[a-z])/.test(value)) {
        mustHave.push("lowercase");
      }
      if (!/^(?=.*[0-9])/.test(value)) {
        mustHave.push("numeric");
      }
      if (
        !new RegExp(
          "^(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?`~])",
        ).test(value)
      ) {
        mustHave.push("special");
      }
      if (/\s/.test(value)) {
        errors[key] = "Password should not contain whitespaces.";
      }
      if (mustHave.length > 0) {
        errors[key] =
          "Your password is not strong enough. A good password must contain atleast " +
          mustHave.join(",") +
          " character";
        return;
      } else {
        return;
      }
    }
  }
}

function confirmPasswordCheck(
  value,
  key,
  confirmKey,
  passwordKey,
  valuesDict,
  errors,
) {
  if (
    key === confirmKey &&
    LogicUtils.isNonEmptyString(value) &&
    !Core__Option.equal(
      valuesDict[passwordKey],
      valuesDict[key],
      Caml_obj.equal,
    )
  ) {
    errors[key] = "The New password does not match!";
    return;
  }
}

function isValidEmail(value) {
  return !/^(([^<>()[\]\.,;:\s@"]+(\.[^<>()[\]\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(
    value,
  );
}

function getResetpasswordBodyJson(password, token) {
  return Object.fromEntries([
    ["password", password],
    ["token", token],
  ]);
}

function getEmailPasswordBody(email, password, country) {
  return Object.fromEntries([
    ["email", email],
    ["password", password],
    ["country", country],
  ]);
}

function getEmailBody(email, country, param) {
  var fields = [["email", email]];
  if (country !== undefined) {
    fields.push(["country", country]);
  }
  return Object.fromEntries(fields);
}

function generateBodyForEmailRedirection(token) {
  return LogicUtils.getJsonFromArrayOfJson([["token", token]]);
}

function errorMapper(dict) {
  return {
    code: LogicUtils.getString(dict, "code", "UR_00"),
    message: LogicUtils.getString(dict, "message", "something went wrong"),
    type_: LogicUtils.getString(dict, "message", "something went wrong"),
  };
}

function parseErrorMessage(errorMessage) {
  var msg = errorMessage.message;
  var parsedValue = msg !== undefined ? LogicUtils.safeParse(msg) : null;
  var obj = Core__JSON.Classify.classify(parsedValue);
  if (typeof obj !== "object") {
    return errorMapper({});
  }
  switch (obj.TAG) {
    case "Object":
      return errorMapper(obj._0);
    default:
      return errorMapper({});
  }
}

function errorSubCodeMapper(subCode) {
  switch (subCode) {
    case "UR_01":
      return "UR_01";
    case "UR_03":
      return "UR_03";
    case "UR_05":
      return "UR_05";
    case "UR_16":
      return "UR_16";
    case "UR_29":
      return "UR_29";
    case "UR_38":
      return "UR_38";
    case "UR_40":
      return "UR_40";
    case "UR_41":
      return "UR_41";
    case "UR_42":
      return "UR_42";
    default:
      return "UR_00";
  }
}

function clearLocalStorage() {
  localStorage.clear();
}

function CommonAuthUtils$ToggleLiveTestMode(props) {
  var __customClass = props.customClass;
  var setAuthType = props.setAuthType;
  var setMode = props.setMode;
  var mode = props.mode;
  var customClass = __customClass !== undefined ? __customClass : "";
  var tmp;
  var exit = 0;
  switch (props.authType) {
    case "LoginWithPassword":
    case "LoginWithEmail":
    case "LiveMode":
      exit = 1;
      break;
    default:
      tmp = null;
  }
  if (exit === 1) {
    var selectedtStyle = "border-b-2 inline-block relative -bottom-px py-2";
    var testModeStyles = mode === "TestButtonMode" ? selectedtStyle : "";
    var liveModeStyles = mode === "LiveButtonMode" ? selectedtStyle : "";
    tmp = React.createElement(FramerMotion.motion.div, {
      className: "w-full",
      layoutId: "toggle",
      transition: {
        duration: 0.3,
      },
      children: Caml_option.some(
        React.createElement(
          "div",
          {
            className: "w-full p-2 " + customClass + " ",
          },
          React.createElement(
            "div",
            {
              className:
                "flex items-center border-b-1 border-grey-600 border-opacity-50 gap-4",
            },
            React.createElement(
              "div",
              {
                className:
                  "!shadow-none text-white text-start text-fs-16 font-semibold cursor-pointer flex justify-center",
                onClick: function (param) {
                  setMode(function (param) {
                    return "TestButtonMode";
                  });
                  setAuthType(function (param) {
                    return "LoginWithEmail";
                  });
                  window.location.replace(GlobalVars.getHostUrlWithBasePath);
                },
              },
              React.createElement(
                "span",
                {
                  className: testModeStyles,
                },
                "Test Mode",
              ),
            ),
            React.createElement(
              "div",
              {
                className:
                  "!shadow-none text-white text-start text-fs-16 font-semibold cursor-pointer flex justify-center",
                onClick: function (param) {
                  setMode(function (param) {
                    return "LiveButtonMode";
                  });
                  setAuthType(function (param) {
                    return "LoginWithEmail";
                  });
                  window.location.replace(GlobalVars.getHostUrlWithBasePath);
                },
              },
              React.createElement(
                "span",
                {
                  className: liveModeStyles,
                },
                "Live Mode",
              ),
            ),
          ),
        ),
      ),
    });
  }
  return React.createElement(React.Fragment, {
    children: Caml_option.some(tmp),
  });
}

var ToggleLiveTestMode = {
  make: CommonAuthUtils$ToggleLiveTestMode,
};

export {
  passwordKeyValidation,
  confirmPasswordCheck,
  isValidEmail,
  getResetpasswordBodyJson,
  getEmailPasswordBody,
  getEmailBody,
  generateBodyForEmailRedirection,
  errorMapper,
  parseErrorMessage,
  errorSubCodeMapper,
  clearLocalStorage,
  ToggleLiveTestMode,
};
/* react Not a pure module */
