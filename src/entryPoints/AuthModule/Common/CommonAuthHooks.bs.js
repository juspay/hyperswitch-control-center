// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ThemeProvider from "../../../context/ThemeProvider.bs.js";
import * as AuthInfoProvider from "../../../context/AuthInfoProvider.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as HyperSwitchEntryUtils from "../../HyperSwitchEntryUtils.bs.js";

function useNote(authType, setAuthType, isMagicLinkEnabled) {
  var match = React.useContext(ThemeProvider.themeContext);
  var textColor = match.globalUIConfig.font.textColor;
  var authId = HyperSwitchEntryUtils.getSessionData(
    "auth_id",
    undefined,
    undefined,
  );
  var getFooterLinkComponent = function (btnText, authType, path) {
    return React.createElement(
      "div",
      {
        className:
          "text-sm text-center " +
          textColor.primaryNormal +
          " cursor-pointer hover:underline underline-offset-2",
        onClick: function (param) {
          setAuthType(function (param) {
            return authType;
          });
          RescriptReactRouter.push(GlobalVars.appendDashboardPath(path));
        },
      },
      btnText,
    );
  };
  var tmp;
  var exit = 0;
  switch (authType) {
    case "LoginWithPassword":
      tmp = React.createElement(RenderIf.make, {
        condition: isMagicLinkEnabled,
        children: getFooterLinkComponent(
          "or sign in with an email",
          "LoginWithEmail",
          "/login?auth_id" + authId,
        ),
      });
      break;
    case "LoginWithEmail":
      tmp = getFooterLinkComponent(
        "or sign in using password",
        "LoginWithPassword",
        "/login?auth_id" + authId,
      );
      break;
    case "SignUP":
      tmp = React.createElement(RenderIf.make, {
        condition: isMagicLinkEnabled,
        children: React.createElement(
          "p",
          {
            className: "text-center text-sm",
          },
          "We'll be emailing you a magic link for a password-free experience, you can always choose to setup a password later.",
        ),
      });
      break;
    case "ForgetPassword":
    case "ForgetPasswordEmailSent":
    case "ResendVerifyEmailSent":
    case "MagicLinkEmailSent":
      exit = 1;
      break;
    default:
      tmp = null;
  }
  if (exit === 1) {
    tmp = React.createElement(
      "div",
      {
        className: "w-full flex justify-center",
      },
      React.createElement(
        "div",
        {
          className:
            "text-sm text-center " +
            textColor.primaryNormal +
            " hover:underline underline-offset-2 cursor-pointer w-fit",
          onClick: function (param) {
            var backState;
            switch (authType) {
              case "ForgetPasswordEmailSent":
                backState = "ForgetPassword";
                break;
              case "ResendVerifyEmailSent":
                backState = "ResendVerifyEmail";
                break;
              case "MagicLinkEmailSent":
                backState = "SignUP";
                break;
              default:
                backState = "LoginWithPassword";
            }
            setAuthType(function (param) {
              return backState;
            });
          },
        },
        "Cancel",
      ),
    );
  }
  return React.createElement(
    "div",
    {
      className: "w-96",
    },
    tmp,
  );
}

function useCommonAuthInfo() {
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var authStatus = match.authStatus;
  if (typeof authStatus !== "object") {
    return;
  }
  if (authStatus.TAG !== "LoggedIn") {
    return;
  }
  var info = authStatus._0;
  if (info.TAG === "BasicAuth") {
    var match$1 = info._0;
    return {
      token: LogicUtils.getNonEmptyString(
        Core__Option.getOr(match$1.token, ""),
      ),
      merchant_id: Core__Option.getOr(match$1.merchant_id, ""),
      name: Core__Option.getOr(match$1.name, ""),
      email: Core__Option.getOr(match$1.email, ""),
      user_role: Core__Option.getOr(match$1.user_role, ""),
    };
  }
  var match$2 = info._0;
  return {
    token: match$2.token,
    merchant_id: match$2.merchant_id,
    name: match$2.name,
    email: match$2.email,
    user_role: match$2.role_id,
  };
}

var defaultAuthInfo = {
  token: undefined,
  merchant_id: "",
  name: "",
  email: "",
  user_role: "",
};

export { useNote, defaultAuthInfo, useCommonAuthInfo };
/* react Not a pure module */
