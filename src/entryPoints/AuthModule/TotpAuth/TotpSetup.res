@react.component
let make = () => {
  open HSwitchUtils
  let (otp, setOtp) = React.useState(_ => "")

  let h2TextStyle = getTextClass((H2, Optional))
  let p2Regular = getTextClass((P2, Regular))
  let p3Regular = getTextClass((P3, Regular))
  let (totpUrl, setTotpUrl) = React.useState(_ => "")
  let {setAuthStatus} = React.useContext(AuthInfoProvider.authStatusContext)

  let getTOTPString = () => {
    // TODO: api call to get the TOTP url
    try {
      setTotpUrl(_ => "otpauth://totp/mani%40gmail.com?secret=ON2XAZLSONSWG4TFORPXI33QONSWG4TFOQ")
      // the reurn of the totp call can also be a empty value
      // if its empty then the user has already set up the totp
      // and then we just need to show the enter the otp not the qr code
    } catch {
    | _ => ()
    }
  }

  React.useEffect0(() => {
    getTOTPString()->ignore
    None
  })

  let verifyTOTP = () => {
    try {
      // open HyperSwitchAuthUtils
      //   open HSwitchLoginUtils
      open LogicUtils
      open TotpUtils
      // TODO : add api to verify totp
      let res =
        [
          ("token", "asdfvadf"->JSON.Encode.string),
          ("token_type", "force_set_password"->JSON.Encode.string),
        ]
        ->Dict.fromArray
        ->JSON.Encode.object

      let token = Some("asdfvadf")
      let token_Type =
        res->getDictFromJsonObject->getOptionString("token_type")->flowTypeStrToVariantMapper

      //   setAuthStatus(LoggedIn(getDummyAuthInfoForToken(token, token_Type)))
      setAuthStatus(LoggedIn(ToptAuth(totpAuthInfoForToken(token, token_Type))))
      RescriptReactRouter.replace(HSwitchGlobalVars.appendDashboardPath(~url="/force_set_password"))
    } catch {
    | _ => ()
    }
  }

  <BackgroundImageWrapper>
    <div className="h-full w-full flex items-center justify-center p-6">
      <div className="bg-white h-40-rem w-200 rounded-2xl flex flex-col">
        <div className="p-6 border-b-2">
          <p className={`${h2TextStyle} text-grey-900`}>
            {"Enable Two Factor Authentication"->React.string}
          </p>
        </div>
        <div className="px-12 py-8 flex flex-col gap-12 justify-between flex-1">
          <div className="grid grid-cols-4 gap-4 w-full">
            <div className="flex flex-col gap-10 col-span-3">
              <p> {"Use any authenticator app to complete the setup"->React.string} </p>
              <div className="flex flex-col gap-4">
                <p className=p2Regular>
                  {"Follow these steps to configure two factor authentication:"->React.string}
                </p>
                <div className="flex flex-col gap-4 ml-2">
                  <p className={`${p2Regular} opacity-60 flex gap-2 items-center`}>
                    <div className="text-white rounded-full bg-grey-900 opacity-50 px-2 py-0.5">
                      {"1"->React.string}
                    </div>
                    {"Scan the QR code shown on the screen with your google authenticator application"->React.string}
                  </p>
                  <p className={`${p2Regular} opacity-60 flex gap-2 items-center`}>
                    <div className="text-white rounded-full bg-grey-900 opacity-50 px-2 py-0.5">
                      {"2"->React.string}
                    </div>
                    {"Enter the OTP code displayed on the authenticator app in below text field or textbox"->React.string}
                  </p>
                </div>
              </div>
            </div>
            <div className="flex flex-col gap-2 col-span-1 items-center">
              <p className=p3Regular> {"Scan the QR Code into your app"->React.string} </p>
              <ReactQRCode value=totpUrl size=150 />
            </div>
          </div>
          <div className="h-px w-11/12 bg-grey-200 opacity-50" />
          <div className="flex flex-col gap-4 items-center">
            <p>
              {"Enter a 6-digit authentication code generated by you authenticator app"->React.string}
            </p>
            <OtpInput value={otp} setValue={setOtp} />
          </div>
          <div className="flex justify-end gap-4">
            <Button text="Skip now" buttonType={Secondary} buttonSize=Small />
            <Button
              text="Enable 2FA"
              buttonType=Primary
              buttonSize=Small
              customButtonStyle="group"
              onClick={_ => verifyTOTP()}
              rightIcon={CustomIcon(
                <Icon
                  name="thin-right-arrow" size=20 className="group-hover:scale-125 cursor-pointer"
                />,
              )}
            />
          </div>
        </div>
      </div>
    </div>
  </BackgroundImageWrapper>
}
