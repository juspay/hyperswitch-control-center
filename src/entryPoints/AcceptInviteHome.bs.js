// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../components/Icon.bs.js";
import * as Modal from "../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "../components/Button.bs.js";
import * as Recoil from "recoil";
import * as APIUtils from "../screens/APIUtils/APIUtils.bs.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as ToastState from "../hooks/ToastState.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HyperswitchAtom from "../Recoils/HyperswitchAtom.bs.js";
import * as SwitchMerchantUtils from "../screens/SwitchMerchant/SwitchMerchantUtils.bs.js";
import * as SwitchMerchantListHook from "../screens/SwitchMerchant/SwitchMerchantListHook.bs.js";

function AcceptInviteHome(props) {
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast();
  var fetchSwitchMerchantList =
    SwitchMerchantListHook.useFetchSwitchMerchantList();
  var match = React.useState(function () {
    return false;
  });
  var setShowModal = match[1];
  var switchMerchantListValue = Recoil.useRecoilValue(
    HyperswitchAtom.switchMerchantListAtom,
  );
  var match$1 = React.useState(function () {
    return [];
  });
  var setMerchantListValue = match$1[1];
  var merchantListValue = match$1[0];
  var match$2 = React.useState(function () {
    return [];
  });
  var setAcceptedMerchantId = match$2[1];
  var acceptedMerchantId = match$2[0];
  var merchantValueatZeroIndex = Core__Option.getOr(
    merchantListValue[0],
    SwitchMerchantUtils.defaultValue,
  );
  React.useEffect(
    function () {
      var filteredSwitchMerchantList = switchMerchantListValue.filter(
        function (ele) {
          return !ele.is_active;
        },
      );
      setMerchantListValue(function (param) {
        return filteredSwitchMerchantList;
      });
      setAcceptedMerchantId(function (param) {
        return Core__Array.make(filteredSwitchMerchantList.length, false);
      });
    },
    [switchMerchantListValue],
  );
  var getURL = APIUtils.useGetURL();
  var acceptInvite = async function (param) {
    try {
      var url = getURL(
        "USERS",
        "Put",
        undefined,
        undefined,
        "ACCEPT_INVITE",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var merchantIds =
        merchantListValue.length === 1
          ? [merchantValueatZeroIndex.merchant_id]
          : Core__Array.reduceWithIndex(
              acceptedMerchantId,
              [],
              function (acc, ele, index) {
                if (ele) {
                  acc.push(
                    Core__Option.getOr(
                      merchantListValue[index],
                      SwitchMerchantUtils.defaultValue,
                    ).merchant_id,
                  );
                }
                return acc;
              },
            );
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["merchant_ids", merchantIds],
      ]);
      await updateDetails(
        url,
        body,
        "Put",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await fetchSwitchMerchantList();
      showToast(
        "Invite Accepted Successfully",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setAcceptedMerchantId(function (param) {
        return Core__Array.make(merchantListValue.length, false);
      });
    } catch (exn) {}
    return setShowModal(function (param) {
      return false;
    });
  };
  return React.createElement(
    RenderIf.make,
    {
      condition: merchantListValue.length !== 0,
      children: null,
    },
    React.createElement(RenderIf.make, {
      condition: merchantListValue.length === 1,
      children: React.createElement(
        "div",
        {
          className:
            "w-full bg-white px-6 py-3 flex items-center justify-between",
        },
        React.createElement(
          "div",
          {
            className: "flex items-center gap-3",
          },
          React.createElement(Icon.make, {
            name: "group-users-without-circle",
            size: 40,
          }),
          React.createElement(
            "div",
            undefined,
            "You've been invited to the Hyperswitch dashboard by ",
            React.createElement(
              "span",
              {
                className: "font-bold",
              },
              merchantValueatZeroIndex.merchant_name,
            ),
          ),
        ),
        React.createElement(Button.make, {
          text: "Accept",
          buttonType: "PrimaryOutline",
          onClick: function (param) {
            acceptInvite();
          },
          customButtonStyle: "!p-2",
        }),
      ),
    }),
    React.createElement(RenderIf.make, {
      condition: merchantListValue.length > 1,
      children: React.createElement(
        "div",
        {
          className:
            "w-full bg-white px-6 py-3 flex items-center justify-between",
        },
        React.createElement(
          "div",
          {
            className: "flex items-center gap-3",
          },
          React.createElement(Icon.make, {
            name: "group-users-without-circle",
            size: 40,
          }),
          React.createElement(
            "div",
            undefined,
            "You have ",
            React.createElement(
              "span",
              {
                className: "font-bold",
              },
              merchantListValue.length,
            ),
            React.createElement("span", undefined, " Pending Invites"),
          ),
        ),
        React.createElement(Button.make, {
          text: "View Invitations",
          buttonType: "SecondaryFilled",
          onClick: function (param) {
            setShowModal(function (param) {
              return true;
            });
          },
          customButtonStyle: "!p-2",
        }),
        React.createElement(Modal.make, {
          showModal: match[0],
          setShowModal: setShowModal,
          children: React.createElement(
            "div",
            {
              className: "flex flex-col gap-4",
            },
            React.createElement(
              "div",
              {
                className: "flex flex-col gap-10",
              },
              merchantListValue.map(function (ele, index) {
                return React.createElement(
                  "div",
                  {
                    className:
                      "w-full bg-white p-6 flex items-center justify-between border-1 rounded-xl !shadow-[0_2px_4px_0_rgba(0,0,0,_0.05)]",
                  },
                  React.createElement(
                    "div",
                    {
                      className: "flex items-center gap-3",
                    },
                    React.createElement(Icon.make, {
                      name: "group-users-without-circle",
                      size: 40,
                    }),
                    React.createElement(
                      "div",
                      undefined,
                      "You've been invited to the Hyperswitch dashboard by ",
                      React.createElement(
                        "span",
                        {
                          className: "font-bold",
                        },
                        ele.merchant_name,
                      ),
                    ),
                  ),
                  React.createElement(RenderIf.make, {
                    condition: !Core__Option.getOr(
                      acceptedMerchantId[index],
                      false,
                    ),
                    children: React.createElement(Button.make, {
                      text: "Accept",
                      buttonType: "PrimaryOutline",
                      onClick: function (param) {
                        setAcceptedMerchantId(function (prev) {
                          return prev.map(function (ele, i) {
                            if (index === i) {
                              return true;
                            } else {
                              return ele;
                            }
                          });
                        });
                      },
                      customButtonStyle: "!p-2",
                    }),
                  }),
                  React.createElement(RenderIf.make, {
                    condition: Core__Option.getOr(
                      acceptedMerchantId[index],
                      false,
                    ),
                    children: React.createElement(
                      "div",
                      {
                        className:
                          "flex items-center gap-1 text-green-accepted_green_800",
                      },
                      React.createElement(Icon.make, {
                        name: "green-tick-without-background",
                      }),
                      "Accepted",
                    ),
                  }),
                );
              }),
            ),
            React.createElement(
              "div",
              {
                className: "flex items-center justify-center",
              },
              React.createElement(Button.make, {
                buttonState: Core__Option.getOr(
                  acceptedMerchantId.find(function (ele) {
                    return ele;
                  }),
                  false,
                )
                  ? "Normal"
                  : "Disabled",
                text: "Accept Invites",
                buttonType: "Primary",
                onClick: function (param) {
                  acceptInvite();
                },
                customButtonStyle: "!w-fit",
              }),
            ),
          ),
          modalHeading: "Pending Invitations",
          modalClass: "w-1/2 m-auto !bg-white",
          childClass: "my-5 mx-4 overflow-scroll !h-[35%]",
          paddingClass: "",
          modalHeadingDescription:
            "Please accept your pending merchant invitations",
          closeOnOutsideClick: true,
          onCloseClickCustomFun: function () {
            setAcceptedMerchantId(function (param) {
              return Core__Array.make(merchantListValue.length, false);
            });
          },
        }),
      ),
    }),
  );
}

var make = AcceptInviteHome;

export { make };
/* Icon Not a pure module */
