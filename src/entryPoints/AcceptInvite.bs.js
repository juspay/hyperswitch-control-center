// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as APIUtils from "../screens/APIUtils/APIUtils.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as GlobalVars from "../utils/GlobalVars.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as ToastState from "../hooks/ToastState.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as BasicAuthUtils from "./AuthModule/BasicAuth/BasicAuthUtils.bs.js";
import * as GlobalProvider from "./Provider/GlobalProvider.bs.js";
import * as HSLocalStorage from "../screens/HSLocalStorage.bs.js";
import * as AuthInfoProvider from "../context/AuthInfoProvider.bs.js";
import * as CommonInviteScreen from "./AuthModule/Common/CommonInviteScreen.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function AcceptInvite(props) {
  var showToast = ToastState.useShowToast();
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var authStatus = match.authStatus;
  var match$1 = React.useContext(GlobalProvider.defaultContext);
  var setDashboardPageState = match$1.setDashboardPageState;
  var match$2 = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStatus = match$2.setAuthStatus;
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match$3 = React.useState(function () {
    return [];
  });
  var setMerchantData = match$3[1];
  var merchantData = match$3[0];
  var getURL = APIUtils.useGetURL();
  var handleLogout = APIUtils.useHandleLogout();
  React.useEffect(function () {
    var acceptInvitedata;
    if (typeof authStatus !== "object" || authStatus.TAG !== "LoggedIn") {
      acceptInvitedata = undefined;
    } else {
      var info = authStatus._0;
      acceptInvitedata =
        info.TAG === "BasicAuth" ? info._0.merchants : undefined;
    }
    if (acceptInvitedata !== undefined && acceptInvitedata.length > 0) {
      setMerchantData(function (param) {
        return acceptInvitedata;
      });
      RescriptReactRouter.replace(
        GlobalVars.appendDashboardPath("/accept-invite"),
      );
    } else {
      handleLogout();
    }
  }, []);
  var onClickLoginToDashboard = async function () {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "ACCEPT_INVITE",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var acceptedMerchantIds = Core__Array.reduce(
        merchantData,
        [],
        function (acc, ele) {
          var merchantDataDict = LogicUtils.getDictFromJsonObject(ele);
          if (LogicUtils.getBool(merchantDataDict, "is_active", false)) {
            acc.push(LogicUtils.getString(merchantDataDict, "merchant_id", ""));
          }
          return acc;
        },
      );
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["merchant_ids", acceptedMerchantIds],
        ["need_dashboard_entry_response", true],
      ]);
      var res = await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var typedInfo = BasicAuthUtils.getBasicAuthInfo(res);
      if (Core__Option.isSome(typedInfo.token)) {
        HSLocalStorage.removeItemFromLocalStorage("accept_invite_data");
        setAuthStatus({
          TAG: "LoggedIn",
          _0: {
            TAG: "BasicAuth",
            _0: typedInfo,
          },
        });
        return setDashboardPageState(function (param) {
          return "HOME";
        });
      } else {
        showToast(
          "Failed to sign in, Try again",
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
        handleLogout();
        return;
      }
    } catch (exn) {
      return;
    }
  };
  var acceptInviteUpdate = function (index) {
    var merchantDataUpdated = Core__Option.getOr(
      Core__JSON.Decode.array(
        LogicUtils.safeParse(
          Core__Option.getOr(JSON.stringify(merchantData), ""),
        ),
      ),
      [],
    );
    LogicUtils.getDictFromJsonObject(
      LogicUtils.getValueFromArray(merchantDataUpdated, index, null),
    )["is_active"] = true;
    setMerchantData(function (param) {
      return merchantDataUpdated;
    });
  };
  return React.createElement(CommonInviteScreen.make, {
    merchantData: merchantData,
    acceptInviteOnClick: acceptInviteUpdate,
    onClickLoginToDashboard: onClickLoginToDashboard,
  });
}

var make = AcceptInvite;

export { make };
/* react Not a pure module */
