// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../screens/APIUtils/APIUtils.bs.js";
import * as MixPanel from "../libraries/MixPanel.bs.js";
import * as AuthEntry from "./AuthModule/AuthEntry.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as GlobalVars from "../utils/GlobalVars.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as NoDataFound from "../components/NoDataFound.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as LocalStorage from "../libraries/LocalStorage.bs.js";
import * as ThemeProvider from "../context/ThemeProvider.bs.js";
import * as TimeZoneUtils from "../utils/TimeZoneUtils.bs.js";
import * as BasicAuthEntry from "./AuthModule/BasicAuth/BasicAuthEntry.bs.js";
import * as CommonAuthHooks from "./AuthModule/Common/CommonAuthHooks.bs.js";
import * as EntryPointUtils from "./EntryPointUtils.bs.js";
import * as GoogleAnalytics from "../libraries/GoogleAnalytics.bs.js";
import * as HyperswitchAtom from "../Recoils/HyperswitchAtom.bs.js";
import * as FeatureFlagUtils from "./FeatureFlagUtils.bs.js";
import * as HyperSwitchUtils from "../utils/HyperSwitchUtils.bs.js";
import MixpanelBrowser from "mixpanel-browser";
import * as PageLoaderWrapper from "../screens/Helpers/PageLoaderWrapper.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as UserTimeZoneProvider from "../context/UserTimeZoneProvider.bs.js";
import * as HyperSwitchEntryUtils from "./HyperSwitchEntryUtils.bs.js";
import * as HyperSwitchDefaultConfig from "./configs/HyperSwitchDefaultConfig.bs.js";

function HyperSwitchEntry$HyperSwitchEntryComponent(props) {
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  var email = match.email;
  var name = match.name;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match$1 = React.useContext(UserTimeZoneProvider.userTimeContext);
  var setZone = match$1[1];
  var setFeatureFlag = Recoil.useSetRecoilState(
    HyperswitchAtom.featureFlagAtom,
  );
  var match$2 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$2[1];
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var match$3 = React.useContext(ThemeProvider.themeContext);
  var configCustomDomainTheme = match$3.configCustomDomainTheme;
  var configureFavIcon = function (faviconUrl) {
    try {
      var a = document.createElement("link");
      a.setAttribute(
        "href",
        Core__Option.getOr(faviconUrl, "/HyperswitchFavicon.png"),
      );
      a.setAttribute("rel", "shortcut icon");
      a.setAttribute("type", "image/x-icon");
      document.head.appendChild(a);
      return;
    } catch (exn) {
      return Js_exn.raiseError("Error on configuring favicon");
    }
  };
  var configURL = function (urlConfig) {
    try {
      var dict = LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(urlConfig),
        "endpoints",
      );
      var value_apiBaseUrl = LogicUtils.getString(dict, "api_url", "");
      var value_mixpanelToken = LogicUtils.getString(
        dict,
        "mixpanel_token",
        "",
      );
      var value_faviconUrl = LogicUtils.getNonEmptyString(
        LogicUtils.getString(dict, "favicon_url", ""),
      );
      var value_logoUrl = LogicUtils.getNonEmptyString(
        LogicUtils.getString(dict, "logo_url", ""),
      );
      var value_sdkBaseUrl = LogicUtils.getNonEmptyString(
        LogicUtils.getString(dict, "sdk_url", ""),
      );
      var value_agreementUrl = LogicUtils.getNonEmptyString(
        LogicUtils.getString(dict, "agreement_url", ""),
      );
      var value_agreementVersion = LogicUtils.getNonEmptyString(
        LogicUtils.getString(dict, "agreement_version", ""),
      );
      var value_applePayCertificateUrl = LogicUtils.getNonEmptyString(
        LogicUtils.getString(dict, "apple_pay_certificate_url", ""),
      );
      var value_reconIframeUrl = LogicUtils.getNonEmptyString(
        LogicUtils.getString(dict, "recon_iframe_url", ""),
      );
      var value_dssCertificateUrl = LogicUtils.getNonEmptyString(
        LogicUtils.getString(dict, "dss_certificate_url", ""),
      );
      var value = {
        apiBaseUrl: value_apiBaseUrl,
        mixpanelToken: value_mixpanelToken,
        faviconUrl: value_faviconUrl,
        logoUrl: value_logoUrl,
        sdkBaseUrl: value_sdkBaseUrl,
        agreementUrl: value_agreementUrl,
        agreementVersion: value_agreementVersion,
        applePayCertificateUrl: value_applePayCertificateUrl,
        reconIframeUrl: value_reconIframeUrl,
        dssCertificateUrl: value_dssCertificateUrl,
      };
      window._env_ = value;
      configureFavIcon(value_faviconUrl);
      return;
    } catch (exn) {
      return Js_exn.raiseError("Error on configuring endpoint");
    }
  };
  var fetchConfig = async function () {
    try {
      var domain = HyperSwitchEntryUtils.getSessionData(
        "domain",
        "default",
        undefined,
      );
      var apiURL =
        GlobalVars.getHostUrlWithBasePath +
        "/config/merchant-config?domain=" +
        domain;
      var res = await fetchDetails(apiURL);
      var featureFlags = FeatureFlagUtils.featureFlagType(res);
      setFeatureFlag(function (param) {
        return featureFlags;
      });
      configCustomDomainTheme(res);
      configURL(res);
      await HyperSwitchUtils.delay(1000);
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      return setScreenState(function (param) {
        return "Custom";
      });
    }
  };
  React.useEffect(function () {
    HyperSwitchEntryUtils.setSessionData("auth_id", url.search);
    HyperSwitchEntryUtils.setSessionData("domain", url.search);
    fetchConfig();
  }, []);
  React.useEffect(function () {
    setZone(TimeZoneUtils.getUserTimeZone());
  }, []);
  React.useEffect(
    function () {
      if (featureFlagDetails.mixpanel) {
        MixPanel.init(window._env_.mixpanelToken, {
          track_pageview: true,
          batch_requests: true,
          loaded: function () {
            var mixpanelUserInfo = Object.fromEntries([
              ["name", email],
              ["merchantName", name],
            ]);
            var userId = MixPanel.getDistinctId();
            LocalStorage.setItem("deviceid", userId);
            MixPanel.identify(userId);
            MixpanelBrowser.people.set(mixpanelUserInfo);
          },
        });
      }
    },
    [featureFlagDetails.mixpanel],
  );
  var setPageName = function (pageTitle) {
    var page = LogicUtils.snakeToTitle(pageTitle);
    var title = page + " - Dashboard";
    document.title = title;
    GoogleAnalytics.send({
      hitType: "pageview",
      page: page,
    });
  };
  React.useEffect(
    function () {
      var match = url.path;
      var exit = 0;
      if (match && match.hd === "user") {
        var match$1 = match.tl;
        if (match$1) {
          switch (match$1.hd) {
            case "login":
              if (match$1.tl) {
                exit = 1;
              } else {
                setPageName("magic_link_verify");
              }
              break;
            case "set_password":
              if (match$1.tl) {
                exit = 1;
              } else {
                setPageName("set_password");
              }
              break;
            case "verify_email":
              if (match$1.tl) {
                exit = 1;
              } else {
                setPageName("verify_email");
              }
              break;
            default:
              exit = 1;
          }
        } else {
          exit = 1;
        }
      } else {
        exit = 1;
      }
      if (exit === 1) {
        var val = Core__List.drop(url.path, 1);
        if (val !== undefined) {
          var pageTitle = Core__List.head(val);
          if (pageTitle !== undefined) {
            setPageName(pageTitle);
          }
        }
      }
    },
    [url.path],
  );
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "text-black",
        },
        featureFlagDetails.totp
          ? React.createElement(AuthEntry.make, {})
          : React.createElement(BasicAuthEntry.make, {}),
      ),
    ),
    screenState: match$2[0],
    customUI: Caml_option.some(
      React.createElement(NoDataFound.make, {
        message: "Oops! Missing config",
        renderType: "NotFound",
      }),
    ),
    sectionHeight: "h-screen",
  });
}

var HyperSwitchEntryComponent = {
  make: HyperSwitchEntry$HyperSwitchEntryComponent,
};

EntryPointUtils.renderDashboardApp(
  React.createElement(HyperSwitchEntry$HyperSwitchEntryComponent, {}),
);

var uiConfig = HyperSwitchDefaultConfig.config;

export { HyperSwitchEntryComponent, uiConfig };
/*  Not a pure module */
