// Generated by ReScript, PLEASE EDIT WITH CARE

import * as DayJs from "../libraries/DayJs.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "./LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DateTimeUtils from "./DateTimeUtils.bs.js";

function calculateHistoricTime(
  startTime,
  endTime,
  formatOpt,
  timeZoneOpt,
  param,
) {
  var format = formatOpt !== undefined ? formatOpt : "YYYY-MM-DDTHH:mm:ss[Z]";
  var timeZone = timeZoneOpt !== undefined ? timeZoneOpt : "UTC";
  var toUtc;
  toUtc =
    timeZone === "UTC"
      ? DateTimeUtils.toUtc
      : function (val) {
          return val;
        };
  if (
    !(
      LogicUtils.isNonEmptyString(startTime) &&
      LogicUtils.isNonEmptyString(endTime)
    )
  ) {
    return ["", ""];
  }
  var startDateTime = toUtc(new Date(DateTimeUtils.parseAsFloat(startTime)));
  var startTimeDayJs = DayJs.getDayJsForJsDate(startDateTime);
  var endDateTime = toUtc(new Date(DateTimeUtils.parseAsFloat(endTime)));
  var endDateTimeJs = DayJs.getDayJsForJsDate(endDateTime);
  var timediff = endDateTimeJs.diff(startDateTime.toString(), "hours");
  if (timediff < 24) {
    return [
      startTimeDayJs.subtract(24, "hours").format(format),
      endDateTimeJs.subtract(24, "hours").format(format),
    ];
  }
  var fromTime = startDateTime.valueOf();
  var toTime = endDateTime.valueOf();
  var startTime$1 = DayJs.getDayJsForJsDate(
    new Date(fromTime - (toTime - fromTime) - 1),
  );
  var endTime$1 = DayJs.getDayJsForJsDate(new Date(fromTime - 1));
  return [startTime$1.format(format), endTime$1.format(format)];
}

function makeFilters(filters, cardinalityArr) {
  var decodeFilter = LogicUtils.getDictFromJsonObject(filters);
  var expressionArr = Object.entries(decodeFilter).map(function (item) {
    return Object.fromEntries([
      ["field", item[0]],
      ["condition", "In"],
      ["val", item[1]],
    ]);
  });
  var expressionArr$1 = cardinalityArr.concat(expressionArr);
  if (expressionArr$1.length === 1) {
    return expressionArr$1[0];
  }
  if (expressionArr$1.length <= 1) {
    return;
  }
  var leftInitial = Core__Option.getOr(expressionArr$1.pop(), {});
  var rightInitial = Core__Option.getOr(expressionArr$1.pop(), {});
  var complexFilterDict = Object.fromEntries([
    [
      "and",
      Object.fromEntries([
        ["left", leftInitial],
        ["right", rightInitial],
      ]),
    ],
  ]);
  expressionArr$1.forEach(function (item) {
    var complextFilterDictCopy = Object.fromEntries(
      Object.entries(complexFilterDict).slice(),
    );
    complexFilterDict["and"] = Object.fromEntries([
      ["left", complextFilterDictCopy],
      ["right", item],
    ]);
  });
  return complexFilterDict;
}

function getFilterBody(
  filterValueFromUrl,
  customFilterValue,
  jsonFormattedFilter,
  cardinalityArrFilter,
) {
  var customFilterBuild;
  if (customFilterValue !== undefined) {
    var value = customFilterValue
      .replace(/ AND /gi, "@@")
      .replace(/ OR /gi, "@@")
      .split("@@");
    var strAr = ["or", "and"];
    var andAndOr = customFilterValue.split(" ").filter(function (item) {
      return strAr.includes(item.toLocaleLowerCase());
    });
    var filterValueArr = Belt_Array.keepMap(
      value.map(function (item, _index) {
        if (
          Core__Option.isSome(Caml_option.nullable_to_opt(item.match(/ != /gi)))
        ) {
          var value = item
            .replace(/ != /gi, "@@")
            .split("@@")
            .map(function (item) {
              return item.trim();
            });
          if (value.length >= 2) {
            return Object.fromEntries([
              ["field", Core__Option.getOr(value[0], "")],
              ["condition", "NotEquals"],
              ["val", Core__Option.getOr(value[1], "").replace(/'/gi, "")],
            ]);
          } else {
            return;
          }
        }
        if (
          Core__Option.isSome(Caml_option.nullable_to_opt(item.match(/ > /gi)))
        ) {
          var value$1 = item
            .replace(/ > /gi, "@@")
            .split("@@")
            .map(function (item) {
              return item.trim();
            });
          if (value$1.length >= 2) {
            return Object.fromEntries([
              ["field", Core__Option.getOr(value$1[0], "")],
              ["condition", "Greater"],
              ["val", Core__Option.getOr(value$1[1], "").replace(/'/gi, "")],
            ]);
          } else {
            return;
          }
        }
        if (
          Core__Option.isSome(Caml_option.nullable_to_opt(item.match(/ < /gi)))
        ) {
          var value$2 = item
            .replace(/ < /gi, "@@")
            .split("@@")
            .map(function (item) {
              return item.trim();
            });
          if (value$2.length >= 2) {
            return Object.fromEntries([
              ["field", Core__Option.getOr(value$2[0], "")],
              ["condition", "Less"],
              ["val", Core__Option.getOr(value$2[1], "").replace(/'/gi, "")],
            ]);
          } else {
            return;
          }
        }
        if (
          Core__Option.isSome(Caml_option.nullable_to_opt(item.match(/ >= /gi)))
        ) {
          var value$3 = item
            .replace(/ >= /gi, "@@")
            .split("@@")
            .map(function (item) {
              return item.trim();
            });
          if (value$3.length >= 2) {
            return Object.fromEntries([
              ["field", Core__Option.getOr(value$3[0], "")],
              ["condition", "GreaterThanEquall"],
              ["val", Core__Option.getOr(value$3[1], "").replace(/'/gi, "")],
            ]);
          } else {
            return;
          }
        }
        if (
          Core__Option.isSome(Caml_option.nullable_to_opt(item.match(/ <= /gi)))
        ) {
          var value$4 = item
            .replace(/ <= /gi, "@@")
            .split("@@")
            .map(function (item) {
              return item.trim();
            });
          if (value$4.length >= 2) {
            return Object.fromEntries([
              ["field", Core__Option.getOr(value$4[0], "")],
              ["condition", "LessThanEqual"],
              ["val", Core__Option.getOr(value$4[1], "").replace(/'/gi, "")],
            ]);
          } else {
            return;
          }
        }
        if (
          Core__Option.isSome(Caml_option.nullable_to_opt(item.match(/ = /gi)))
        ) {
          var value$5 = item
            .replace(/ = /gi, "@@")
            .split("@@")
            .map(function (item) {
              return item.trim();
            });
          if (value$5.length >= 2) {
            return Object.fromEntries([
              ["field", Core__Option.getOr(value$5[0], "")],
              ["condition", "Equals"],
              ["val", Core__Option.getOr(value$5[1], "").replace(/'/gi, "")],
            ]);
          } else {
            return;
          }
        }
        if (
          Core__Option.isSome(Caml_option.nullable_to_opt(item.match(/ IN /gi)))
        ) {
          var value$6 = item
            .replace(/ IN /gi, "@@")
            .split("@@")
            .map(function (item) {
              return item.trim();
            });
          if (value$6.length >= 2) {
            return Object.fromEntries([
              ["field", Core__Option.getOr(value$6[0], "")],
              ["condition", "In"],
              [
                "val",
                LogicUtils.getJsonFromArrayOfString(
                  Core__Option.getOr(value$6[1], "")
                    .replace(/'/gi, "")
                    .replace(/\(/g, "")
                    .replace(/\)/g, "")
                    .split(",")
                    .map(function (item) {
                      return item.trim();
                    }),
                ),
              ],
            ]);
          } else {
            return;
          }
        }
        if (
          Core__Option.isSome(
            Caml_option.nullable_to_opt(item.match(/ NOT IN /gi)),
          )
        ) {
          var value$7 = item
            .replace(/ NOT IN /gi, "@@")
            .split("@@")
            .map(function (item) {
              return item.trim();
            });
          if (value$7.length >= 2) {
            return Object.fromEntries([
              ["field", Core__Option.getOr(value$7[0], "")],
              ["condition", "NotIn"],
              [
                "val",
                LogicUtils.getJsonFromArrayOfString(
                  Core__Option.getOr(value$7[1], "")
                    .replace(/'/gi, "")
                    .replace(/\(/g, "")
                    .replace(/\)/g, "")
                    .split(",")
                    .map(function (item) {
                      return item.trim();
                    }),
                ),
              ],
            ]);
          } else {
            return;
          }
        }
        if (
          !Core__Option.isSome(
            Caml_option.nullable_to_opt(item.match(/ LIKE /gi)),
          )
        ) {
          return;
        }
        var value$8 = item
          .replace(/ LIKE /gi, "@@")
          .split("@@")
          .map(function (item) {
            return item.trim();
          });
        if (value$8.length >= 2) {
          return Object.fromEntries([
            ["field", Core__Option.getOr(value$8[0], "")],
            ["condition", "Like"],
            ["val", Core__Option.getOr(value$8[1], "").replace(/'/gi, "")],
          ]);
        }
      }),
      function (item) {
        return item;
      },
    );
    if (filterValueArr.length === 1) {
      customFilterBuild = filterValueArr[0];
    } else if (filterValueArr.length >= 2) {
      var leftInitial = Core__Option.getOr(filterValueArr[0], {});
      var rightInitial = Core__Option.getOr(filterValueArr[1], {});
      var conditionInitital = Core__Option.getOr(andAndOr[0], "and");
      var complexFilterDict = Object.fromEntries([
        [
          conditionInitital,
          Object.fromEntries([
            ["left", leftInitial],
            ["right", rightInitial],
          ]),
        ],
      ]);
      var filterValueArr$1 = filterValueArr.slice().slice(2);
      var andAndOr$1 = andAndOr.slice().slice(1);
      filterValueArr$1.forEach(function (item, index) {
        var complextFilterDictCopy = Object.fromEntries(
          Object.entries(complexFilterDict).slice(),
        );
        complexFilterDict[Core__Option.getOr(andAndOr$1[index], "and")] =
          Object.fromEntries([
            ["left", complextFilterDictCopy],
            ["right", item],
          ]);
      });
      customFilterBuild = complexFilterDict;
    } else {
      customFilterBuild = undefined;
    }
  } else {
    customFilterBuild = undefined;
  }
  var filterValue;
  if (filterValueFromUrl !== undefined) {
    if (customFilterBuild !== undefined) {
      var formattedFilters = makeFilters(
        filterValueFromUrl,
        cardinalityArrFilter,
      );
      filterValue =
        formattedFilters !== undefined
          ? Object.fromEntries([
              [
                "and",
                Object.fromEntries([
                  ["left", formattedFilters],
                  ["right", customFilterBuild],
                ]),
              ],
            ])
          : customFilterBuild;
    } else {
      var formattedFilters$1 = makeFilters(
        filterValueFromUrl,
        cardinalityArrFilter,
      );
      filterValue = formattedFilters$1 !== undefined ? formattedFilters$1 : {};
    }
  } else {
    filterValue = customFilterBuild !== undefined ? customFilterBuild : {};
  }
  if (jsonFormattedFilter !== undefined) {
    if (Object.entries(filterValue).length > 0) {
      return Object.fromEntries([
        [
          "and",
          Object.fromEntries([
            ["left", filterValue],
            ["right", jsonFormattedFilter],
          ]),
        ],
      ]);
    } else {
      return Core__Option.getOr(
        Core__JSON.Decode.object(jsonFormattedFilter),
        {},
      );
    }
  } else {
    return filterValue;
  }
}

function timeZoneMapper(timeZone) {
  if (timeZone === "UTC") {
    return "UTC";
  } else {
    return "Asia/Kolkata";
  }
}

function apiBodyMaker(
  timeObj,
  metric,
  groupBy,
  granularityConfig,
  cardinality,
  filterValueFromUrl,
  customFilterValue,
  sortingParams,
  jsonFormattedFilter,
  cardinalitySortDimsOpt,
  timeZoneOpt,
  timeColOpt,
  domain,
  dataLimit,
  param,
) {
  var cardinalitySortDims =
    cardinalitySortDimsOpt !== undefined
      ? cardinalitySortDimsOpt
      : "total_volume";
  var timeZone = timeZoneOpt !== undefined ? timeZoneOpt : "IST";
  var timeCol = timeColOpt !== undefined ? timeColOpt : "txn_initiated";
  var finalBody = {};
  var cardinalityArrFilter =
    cardinality !== undefined
      ? groupBy !== undefined
        ? groupBy.map(function (item) {
            return Object.fromEntries([
              ["field", item],
              ["condition", "In"],
              [
                "val",
                Object.fromEntries([
                  [
                    "sortedOn",
                    Object.fromEntries([
                      ["sortDimension", cardinalitySortDims],
                      ["ordering", "Desc"],
                    ]),
                  ],
                  ["limit", cardinality],
                ]),
              ],
            ]);
          })
        : []
      : [];
  var activeTabArr = Core__Option.getOr(groupBy, []).map(function (prim) {
    return prim;
  });
  finalBody["metric"] = metric;
  var filterVal = getFilterBody(
    filterValueFromUrl,
    customFilterValue,
    jsonFormattedFilter,
    cardinalityArrFilter,
  );
  if (Object.entries(filterVal).length !== 0) {
    finalBody["filters"] = filterVal;
  }
  if (granularityConfig !== undefined) {
    var granularityDimension = {};
    var granularity = {};
    granularityDimension["timeZone"] = timeZoneMapper(timeZone);
    granularityDimension["intervalCol"] = timeCol;
    granularity["unit"] = granularityConfig[1];
    granularity["duration"] = granularityConfig[0];
    granularityDimension["granularity"] = granularity;
    finalBody["dimensions"] = activeTabArr.concat([granularityDimension]);
  } else {
    finalBody["dimensions"] = activeTabArr;
  }
  if (sortingParams !== undefined) {
    finalBody["sortedOn"] = Object.fromEntries([
      ["sortDimension", sortingParams.sortDimension],
      ["ordering", sortingParams.ordering === "Desc" ? "Desc" : "Asc"],
    ]);
  }
  if (dataLimit !== undefined) {
    finalBody["limit"] = dataLimit;
  }
  finalBody["domain"] = domain;
  finalBody["interval"] = timeObj;
  return finalBody;
}

export {
  calculateHistoricTime,
  makeFilters,
  getFilterBody,
  timeZoneMapper,
  apiBodyMaker,
};
/* DayJs Not a pure module */
