// Generated by ReScript, PLEASE EDIT WITH CARE

import * as DayJs from "../libraries/DayJs.bs.js";
import Dayjs from "dayjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as TimeZoneHook from "../hooks/TimeZoneHook.bs.js";

var daysArr = [
  "Sunday",
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thrusday",
  "Friday",
  "Saturday",
];

function dayMapper(days) {
  switch (days) {
    case "Sunday":
      return "Sunday";
    case "Monday":
      return "Monday";
    case "Tuesday":
      return "Tuesda";
    case "Wednesday":
      return "Wednesday";
    case "Thrusday":
      return "Thrusday";
    case "Friday":
      return "Friday";
    case "Saturday":
      return "Saturday";
  }
}

function cloneDate(date) {
  return new Date(date.getTime());
}

function makeStartOfDayDate(date) {
  return new Date(new Date(date.getTime()).setHours(0, 0, 0, 0));
}

function getStartOfWeek(dayJs, startOfday) {
  var day = dayJs.getDay();
  var startWeekDay = daysArr.indexOf(startOfday);
  var diff = (day < startWeekDay ? 7 : 0) + day - startWeekDay;
  return DayJs.getDayJsForJsDate(
    makeStartOfDayDate(
      new Date(new Date(dayJs.getTime()).setDate(dayJs.getDate() - diff)),
    ),
  );
}

function utcToIST(timeStr) {
  var updatedHour = timeStr.getHours() + 5.0;
  var updatedMin = timeStr.getMinutes() + 30.0;
  var istTime = timeStr.setHours(updatedHour, updatedMin);
  return new Date(istTime).toISOString();
}

function utcToISTDate(timeStr) {
  var updatedHour = timeStr.getHours() + 5.0;
  var updatedMin = timeStr.getMinutes() + 30.0;
  return new Date(timeStr.setHours(updatedHour, updatedMin));
}

function parseAsFloat(dateStr) {
  var date = Dayjs(dateStr).toDate();
  return new Date(
    date.getFullYear(),
    date.getMonth(),
    date.getDate(),
    date.getHours(),
    date.getMinutes(),
    date.getSeconds(),
  ).valueOf();
}

function toUtc(datetime) {
  var offset = new Date(Date.now()).getTimezoneOffset() | 0;
  return DayJs.getDayJsForJsDate(datetime).add(offset, "minute").toDate();
}

function getStartEndDiff(startDate, endDate) {
  return Math.abs(new Date(endDate).getTime() - new Date(startDate).getTime());
}

function isStartBeforeEndDate(start, end) {
  var getDate = function (date) {
    return new Date(
      Number(Core__Option.getOr(date[0], "")),
      Number(String(Number(Core__Option.getOr(date[1], "")) - 1.0)),
      Number(Core__Option.getOr(date[2], "")),
    );
  };
  var startDate = getDate(start.split("-"));
  var endDate = getDate(end.split("-"));
  return Caml_obj.lessthan(startDate, endDate);
}

function getFormattedDate(date, format) {
  return TimeZoneHook.formattedISOString(new Date(date).toISOString(), format);
}

var months = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec",
];

var timeOptions = [
  "12:00 am",
  "12:15 am",
  "12:30 am",
  "12:45 am",
  "1:00 am",
  "1:15 am",
  "1:30 am",
  "1:45 am",
  "2:00 am",
  "2:15 am",
  "2:30 am",
  "2:45 am",
  "3:00 am",
  "3:15 am",
  "3:30 am",
  "3:45 am",
  "4:00 am",
  "4:15 am",
  "4:30 am",
  "4:45 am",
  "5:00 am",
  "5:15 am",
  "5:30 am",
  "5:45 am",
  "6:00 am",
  "6:15 am",
  "6:30 am",
  "6:45 am",
  "7:00 am",
  "7:15 am",
  "7:30 am",
  "7:45 am",
  "8:00 am",
  "8:15 am",
  "8:30 am",
  "8:45 am",
  "9:00 am",
  "9:15 am",
  "9:30 am",
  "9:45 am",
  "10:00 am",
  "10:15 am",
  "10:30 am",
  "10:45 am",
  "11:00 am",
  "11:15 am",
  "11:30 am",
  "11:45 am",
  "12:00 pm",
  "12:15 pm",
  "12:30 pm",
  "12:45 pm",
  "1:00 pm",
  "1:15 pm",
  "1:30 pm",
  "1:45 pm",
  "2:00 pm",
  "2:15 pm",
  "2:30 pm",
  "2:45 pm",
  "3:00 pm",
  "3:15 pm",
  "3:30 pm",
  "3:45 pm",
  "4:00 pm",
  "4:15 pm",
  "4:30 pm",
  "4:45 pm",
  "5:00 pm",
  "5:15 pm",
  "5:30 pm",
  "5:45 pm",
  "6:00 pm",
  "6:15 pm",
  "6:30 pm",
  "6:45 pm",
  "7:00 pm",
  "7:15 pm",
  "7:30 pm",
  "7:45 pm",
  "8:00 pm",
  "8:15 pm",
  "8:30 pm",
  "8:45 pm",
  "9:00 pm",
  "9:15 pm",
  "9:30 pm",
  "9:45 pm",
  "10:00 pm",
  "10:15 pm",
  "10:30 pm",
  "10:45 pm",
  "11:00 pm",
  "11:15 pm",
  "11:30 pm",
  "11:45 pm",
];

export {
  daysArr,
  dayMapper,
  cloneDate,
  makeStartOfDayDate,
  getStartOfWeek,
  utcToIST,
  utcToISTDate,
  parseAsFloat,
  toUtc,
  getStartEndDiff,
  isStartBeforeEndDate,
  getFormattedDate,
  months,
  timeOptions,
};
/* DayJs Not a pure module */
