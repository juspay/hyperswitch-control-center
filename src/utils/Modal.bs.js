// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../components/Icon.bs.js";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as GlobalVars from "./GlobalVars.bs.js";
import * as LogicUtils from "./LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as ModalUtils from "./ModalUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as AddDataAttributes from "../components/AddDataAttributes.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";

function Modal$Back(props) {
  return React.createElement(Icon.make, {
    name: "chevron-left",
    size: 18,
    className: "cursor-pointer opacity-50 dark:opacity-100 ",
    onClick: props.onClick,
  });
}

function Modal$ModalHeading(props) {
  var customIcon = props.customIcon;
  var modalHeadingClass = props.modalHeadingClass;
  var showModalHeadingIconName = props.showModalHeadingIconName;
  var modalHeadingDescriptionElement = props.modalHeadingDescriptionElement;
  var headBgClass = props.headBgClass;
  var __centerHeading = props.centerHeading;
  var onCloseClick = props.onCloseClick;
  var rightHeading = props.rightHeading;
  var leftHeadingIcon = props.leftHeadingIcon;
  var showBackIcon = props.showBackIcon;
  var showCloseOnLeft = props.showCloseOnLeft;
  var showCloseIcon = props.showCloseIcon;
  var modalHeading = props.modalHeading;
  var centerHeading = __centerHeading !== undefined ? __centerHeading : false;
  var borderClass = props.showBorderBottom
    ? "border-b border-jp-gray-940 border-opacity-75 dark:border-jp-gray-960 dark:border-opacity-75"
    : "";
  var isMobileView = MatchMedia.useMatchMedia("(max-width: 700px)");
  var justifyClass = centerHeading ? "justify-center" : "justify-between";
  var headerTextClass = isMobileView
    ? "text-fs-18 font-semibold"
    : props.headerTextClass;
  var descriptionStyle = GlobalVars.isHyperSwitchDashboard
    ? "text-md font-medium leading-7 opacity-50 mt-1 w-full max-w-sm "
    : "text-sm mt-1 w-10/12 empty:hidden";
  var subInfoStyle = GlobalVars.isHyperSwitchDashboard
    ? "text-md font-medium leading-7 opacity-50 mt-1 w-full max-w-sm empty:hidden"
    : "text-sm empty:hidden";
  return React.createElement(
    "div",
    {
      className:
        "!p-4 " +
        (LogicUtils.isNonEmptyString(headBgClass)
          ? headBgClass
          : "bg-jp-gray-200 dark:bg-jp-gray-darkgray_background") +
        " rounded-t-lg z-10  w-full  m-0 md:!pl-6  " +
        props.headingClass +
        " " +
        borderClass +
        " ",
    },
    leftHeadingIcon !== undefined
      ? React.createElement(
          "div",
          {
            className:
              "fill-current flex-col justify-between h-0 bg-jp-gray-100",
          },
          React.createElement(
            "div",
            {
              className: "fill-current",
            },
            Caml_option.valFromOption(leftHeadingIcon),
          ),
        )
      : null,
    React.createElement(
      "div",
      {
        className:
          "flex " +
          props.headerAlignmentClass +
          " " +
          justifyClass +
          " " +
          headerTextClass,
      },
      React.createElement(
        "div",
        {
          className: props.modalParentHeadingClass,
        },
        showCloseIcon && showCloseOnLeft && !showBackIcon
          ? ModalUtils.getCloseIcon(onCloseClick)
          : null,
        showBackIcon
          ? React.createElement(
              "div",
              {
                className: "mr-4 pt-1.5",
              },
              React.createElement(Modal$Back, {
                onClick: props.onBackClick,
              }),
            )
          : null,
        LogicUtils.isNonEmptyString(showModalHeadingIconName)
          ? React.createElement(
              "div",
              {
                className: "flex items-center gap-4",
              },
              customIcon !== undefined
                ? Caml_option.valFromOption(customIcon)
                : React.createElement(Icon.make, {
                    name: showModalHeadingIconName,
                    size: props.modalHeaderIconSize,
                    className: "",
                  }),
              React.createElement(AddDataAttributes.make, {
                attributes: [["data-modal-header-text", modalHeading]],
                children: React.createElement(
                  "div",
                  {
                    className:
                      "font-inter-style font-semibold text-fs-16 leading-6 text-jp-2-gray-600 " +
                      modalHeadingClass,
                  },
                  modalHeading,
                ),
              }),
            )
          : React.createElement(AddDataAttributes.make, {
              attributes: [["data-modal-header-text", modalHeading]],
              children: React.createElement(
                "div",
                {
                  className: modalHeadingClass,
                },
                modalHeading,
              ),
            }),
      ),
      rightHeading !== undefined
        ? Caml_option.valFromOption(rightHeading)
        : null,
      showCloseIcon && !showCloseOnLeft
        ? ModalUtils.getCloseIcon(onCloseClick)
        : null,
    ),
    modalHeadingDescriptionElement !== null
      ? modalHeadingDescriptionElement
      : React.createElement(AddDataAttributes.make, {
          attributes: [["data-modal-description-text", modalHeading]],
          children: React.createElement(
            "div",
            {
              className: descriptionStyle,
            },
            props.modalHeadingDescription,
          ),
        }),
    React.createElement(
      "div",
      {
        className: subInfoStyle,
      },
      props.modalSubInfo,
    ),
  );
}

var ModalHeading = {
  make: Modal$ModalHeading,
};

function Modal$ModalContent(props) {
  var __customHeight = props.customHeight;
  var customHeight = __customHeight !== undefined ? __customHeight : "h-fit";
  return React.createElement(
    "div",
    {
      className:
        "border border-jp-gray-500 dark:border-jp-gray-900 " +
        props.bgClass +
        " shadow rounded-lg dark:text-opacity-75 dark:bg-jp-gray-darkgray_background " +
        props.modalClass +
        " " +
        customHeight,
      id: "neglectTopbarTheme",
      onClick: props.handleContainerClick,
    },
    props.children,
  );
}

var ModalContent = {
  make: Modal$ModalContent,
};

function Modal$ModalOverlay(props) {
  var __addAttributeId = props.addAttributeId;
  var __isBackdropBlurReq = props.isBackdropBlurReq;
  var __noBackDrop = props.noBackDrop;
  var __modalPosition = props.modalPosition;
  var modalHeading = props.modalHeading;
  var paddingClass = props.paddingClass;
  var children = props.children;
  var modalPosition = __modalPosition !== undefined ? __modalPosition : "";
  var noBackDrop = __noBackDrop !== undefined ? __noBackDrop : false;
  var isBackdropBlurReq =
    __isBackdropBlurReq !== undefined ? __isBackdropBlurReq : true;
  var addAttributeId = __addAttributeId !== undefined ? __addAttributeId : "";
  var isMobileView = MatchMedia.useMatchMedia("(max-width: 700px)");
  var mobileClass = isMobileView ? "flex flex-col " : "";
  var displayClass = props.showModal ? "block" : "hidden";
  var overlayBgStyle = GlobalVars.isHyperSwitchDashboard
    ? isBackdropBlurReq
      ? "bg-grey-700 bg-opacity-50"
      : ""
    : props.overlayBG;
  var backgroundDropStyles = isBackdropBlurReq ? "backdrop-blur-sm" : "";
  var attributeId = LogicUtils.isEmptyString(addAttributeId)
    ? modalHeading !== undefined
      ? ":" + Core__Option.getOr(modalHeading, "")
      : ""
    : ":" + addAttributeId;
  var zIndexClass = "z-40";
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-component", "modal" + attributeId]],
    children: noBackDrop
      ? React.createElement(
          "div",
          {
            className:
              displayClass +
              " " +
              paddingClass +
              " fixed inset-0 " +
              zIndexClass,
          },
          children,
        )
      : React.createElement(
          "div",
          {
            className:
              mobileClass +
              " " +
              displayClass +
              " " +
              overlayBgStyle +
              " fixed h-screen w-screen " +
              zIndexClass +
              " " +
              modalPosition +
              " " +
              paddingClass +
              " flex " +
              props.alignModal +
              " inset-0 overflow-auto " +
              backgroundDropStyles,
            onClick: props.handleOverlayClick,
          },
          children,
        ),
  });
}

var ModalOverlay = {
  make: Modal$ModalOverlay,
};

function Modal(props) {
  var __modalHeaderIconSize = props.modalHeaderIconSize;
  var __alignModal = props.alignModal;
  var __customIcon = props.customIcon;
  var __addAttributeId = props.addAttributeId;
  var __isBackdropBlurReq = props.isBackdropBlurReq;
  var __noBackDrop = props.noBackDrop;
  var __headerAlignmentClass = props.headerAlignmentClass;
  var __modalParentHeadingClass = props.modalParentHeadingClass;
  var __modalPosition = props.modalPosition;
  var __modalHeadingClass = props.modalHeadingClass;
  var __showModalHeadingIconName = props.showModalHeadingIconName;
  var __overlayBG = props.overlayBG;
  var __modalFooter = props.modalFooter;
  var __onCloseClickCustomFun = props.onCloseClickCustomFun;
  var __modalHeadingDescriptionElement = props.modalHeadingDescriptionElement;
  var __headBgClass = props.headBgClass;
  var __onBackClick = props.onBackClick;
  var __showBackIcon = props.showBackIcon;
  var __showCloseOnLeft = props.showCloseOnLeft;
  var __showCloseIcon = props.showCloseIcon;
  var __borderBottom = props.borderBottom;
  var __headerTextClass = props.headerTextClass;
  var __closeOnOutsideClick = props.closeOnOutsideClick;
  var __modalSubInfo = props.modalSubInfo;
  var __modalHeadingDescription = props.modalHeadingDescription;
  var __centerHeading = props.centerHeading;
  var __paddingClass = props.paddingClass;
  var __headingClass = props.headingClass;
  var __childClass = props.childClass;
  var __modalClass = props.modalClass;
  var __bgClass = props.bgClass;
  var customModalHeading = props.customModalHeading;
  var modalHeading = props.modalHeading;
  var setShowModal = props.setShowModal;
  var showModal = props.showModal;
  var bgClass =
    __bgClass !== undefined
      ? __bgClass
      : "bg-white dark:bg-jp-gray-lightgray_background";
  var modalClass =
    __modalClass !== undefined ? __modalClass : "md:mt-20 overflow-auto";
  var childClass = __childClass !== undefined ? __childClass : "p-2 m-2";
  var headingClass = __headingClass !== undefined ? __headingClass : "p-2";
  var paddingClass = __paddingClass !== undefined ? __paddingClass : "";
  var centerHeading = __centerHeading !== undefined ? __centerHeading : false;
  var modalHeadingDescription =
    __modalHeadingDescription !== undefined ? __modalHeadingDescription : "";
  var modalSubInfo = __modalSubInfo !== undefined ? __modalSubInfo : "";
  var closeOnOutsideClick =
    __closeOnOutsideClick !== undefined ? __closeOnOutsideClick : false;
  var headerTextClass =
    __headerTextClass !== undefined
      ? __headerTextClass
      : "font-bold text-fs-24";
  var borderBottom = __borderBottom !== undefined ? __borderBottom : true;
  var showCloseIcon = __showCloseIcon !== undefined ? __showCloseIcon : true;
  var showCloseOnLeft =
    __showCloseOnLeft !== undefined ? __showCloseOnLeft : false;
  var showBackIcon = __showBackIcon !== undefined ? __showBackIcon : false;
  var onBackClick =
    __onBackClick !== undefined ? __onBackClick : function () {};
  var headBgClass =
    __headBgClass !== undefined
      ? __headBgClass
      : "bg-white dark:bg-jp-gray-darkgray_background";
  var modalHeadingDescriptionElement =
    __modalHeadingDescriptionElement !== undefined
      ? Caml_option.valFromOption(__modalHeadingDescriptionElement)
      : null;
  var onCloseClickCustomFun =
    __onCloseClickCustomFun !== undefined
      ? __onCloseClickCustomFun
      : function () {};
  var modalFooter =
    __modalFooter !== undefined
      ? Caml_option.valFromOption(__modalFooter)
      : null;
  var overlayBG =
    __overlayBG !== undefined
      ? __overlayBG
      : "bg-jp-gray-950 dark:bg-white-600 dark:bg-opacity-80 bg-opacity-70";
  var showModalHeadingIconName =
    __showModalHeadingIconName !== undefined ? __showModalHeadingIconName : "";
  var modalHeadingClass =
    __modalHeadingClass !== undefined ? __modalHeadingClass : "";
  var modalPosition = __modalPosition !== undefined ? __modalPosition : "";
  var modalParentHeadingClass =
    __modalParentHeadingClass !== undefined
      ? __modalParentHeadingClass
      : "flex flex-row flex-1";
  var headerAlignmentClass =
    __headerAlignmentClass !== undefined ? __headerAlignmentClass : "flex-row";
  var noBackDrop = __noBackDrop !== undefined ? __noBackDrop : false;
  var isBackdropBlurReq =
    __isBackdropBlurReq !== undefined ? __isBackdropBlurReq : true;
  var addAttributeId = __addAttributeId !== undefined ? __addAttributeId : "";
  var customIcon =
    __customIcon !== undefined
      ? Caml_option.valFromOption(__customIcon)
      : undefined;
  var alignModal = __alignModal !== undefined ? __alignModal : "justify-end";
  var modalHeaderIconSize =
    __modalHeaderIconSize !== undefined ? __modalHeaderIconSize : 35;
  var headerTextClass$1 = ModalUtils.getHeaderTextClass(headerTextClass);
  var onCloseClick = function (_evt) {
    setShowModal(function (prev) {
      return !prev;
    });
    onCloseClickCustomFun();
  };
  var onBackClick$1 = function (_evt) {
    onBackClick();
  };
  var handleOverlayClick = function (ev) {
    if (closeOnOutsideClick) {
      ev.stopPropagation();
      onCloseClick(ev);
      return setShowModal(function (param) {
        return false;
      });
    }
  };
  var handleKeyUp = function (ev) {
    if (!closeOnOutsideClick) {
      return;
    }
    var key = ev.key;
    var keyCode = ev.keyCode;
    if (key === "Escape" || keyCode === 27) {
      return setShowModal(function (param) {
        return false;
      });
    }
  };
  React.useEffect(
    function () {
      if (showModal) {
        window.addEventListener("keyup", handleKeyUp);
      } else {
        window.removeEventListener("keyup", handleKeyUp);
      }
      return function () {
        window.removeEventListener("keyup", handleKeyUp);
      };
    },
    [showModal, closeOnOutsideClick],
  );
  var handleContainerClick = function (ev) {
    if (closeOnOutsideClick) {
      ev.stopPropagation();
      return;
    }
  };
  var animationClass = ModalUtils.getAnimationClass(showModal);
  return React.createElement(Modal$ModalOverlay, {
    handleOverlayClick: handleOverlayClick,
    showModal: showModal,
    children: JsxPPXReactSupportU.createElementVariadicWithKey(
      showModal ? "true" : "false",
      Modal$ModalContent,
      {
        handleContainerClick: handleContainerClick,
        bgClass: bgClass,
        modalClass: animationClass + " " + modalClass,
        children: null,
        customHeight: props.customHeight,
      },
      [
        modalHeading !== undefined
          ? React.createElement(Modal$ModalHeading, {
              headingClass: headingClass,
              headerTextClass: headerTextClass$1,
              headerAlignmentClass: headerAlignmentClass,
              modalHeading: modalHeading,
              showCloseIcon: showCloseIcon,
              showCloseOnLeft: showCloseOnLeft,
              showBackIcon: showBackIcon,
              leftHeadingIcon: props.leftHeadingIcon,
              rightHeading: props.rightHeading,
              onCloseClick: onCloseClick,
              onBackClick: onBackClick$1,
              modalHeadingDescription: modalHeadingDescription,
              modalSubInfo: modalSubInfo,
              showBorderBottom: borderBottom,
              centerHeading: centerHeading,
              headBgClass: headBgClass,
              modalHeadingDescriptionElement: modalHeadingDescriptionElement,
              showModalHeadingIconName: showModalHeadingIconName,
              modalHeadingClass: modalHeadingClass,
              modalParentHeadingClass: modalParentHeadingClass,
              customIcon: customIcon,
              modalHeaderIconSize: modalHeaderIconSize,
            })
          : null,
        customModalHeading !== undefined
          ? Caml_option.valFromOption(customModalHeading)
          : null,
        React.createElement(
          "div",
          {
            className: childClass,
          },
          props.children,
        ),
        Caml_obj.notequal(modalFooter, null)
          ? React.createElement(
              "div",
              {
                className: "h-[5rem]",
              },
              modalFooter,
            )
          : null,
      ],
    ),
    paddingClass: paddingClass,
    modalHeading: modalHeading,
    overlayBG: overlayBG,
    modalPosition: modalPosition,
    noBackDrop: noBackDrop,
    isBackdropBlurReq: isBackdropBlurReq,
    addAttributeId: addAttributeId,
    alignModal: alignModal,
  });
}

var make = Modal;

export { ModalHeading, ModalContent, ModalOverlay, make };
/* Icon Not a pure module */
