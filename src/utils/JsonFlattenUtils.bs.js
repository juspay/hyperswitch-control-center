// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

function flattenObject(obj, addIndicatorForObject) {
  var newDict = {};
  var obj$1 = Core__JSON.Decode.object(obj);
  if (obj$1 !== undefined) {
    Object.entries(obj$1).forEach(function (entry) {
      var value = entry[1];
      var key = entry[0];
      if (value == null) {
        newDict[key] = value;
        return;
      }
      var _valueObj = Core__JSON.Decode.object(value);
      if (_valueObj !== undefined) {
        if (addIndicatorForObject) {
          newDict[key] = {};
        }
        var flattenedSubObj = flattenObject(value, addIndicatorForObject);
        Object.entries(flattenedSubObj).forEach(function (subEntry) {
          newDict[key + "." + subEntry[0]] = subEntry[1];
        });
        return;
      }
      newDict[key] = value;
    });
  }
  return newDict;
}

function setNested(_dict, _keys, value) {
  while (true) {
    var keys = _keys;
    var dict = _dict;
    if (keys.length === 0) {
      return;
    }
    if (keys.length === 1) {
      dict[Core__Option.getOr(keys[0], "")] = value;
      return;
    }
    var key = Core__Option.getOr(keys[0], "");
    var json = dict[key];
    var subDict;
    if (json !== undefined) {
      var obj = Core__JSON.Decode.object(json);
      subDict = obj !== undefined ? obj : dict;
    } else {
      var subDict$1 = {};
      dict[key] = subDict$1;
      subDict = subDict$1;
    }
    var remainingKeys = keys.slice(1);
    _keys = remainingKeys;
    _dict = subDict;
    continue;
  }
}

function unflattenObject(obj) {
  var newDict = {};
  var dict = Core__JSON.Decode.object(obj);
  if (dict !== undefined) {
    Object.entries(dict).forEach(function (entry) {
      setNested(newDict, entry[0].split("."), entry[1]);
    });
  }
  return newDict;
}

export { flattenObject, setNested, unflattenObject };
/* No side effect */
