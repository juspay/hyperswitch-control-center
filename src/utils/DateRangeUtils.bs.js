// Generated by ReScript, PLEASE EDIT WITH CARE

import * as DayJs from "../libraries/DayJs.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as TimeZoneHook from "../hooks/TimeZoneHook.bs.js";

function getDateString(value, isoStringToCustomTimeZone) {
  try {
    var match = isoStringToCustomTimeZone(value);
    return match.year + "-" + match.month + "-" + match.date;
  } catch (_error) {
    return "";
  }
}

function getTimeString(value, isoStringToCustomTimeZone) {
  try {
    var match = isoStringToCustomTimeZone(value);
    return match.hour + ":" + match.minute + ":00";
  } catch (_error) {
    return "";
  }
}

function getMins(val) {
  return (val * 60.0).toString();
}

function getPredefinedStartAndEndDate(
  todayDayJsObj,
  isoStringToCustomTimeZone,
  isoStringToCustomTimezoneInFloat,
  customTimezoneToISOString,
  value,
  disableFutureDates,
  disablePastDates,
  todayDate,
  todayTime,
) {
  var lastMonth = todayDayJsObj.subtract(1, "month").endOf("month").toDate();
  var lastSixMonths = todayDayJsObj.toDate();
  var nextMonth = todayDayJsObj.add(1, "month").endOf("month").toDate();
  var yesterday = todayDayJsObj.subtract(1, "day").toDate();
  var tomorrow = todayDayJsObj.add(1, "day").toDate();
  var thisMonth = disableFutureDates
    ? todayDayJsObj.toDate()
    : todayDayJsObj.endOf("month").toDate();
  var customDate;
  if (typeof value !== "object") {
    switch (value) {
      case "Tomorrow":
        customDate = tomorrow;
        break;
      case "Yesterday":
        customDate = yesterday;
        break;
      case "ThisMonth":
        customDate = thisMonth;
        break;
      case "LastMonth":
        customDate = lastMonth;
        break;
      case "LastSixMonths":
        customDate = lastSixMonths;
        break;
      case "NextMonth":
        customDate = nextMonth;
        break;
      default:
        customDate = todayDayJsObj.toDate();
    }
  } else {
    customDate = todayDayJsObj.toDate();
  }
  var daysInMonth = new Date(
    DayJs.getDayJsForJsDate(customDate).endOf("month").toString(),
  ).getDate();
  var prevDate = DayJs.getDayJsForJsDate(customDate)
    .subtract(6, "month")
    .toString();
  var daysInSixMonth = DayJs.getDayJsForJsDate(customDate).diff(
    prevDate,
    "day",
  );
  var count;
  if (typeof value !== "object") {
    switch (value) {
      case "ThisMonth":
        count = customDate.getDate();
        break;
      case "LastSixMonths":
        count = daysInSixMonth;
        break;
      case "LastMonth":
      case "NextMonth":
        count = daysInMonth;
        break;
      default:
        count = 1.0;
    }
  } else {
    count = value.TAG === "Hour" ? value._0 / 24.0 + 1 : value._0;
  }
  var date = new Date(
    customTimezoneToISOString(
      String(customDate.getFullYear()),
      String(customDate.getMonth() + 1.0),
      String(customDate.getDate()),
      String(customDate.getHours()),
      String(customDate.getMinutes()),
      String(customDate.getSeconds()),
    ),
  );
  var today = TimeZoneHook.dateTimeObjectToDate(
    isoStringToCustomTimezoneInFloat(date.toISOString()),
  );
  var msInADay = 24.0 * 60.0 * 60.0 * 1000.0;
  var durationSecs = (count - 1.0) * msInADay;
  var dateBeforeDuration = new Date(today.getTime());
  var msInterval = disableFutureDates
    ? dateBeforeDuration.getTime() - durationSecs
    : dateBeforeDuration.getTime() + durationSecs;
  var dateAfterDuration = new Date(msInterval);
  var match = disableFutureDates
    ? [dateAfterDuration, dateBeforeDuration]
    : [dateBeforeDuration, dateAfterDuration];
  var finalEndDate = match[1];
  var finalStartDate = match[0];
  var startDate = getDateString(
    finalStartDate.toString(),
    isoStringToCustomTimeZone,
  );
  var endDate = getDateString(
    finalEndDate.toString(),
    isoStringToCustomTimeZone,
  );
  var eTime;
  eTime =
    typeof value !== "object" || value.TAG !== "Hour"
      ? "23:59:59"
      : getTimeString(finalEndDate.toString(), isoStringToCustomTimeZone);
  var endTime = disableFutureDates && endDate === todayDate ? todayTime : eTime;
  var sTime;
  sTime =
    typeof value !== "object" || value.TAG !== "Hour"
      ? "00:00:00"
      : getTimeString(finalStartDate.toString(), isoStringToCustomTimeZone);
  var startTime =
    !disableFutureDates &&
    (value !== "Today" || disablePastDates) &&
    startDate === todayDate
      ? todayTime
      : sTime;
  return [startDate, endDate, startTime, endTime];
}

function datetext(count, disableFutureDates) {
  if (typeof count !== "object") {
    switch (count) {
      case "Today":
        return "Today";
      case "Tomorrow":
        return "Tomorrow";
      case "Yesterday":
        return "Yesterday";
      case "ThisMonth":
        return "This Month";
      case "LastMonth":
        return "Last Month";
      case "LastSixMonths":
        return "Last 6 Months";
      case "NextMonth":
        return "Next Month";
    }
  } else {
    if (count.TAG === "Hour") {
      var val = count._0;
      if (val < 1.0) {
        if (disableFutureDates) {
          return "Last " + (val * 60.0).toString() + " Mins";
        } else {
          return "Next " + (val * 60.0).toString() + " Mins";
        }
      } else if (val === 1.0) {
        if (disableFutureDates) {
          return "Last " + val.toString() + " Hour";
        } else {
          return "Next " + val.toString() + " Hour";
        }
      } else if (disableFutureDates) {
        return "Last " + val.toString() + " Hours";
      } else {
        return "Next " + val.toString() + " Hours";
      }
    }
    var val$1 = count._0;
    if (disableFutureDates) {
      return "Last " + val$1.toString() + " Days";
    } else {
      return "Next " + val$1.toString() + " Days";
    }
  }
}

function convertTimeStamp(isoStringToCustomTimeZone, timestamp, format) {
  try {
    return TimeZoneHook.formattedDateTimeString(
      isoStringToCustomTimeZone(timestamp),
      format,
    );
  } catch (exn) {
    return "";
  }
}

function changeTimeFormat(customTimezoneToISOString, date, time, format) {
  var dateSplit = date.split("T");
  var date$1 = Core__Option.getOr(dateSplit[0], "").split("-");
  var dateDay = Core__Option.getOr(date$1[2], "");
  var dateYear = Core__Option.getOr(date$1[0], "");
  var dateMonth = Core__Option.getOr(date$1[1], "");
  var timeSplit = time.split(":");
  var timeHour = Core__Option.getOr(timeSplit[0], "00");
  var timeMinute = Core__Option.getOr(timeSplit[1], "00");
  var timeSecond = Core__Option.getOr(timeSplit[2], "00");
  var dateTimeCheck = customTimezoneToISOString(
    dateYear,
    dateMonth,
    dateDay,
    timeHour,
    timeMinute,
    timeSecond,
  );
  return TimeZoneHook.formattedISOString(dateTimeCheck, format);
}

export {
  getDateString,
  getTimeString,
  getMins,
  getPredefinedStartAndEndDate,
  datetext,
  convertTimeStamp,
  changeTimeFormat,
};
/* DayJs Not a pure module */
