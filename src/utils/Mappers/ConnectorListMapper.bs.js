// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConnectorUtils from "../../screens/Connectors/ConnectorUtils.bs.js";

function parsePaymentMethodType(paymentMethodType) {
  var paymentMethodTypeDict =
    LogicUtils.getDictFromJsonObject(paymentMethodType);
  return {
    payment_method_type: LogicUtils.getString(
      paymentMethodTypeDict,
      "payment_method_type",
      "",
    ),
    flow: LogicUtils.getString(paymentMethodTypeDict, "flow", ""),
    action: LogicUtils.getString(paymentMethodTypeDict, "action", ""),
  };
}

function parsePaymentMethod(paymentMethod) {
  var paymentMethodDict = LogicUtils.getDictFromJsonObject(paymentMethod);
  var payment_method_types = LogicUtils.getArrayFromDict(
    paymentMethodDict,
    "payment_method_types",
    [],
  ).map(parsePaymentMethodType);
  return {
    payment_method: LogicUtils.getString(
      paymentMethodDict,
      "payment_method",
      "",
    ),
    payment_method_types: payment_method_types,
  };
}

function convertFRMConfigJsonToObj(json) {
  return json.map(function (config) {
    var configDict = LogicUtils.getDictFromJsonObject(config);
    var payment_methods = LogicUtils.getArrayFromDict(
      configDict,
      "payment_methods",
      [],
    ).map(parsePaymentMethod);
    return {
      gateway: LogicUtils.getString(configDict, "gateway", ""),
      payment_methods: payment_methods,
    };
  });
}

function getPaymentMethodTypes(dict) {
  return {
    payment_method_type: LogicUtils.getString(dict, "payment_method_type", ""),
    card_networks: LogicUtils.getStrArrayFromDict(dict, "card_networks", []),
    accepted_currencies: ConnectorUtils.acceptedValues(
      LogicUtils.getDictfromDict(dict, "accepted_currencies"),
    ),
    accepted_countries: ConnectorUtils.acceptedValues(
      LogicUtils.getDictfromDict(dict, "accepted_countries"),
    ),
    minimum_amount: LogicUtils.getOptionInt(dict, "minimum_amount"),
    maximum_amount: LogicUtils.getOptionInt(dict, "maximum_amount"),
    recurring_enabled: LogicUtils.getOptionBool(dict, "recurring_enabled"),
    installment_payment_enabled: LogicUtils.getOptionBool(
      dict,
      "installment_payment_enabled",
    ),
    payment_experience: LogicUtils.getOptionString(dict, "payment_experience"),
  };
}

function getPaymentMethodsEnabled(dict) {
  return {
    payment_method: LogicUtils.getString(dict, "payment_method", ""),
    payment_method_types: LogicUtils.getArrayDataFromJson(
      Core__Option.getOr(dict["payment_method_types"], {}),
      getPaymentMethodTypes,
    ),
  };
}

function getConnectorAccountDetails(dict) {
  return {
    auth_type: LogicUtils.getString(dict, "auth_type", ""),
    api_secret: LogicUtils.getString(dict, "api_secret", ""),
    api_key: LogicUtils.getString(dict, "api_key", ""),
    key1: LogicUtils.getString(dict, "key1", ""),
  };
}

function getProcessorPayloadType(dict) {
  return {
    connector_type: LogicUtils.getString(dict, "connector_type", ""),
    connector_name: LogicUtils.getString(dict, "connector_name", ""),
    connector_label: LogicUtils.getString(dict, "connector_label", ""),
    connector_account_details: getConnectorAccountDetails(
      LogicUtils.getObj(dict, "connector_account_details", {}),
    ),
    test_mode: LogicUtils.getBool(dict, "test_mode", true),
    disabled: LogicUtils.getBool(dict, "disabled", true),
    payment_methods_enabled: LogicUtils.getArrayDataFromJson(
      Core__Option.getOr(dict["payment_methods_enabled"], {}),
      getPaymentMethodsEnabled,
    ),
    profile_id: LogicUtils.getString(dict, "profile_id", ""),
    merchant_connector_id: LogicUtils.getString(
      dict,
      "merchant_connector_id",
      "",
    ),
    frm_configs: convertFRMConfigJsonToObj(
      LogicUtils.getArrayFromDict(dict, "frm_configs", []),
    ),
    status: LogicUtils.getString(dict, "status", "inactive"),
  };
}

function getArrayOfConnectorListPayloadType(json) {
  return LogicUtils.getArrayFromJson(json, []).map(function (connectorJson) {
    return getProcessorPayloadType(
      LogicUtils.getDictFromJsonObject(connectorJson),
    );
  });
}

export {
  parsePaymentMethodType,
  parsePaymentMethod,
  convertFRMConfigJsonToObj,
  getPaymentMethodTypes,
  getPaymentMethodsEnabled,
  getConnectorAccountDetails,
  getProcessorPayloadType,
  getArrayOfConnectorListPayloadType,
};
/* LogicUtils Not a pure module */
