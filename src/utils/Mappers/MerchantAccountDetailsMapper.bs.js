// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../LogicUtils.bs.js";

function getMerchantDetails(values) {
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  var merchantDetails = LogicUtils.getObj(valuesDict, "merchant_details", {});
  var address = LogicUtils.getObj(merchantDetails, "address", {});
  var primary_business_details = LogicUtils.getArrayFromDict(
    valuesDict,
    "primary_business_details",
    [],
  ).map(function (detail) {
    var detailDict = LogicUtils.getDictFromJsonObject(detail);
    return {
      business: LogicUtils.getString(detailDict, "business", ""),
      country: LogicUtils.getString(detailDict, "country", ""),
    };
  });
  var reconStatusMapper = function (reconStatus) {
    var match = reconStatus.toLowerCase();
    switch (match) {
      case "active":
        return "Active";
      case "disabled":
        return "Disabled";
      case "requested":
        return "Requested";
      default:
        return "NotRequested";
    }
  };
  return {
    api_key: LogicUtils.getString(valuesDict, "api_key", ""),
    enable_payment_response_hash: LogicUtils.getBool(
      valuesDict,
      "enable_payment_response_hash",
      false,
    ),
    locker_id: LogicUtils.getString(valuesDict, "locker_id", ""),
    merchant_details: {
      primary_contact_person: LogicUtils.getOptionString(
        merchantDetails,
        "primary_contact_person",
      ),
      primary_email: LogicUtils.getOptionString(
        merchantDetails,
        "primary_email",
      ),
      primary_phone: LogicUtils.getOptionString(
        merchantDetails,
        "primary_phone",
      ),
      secondary_contact_person: LogicUtils.getOptionString(
        merchantDetails,
        "secondary_contact_person",
      ),
      secondary_email: LogicUtils.getOptionString(
        merchantDetails,
        "secondary_email",
      ),
      secondary_phone: LogicUtils.getOptionString(
        merchantDetails,
        "secondary_phone",
      ),
      website: LogicUtils.getOptionString(merchantDetails, "website"),
      about_business: LogicUtils.getOptionString(
        merchantDetails,
        "about_business",
      ),
      address: {
        line1: LogicUtils.getOptionString(address, "line1"),
        line2: LogicUtils.getOptionString(address, "line2"),
        line3: LogicUtils.getOptionString(address, "line3"),
        city: LogicUtils.getOptionString(address, "city"),
        state: LogicUtils.getOptionString(address, "state"),
        zip: LogicUtils.getOptionString(address, "zip"),
      },
    },
    merchant_id: LogicUtils.getString(valuesDict, "merchant_id", ""),
    merchant_name: LogicUtils.getOptionString(valuesDict, "merchant_name"),
    primary_business_details: primary_business_details,
    metadata: LogicUtils.getString(valuesDict, "metadata", ""),
    parent_merchant_id: LogicUtils.getString(
      valuesDict,
      "parent_merchant_id",
      "",
    ),
    payment_response_hash_key: LogicUtils.getOptionString(
      valuesDict,
      "payment_response_hash_key",
    ),
    publishable_key: LogicUtils.getString(valuesDict, "publishable_key", ""),
    redirect_to_merchant_with_http_post: LogicUtils.getBool(
      valuesDict,
      "redirect_to_merchant_with_http_post",
      true,
    ),
    sub_merchants_enabled: LogicUtils.getBool(
      valuesDict,
      "sub_merchants_enabled",
      false,
    ),
    recon_status: reconStatusMapper(
      LogicUtils.getString(valuesDict, "recon_status", ""),
    ),
  };
}

export { getMerchantDetails };
/* LogicUtils Not a pure module */
