// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as LogicUtils from "./LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

function fetchRequestIdFromAPI(res) {
  return Core__Option.getOr(
    Caml_option.null_to_opt(res.headers.get("x-request-id")),
    "",
  );
}

function getMixpanelRouteName(pageTitle, url) {
  var match = url.path;
  var match$1 = url.search;
  var exit = 0;
  if (match) {
    switch (match.hd) {
      case "connectors":
        var match$2 = match.tl;
        if (match$2) {
          switch (match$2.hd) {
            case "":
              exit = match$2.tl ? 1 : 2;
              break;
            case "new":
              if (!match$2.tl) {
                return "/" + pageTitle + "/newconnector";
              }
              exit = 1;
              break;
            default:
              if (!match$2.tl) {
                return "/" + pageTitle + "/updateconnector";
              }
              exit = 1;
          }
        } else {
          exit = 1;
        }
        break;
      case "disputes":
        var match$3 = match.tl;
        if (match$3) {
          if (match$3.hd === "") {
            exit = match$3.tl ? 1 : 2;
          } else {
            if (!match$3.tl) {
              return "/" + pageTitle + "/disputeid";
            }
            exit = 1;
          }
        } else {
          exit = 1;
        }
        break;
      case "onboarding":
        if (match.tl) {
          exit = 1;
        } else {
          if (match$1 === "") {
            return "/" + pageTitle;
          }
          var type_ = Core__Option.getOr(
            LogicUtils.getDictFromUrlSearchParams(match$1)["type"],
            "",
          );
          return "/" + pageTitle + "/" + type_;
        }
        break;
      case "payments":
        var match$4 = match.tl;
        if (match$4) {
          if (match$4.hd === "") {
            exit = match$4.tl ? 1 : 2;
          } else {
            if (!match$4.tl) {
              return "/" + pageTitle + "/paymentid";
            }
            exit = 1;
          }
        } else {
          exit = 1;
        }
        break;
      case "refunds":
        var match$5 = match.tl;
        if (match$5) {
          if (match$5.hd === "") {
            exit = match$5.tl ? 1 : 2;
          } else {
            if (!match$5.tl) {
              return "/" + pageTitle + "/refundid";
            }
            exit = 1;
          }
        } else {
          exit = 1;
        }
        break;
      case "routing":
        var match$6 = match.tl;
        if (match$6) {
          var routingType = match$6.hd;
          if (routingType === "") {
            exit = match$6.tl ? 1 : 2;
          } else {
            if (!match$6.tl) {
              if (match$1 === "") {
                return "/" + pageTitle + "/" + routingType + "/newrouting";
              } else {
                return "/" + pageTitle + "/" + routingType + "/oldrouting";
              }
            }
            exit = 1;
          }
        } else {
          exit = 1;
        }
        break;
      case "settings":
        if (match.tl) {
          exit = 1;
        } else if (match$1 === "") {
          exit = 2;
        } else {
          var type_$1 = Core__Option.getOr(
            LogicUtils.getDictFromUrlSearchParams(match$1)["type"],
            "",
          );
          return "/" + pageTitle + "/" + type_$1;
        }
        break;
      default:
        exit = 1;
    }
  } else {
    exit = 1;
  }
  switch (exit) {
    case 1:
      return "/" + Core__List.toArray(url.path).join("/");
    case 2:
      return "/" + pageTitle;
  }
}

function delay(ms) {
  return new Promise(function (resolve, param) {
    setTimeout(function () {
      resolve();
    }, ms);
  });
}

export { fetchRequestIdFromAPI, getMixpanelRouteName, delay };
/* LogicUtils Not a pure module */
