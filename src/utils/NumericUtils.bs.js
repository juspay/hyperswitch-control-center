// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Float from "@rescript/core/src/Core__Float.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

function pretty(range, n) {
  if (range.length !== 2) {
    return [0];
  }
  var range$1 =
    range[0] === range[1] ? [0, Core__Option.getOr(range[1], 0)] : range;
  var min_n = n / 3;
  var u5_bias = 0.5 + 1.5 * 1.5;
  var d = Math.abs(
    Core__Option.getOr(range$1[0], 0) - Core__Option.getOr(range$1[1], 0),
  );
  var c = Math.log(d) / Math.LN10 < -2 ? (Math.abs(d) * 0.75) / min_n : d / n;
  var base = Math.pow(10, Math.floor(Math.log(c) / Math.LN10));
  var base_toFixed =
    base < 1 ? Math.abs(Math.round(Math.log(base) / Math.LN10)) | 0 : 0;
  var unit = base;
  if (2 * base - c < 1.5 * (c - unit)) {
    unit = 2 * base;
    if (5 * base - c < u5_bias * (c - unit)) {
      unit = 5 * base;
      if (10 * base - c < 1.5 * (c - unit)) {
        unit = 10 * base;
      }
    }
  }
  var ticks = [];
  var i;
  if (Core__Option.getOr(range$1[0], 0) <= unit) {
    i = 0;
  } else {
    var i123 = Math.floor(Core__Option.getOr(range$1[0], 0) / unit) * unit;
    i = Core__Option.getOr(
      Core__Float.fromString(i123.toFixed(base_toFixed)),
      0,
    );
  }
  var iRef = i;
  var $$break = false;
  while (iRef < Core__Option.getOr(range$1[1], 0) && unit > 0) {
    ticks.push(iRef);
    iRef = iRef + unit;
    if (base_toFixed > 0 && unit > 0) {
      iRef = Core__Option.getOr(
        Core__Float.fromString(iRef.toFixed(base_toFixed)),
        0,
      );
    } else {
      $$break = true;
    }
  }
  ticks.push(iRef);
  return ticks;
}

export { pretty };
/* No side effect */
