// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var listeners = [];

function addEventListener(fn) {
  if (!listeners.includes(fn)) {
    listeners.push(fn);
    return;
  }
}

function removeEventListener(fn) {
  var index = listeners.findIndex(function (x) {
    return x === fn;
  });
  if (index !== -1) {
    listeners.splice(index, 1);
    return;
  }
}

function sendEvents() {
  listeners.forEach(function (fn) {
    fn();
  });
}

var InternalStorage = {
  listeners: listeners,
  addEventListener: addEventListener,
  removeEventListener: removeEventListener,
  sendEvents: sendEvents,
};

function setItem(key, val) {
  localStorage.setItem(key, val);
  sendEvents();
}

function useStorageValue(key) {
  var match = React.useState(function () {
    return localStorage.getItem(key);
  });
  var setValue = match[1];
  React.useEffect(function () {
    var oldValue = {
      contents: localStorage.getItem(key),
    };
    var handleStorage = function (param) {
      var newValue = localStorage.getItem(key);
      if (oldValue.contents !== newValue) {
        setValue(function (param) {
          return newValue;
        });
        oldValue.contents = newValue;
        return;
      }
    };
    addEventListener(handleStorage);
    window.addEventListener("storage", handleStorage, true);
    return function () {
      removeEventListener(handleStorage);
      window.removeEventListener("storage", handleStorage);
    };
  }, []);
  return React.useMemo(
    function () {
      return Caml_option.nullable_to_opt(localStorage.getItem(key));
    },
    [key, match[0]],
  );
}

export { InternalStorage, setItem, useStorageValue };
/* react Not a pure module */
