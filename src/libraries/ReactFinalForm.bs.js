// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Core__Nullable from "@rescript/core/src/Core__Nullable.bs.js";

function makeInputRecord(val, setVal) {
  return {
    name: "",
    onBlur: function (_ev) {},
    onChange: setVal,
    onFocus: function (_ev) {},
    value: val,
    checked: false,
  };
}

function makeCustomError(error) {
  return {
    active: true,
    data: true,
    dirty: true,
    dirtySinceLastSubmit: true,
    error: Core__Nullable.fromOption(error),
    initial: true,
    invalid: true,
    modified: true,
    modifiedSinceLastSubmit: true,
    pristine: true,
    submitError: null,
    submitFailed: true,
    submitSucceeded: true,
    submitting: true,
    touched: true,
    valid: true,
    validating: true,
    visited: true,
    value: null,
  };
}

var subscribeToValues = Object.fromEntries([["values", true]]);

var subscribeToPristine = Object.fromEntries([["pristine", true]]);

var Form = {};

var Field = {};

function useFormSubscription(keys) {
  return React.useMemo(function () {
    var dict = {};
    keys.forEach(function (key) {
      dict[key] = true;
    });
    return dict;
  }, []);
}

var FormSpy = {};

function makeFakeInput(valueOpt, onChangeOpt, onBlurOpt, onFocusOpt, param) {
  var value = valueOpt !== undefined ? valueOpt : null;
  var onChange = onChangeOpt !== undefined ? onChangeOpt : function (_ev) {};
  var onBlur = onBlurOpt !== undefined ? onBlurOpt : function (_ev) {};
  var onFocus = onFocusOpt !== undefined ? onFocusOpt : function (_ev) {};
  return {
    name: "--",
    onBlur: onBlur,
    onChange: onChange,
    onFocus: onFocus,
    value: value,
    checked: true,
  };
}

var fakeFieldRenderProps_input = makeFakeInput(
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

var fakeFieldRenderProps_meta = makeCustomError(undefined);

var fakeFieldRenderProps = {
  input: fakeFieldRenderProps_input,
  meta: fakeFieldRenderProps_meta,
};

export {
  makeInputRecord,
  makeCustomError,
  subscribeToValues,
  subscribeToPristine,
  Form,
  Field,
  useFormSubscription,
  FormSpy,
  makeFakeInput,
  fakeFieldRenderProps,
};
/* subscribeToValues Not a pure module */
