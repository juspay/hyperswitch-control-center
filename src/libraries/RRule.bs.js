// Generated by ReScript, PLEASE EDIT WITH CARE

import * as DayJs from "./DayJs.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Core__Math from "@rescript/core/src/Core__Math.bs.js";

function durationSeconds(dUnit, dAmount) {
  switch (dUnit) {
    case "Second":
      return dAmount;
    case "Minute":
      return Math.imul(dAmount, 60);
    case "Hour":
      return Math.imul(Math.imul(dAmount, 60), 60);
    case "Day":
      return Math.imul(Math.imul(Math.imul(dAmount, 60), 60), 24);
  }
}

function isScheduled(recipe, startTime, endTime, currentTime) {
  var recur = recipe.recurrence;
  var byDay;
  if (recur !== undefined) {
    var days = recur.byDay;
    if (days !== undefined) {
      var day = currentTime.getDay() | 0;
      byDay =
        days.find(function (x) {
          return x === day;
        }) !== undefined;
    } else {
      byDay = true;
    }
  } else {
    byDay = true;
  }
  var recur$1 = recipe.recurrence;
  var byDate;
  if (recur$1 !== undefined) {
    var days$1 = recur$1.byDate;
    if (days$1 !== undefined) {
      var day$1 = currentTime.getDate() | 0;
      byDate =
        days$1.find(function (x) {
          return x === day$1;
        }) !== undefined;
    } else {
      byDate = true;
    }
  } else {
    byDate = true;
  }
  var recur$2 = recipe.recurrence;
  var byMonth;
  if (recur$2 !== undefined) {
    var days$2 = recur$2.byMonth;
    if (days$2 !== undefined) {
      var day$2 = currentTime.getMonth() | 0;
      byMonth =
        days$2.find(function (x) {
          return x === day$2;
        }) !== undefined;
    } else {
      byMonth = true;
    }
  } else {
    byMonth = true;
  }
  var recur$3 = recipe.recurrence;
  var byYear;
  if (recur$3 !== undefined) {
    var days$3 = recur$3.byYear;
    if (days$3 !== undefined) {
      var day$3 = currentTime.getFullYear() | 0;
      byYear =
        days$3.find(function (x) {
          return x === day$3;
        }) !== undefined;
    } else {
      byYear = true;
    }
  } else {
    byYear = true;
  }
  var getWeek = function (date) {
    var firstWeekDay = new Date(date.getFullYear(), date.getMonth(), 1.0);
    var offsetDate =
      ((((date.getDate() | 0) + (firstWeekDay.getDay() | 0)) | 0) - 1) | 0;
    return (Core__Math.Int.floor((offsetDate / 7) | 0) + 1) | 0;
  };
  var recur$4 = recipe.recurrence;
  var byWeek;
  if (recur$4 !== undefined) {
    var days$4 = recur$4.byWeek;
    if (days$4 !== undefined) {
      var day$4 = getWeek(currentTime);
      byWeek =
        days$4.find(function (x) {
          return x === day$4;
        }) !== undefined;
    } else {
      byWeek = true;
    }
  } else {
    byWeek = true;
  }
  var recur$5 = recipe.recurrence;
  var frequencyCheck;
  if (recur$5 !== undefined) {
    if (recur$5.interval === 0) {
      frequencyCheck = false;
    } else {
      var match = recur$5.frequency;
      switch (match) {
        case "Daily":
          frequencyCheck =
            Caml_int32.mod_(
              DayJs.getDayJsForJsDate(currentTime).diff(
                startTime.toString(),
                "day",
              ),
              recur$5.interval,
            ) === 0;
          break;
        case "Weekly":
          frequencyCheck =
            Caml_int32.mod_(
              DayJs.getDayJsForJsDate(currentTime).diff(
                startTime.toString(),
                "week",
              ),
              recur$5.interval,
            ) === 0;
          break;
        case "Monthly":
          frequencyCheck =
            Caml_int32.mod_(
              DayJs.getDayJsForJsDate(currentTime).diff(
                startTime.toString(),
                "month",
              ),
              recur$5.interval,
            ) === 0;
          break;
        case "Yearly":
          frequencyCheck =
            Caml_int32.mod_(
              ((currentTime.getFullYear() | 0) -
                (startTime.getFullYear() | 0)) |
                0,
              recur$5.interval,
            ) === 0;
          break;
      }
    }
  } else {
    frequencyCheck = true;
  }
  var rest =
    Caml_obj.lessequal(startTime, currentTime) &&
    Caml_obj.lessequal(currentTime, endTime) &&
    byDay &&
    byDate &&
    byMonth &&
    byYear &&
    byWeek &&
    frequencyCheck;
  var isBlackList = function (rest) {
    var blacklist = recipe.dateBlacklist;
    if (blacklist === undefined) {
      return rest;
    }
    var _a = blacklist.find(function (x) {
      return Caml_obj.equal(x, currentTime);
    });
    if (_a !== undefined) {
      return false;
    } else {
      return rest;
    }
  };
  var rest$1 = isBlackList(rest);
  var whitelist = recipe.dateWhitelist;
  if (whitelist === undefined) {
    return rest$1;
  }
  var _a = whitelist.find(function (x) {
    return Caml_obj.equal(x, currentTime);
  });
  if (_a !== undefined) {
    return true;
  } else {
    return rest$1;
  }
}

export { durationSeconds, isScheduled };
/* DayJs Not a pure module */
