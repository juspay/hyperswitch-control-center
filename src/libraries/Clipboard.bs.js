// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../components/Icon.bs.js";
import * as React from "react";
import * as ToolTip from "../components/tooltip/ToolTip.bs.js";
import * as GlobalVars from "../utils/GlobalVars.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function writeText(str) {
  try {
    if (window.isSecureContext) {
      navigator.clipboard.writeText(str);
      return;
    }
    var textArea = document.createElement("textarea");
    textArea.innerHTML = str;
    textArea.style.position = "absolute";
    textArea.style.position = "absolute";
    textArea.style.left = "-99999999px";
    window.document.body.prepend(textArea);
    textArea.select();
    document.execCommand("copy");
    textArea.remove();
    return;
  } catch (exn) {
    return;
  }
}

function Clipboard$Copy(props) {
  var __outerPadding = props.outerPadding;
  var __iconSize = props.iconSize;
  var copyElement = props.copyElement;
  var __toolTipPosition = props.toolTipPosition;
  var data = props.data;
  var toolTipPosition =
    __toolTipPosition !== undefined ? __toolTipPosition : "Left";
  var iconSize = __iconSize !== undefined ? __iconSize : 15;
  var outerPadding = __outerPadding !== undefined ? __outerPadding : "p-2";
  var match = React.useState(function () {
    return "copy";
  });
  var setTooltipText = match[1];
  var tooltipText = match[0];
  var onCopyClick = function (ev) {
    ev.stopPropagation();
    setTooltipText(function (param) {
      return "copied";
    });
    writeText([data].join("\n"));
  };
  var iconClass = GlobalVars.isHyperSwitchDashboard
    ? "text-gray-300"
    : "text-jp-gray-900";
  return React.createElement(
    "div",
    {
      className: "flex justify-end " + outerPadding,
      onMouseOut: function (param) {
        setTooltipText(function (param) {
          return "copy";
        });
      },
    },
    React.createElement(
      "div",
      {
        onClick: onCopyClick,
      },
      React.createElement(ToolTip.make, {
        description: tooltipText,
        tooltipPositioning: "absolute",
        toolTipFor: Caml_option.some(
          copyElement !== undefined
            ? Caml_option.valFromOption(copyElement)
            : React.createElement(
                "div",
                {
                  className: iconClass + " flex items-center cursor-pointer",
                },
                React.createElement(Icon.make, {
                  name: "copy",
                  size: iconSize,
                }),
              ),
        ),
        tooltipWidthClass: "w-fit",
        toolTipPosition: toolTipPosition,
        arrowBgClass: tooltipText === "copy" ? "" : "#36AF47",
        bgColor: tooltipText === "copy" ? "" : "bg-green-950 text-white",
      }),
    ),
  );
}

var Copy = {
  make: Clipboard$Copy,
};

export { writeText, Copy };
/* Icon Not a pure module */
