// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";

var $$AbortController = {};

function encodeRequestMethod(x) {
  if (typeof x === "object") {
    return x._0;
  }
  switch (x) {
    case "Get":
      return "GET";
    case "Head":
      return "HEAD";
    case "Post":
      return "POST";
    case "Put":
      return "PUT";
    case "Delete":
      return "DELETE";
    case "Connect":
      return "CONNECT";
    case "Options":
      return "OPTIONS";
    case "Trace":
      return "TRACE";
    case "Patch":
      return "PATCH";
  }
}

function decodeRequestMethod(x) {
  switch (x) {
    case "CONNECT":
      return "Connect";
    case "DELETE":
      return "Delete";
    case "GET":
      return "Get";
    case "HEAD":
      return "Head";
    case "OPTIONS":
      return "Options";
    case "PATCH":
      return "Patch";
    case "POST":
      return "Post";
    case "PUT":
      return "Put";
    case "TRACE":
      return "Trace";
    default:
      return {
        TAG: "Other",
        _0: x,
      };
  }
}

function encodeReferrerPolicy(x) {
  switch (x) {
    case "None":
      return "";
    case "NoReferrer":
      return "no-referrer";
    case "NoReferrerWhenDowngrade":
      return "no-referrer-when-downgrade";
    case "SameOrigin":
      return "same-origin";
    case "Origin":
      return "origin";
    case "StrictOrigin":
      return "strict-origin";
    case "OriginWhenCrossOrigin":
      return "origin-when-cross-origin";
    case "StrictOriginWhenCrossOrigin":
      return "strict-origin-when-cross-origin";
    case "UnsafeUrl":
      return "unsafe-url";
  }
}

function decodeReferrerPolicy(x) {
  switch (x) {
    case "":
      return "None";
    case "no-referrer":
      return "NoReferrer";
    case "no-referrer-when-downgrade":
      return "NoReferrerWhenDowngrade";
    case "origin":
      return "Origin";
    case "origin-when-cross-origin":
      return "OriginWhenCrossOrigin";
    case "same-origin":
      return "SameOrigin";
    case "strict-origin":
      return "StrictOrigin";
    case "strict-origin-when-cross-origin":
      return "StrictOriginWhenCrossOrigin";
    case "unsafe-url":
      return "UnsafeUrl";
    default:
      throw {
        RE_EXN_ID: "Failure",
        _1: "Unknown referrerPolicy: " + x,
        Error: new Error(),
      };
  }
}

function decodeRequestType(x) {
  switch (x) {
    case "":
      return "None";
    case "audio":
      return "Audio";
    case "font":
      return "Font";
    case "image":
      return "Image";
    case "script":
      return "Script";
    case "style":
      return "Style";
    case "track":
      return "Track";
    case "video":
      return "Video";
    default:
      throw {
        RE_EXN_ID: "Failure",
        _1: "Unknown requestType: " + x,
        Error: new Error(),
      };
  }
}

function decodeRequestDestination(x) {
  switch (x) {
    case "":
      return "None";
    case "document":
      return "Document";
    case "embed":
      return "Embed";
    case "font":
      return "Font";
    case "image":
      return "Image";
    case "manifest":
      return "Manifest";
    case "media":
      return "Media";
    case "object":
      return "Object";
    case "report":
      return "Report";
    case "script":
      return "Script";
    case "serviceworker":
      return "ServiceWorker";
    case "sharedworder":
      return "SharedWorker";
    case "style":
      return "Style";
    case "worker":
      return "Worker";
    case "xslt":
      return "Xslt";
    default:
      throw {
        RE_EXN_ID: "Failure",
        _1: "Unknown requestDestination: " + x,
        Error: new Error(),
      };
  }
}

function encodeRequestMode(x) {
  switch (x) {
    case "Navigate":
      return "navigate";
    case "SameOrigin":
      return "same-origin";
    case "NoCORS":
      return "no-cors";
    case "CORS":
      return "cors";
  }
}

function decodeRequestMode(x) {
  switch (x) {
    case "cors":
      return "CORS";
    case "navigate":
      return "Navigate";
    case "no-cors":
      return "NoCORS";
    case "same-origin":
      return "SameOrigin";
    default:
      throw {
        RE_EXN_ID: "Failure",
        _1: "Unknown requestMode: " + x,
        Error: new Error(),
      };
  }
}

function encodeRequestCredentials(x) {
  switch (x) {
    case "Omit":
      return "omit";
    case "SameOrigin":
      return "same-origin";
    case "Include":
      return "include";
  }
}

function decodeRequestCredentials(x) {
  switch (x) {
    case "include":
      return "Include";
    case "omit":
      return "Omit";
    case "same-origin":
      return "SameOrigin";
    default:
      throw {
        RE_EXN_ID: "Failure",
        _1: "Unknown requestCredentials: " + x,
        Error: new Error(),
      };
  }
}

function encodeRequestCache(x) {
  switch (x) {
    case "Default":
      return "default";
    case "NoStore":
      return "no-store";
    case "Reload":
      return "reload";
    case "NoCache":
      return "no-cache";
    case "ForceCache":
      return "force-cache";
    case "OnlyIfCached":
      return "only-if-cached";
  }
}

function decodeRequestCache(x) {
  switch (x) {
    case "default":
      return "Default";
    case "force-cache":
      return "ForceCache";
    case "no-cache":
      return "NoCache";
    case "no-store":
      return "NoStore";
    case "only-if-cached":
      return "OnlyIfCached";
    case "reload":
      return "Reload";
    default:
      throw {
        RE_EXN_ID: "Failure",
        _1: "Unknown requestCache: " + x,
        Error: new Error(),
      };
  }
}

function encodeRequestRedirect(x) {
  switch (x) {
    case "Follow":
      return "follow";
    case "Error":
      return "error";
    case "Manual":
      return "manual";
  }
}

function decodeRequestRedirect(x) {
  switch (x) {
    case "error":
      return "Error";
    case "follow":
      return "Follow";
    case "manual":
      return "Manual";
    default:
      throw {
        RE_EXN_ID: "Failure",
        _1: "Unknown requestRedirect: " + x,
        Error: new Error(),
      };
  }
}

var HeadersInit = {};

var $$Headers = {};

var BodyInit = {};

function Impl(T) {
  return {};
}

var Body = {
  Impl: Impl,
};

function map(f, x) {
  if (x !== undefined) {
    return Caml_option.some(f(Caml_option.valFromOption(x)));
  }
}

function make(
  method_,
  headers,
  body,
  referrer,
  referrerPolicyOpt,
  mode,
  credentials,
  cache,
  redirect,
  integrityOpt,
  keepalive,
  signal,
  param,
) {
  var referrerPolicy =
    referrerPolicyOpt !== undefined ? referrerPolicyOpt : "None";
  var integrity = integrityOpt !== undefined ? integrityOpt : "";
  var tmp = {
    referrerPolicy: encodeReferrerPolicy(referrerPolicy),
    integrity: integrity,
  };
  var tmp$1 = map(encodeRequestMethod, method_);
  if (tmp$1 !== undefined) {
    tmp.method = tmp$1;
  }
  if (headers !== undefined) {
    tmp.headers = Caml_option.valFromOption(headers);
  }
  if (body !== undefined) {
    tmp.body = Caml_option.valFromOption(body);
  }
  if (referrer !== undefined) {
    tmp.referrer = referrer;
  }
  var tmp$2 = map(encodeRequestMode, mode);
  if (tmp$2 !== undefined) {
    tmp.mode = tmp$2;
  }
  var tmp$3 = map(encodeRequestCredentials, credentials);
  if (tmp$3 !== undefined) {
    tmp.credentials = tmp$3;
  }
  var tmp$4 = map(encodeRequestCache, cache);
  if (tmp$4 !== undefined) {
    tmp.cache = tmp$4;
  }
  var tmp$5 = map(encodeRequestRedirect, redirect);
  if (tmp$5 !== undefined) {
    tmp.redirect = tmp$5;
  }
  if (keepalive !== undefined) {
    tmp.keepalive = keepalive;
  }
  if (signal !== undefined) {
    tmp.signal = Caml_option.valFromOption(signal);
  }
  return tmp;
}

var RequestInit = {
  map: map,
  make: make,
};

function method_(self) {
  return decodeRequestMethod(self.method);
}

function type_(self) {
  return decodeRequestType(self.type);
}

function destination(self) {
  return decodeRequestDestination(self.destination);
}

function referrerPolicy(self) {
  return decodeReferrerPolicy(self.referrerPolicy);
}

function mode(self) {
  return decodeRequestMode(self.mode);
}

function credentials(self) {
  return decodeRequestCredentials(self.credentials);
}

function cache(self) {
  return decodeRequestCache(self.cache);
}

function redirect(self) {
  return decodeRequestRedirect(self.redirect);
}

var $$Request = {
  method_: method_,
  type_: type_,
  destination: destination,
  referrerPolicy: referrerPolicy,
  mode: mode,
  credentials: credentials,
  cache: cache,
  redirect: redirect,
};

var $$Response = {};

function classify(t) {
  if (typeof t === "string") {
    return {
      NAME: "String",
      VAL: t,
    };
  } else {
    return {
      NAME: "File",
      VAL: t,
    };
  }
}

var EntryValue = {
  classify: classify,
};

var $$FormData = {
  EntryValue: EntryValue,
  Iterator: undefined,
};

export {
  $$AbortController,
  encodeRequestMethod,
  decodeRequestMethod,
  encodeReferrerPolicy,
  decodeReferrerPolicy,
  decodeRequestType,
  decodeRequestDestination,
  encodeRequestMode,
  decodeRequestMode,
  encodeRequestCredentials,
  decodeRequestCredentials,
  encodeRequestCache,
  decodeRequestCache,
  encodeRequestRedirect,
  decodeRequestRedirect,
  HeadersInit,
  $$Headers,
  BodyInit,
  Body,
  RequestInit,
  $$Request,
  $$Response,
  $$FormData,
};
/* No side effect */
