// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../components/Icon.bs.js";
import * as Tick from "../components/custom-icons/Tick.bs.js";
import * as React from "react";
import * as SelectBox from "../components/SelectBox.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ThemeProvider from "../context/ThemeProvider.bs.js";
import * as React$1 from "@headlessui/react";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";

var Child = {};

var Transition = {
  Child: Child,
};

var $$Option = {};

var Label = {};

var Description = {};

var RadioGroup = {
  $$Option: $$Option,
  Label: Label,
  Description: Description,
};

var Overlay = {};

var Button = {};

var Panel = {};

var Group = {};

var Popover = {
  Overlay: Overlay,
  Button: Button,
  Panel: Panel,
  Group: Group,
};

var Overlay$1 = {};

var Title = {};

var Description$1 = {};

var Dialog = {
  Overlay: Overlay$1,
  Title: Title,
  Description: Description$1,
};

var Panel$1 = {};

var Button$1 = {};

var Disclosure = {
  Panel: Panel$1,
  Button: Button$1,
};

var Label$1 = {};

var Description$2 = {};

var Group$1 = {};

var Switch = {
  Label: Label$1,
  Description: Description$2,
  Group: Group$1,
};

var Button$2 = {};

var Label$2 = {};

var Options = {};

var $$Option$1 = {};

var Listbox = {
  Button: Button$2,
  Label: Label$2,
  Options: Options,
  $$Option: $$Option$1,
};

var Input = {};

var Button$3 = {};

var Label$3 = {};

var Options$1 = {};

var $$Option$2 = {};

var Combobox = {
  Input: Input,
  Button: Button$3,
  Label: Label$3,
  Options: Options$1,
  $$Option: $$Option$2,
};

var Items = {};

var Item = {};

var Button$4 = {};

var Menu = {
  Items: Items,
  Item: Item,
  Button: Button$4,
};

function HeadlessUI$SelectBoxHeadlessUI(props) {
  var __dropdownWidth = props.dropdownWidth;
  var __deSelectAllowed = props.deSelectAllowed;
  var __className = props.className;
  var __dropdownPosition = props.dropdownPosition;
  var children = props.children;
  var setValue = props.setValue;
  var __value = props.value;
  var value =
    __value !== undefined
      ? __value
      : {
          TAG: "String",
          _0: "",
        };
  var dropdownPosition =
    __dropdownPosition !== undefined ? __dropdownPosition : "Left";
  var className = __className !== undefined ? __className : "";
  var deSelectAllowed =
    __deSelectAllowed !== undefined ? __deSelectAllowed : true;
  var dropdownWidth = __dropdownWidth !== undefined ? __dropdownWidth : "w-52";
  var match = React.useContext(ThemeProvider.themeContext);
  var textColor = match.globalUIConfig.font.textColor;
  var transformedOptions = SelectBox.useTransformed(props.options);
  var dropdownPositionClass;
  switch (dropdownPosition) {
    case "Left":
      dropdownPositionClass = "right-0";
      break;
    case "Right":
      dropdownPositionClass = "left-0";
      break;
    case "Top":
      dropdownPositionClass = "bottom-12";
      break;
  }
  var isMultiSelect;
  isMultiSelect = value.TAG === "String" ? false : true;
  return React.createElement(
    "div",
    {
      className: "text-left",
    },
    React.createElement(React$1.Menu, {
      as: "div",
      className: "relative inline-block text-left",
      children: function (_menuProps) {
        return React.createElement(
          "div",
          undefined,
          React.createElement(React$1.Menu.Button, {
            className: className,
            children: function (_buttonProps) {
              return children;
            },
          }),
          React.createElement(React$1.Transition, {
            as: "span",
            enter: "transition ease-out duration-100",
            enterFrom: "transform opacity-0 scale-95",
            enterTo: "transform opacity-100 scale-100",
            leave: "transition ease-in duration-75",
            leaveFrom: "transform opacity-100 scale-100",
            leaveTo: "transform opacity-0 scale-95",
            children: Caml_option.some(
              React.createElement(React$1.Menu.Items, {
                className:
                  "absolute z-10 " +
                  dropdownPositionClass +
                  " " +
                  dropdownWidth +
                  " max-h-[225px] overflow-auto mt-2 p-1 origin-top-right bg-white dark:bg-jp-gray-950 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none",
                children: function (_props) {
                  return transformedOptions.map(function (option, index) {
                    var selected;
                    selected =
                      value.TAG === "String"
                        ? value._0 === option.value
                        : value._0.includes(option.value);
                    return JsxPPXReactSupportU.createElementWithKey(
                      index.toString(),
                      React$1.Menu.Item,
                      {
                        children: function (props) {
                          var iconName = option.icon;
                          var tmp;
                          var exit = 0;
                          if (typeof iconName !== "object") {
                            tmp = null;
                          } else {
                            switch (iconName.TAG) {
                              case "CustomIcon":
                                tmp = iconName._0;
                                break;
                              case "CustomRightIcon":
                                tmp = null;
                                break;
                              case "FontAwesome":
                              case "Euler":
                                exit = 1;
                                break;
                            }
                          }
                          if (exit === 1) {
                            tmp = React.createElement(Icon.make, {
                              name: iconName._0,
                              size: 12,
                              className: "align-middle",
                            });
                          }
                          return React.createElement(
                            "div",
                            {
                              className:
                                "group flex flex-row items-center justify-between rounded-md w-full p-2 text-sm cursor-pointer " +
                                (props.active
                                  ? "bg-gray-100 dark:bg-gray-700"
                                  : ""),
                              onClick: function (ev) {
                                if (isMultiSelect) {
                                  ev.stopPropagation();
                                  ev.preventDefault();
                                }
                                setValue(option.value);
                              },
                            },
                            React.createElement(
                              "div",
                              {
                                className: "flex flex-row items-center gap-2",
                              },
                              tmp,
                              React.createElement(
                                "span",
                                {
                                  className: selected
                                    ? textColor.primaryNormal + " font-semibold"
                                    : "",
                                },
                                option.label,
                              ),
                            ),
                            selected
                              ? props.active && deSelectAllowed
                                ? React.createElement(Icon.make, {
                                    name: "close",
                                    size: 10,
                                    className: "text-red-500 mr-1",
                                  })
                                : React.createElement(Tick.make, {
                                    isSelected: selected,
                                  })
                              : null,
                          );
                        },
                      },
                    );
                  });
                },
              }),
            ),
          }),
        );
      },
    }),
  );
}

var SelectBoxHeadlessUI = {
  make: HeadlessUI$SelectBoxHeadlessUI,
};

export {
  Transition,
  RadioGroup,
  Popover,
  Dialog,
  Disclosure,
  Switch,
  Listbox,
  Combobox,
  Menu,
  SelectBoxHeadlessUI,
};
/* Icon Not a pure module */
