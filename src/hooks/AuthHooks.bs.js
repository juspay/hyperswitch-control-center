// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fetch from "../libraries/bsfetch/Fetch.bs.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as AuthUtils from "../entryPoints/AuthModule/AuthUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as ApiProgressHooks from "./ApiProgressHooks.bs.js";
import * as AuthInfoProvider from "../context/AuthInfoProvider.bs.js";

function getHeaders(uri, headers, contentTypeOpt, token, param) {
  var contentType =
    contentTypeOpt !== undefined
      ? contentTypeOpt
      : {
          TAG: "Headers",
          _0: "application/json",
        };
  var isMixpanel = uri.includes("mixpanel");
  if (isMixpanel) {
    return Object.fromEntries([
      ["Content-Type", "application/x-www-form-urlencoded"],
      ["accept", "application/json"],
    ]);
  }
  var res =
    token !== undefined
      ? ((headers["authorization"] = "Bearer " + token),
        (headers["api-key"] = "hyperswitch"),
        headers)
      : headers;
  if (typeof contentType === "object") {
    headers["Content-Type"] = contentType._0;
  }
  return res;
}

function useApiFetcher() {
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStateToLogout = match.setAuthStateToLogout;
  var authStatus = match.authStatus;
  var token = React.useMemo(
    function () {
      if (typeof authStatus !== "object") {
        return;
      } else if (authStatus.TAG === "PreLogin") {
        return authStatus._0.token;
      } else {
        return authStatus._0._0.token;
      }
    },
    [authStatus],
  );
  var setReqProgress = Recoil.useSetRecoilState(
    ApiProgressHooks.pendingRequestCount,
  );
  return React.useCallback(
    function (
      uri,
      bodyStrOpt,
      bodyFormDataOpt,
      headersOpt,
      method_,
      betaEndpointConfig,
      contentTypeOpt,
      param,
    ) {
      var bodyStr = bodyStrOpt !== undefined ? bodyStrOpt : "";
      var bodyFormData =
        bodyFormDataOpt !== undefined
          ? Caml_option.valFromOption(bodyFormDataOpt)
          : undefined;
      var headers = headersOpt !== undefined ? headersOpt : {};
      var contentType =
        contentTypeOpt !== undefined
          ? contentTypeOpt
          : {
              TAG: "Headers",
              _0: "application/json",
            };
      var uri$1 =
        betaEndpointConfig !== undefined
          ? uri.replace(
              betaEndpointConfig.replaceStr,
              betaEndpointConfig.originalApiStr,
            )
          : uri;
      var body;
      var exit = 0;
      if (typeof method_ !== "object" && method_ === "Get") {
        body = Promise.resolve(undefined);
      } else {
        exit = 1;
      }
      if (exit === 1) {
        body =
          bodyFormData !== undefined
            ? Promise.resolve(
                Caml_option.some(Caml_option.valFromOption(bodyFormData)),
              )
            : Promise.resolve(Caml_option.some(bodyStr));
      }
      return body.then(function (body) {
        setReqProgress(function (p) {
          return (p + 1) | 0;
        });
        return Core__Promise.$$catch(
          fetch(
            uri$1,
            Fetch.RequestInit.make(
              method_,
              Caml_option.some(
                getHeaders(uri$1, headers, contentType, token, undefined),
              ),
              body,
              undefined,
              undefined,
              undefined,
              "SameOrigin",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            ),
          ),
          function (err) {
            setReqProgress(function (p) {
              return (p - 1) | 0;
            });
            return Promise.reject(err);
          },
        ).then(function (resp) {
          setReqProgress(function (p) {
            return (p - 1) | 0;
          });
          if (resp.status !== 401) {
            return Promise.resolve(resp);
          }
          if (typeof authStatus !== "object") {
            return Promise.resolve(resp);
          }
          if (authStatus.TAG !== "LoggedIn") {
            return Promise.resolve(resp);
          }
          localStorage.clear();
          setAuthStateToLogout();
          AuthUtils.redirectToLogin();
          return Promise.resolve(resp);
        });
      });
    },
    [token],
  );
}

export { getHeaders, useApiFetcher };
/* react Not a pure module */
