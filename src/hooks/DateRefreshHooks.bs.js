// Generated by ReScript, PLEASE EDIT WITH CARE

import Dayjs from "dayjs";
import * as Core__Float from "@rescript/core/src/Core__Float.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as TimeZoneHook from "./TimeZoneHook.bs.js";
import * as DateRangeUtils from "../utils/DateRangeUtils.bs.js";

function useConstructQueryOnBasisOfOpt() {
  var customTimezoneToISOString = TimeZoneHook.useCustomTimeZoneToIsoString();
  var isoStringToCustomTimeZone = TimeZoneHook.useIsoStringToCustomTimeZone();
  var isoStringToCustomTimezoneInFloat =
    TimeZoneHook.useIsoStringToCustomTimeZoneInFloat();
  var todayDayJsObj = Dayjs(new Date().toString());
  var todayDate = todayDayJsObj.format("YYYY-MM-DD");
  var todayTime = todayDayJsObj.format("HH:mm:ss");
  return function (
    queryString,
    disableFutureDates,
    disablePastDates,
    startKey,
    endKey,
    optKey,
  ) {
    if (!queryString.includes(optKey)) {
      return queryString;
    }
    try {
      var arrQuery = queryString.split("&");
      var tempArr = arrQuery.filter(function (x) {
        return x.includes(optKey);
      });
      var tempArr$1 = Core__Option.getOr(tempArr[0], "").split("=");
      var optVal = Core__Option.getOr(tempArr$1[1], "");
      var customrange;
      switch (optVal) {
        case "last_month":
          customrange = "LastMonth";
          break;
        case "next_month":
          customrange = "NextMonth";
          break;
        case "this_month":
          customrange = "ThisMonth";
          break;
        case "today":
          customrange = "Today";
          break;
        case "tomorrow":
          customrange = "Tomorrow";
          break;
        case "yesterday":
          customrange = "Yesterday";
          break;
        default:
          var arr = optVal.split("_");
          Core__Option.getOr(arr[0], "") === "next";
          var anchor = Core__Option.getOr(arr[2], "");
          var val = Core__Option.getOr(arr[1], "");
          switch (anchor) {
            case "days":
              customrange = {
                TAG: "Day",
                _0: Core__Option.getOr(Core__Float.fromString(val), 0.0),
              };
              break;
            case "hours":
              customrange = {
                TAG: "Hour",
                _0: Core__Option.getOr(Core__Float.fromString(val), 0.0),
              };
              break;
            case "mins":
              customrange = {
                TAG: "Hour",
                _0: Core__Option.getOr(Core__Float.fromString(val), 0.0) / 60.0,
              };
              break;
            default:
              customrange = "Today";
          }
      }
      var match = DateRangeUtils.getPredefinedStartAndEndDate(
        todayDayJsObj,
        isoStringToCustomTimeZone,
        isoStringToCustomTimezoneInFloat,
        customTimezoneToISOString,
        customrange,
        disableFutureDates,
        disablePastDates,
        todayDate,
        todayTime,
      );
      var stTimeStamp = DateRangeUtils.changeTimeFormat(
        customTimezoneToISOString,
        match[0],
        match[2],
        "YYYY-MM-DDTHH:mm:ss.SSS[Z]",
      );
      var enTimeStamp = DateRangeUtils.changeTimeFormat(
        customTimezoneToISOString,
        match[1],
        match[3],
        "YYYY-MM-DDTHH:mm:ss.SSS[Z]",
      );
      var updatedArr = arrQuery.map(function (x) {
        if (x.includes(startKey)) {
          return startKey + "=" + stTimeStamp;
        } else if (x.includes(endKey)) {
          return endKey + "=" + enTimeStamp;
        } else {
          return x;
        }
      });
      return updatedArr.join("&");
    } catch (_error) {
      return queryString;
    }
  };
}

export { useConstructQueryOnBasisOfOpt };
/* dayjs Not a pure module */
