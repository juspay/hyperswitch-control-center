// Generated by ReScript, PLEASE EDIT WITH CARE

import Dayjs from "dayjs";
import * as React from "react";
import * as Core__Float from "@rescript/core/src/Core__Float.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as TimeZoneData from "../mockData/TimeZoneData.bs.js";
import * as UserTimeZoneProvider from "../context/UserTimeZoneProvider.bs.js";

function formatter(str) {
  var strLen = str.length;
  if (strLen === 0) {
    return "00";
  } else if (strLen === 1) {
    return "0" + str;
  } else {
    return str;
  }
}

function dateTimeObjectToDate(dateTimeObject) {
  return new Date(
    dateTimeObject.year,
    dateTimeObject.month - 1.0,
    dateTimeObject.date,
    dateTimeObject.hour,
    dateTimeObject.minute,
    dateTimeObject.second,
  );
}

function stringToFloat(element) {
  var a = Core__Float.fromString(element);
  if (a !== undefined) {
    return a;
  } else {
    return 0.0;
  }
}

function dateTimeStringToDateTimeFloat(dateTime) {
  return {
    year: stringToFloat(dateTime.year),
    month: stringToFloat(dateTime.month),
    date: stringToFloat(dateTime.date),
    hour: stringToFloat(dateTime.hour),
    minute: stringToFloat(dateTime.minute),
    second: stringToFloat(dateTime.second),
  };
}

function formattedDateTimeFloat(dateTime, format) {
  return Dayjs(dateTimeObjectToDate(dateTime).toString()).format(format);
}

function formattedDateTimeString(dateTime, format) {
  return formattedDateTimeFloat(
    dateTimeStringToDateTimeFloat(dateTime),
    format,
  );
}

function formattedISOString(dateTimeIsoString, format) {
  var tempTimeDateString = dateTimeIsoString.replace("Z", "");
  var tempTimeDate = tempTimeDateString.split("T");
  var time = tempTimeDate[1];
  var date = tempTimeDate[0];
  var dateComponents = Core__Option.getOr(date, "").split("-");
  var timeComponents = Core__Option.getOr(time, "").split(":");
  var dateTimeObject_year = stringToFloat(
    Core__Option.getOr(dateComponents[0], ""),
  );
  var dateTimeObject_month = stringToFloat(
    Core__Option.getOr(dateComponents[1], ""),
  );
  var dateTimeObject_date = stringToFloat(
    Core__Option.getOr(dateComponents[2], ""),
  );
  var dateTimeObject_hour = stringToFloat(
    Core__Option.getOr(timeComponents[0], ""),
  );
  var dateTimeObject_minute = stringToFloat(
    Core__Option.getOr(timeComponents[1], ""),
  );
  var dateTimeObject_second = stringToFloat(
    Core__Option.getOr(timeComponents[2], ""),
  );
  var dateTimeObject = {
    year: dateTimeObject_year,
    month: dateTimeObject_month,
    date: dateTimeObject_date,
    hour: dateTimeObject_hour,
    minute: dateTimeObject_minute,
    second: dateTimeObject_second,
  };
  return formattedDateTimeFloat(dateTimeObject, format);
}

function en_USStringToDateTimeObject(dateTimeIsoString) {
  var tempTimeDateString = dateTimeIsoString.replace(",", "");
  var tempTimeDate = tempTimeDateString.split(/\s/).map(function (val) {
    return Core__Option.getOr(val, "");
  });
  var time = tempTimeDate[1];
  var date = tempTimeDate[0];
  var dateComponents = Core__Option.getOr(date, "").split("/");
  var timeComponents = Core__Option.getOr(time, "").split(":");
  var a = Core__Float.fromString(Core__Option.getOr(timeComponents[0], ""));
  var tempHour = a !== undefined ? a : 0.0;
  var fullTempHour =
    Core__Option.getOr(tempTimeDate[2], "") === "AM"
      ? tempHour === 12.0
        ? 0.0
        : tempHour
      : tempHour < 12.0
        ? tempHour + 12.0
        : tempHour;
  var hourInString = fullTempHour.toString();
  return {
    year: formatter(Core__Option.getOr(dateComponents[2], "")),
    month: formatter(Core__Option.getOr(dateComponents[0], "")),
    date: formatter(Core__Option.getOr(dateComponents[1], "")),
    hour: formatter(hourInString),
    minute: formatter(Core__Option.getOr(timeComponents[1], "")),
    second: formatter(Core__Option.getOr(timeComponents[2], "")),
  };
}

function convertTimeZone(date, timezoneString) {
  var localTimeString = new Date(date);
  return localTimeString
    .toLocaleString("en-US", {
      timeZone: timezoneString,
    })
    .replace(/\s/g, " ");
}

function useCustomTimeZoneToIsoString() {
  var match = React.useContext(UserTimeZoneProvider.userTimeContext);
  var zone = match[0];
  return React.useCallback(
    function (year, month, day, hours, minutes, seconds) {
      var selectedTimeZoneData = TimeZoneData.getTimeZoneData(zone);
      var timezone = selectedTimeZoneData.offset;
      var monthString = month.length === 1 ? "0" + month : month;
      var dayString = day.length === 1 ? "0" + day : day;
      var hoursString = formatter(hours);
      var minutesString = formatter(minutes);
      var secondsString = formatter(seconds);
      var fullTimeManagedString =
        year +
        "-" +
        monthString +
        "-" +
        dayString +
        "T" +
        hoursString +
        ":" +
        minutesString +
        ":" +
        secondsString +
        timezone;
      return new Date(fullTimeManagedString).toISOString();
    },
    [zone],
  );
}

function useIsoStringToCustomTimeZone() {
  var match = React.useContext(UserTimeZoneProvider.userTimeContext);
  var zone = match[0];
  return React.useCallback(
    function (isoString) {
      var selectedTimeZoneData = TimeZoneData.getTimeZoneData(zone);
      var selectedTimeZoneAlias = selectedTimeZoneData.region;
      var timezoneConvertedString = convertTimeZone(
        isoString,
        selectedTimeZoneAlias,
      );
      return en_USStringToDateTimeObject(timezoneConvertedString);
    },
    [zone],
  );
}

function useIsoStringToCustomTimeZoneInFloat() {
  var match = React.useContext(UserTimeZoneProvider.userTimeContext);
  var zone = match[0];
  return React.useCallback(
    function (isoString) {
      var selectedTimeZoneData = TimeZoneData.getTimeZoneData(zone);
      var selectedTimeZoneAlias = selectedTimeZoneData.region;
      var timezoneConvertedString = convertTimeZone(
        isoString,
        selectedTimeZoneAlias,
      );
      var customDateTimeString = en_USStringToDateTimeObject(
        timezoneConvertedString,
      );
      return dateTimeStringToDateTimeFloat(customDateTimeString);
    },
    [zone],
  );
}

export {
  formatter,
  dateTimeObjectToDate,
  stringToFloat,
  dateTimeStringToDateTimeFloat,
  formattedDateTimeFloat,
  formattedDateTimeString,
  formattedISOString,
  en_USStringToDateTimeObject,
  convertTimeZone,
  useCustomTimeZoneToIsoString,
  useIsoStringToCustomTimeZone,
  useIsoStringToCustomTimeZoneInFloat,
};
/* dayjs Not a pure module */
