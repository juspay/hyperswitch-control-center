// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as UserPrefUtils from "../utils/UserPrefUtils.bs.js";
import * as DictionaryUtils from "../utils/DictionaryUtils.bs.js";
import * as AuthInfoProvider from "./AuthInfoProvider.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function userPrefSetter(param) {}

var defaultUserPref = {};

var defaultUserModuleWisePref = {};

function userPrefObj_getSearchParamByLink(_str) {
  return "";
}

function userPrefObj_addConfig(_str, _json) {}

function userPrefObj_getConfig(_str) {}

var userPrefObj = {
  userPref: defaultUserPref,
  setUserPref: userPrefSetter,
  lastVisitedTab: "",
  getSearchParamByLink: userPrefObj_getSearchParamByLink,
  addConfig: userPrefObj_addConfig,
  getConfig: userPrefObj_getConfig,
};

var userPrefContext = React.createContext(userPrefObj);

function makeProps(value, children, param) {
  return {
    value: value,
    children: children,
  };
}

var make = userPrefContext.Provider;

var Provider = {
  makeProps: makeProps,
  make: make,
};

function UserPrefContext(props) {
  var userPrefInitialVal = UserPrefUtils.getUserPref();
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var authStatus = match.authStatus;
  var username;
  if (typeof authStatus !== "object" || authStatus.TAG !== "LoggedIn") {
    username = "";
  } else {
    var authType = authStatus._0;
    username =
      authType.TAG === "BasicAuth"
        ? Core__Option.getOr(authType._0.name, "")
        : authType._0.name;
  }
  var match$1 = React.useState(function () {
    return userPrefInitialVal;
  });
  var setUserPref = match$1[1];
  var userPref = match$1[0];
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var urlPathConcationation =
    "/" + Core__List.toArray(LogicUtils.stripV4(url.path)).join("/");
  React.useEffect(
    function () {
      if (urlPathConcationation !== "/") {
        setUserPref(function (prev) {
          var currentConfig = Core__Option.getOr(prev[username], {});
          var updatedValue;
          if (
            urlPathConcationation !==
            Core__Option.getOr(currentConfig.lastVisitedTab, "")
          ) {
            var newrecord = Caml_obj.obj_dup(currentConfig);
            newrecord.lastVisitedTab = urlPathConcationation;
            updatedValue = newrecord;
          } else {
            updatedValue = currentConfig;
          }
          prev[username] = updatedValue;
          UserPrefUtils.saveUserPref(prev);
          return prev;
        });
      }
    },
    [urlPathConcationation, username],
  );
  React.useEffect(
    function () {
      setUserPref(function (prev) {
        var currentConfig = Core__Option.getOr(prev[username], {});
        var moduleVisePref = currentConfig.moduleVisePref;
        var moduleWisePref = moduleVisePref !== undefined ? moduleVisePref : {};
        var currentModulePerf = Core__Option.getOr(
          moduleWisePref[urlPathConcationation],
          defaultUserModuleWisePref,
        );
        var filteredUrlSearch = Object.entries(
          DictionaryUtils.deleteKeys(
            LogicUtils.getDictFromUrlSearchParams(url.search),
            [
              "startTime",
              "endTime",
              "filters.dateCreated.lte",
              "filters.dateCreated.gte",
              "filters.dateCreated.opt",
            ],
          ),
        )
          .map(function (item) {
            return item[0] + "=" + item[1];
          })
          .join("&");
        var isMarketplaceApp = urlPathConcationation === "/marketplace";
        var newrecord = Caml_obj.obj_dup(currentModulePerf);
        newrecord.searchParams = isMarketplaceApp ? "" : filteredUrlSearch;
        moduleWisePref[urlPathConcationation] = newrecord;
        var newrecord$1 = Caml_obj.obj_dup(currentConfig);
        newrecord$1.moduleVisePref = moduleWisePref;
        prev[username] = newrecord$1;
        UserPrefUtils.saveUserPref(prev);
        return prev;
      });
    },
    [url.search, username],
  );
  React.useEffect(
    function () {
      UserPrefUtils.saveUserPref(userPref);
    },
    [userPref],
  );
  var addConfig = function (key, value) {
    setUserPref(function (prev) {
      var currentConfig = Core__Option.getOr(prev[username], {});
      var moduleVisePref = currentConfig.moduleVisePref;
      var moduleWisePref = moduleVisePref !== undefined ? moduleVisePref : {};
      var currentModulePerf = Core__Option.getOr(
        moduleWisePref[urlPathConcationation],
        defaultUserModuleWisePref,
      );
      var moduleConfig = currentModulePerf.moduleConfig;
      var moduleConfig$1 = moduleConfig !== undefined ? moduleConfig : {};
      moduleConfig$1[key] = value;
      var newrecord = Caml_obj.obj_dup(currentModulePerf);
      newrecord.moduleConfig = moduleConfig$1;
      moduleWisePref[urlPathConcationation] = newrecord;
      var newrecord$1 = Caml_obj.obj_dup(currentConfig);
      newrecord$1.moduleVisePref = moduleWisePref;
      prev[username] = newrecord$1;
      UserPrefUtils.saveUserPref(prev);
      return prev;
    });
  };
  var getConfig = function (key) {
    var currentConfig = Core__Option.getOr(userPref[username], {});
    var moduleVisePref = currentConfig.moduleVisePref;
    if (moduleVisePref === undefined) {
      return;
    }
    var match = Core__Option.getOr(
      moduleVisePref[urlPathConcationation],
      defaultUserModuleWisePref,
    );
    var moduleConfig = match.moduleConfig;
    if (moduleConfig !== undefined) {
      return moduleConfig[key];
    }
  };
  var userPrefString = JSON.stringify(
    LogicUtils.getJsonFromArrayOfJson(
      Object.entries(userPref).map(function (item) {
        return [item[0], item[1]];
      }),
    ),
  );
  var value = React.useMemo(
    function () {
      var currentConfig = Core__Option.getOr(userPref[username], {});
      var lastVisitedTab = currentConfig.lastVisitedTab;
      var lastVisitedTab$1 = lastVisitedTab !== undefined ? lastVisitedTab : "";
      var moduleVisePref = currentConfig.moduleVisePref;
      var moduleVisePref$1 = moduleVisePref !== undefined ? moduleVisePref : {};
      var getSearchParamByLink = function (link) {
        var searchParam = UserPrefUtils.getSearchParams(moduleVisePref$1, link);
        if (LogicUtils.isNonEmptyString(searchParam)) {
          return "?" + searchParam;
        } else {
          return "";
        }
      };
      return {
        userPref: userPref,
        setUserPref: setUserPref,
        lastVisitedTab: lastVisitedTab$1,
        getSearchParamByLink: getSearchParamByLink,
        addConfig: addConfig,
        getConfig: getConfig,
      };
    },
    [userPrefString, setUserPref, addConfig, getConfig],
  );
  return React.createElement(make, {
    value: value,
    children: props.children,
  });
}

var make$1 = UserPrefContext;

export {
  userPrefSetter,
  defaultUserPref,
  defaultUserModuleWisePref,
  userPrefObj,
  userPrefContext,
  Provider,
  make$1 as make,
};
/* userPrefContext Not a pure module */
