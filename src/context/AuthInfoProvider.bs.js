// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as AuthUtils from "../entryPoints/AuthModule/AuthUtils.bs.js";
import * as GlobalVars from "../utils/GlobalVars.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as CookieStorage from "../libraries/CookieStorage.bs.js";
import * as BasicAuthUtils from "../entryPoints/AuthModule/BasicAuth/BasicAuthUtils.bs.js";
import * as CommonAuthUtils from "../entryPoints/AuthModule/Common/CommonAuthUtils.bs.js";

function defaultContextValue_setAuthStatus(param) {}

function defaultContextValue_setAuthStateToLogout() {}

function defaultContextValue_setAuthMethods(param) {}

var defaultContextValue = {
  authStatus: "CheckingAuthStatus",
  setAuthStatus: defaultContextValue_setAuthStatus,
  setAuthStateToLogout: defaultContextValue_setAuthStateToLogout,
  setAuthMethods: defaultContextValue_setAuthMethods,
  authMethods: AuthUtils.defaultListOfAuth,
};

var authStatusContext = React.createContext(defaultContextValue);

var make = authStatusContext.Provider;

var Provider = {
  make: make,
};

function AuthInfoProvider(props) {
  var match = React.useState(function () {
    return "CheckingAuthStatus";
  });
  var setAuth = match[1];
  var match$1 = React.useState(function () {
    return [];
  });
  var setAuthStatus = React.useCallback(
    function (newAuthStatus) {
      if (typeof newAuthStatus !== "object") {
        if (newAuthStatus !== "LoggedOut") {
          return setAuth(function (param) {
            return "CheckingAuthStatus";
          });
        }
        setAuth(function (param) {
          return "LoggedOut";
        });
        CommonAuthUtils.clearLocalStorage();
        return AuthUtils.redirectToLogin();
      } else {
        if (newAuthStatus.TAG === "PreLogin") {
          setAuth(function (param) {
            return newAuthStatus;
          });
          return AuthUtils.setDetailsToLocalStorage(
            newAuthStatus._0,
            "PRE_LOGIN_INFO",
          );
        }
        var info = newAuthStatus._0;
        if (info.TAG === "BasicAuth") {
          var basicInfo = info._0;
          var token = basicInfo.token;
          if (token !== undefined) {
            if (LogicUtils.isEmptyString(token)) {
              setAuth(function (param) {
                return "LoggedOut";
              });
              return CommonAuthUtils.clearLocalStorage();
            } else {
              setAuth(function (param) {
                return newAuthStatus;
              });
              return BasicAuthUtils.setBasicAuthResToStorage(basicInfo);
            }
          } else {
            setAuth(function (param) {
              return "LoggedOut";
            });
            return CommonAuthUtils.clearLocalStorage();
          }
        }
        var totpInfo = info._0;
        if (Core__Option.isSome(totpInfo.token)) {
          setAuth(function (param) {
            return newAuthStatus;
          });
          return AuthUtils.setDetailsToLocalStorage(totpInfo, "USER_INFO");
        } else {
          setAuth(function (param) {
            return "LoggedOut";
          });
          return CommonAuthUtils.clearLocalStorage();
        }
      }
    },
    [setAuth],
  );
  var setAuthStateToLogout = React.useCallback(function () {
    setAuth(function (param) {
      return "LoggedOut";
    });
    CommonAuthUtils.clearLocalStorage();
    CookieStorage.deleteCookie("login_token", GlobalVars.hostName, undefined);
  }, []);
  return React.createElement(make, {
    value: {
      authStatus: match[0],
      setAuthStatus: setAuthStatus,
      setAuthStateToLogout: setAuthStateToLogout,
      setAuthMethods: match$1[1],
      authMethods: match$1[0],
    },
    children: props.children,
  });
}

var make$1 = AuthInfoProvider;

export { defaultContextValue, authStatusContext, Provider, make$1 as make };
/* authStatusContext Not a pure module */
