// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as UIConfig from "../UIConifg/UIConfig.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "./MatchMedia.bs.js";
import * as ThemeUtils from "./ThemeUtils.bs.js";

function defaultSetter(param) {}

function themeContext_configCustomDomainTheme(param) {}

var themeContext = {
  globalUIConfig: UIConfig.defaultUIConfig,
  theme: "Light",
  themeSetter: defaultSetter,
  configCustomDomainTheme: themeContext_configCustomDomainTheme,
};

var themeContext$1 = React.createContext(themeContext);

var make = themeContext$1.Provider;

var Parent = {
  make: make,
};

function useTheme() {
  return React.useContext(themeContext$1).theme;
}

function ThemeProvider(props) {
  var eventTheme = ThemeUtils.useThemeFromEvent();
  var isCurrentlyDark = MatchMedia.useMatchMedia(
    "(prefers-color-scheme: dark)",
  );
  var match = React.useState(function () {
    return "Light";
  });
  var setThemeBase = match[1];
  var theme =
    eventTheme !== undefined
      ? eventTheme === "Dark"
        ? "Dark"
        : "Light"
      : window !== window.parent
        ? "Light"
        : match[0];
  var setTheme = React.useCallback(
    function (value) {
      setThemeBase(function (param) {
        return value;
      });
    },
    [setThemeBase],
  );
  React.useEffect(
    function () {
      setTheme("Light");
    },
    [isCurrentlyDark],
  );
  var themeClassName;
  themeClassName = theme === "Light" ? "" : "dark";
  var configCustomDomainTheme = React.useCallback(function (uiConfg) {
    var dict = LogicUtils.getDictfromDict(
      LogicUtils.getDictFromJsonObject(uiConfg),
      "theme",
    );
    var value_primaryColor = LogicUtils.getString(
      dict,
      "primary_color",
      "#006DF9",
    );
    var value_primaryHover = LogicUtils.getString(
      dict,
      "primary_hover_color",
      "#005ED6",
    );
    var value_sidebar = LogicUtils.getString(dict, "sidebar_color", "#242F48");
    var value = {
      primaryColor: value_primaryColor,
      primaryHover: value_primaryHover,
      sidebar: value_sidebar,
    };
    window.appendStyle(value);
  }, []);
  var value = React.useMemo(
    function () {
      return {
        globalUIConfig: UIConfig.defaultUIConfig,
        theme: theme,
        themeSetter: setTheme,
        configCustomDomainTheme: configCustomDomainTheme,
      };
    },
    [theme, setTheme],
  );
  React.useEffect(function () {
    if (theme === "Dark") {
      setTheme("Light");
    }
  }, []);
  return React.createElement(make, {
    value: value,
    children: React.createElement(
      "div",
      {
        className: themeClassName,
      },
      React.createElement(
        "div",
        {
          className:
            "bg-jp-gray-100 dark:bg-jp-gray-darkgray_background text-gray-700 dark:text-gray-200 red:bg-red",
        },
        props.children,
      ),
    ),
  });
}

var defaultGlobalConfig = {
  primaryColor: "#006DF9",
  primaryHover: "#005ED6",
  sidebar: "#242F48",
};

var make$1 = ThemeProvider;

export {
  defaultSetter,
  defaultGlobalConfig,
  themeContext$1 as themeContext,
  Parent,
  useTheme,
  make$1 as make,
};
/* themeContext Not a pure module */
