// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../components/custom-icons/GatewayIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";
import * as GlobalProvider from "../../entryPoints/Provider/GlobalProvider.bs.js";
import * as SetupConnector from "../Home/CommonConnectorFlow/SetupConnector.bs.js";
import * as EnumVariantHook from "../Hooks/EnumVariantHook.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as QuickStartUtils from "../Home/QuickStart/QuickStartUtils.bs.js";
import * as ConnectorPreview from "../Connectors/ConnectorPreview.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as QuickStartUIUtils from "../Home/QuickStart/QuickStartUIUtils.bs.js";
import * as HSSelfServeSidebar from "../Helpers/HSSelfServeSidebar.bs.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";
import * as ProdOnboardingUIUtils from "../SelfServe/HSwitchProdOnboarding/ProdOnboardingUIUtils.bs.js";
import * as StripePlusPaypalUtils from "./StripePlusPaypalUtils.bs.js";
import * as StripePlusPaypalUIUtils from "./StripePlusPaypalUIUtils.bs.js";

var steps = ["STRIPE_CONFIGURE", "PAYPAL_CONFIGURE", "TEST_PAYMENT"];

function StripePlusPaypal(props) {
  var enumDetails = Recoil.useRecoilValue(HyperswitchAtom.enumVariantAtom);
  var enums = QuickStartUtils.getTypedValueFromDict(
    LogicUtils.safeParse(enumDetails),
  );
  var getEnumDetails = EnumVariantHook.useFetchEnumDetails();
  var match = React.useState(function () {
    return {
      TAG: "Processors",
      _0: "STRIPE",
    };
  });
  var setSelectedConnector = match[1];
  var selectedConnector = match[0];
  var match$1 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$1[1];
  var match$2 = React.useState(function () {
    return {};
  });
  var setInitialValues = match$2[1];
  var initialValues = match$2[0];
  var match$3 = React.useState(function () {
    return "Configure_keys";
  });
  var setConnectorConfigureState = match$3[1];
  var match$4 = React.useState(function () {
    return "STRIPE_CONFIGURE";
  });
  var setStepInView = match$4[1];
  var stepInView = match$4[0];
  var match$5 = React.useContext(GlobalProvider.defaultContext);
  var setDashboardPageState = match$5.setDashboardPageState;
  var match$6 = React.useState(function () {
    return "Normal";
  });
  var buttonState = match$6[0];
  var connectorName = ConnectorUtils.getConnectorNameString(selectedConnector);
  var activeBusinessProfile = MerchantAccountUtils.getValueFromBusinessProfile(
    Recoil.useRecoilValue(HyperswitchAtom.businessProfilesAtom),
  );
  var naviagteToHome = function (param) {
    setDashboardPageState(function (param) {
      return "HOME";
    });
    RescriptReactRouter.replace(GlobalVars.appendDashboardPath("/home"));
  };
  var handleNavigation = async function (forward) {
    if (
      selectedConnector.TAG === "Processors" &&
      selectedConnector._0 === "STRIPE"
    ) {
      if (enums.paypalConnected.processorID.length === 0) {
        setSelectedConnector(function (param) {
          return {
            TAG: "Processors",
            _0: "PAYPAL",
          };
        });
        setConnectorConfigureState(function (param) {
          return "Configure_keys";
        });
        setInitialValues(function (param) {
          return {};
        });
        return setStepInView(function (prev) {
          switch (prev) {
            case "STRIPE_CONFIGURE":
              if (forward) {
                return "PAYPAL_CONFIGURE";
              } else {
                return "STRIPE_CONFIGURE";
              }
            case "PAYPAL_CONFIGURE":
              if (forward) {
                return "TEST_PAYMENT";
              } else {
                return "STRIPE_CONFIGURE";
              }
            case "TEST_PAYMENT":
              if (forward) {
                return "COMPLETED_STRIPE_PAYPAL";
              } else {
                return "PAYPAL_CONFIGURE";
              }
            case "COMPLETED_STRIPE_PAYPAL":
              if (forward) {
                return "COMPLETED_STRIPE_PAYPAL";
              } else {
                return "TEST_PAYMENT";
              }
          }
        });
      } else {
        return;
      }
    }
    return setStepInView(function (param) {
      return "TEST_PAYMENT";
    });
  };
  var setPageState = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var enums = QuickStartUtils.getTypedValueFromDict(
        Core__Option.getOr(
          Caml_option.nullable_to_opt(
            await getEnumDetails(QuickStartUtils.quickStartEnumIntialArray),
          ),
          {},
        ),
      );
      var currentPending = steps.find(function (step) {
        return StripePlusPaypalUtils.enumToValueMapper(step, enums) === false;
      });
      if (currentPending !== undefined) {
        if (currentPending === "PAYPAL_CONFIGURE") {
          setSelectedConnector(function (param) {
            return {
              TAG: "Processors",
              _0: "PAYPAL",
            };
          });
        }
        setStepInView(function (param) {
          return currentPending;
        });
      } else {
        setStepInView(function (param) {
          return "COMPLETED_STRIPE_PAYPAL";
        });
      }
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      return setScreenState(function (param) {
        return {
          TAG: "Error",
          _0: "",
        };
      });
    }
  };
  React.useEffect(function () {
    setPageState();
  }, []);
  React.useEffect(
    function () {
      var defaultJsonOnNewConnector = Object.fromEntries([
        ["profile_id", activeBusinessProfile.profile_id],
      ]);
      setInitialValues(function (param) {
        return defaultJsonOnNewConnector;
      });
    },
    [activeBusinessProfile.profile_id, connectorName],
  );
  var tmp;
  var exit = 0;
  switch (stepInView) {
    case "STRIPE_CONFIGURE":
    case "PAYPAL_CONFIGURE":
      exit = 1;
      break;
    case "TEST_PAYMENT":
      tmp = React.createElement(StripePlusPaypalUIUtils.TestPayment.make, {
        setStepInView: setStepInView,
      });
      break;
    case "COMPLETED_STRIPE_PAYPAL":
      tmp = React.createElement(
        "div",
        {
          className: "bg-white rounded h-40-rem",
        },
        React.createElement(
          ProdOnboardingUIUtils.BasicAccountSetupSuccessfulPage.make,
          {
            iconName: "account-setup-completed",
            statusText: "Setup Stripe+Paypal Sandbox Setup Completed",
            buttonText: "Go To Home",
            buttonOnClick: naviagteToHome,
            customWidth: "w-30-rem text-center",
          },
        ),
      );
      break;
  }
  if (exit === 1) {
    switch (match$3[0]) {
      case "Select_processor":
      case "Select_configuration_type":
        tmp = null;
        break;
      case "Configure_keys":
        tmp = React.createElement(SetupConnector.ConfigureProcessor.make, {
          selectedConnector: selectedConnector,
          initialValues: initialValues,
          setInitialValues: setInitialValues,
          setConnectorConfigureState: setConnectorConfigureState,
          isBackButtonVisible: false,
        });
        break;
      case "Setup_payment_methods":
        tmp = React.createElement(
          StripePlusPaypalUIUtils.SelectPaymentMethods.make,
          {
            selectedConnector: selectedConnector,
            initialValues: initialValues,
            setInitialValues: setInitialValues,
            setConnectorConfigureState: setConnectorConfigureState,
            setButtonState: match$6[1],
            buttonState: buttonState,
          },
        );
        break;
      case "Summary":
        tmp = React.createElement(QuickStartUIUtils.BaseComponent.make, {
          children: React.createElement(
            ConnectorPreview.ConnectorSummaryGrid.make,
            {
              connectorInfo: ConnectorListMapper.getProcessorPayloadType(
                LogicUtils.getDictFromJsonObject(initialValues),
              ),
              connector: connectorName,
              isPayoutFlow: false,
              setScreenState: function (param) {},
            },
          ),
          headerText: LogicUtils.capitalizeString(connectorName),
          nextButton: Caml_option.some(
            React.createElement(Button.make, {
              buttonState: buttonState,
              text: "Continue & Proceed",
              buttonType: "Primary",
              buttonSize: "Small",
              onClick: function (param) {
                handleNavigation(true);
              },
              customButtonStyle: "rounded-md",
            }),
          ),
          customIcon: Caml_option.some(
            React.createElement(GatewayIcon.make, {
              gateway: connectorName.toUpperCase(),
              className: "w-6 h-6 rounded-md",
            }),
          ),
          customCss: "show-scrollbar",
        });
        break;
    }
  }
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "flex h-full bg-blue-background_blue",
        },
        React.createElement(HSSelfServeSidebar.make, {
          heading: "Setup Stripe Plus Paypal",
          sidebarOptions:
            StripePlusPaypalUtils.getSidebarOptionsForStripePayalIntegration(
              enumDetails,
              stepInView,
            ),
        }),
        React.createElement(
          "div",
          {
            className: "flex-1 flex flex-col items-center justify-center ml-12",
          },
          tmp,
        ),
      ),
    ),
    screenState: match$1[0],
    sectionHeight: "!h-screen !w-full",
  });
}

var make = StripePlusPaypal;

export { steps, make };
/* react Not a pure module */
