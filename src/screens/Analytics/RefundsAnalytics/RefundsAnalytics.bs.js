// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as Analytics from "../Analytics.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSAnalyticsUtils from "../HSAnalyticsUtils.bs.js";
import * as PageLoaderWrapper from "../../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RefundsAnalyticsEntity from "./RefundsAnalyticsEntity.bs.js";

function RefundsAnalytics(props) {
  var getURL = APIUtils.useGetURL();
  var match = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return [];
  });
  var setMetrics = match$1[1];
  var metrics = match$1[0];
  var match$2 = React.useState(function () {
    return [];
  });
  var setDimensions = match$2[1];
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var loadInfo = async function () {
    try {
      var infoUrl = getURL(
        "ANALYTICS_REFUNDS",
        "Get",
        Caml_option.some(RefundsAnalyticsEntity.domain),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var infoDetails = await fetchDetails(infoUrl);
      setMetrics(function (param) {
        return LogicUtils.getArrayFromDict(
          LogicUtils.getDictFromJsonObject(infoDetails),
          "metrics",
          [],
        );
      });
      setDimensions(function (param) {
        return LogicUtils.getArrayFromDict(
          LogicUtils.getDictFromJsonObject(infoDetails),
          "dimensions",
          [],
        );
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  var getRefundDetails = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var refundUrl = getURL(
        "REFUNDS",
        "Post",
        "refund-post",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = {};
      body["limit"] = 100;
      var refundDetails = await updateDetails(
        refundUrl,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var data = LogicUtils.getArrayFromDict(
        LogicUtils.getDictFromJsonObject(refundDetails),
        "data",
        [],
      );
      if (data.length < 1) {
        return setScreenState(function (param) {
          return "Custom";
        });
      } else {
        return await loadInfo();
      }
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  React.useEffect(function () {
    getRefundDetails();
  }, []);
  var tabKeys = HSAnalyticsUtils.getStringListFromArrayDict(match$2[0]);
  var tabValues = tabKeys.map(function (key, index) {
    return {
      title: LogicUtils.snakeToTitle(key),
      value: key,
      isRemovable: index > 2,
    };
  });
  var title = "Refunds Analytics";
  var subTitle =
    "Uncover patterns and drive business performance through data-driven insights with refund analytics";
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      JsxPPXReactSupportU.createElementWithKey(
        "RefundsAnalytics",
        Analytics.make,
        {
          pageTitle: title,
          pageSubTitle: subTitle,
          startTimeFilterKey: HSAnalyticsUtils.startTimeFilterKey,
          endTimeFilterKey: HSAnalyticsUtils.endTimeFilterKey,
          chartEntity: {
            default: RefundsAnalyticsEntity.chartEntity(tabKeys),
          },
          defaultSort: "total_volume",
          tabKeys: tabKeys,
          tabValues: tabValues,
          initialFilters: HSAnalyticsUtils.initialFilterFields,
          initialFixedFilters: HSAnalyticsUtils.initialFixedFilterFields,
          options: HSAnalyticsUtils.options,
          getTable: RefundsAnalyticsEntity.getRefundTable,
          colMapper: RefundsAnalyticsEntity.colMapper,
          tableEntity: RefundsAnalyticsEntity.refundTableEntity(),
          deltaMetrics: HSAnalyticsUtils.getStringListFromArrayDict(metrics),
          deltaArray: [],
          singleStatEntity: RefundsAnalyticsEntity.getSingleStatEntity(metrics),
          filterUri:
            window._env_.apiBaseUrl +
            "/analytics/v1/filters/" +
            RefundsAnalyticsEntity.domain,
          tableUpdatedHeading: RefundsAnalyticsEntity.getUpdatedHeading,
          tableGlobalFilter: HSAnalyticsUtils.filterByData,
          moduleName: "Refunds",
          generateReportType: "REFUND_REPORT",
        },
      ),
    ),
    screenState: match[0],
    customUI: Caml_option.some(
      React.createElement(HSAnalyticsUtils.NoData.make, {
        title: title,
        subTitle: subTitle,
      }),
    ),
  });
}

var make = RefundsAnalytics;

export { make };
/* react Not a pure module */
