// Generated by ReScript, PLEASE EDIT WITH CARE

import * as DayJs from "../../libraries/DayJs.bs.js";
import Dayjs from "dayjs";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as ArrayUtils from "../../utils/ArrayUtils.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as NoDataFound from "../../components/NoDataFound.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as TimeZoneHook from "../../hooks/TimeZoneHook.bs.js";
import * as DateTimeUtils from "../../utils/DateTimeUtils.bs.js";
import * as AddDataAttributes from "../../components/AddDataAttributes.bs.js";

var startTimeFilterKey = "startTime";

var endTimeFilterKey = "endTime";

function getDateCreatedObject() {
  var currentDate = Date.now();
  var filterCreatedDict = {};
  var currentTimestamp = new Date(currentDate).toISOString();
  filterCreatedDict[endTimeFilterKey] = TimeZoneHook.formattedISOString(
    currentTimestamp,
    "YYYY-MM-DDTHH:mm:[00][Z]",
  );
  var presentDayInString = new Date(currentDate);
  var prevTime = presentDayInString.setHours(0.0, 0.0, 0.0);
  var defaultStartTime = TimeZoneHook.formattedISOString(
    new Date(prevTime).toISOString(),
    "YYYY-MM-DDTHH:mm:[00][Z]",
  );
  filterCreatedDict[startTimeFilterKey] = defaultStartTime;
  filterCreatedDict["opt"] = "today";
  return filterCreatedDict;
}

function getFilterRequestBody(
  granularityOpt,
  groupByNamesOpt,
  filterOpt,
  metricsOpt,
  deltaOpt,
  prefixOpt,
  distributionValuesOpt,
  startDateTime,
  endDateTime,
  cardinalityOpt,
  modeOpt,
  customFilterOpt,
  sourceOpt,
  param,
) {
  var granularity =
    granularityOpt !== undefined
      ? Caml_option.valFromOption(granularityOpt)
      : undefined;
  var groupByNames =
    groupByNamesOpt !== undefined
      ? Caml_option.valFromOption(groupByNamesOpt)
      : undefined;
  var filter =
    filterOpt !== undefined ? Caml_option.valFromOption(filterOpt) : undefined;
  var metrics =
    metricsOpt !== undefined
      ? Caml_option.valFromOption(metricsOpt)
      : undefined;
  var delta = deltaOpt !== undefined ? deltaOpt : true;
  var prefix =
    prefixOpt !== undefined ? Caml_option.valFromOption(prefixOpt) : undefined;
  var distributionValues =
    distributionValuesOpt !== undefined
      ? Caml_option.valFromOption(distributionValuesOpt)
      : undefined;
  var cardinality =
    cardinalityOpt !== undefined
      ? Caml_option.valFromOption(cardinalityOpt)
      : undefined;
  var mode =
    modeOpt !== undefined ? Caml_option.valFromOption(modeOpt) : undefined;
  var customFilter = customFilterOpt !== undefined ? customFilterOpt : "";
  var source = sourceOpt !== undefined ? sourceOpt : "BATCH";
  var body = {};
  var timeRange = {};
  var timeSeries = {};
  timeRange["startTime"] = startDateTime;
  timeRange["endTime"] = endDateTime;
  body["timeRange"] = timeRange;
  if (groupByNames !== undefined && groupByNames.length !== 0) {
    body["groupByNames"] = Belt_Array.keepMap(
      ArrayUtils.getUniqueStrArray(groupByNames),
      function (item) {
        return item;
      },
    );
  }
  if (filter !== undefined && !LogicUtils.checkEmptyJson(filter)) {
    body["filters"] = filter;
  }
  if (
    distributionValues !== undefined &&
    !LogicUtils.checkEmptyJson(distributionValues)
  ) {
    body["distribution"] = distributionValues;
  }
  if (LogicUtils.isNonEmptyString(customFilter)) {
    body["customFilter"] = customFilter;
  }
  if (granularity !== undefined) {
    timeSeries["granularity"] = granularity;
    body["timeSeries"] = timeSeries;
  }
  if (cardinality !== undefined) {
    body["cardinality"] = cardinality;
  }
  if (mode !== undefined) {
    body["mode"] = mode;
  }
  if (prefix !== undefined) {
    body["prefix"] = prefix;
  }
  body["source"] = source;
  if (metrics !== undefined && metrics.length !== 0) {
    body["metrics"] = Belt_Array.keepMap(
      ArrayUtils.getUniqueStrArray(metrics),
      function (item) {
        return item;
      },
    );
  }
  if (delta) {
    body["delta"] = true;
  }
  return body;
}

function filterBody(filterBodyEntity) {
  var match;
  try {
    match = [
      Dayjs(filterBodyEntity.startTime)
        .subtract(1, "day")
        .toDate()
        .toISOString(),
      Dayjs(filterBodyEntity.endTime).add(1, "day").toDate().toISOString(),
    ];
  } catch (exn) {
    match = [filterBodyEntity.startTime, filterBodyEntity.endTime];
  }
  return getFilterRequestBody(
    undefined,
    Caml_option.some(filterBodyEntity.groupByNames),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    match[0],
    match[1],
    undefined,
    undefined,
    undefined,
    filterBodyEntity.source,
    undefined,
  );
}

function deltaDate(fromTime, _toTime, typeTime) {
  var nowtime = Dayjs(new Date().toString());
  var dateTimeFormat = "YYYY-MM-DDTHH:mm:ss[Z]";
  if (typeTime === "last7") {
    var last7FromTime = Dayjs(fromTime).subtract(7, "day");
    var last7ToTime = Dayjs(fromTime).subtract(1, "day");
    return [
      Object.fromEntries([
        ["fromTime", last7FromTime.format(dateTimeFormat)],
        ["toTime", last7ToTime.format(dateTimeFormat)],
      ]),
    ];
  }
  if (typeTime === "yesterday") {
    var yesterdayFromTime = DayJs.getDayJsForJsDate(
      new Date(nowtime.subtract(1, "day").toDate().setHours(0.0, 0.0, 0.0)),
    );
    var yesterdayToTime = DayJs.getDayJsForJsDate(
      new Date(nowtime.subtract(1, "day").toDate().setHours(23.0, 59.0, 59.0)),
    );
    return [
      Object.fromEntries([
        ["fromTime", yesterdayFromTime.format(dateTimeFormat)],
        ["toTime", yesterdayToTime.format(dateTimeFormat)],
      ]),
    ];
  }
  if (typeTime === "currentmonth") {
    var currentMonth = new Date(new Date().setDate(1.0));
    var currentMonthFromTime = Dayjs(
      new Date(currentMonth.setHours(0.0, 0.0, 0.0)).toString(),
    );
    return [
      Object.fromEntries([
        ["fromTime", currentMonthFromTime.format(dateTimeFormat)],
        ["toTime", nowtime.format(dateTimeFormat)],
      ]),
    ];
  }
  if (typeTime !== "currentweek") {
    return [{}];
  }
  var currentWeekFromTime = DateTimeUtils.getStartOfWeek(new Date(), "Monday");
  var currentWeekToTime = DayJs.getDayJsForJsDate(new Date());
  return [
    Object.fromEntries([
      ["fromTime", currentWeekFromTime.format(dateTimeFormat)],
      ["toTime", currentWeekToTime.format(dateTimeFormat)],
    ]),
  ];
}

function generateDateArray(startTime, endTime, deltaPrefixArr) {
  return deltaPrefixArr.map(function (x) {
    return deltaDate(startTime, endTime, x);
  });
}

function generatePayload(
  startTime,
  endTime,
  metrics,
  delta,
  modeOpt,
  groupByNames,
  prefix,
  source,
  filters,
  customFilter,
) {
  var mode =
    modeOpt !== undefined ? Caml_option.valFromOption(modeOpt) : undefined;
  var timeArr = Object.fromEntries([
    ["startTime", startTime],
    ["endTime", endTime],
  ]);
  var newDict =
    groupByNames !== undefined
      ? Object.fromEntries([
          ["timeRange", timeArr],
          ["metrics", LogicUtils.getJsonFromArrayOfString(metrics)],
          ["groupByNames", LogicUtils.getJsonFromArrayOfString(groupByNames)],
          ["prefix", prefix],
          ["source", source],
          ["delta", delta],
        ])
      : Object.fromEntries([
          ["timeRange", timeArr],
          ["metrics", LogicUtils.getJsonFromArrayOfString(metrics)],
          ["prefix", prefix],
          ["source", source],
          ["delta", delta],
        ]);
  if (mode !== undefined) {
    newDict["mode"] = mode;
  }
  if (LogicUtils.isNonEmptyString(customFilter)) {
    newDict["customFilter"] = customFilter;
  }
  if (filters !== undefined && !LogicUtils.checkEmptyJson(filters)) {
    newDict["filters"] = filters;
  }
  return newDict;
}

function generatedeltaTablePayload(
  deltaDateArr,
  metrics,
  groupByNames,
  source,
  mode,
  deltaPrefixArr,
  filters,
  showDeltaMetricsOpt,
  customFilter,
) {
  var showDeltaMetrics =
    showDeltaMetricsOpt !== undefined ? showDeltaMetricsOpt : false;
  var dictOfDates = deltaDateArr.flat();
  return Belt_Array.zipBy(dictOfDates, deltaPrefixArr, function (x, y) {
    return generatePayload(
      Core__Option.getOr(x["fromTime"], ""),
      Core__Option.getOr(x["toTime"], ""),
      metrics,
      showDeltaMetrics,
      Caml_option.some(mode),
      groupByNames,
      y,
      source,
      filters,
      customFilter,
    );
  });
}

function generateTablePayload(
  startTimeFromUrl,
  endTimeFromUrl,
  filterValueFromUrl,
  currenltySelectedTab,
  tableMetrics,
  distributionArray,
  deltaMetrics,
  deltaPrefixArr,
  isIndustry,
  mode,
  customFilter,
  showDeltaMetricsOpt,
  param,
  sourceOpt,
  param$1,
) {
  var showDeltaMetrics =
    showDeltaMetricsOpt !== undefined ? showDeltaMetricsOpt : false;
  var source = sourceOpt !== undefined ? sourceOpt : "BATCH";
  var deltaDateArr =
    deltaMetrics.length === 0
      ? []
      : generateDateArray(startTimeFromUrl, endTimeFromUrl, deltaPrefixArr);
  var deltaPayload = generatedeltaTablePayload(
    deltaDateArr,
    deltaMetrics,
    currenltySelectedTab,
    source,
    mode,
    deltaPrefixArr,
    filterValueFromUrl,
    showDeltaMetrics,
    customFilter,
  );
  var tableBodyWithNonDeltaMetrix =
    tableMetrics.length > 0
      ? [
          getFilterRequestBody(
            undefined,
            Caml_option.some(currenltySelectedTab),
            Caml_option.some(filterValueFromUrl),
            Caml_option.some(tableMetrics),
            showDeltaMetrics,
            undefined,
            undefined,
            startTimeFromUrl,
            endTimeFromUrl,
            undefined,
            Caml_option.some(mode),
            customFilter,
            source,
            undefined,
          ),
        ]
      : [];
  var tableBodyWithDeltaMetrix =
    deltaMetrics.length > 0
      ? [
          getFilterRequestBody(
            undefined,
            Caml_option.some(currenltySelectedTab),
            Caml_option.some(filterValueFromUrl),
            Caml_option.some(deltaMetrics),
            showDeltaMetrics,
            undefined,
            undefined,
            startTimeFromUrl,
            endTimeFromUrl,
            undefined,
            Caml_option.some(mode),
            customFilter,
            source,
            undefined,
          ),
        ]
      : [];
  var tableIndustryPayload = isIndustry
    ? [
        getFilterRequestBody(
          undefined,
          Caml_option.some(currenltySelectedTab),
          Caml_option.some(filterValueFromUrl),
          Caml_option.some(deltaMetrics),
          showDeltaMetrics,
          "industry",
          undefined,
          startTimeFromUrl,
          endTimeFromUrl,
          undefined,
          Caml_option.some(mode),
          customFilter,
          source,
          undefined,
        ),
      ]
    : [];
  var tableBodyValues = tableBodyWithNonDeltaMetrix.concat(
    tableBodyWithDeltaMetrix,
    tableIndustryPayload,
  );
  var distributionPayload =
    distributionArray !== undefined
      ? distributionArray.map(function (arr) {
          return getFilterRequestBody(
            undefined,
            Caml_option.some(currenltySelectedTab),
            Caml_option.some(filterValueFromUrl),
            undefined,
            false,
            undefined,
            Caml_option.some(arr),
            startTimeFromUrl,
            endTimeFromUrl,
            undefined,
            Caml_option.some(mode),
            customFilter,
            source,
            undefined,
          );
        })
      : [];
  return tableBodyValues
    .concat(deltaPayload, distributionPayload)
    .map(function (prim) {
      return prim;
    });
}

function singlestatDeltaTooltipFormat(value, timeRanges) {
  return function (statType) {
    var timeText =
      LogicUtils.isNonEmptyString(timeRanges.fromTime) &&
      LogicUtils.isNonEmptyString(timeRanges.toTime)
        ? "\n " +
          TimeZoneHook.formattedISOString(
            DateTimeUtils.utcToIST(new Date(timeRanges.fromTime)),
            "YYYY-MM-DD HH:mm:ss",
          ) +
          "- \n " +
          TimeZoneHook.formattedISOString(
            DateTimeUtils.utcToIST(new Date(timeRanges.toTime)),
            "YYYY-MM-DD HH:mm:ss",
          )
        : "";
    var tooltipComp;
    if (LogicUtils.isNonEmptyString(timeText)) {
      if (statType === "Latency" || statType === "NegativeRate") {
        if (value > 0) {
          var text = "Increased by ";
          var value$1 = Math.abs(value).toString() + "%";
          tooltipComp = React.createElement(
            "div",
            {
              className: "whitespace-pre-line",
            },
            React.createElement(AddDataAttributes.make, {
              attributes: [["data-text", text]],
              children: React.createElement("div", undefined, text),
            }),
            React.createElement(AddDataAttributes.make, {
              attributes: [["data-numeric", value$1]],
              children: React.createElement(
                "div",
                {
                  className: "text-red-500 text-base font-bold font-fira-code",
                },
                value$1,
              ),
            }),
            "comparing to " + timeText,
          );
        } else if (value < 0) {
          var text$1 = "Decreased by ";
          var value$2 = value.toString() + "%";
          tooltipComp = React.createElement(
            "div",
            {
              className: "whitespace-pre-line",
            },
            React.createElement(AddDataAttributes.make, {
              attributes: [["data-text", text$1]],
              children: React.createElement("div", undefined, text$1),
            }),
            React.createElement(AddDataAttributes.make, {
              attributes: [["data-numeric", value$2]],
              children: React.createElement(
                "div",
                {
                  className:
                    "text-status-green text-base font-bold font-fira-code",
                },
                value$2,
              ),
            }),
            "comparing to " + timeText,
          );
        } else {
          var text$2 = "Changed by ";
          var value$3 = value.toString() + "%";
          tooltipComp = React.createElement(
            "div",
            {
              className: "whitespace-pre-line",
            },
            React.createElement(AddDataAttributes.make, {
              attributes: [["data-text", text$2]],
              children: React.createElement("div", undefined, text$2),
            }),
            React.createElement(AddDataAttributes.make, {
              attributes: [["data-numeric", value$3]],
              children: React.createElement(
                "div",
                {
                  className:
                    "text-sankey_labels text-base font-bold font-fira-code",
                },
                value$3,
              ),
            }),
            "comparing to " + timeText,
          );
        }
      } else if (value < 0) {
        var text$3 = "Decreased by ";
        var value$4 = Math.abs(value).toString() + "%";
        tooltipComp = React.createElement(
          "div",
          {
            className: "whitespace-pre-line",
          },
          React.createElement(AddDataAttributes.make, {
            attributes: [["data-text", text$3]],
            children: React.createElement("div", undefined, text$3),
          }),
          React.createElement(AddDataAttributes.make, {
            attributes: [["data-numeric", value$4]],
            children: React.createElement(
              "div",
              {
                className: "text-red-500 text-base font-bold font-fira-code",
              },
              value$4,
            ),
          }),
          "comparing to " + timeText,
        );
      } else if (value > 0) {
        var text$4 = "Increased by ";
        var value$5 = value.toString() + "%";
        tooltipComp = React.createElement(
          "div",
          {
            className: "whitespace-pre-line",
          },
          React.createElement(AddDataAttributes.make, {
            attributes: [["data-text", text$4]],
            children: React.createElement("div", undefined, text$4),
          }),
          React.createElement(AddDataAttributes.make, {
            attributes: [["data-numeric", value$5]],
            children: React.createElement(
              "div",
              {
                className:
                  "text-status-green text-base font-bold font-fira-code",
              },
              value$5,
            ),
          }),
          "comparing to " + timeText,
        );
      } else {
        var text$5 = "Changed by ";
        var value$6 = value.toString() + "%";
        tooltipComp = React.createElement(
          "div",
          {
            className: "whitespace-pre-line",
          },
          React.createElement(AddDataAttributes.make, {
            attributes: [["data-text", text$5]],
            children: React.createElement("div", undefined, text$5),
          }),
          React.createElement(AddDataAttributes.make, {
            attributes: [["data-numeric", value$6]],
            children: React.createElement(
              "div",
              {
                className:
                  "text-sankey_labels text-base font-bold font-fira-code",
              },
              value$6,
            ),
          }),
          "comparing to " + timeText,
        );
      }
    } else {
      tooltipComp = "";
    }
    return React.createElement(
      "div",
      {
        className: "p-2",
      },
      tooltipComp,
    );
  };
}

function sumOfArr(arr) {
  return Core__Array.reduce(arr, 0, function (acc, value) {
    return (acc + value) | 0;
  });
}

function sumOfArrFloat(arr) {
  return Core__Array.reduce(arr, 0, function (acc, value) {
    return acc + value;
  });
}

function AnalyticsUtils$NoDataFoundPage(props) {
  var filterOnClick = function () {
    var element = document.getElementsByClassName("showFilterButton")[0];
    if (element === undefined) {
      return;
    }
    var nodeElement = element.childNodes[0];
    if (nodeElement !== undefined) {
      Caml_option.valFromOption(nodeElement).click();
      return;
    }
  };
  var dateRangeOnClick = function () {
    var element = document.getElementsByClassName("daterangSelection")[0];
    if (element === undefined) {
      return;
    }
    var nodeElement = element.childNodes[0];
    if (nodeElement === undefined) {
      return;
    }
    var nodeElement$1 = Caml_option.valFromOption(nodeElement).childNodes[0];
    if (nodeElement$1 !== undefined) {
      Caml_option.valFromOption(nodeElement$1).click();
      return;
    }
  };
  return React.createElement(NoDataFound.make, {
    message: "Reduce the Range or narrow down the result by applying filter",
    renderType: "LoadError",
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "flex gap-4 mt-5 noDataFoundPage",
        },
        React.createElement(Button.make, {
          text: "Apply Filters",
          buttonType: "Pagination",
          onClick: function (param) {
            filterOnClick();
          },
        }),
        React.createElement(Button.make, {
          text: "Reduce DateRange",
          buttonType: "Pagination",
          onClick: function (param) {
            dateRangeOnClick();
          },
        }),
      ),
    ),
  });
}

var NoDataFoundPage = {
  make: AnalyticsUtils$NoDataFoundPage,
};

var RedirectToOrderTableModal = {};

function AnalyticsUtils$NoDataFound(props) {
  return React.createElement(
    "div",
    {
      className: "w-full flex flex-col items-center m-auto py-4",
    },
    React.createElement(
      "div",
      {
        className: "font-normal mt-2",
      },
      "No Data Found",
    ),
    React.createElement(
      "div",
      {
        className: "text-gray-400 mt-2 max-w-[260px] text-center",
      },
      "We couldn’t fetch any data for this. Please refresh this page.",
    ),
  );
}

var NoDataFound$1 = {
  make: AnalyticsUtils$NoDataFound,
};

var optFilterKey = "opt";

export {
  startTimeFilterKey,
  endTimeFilterKey,
  optFilterKey,
  getDateCreatedObject,
  getFilterRequestBody,
  filterBody,
  deltaDate,
  generateDateArray,
  generatePayload,
  generatedeltaTablePayload,
  generateTablePayload,
  singlestatDeltaTooltipFormat,
  sumOfArr,
  sumOfArrFloat,
  NoDataFoundPage,
  RedirectToOrderTableModal,
  NoDataFound$1 as NoDataFound,
};
/* DayJs Not a pure module */
