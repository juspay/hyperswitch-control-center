// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Loader from "../../components/Loader.bs.js";
import * as Recoil from "../../libraries/Recoil.bs.js";
import * as Recoil$1 from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as MatchMedia from "../../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as DynamicTabs from "../../components/DynamicTabs.bs.js";
import * as LoadedTable from "../../components/LoadedTable.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DynamicChart from "../../components/DynamicChart.bs.js";
import * as FramerMotion from "../../libraries/FramerMotion.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as DynamicFilter from "../../components/DynamicFilter.bs.js";
import * as FilterContext from "../../context/FilterContext.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as AnalyticsAtoms from "./AnalyticsAtoms.bs.js";
import * as AnalyticsTypes from "./AnalyticsTypes.bs.js";
import * as AnalyticsUtils from "./AnalyticsUtils.bs.js";
import * as GenerateReport from "../GenerateReports/GenerateReport.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as HSAnalyticsUtils from "./HSAnalyticsUtils.bs.js";
import * as DynamicSingleStat from "../../components/DynamicSingleStat.bs.js";
import * as DynamicTableUtils from "../../components/DynamicTableUtils.bs.js";
import * as HSwitchRemoteFilter from "../HSwitchRemoteFilter.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";

function Analytics$BaseTableComponent(props) {
  var tableEntity = props.tableEntity;
  var newAllCols = props.newAllCols;
  var newDefaultCols = props.newDefaultCols;
  var tableData = props.tableData;
  var match = React.useState(function () {
    return 0;
  });
  var match$1 = React.useState(function () {
    return 1;
  });
  var setCounter = match$1[1];
  var refetch = React.useCallback(
    function () {
      setCounter(function (p) {
        return (p + 1) | 0;
      });
    },
    [setCounter],
  );
  var visibleColumns = Recoil$1.useRecoilValue(
    props.transactionTableDefaultCols,
  );
  var defaultSort_key = props.defaultSort;
  var defaultSort = {
    key: defaultSort_key,
    order: "INC",
  };
  var modifiedTableEntity = React.useMemo(
    function () {
      var newrecord = Caml_obj.obj_dup(tableEntity);
      newrecord.allColumns = newAllCols;
      newrecord.defaultColumns = newDefaultCols;
      return newrecord;
    },
    [tableEntity, newDefaultCols, newAllCols],
  );
  var tableBorderClass =
    "border-collapse border border-jp-gray-940 border-solid border-2 rounded-md border-opacity-30 dark:border-jp-gray-dark_table_border_color dark:border-opacity-30 mt-7";
  return React.createElement(
    "div",
    {
      className: "flex flex-1 flex-col m-5",
    },
    React.createElement(DynamicTableUtils.RefetchContextProvider.make, {
      value: refetch,
      children: props.tableDataLoading
        ? React.createElement(
            DynamicTableUtils.TableDataLoadingIndicator.make,
            {
              showWithData: true,
            },
          )
        : React.createElement(
            "div",
            {
              className: "relative",
            },
            React.createElement(
              "div",
              {
                className:
                  "absolute font-bold text-xl bg-white w-full text-black text-opacity-75 dark:bg-jp-gray-950 dark:text-white dark:text-opacity-75",
              },
              "Payments Summary",
            ),
            React.createElement(LoadedTable.make, {
              visibleColumns: visibleColumns,
              defaultSort: defaultSort,
              title: "Summary Table",
              actualData: tableData,
              totalResults: tableData.length,
              resultsPerPage: 10,
              offset: match[0],
              setOffset: match[1],
              entity: modifiedTableEntity,
              currrentFetchCount: tableData.length,
              hideTitle: true,
              tableLocalFilter: false,
              tableheadingClass: tableBorderClass,
              tableBorderClass: tableBorderClass,
              tableDataBorderClass: tableBorderClass,
              isAnalyticsModule: true,
            }),
          ),
    }),
  );
}

var BaseTableComponent = {
  make: Analytics$BaseTableComponent,
};

function Analytics$TableWrapper(props) {
  var __formatData = props.formatData;
  var __distributionArray = props.distributionArray;
  var weeklyTableMetricsCols = props.weeklyTableMetricsCols;
  var moduleName = props.moduleName;
  var deltaArray = props.deltaArray;
  var deltaMetrics = props.deltaMetrics;
  var tableEntity = props.tableEntity;
  var getTable = props.getTable;
  var activeTab = props.activeTab;
  var filterKeys = props.filterKeys;
  var dateKeys = props.dateKeys;
  var distributionArray =
    __distributionArray !== undefined
      ? Caml_option.valFromOption(__distributionArray)
      : undefined;
  var formatData =
    __formatData !== undefined
      ? Caml_option.valFromOption(__formatData)
      : undefined;
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = match.globalUIConfig;
  var customFilter = Recoil$1.useRecoilValue(AnalyticsAtoms.customFilterAtom);
  var match$2 = React.useContext(FilterContext.filterContext);
  var filterValueJson = match$2.filterValueJson;
  var fetchDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match$3 = React.useState(function () {
    return false;
  });
  var getHeading = tableEntity.getHeading;
  var defaultColumns = tableEntity.defaultColumns;
  var setShowTable = match$3[1];
  var activeTabStr = Core__Option.getOr(activeTab, []).join("-");
  var endTimeFilterKey = dateKeys[1];
  var startTimeFilterKey = dateKeys[0];
  var match$4 = React.useState(function () {
    return true;
  });
  var setTableDataLoading = match$4[1];
  var match$5 = React.useState(function () {
    return [].map(function (prim) {
      return prim;
    });
  });
  var setTableData = match$5[1];
  var tableData = match$5[0];
  var getTopLevelFilter = React.useMemo(
    function () {
      return Object.fromEntries(
        Belt_Array.keepMap(Object.entries(filterValueJson), function (item) {
          var keyArr = item[0].split(".");
          var prefix = Core__Option.getOr(keyArr[0], "");
          if (prefix === moduleName && LogicUtils.isNonEmptyString(prefix)) {
            return;
          } else {
            return [prefix, item[1]];
          }
        }),
      );
    },
    [filterValueJson],
  );
  var allColumns = Core__Option.getOr(tableEntity.allColumns, []);
  var allFilterKeys = [startTimeFilterKey, endTimeFilterKey].concat(filterKeys);
  var topFiltersToSearchParam = React.useMemo(
    function () {
      return Belt_Array.keepMap(
        Object.entries(getTopLevelFilter),
        function (entry) {
          var key = entry[0];
          if (!allFilterKeys.includes(key)) {
            return;
          }
          var str = Core__JSON.Classify.classify(entry[1]);
          if (typeof str !== "object") {
            return;
          }
          switch (str.TAG) {
            case "String":
              return key + "=" + str._0;
            case "Number":
              return key + "=" + String(str._0);
            case "Array":
              return key + "=[" + String(str._0) + "]";
            default:
              return;
          }
        },
      ).join("&");
    },
    [getTopLevelFilter],
  );
  var filterValueFromUrl = React.useMemo(
    function () {
      return Object.fromEntries(
        Belt_Array.keepMap(
          Object.entries(getTopLevelFilter),
          function (entries) {
            var key = entries[0];
            if (filterKeys.includes(key)) {
              return [key, entries[1]];
            }
          },
        ),
      );
    },
    [topFiltersToSearchParam],
  );
  var startTimeFromUrl = React.useMemo(
    function () {
      return LogicUtils.getString(getTopLevelFilter, startTimeFilterKey, "");
    },
    [topFiltersToSearchParam],
  );
  var endTimeFromUrl = React.useMemo(
    function () {
      return LogicUtils.getString(getTopLevelFilter, endTimeFilterKey, "");
    },
    [topFiltersToSearchParam],
  );
  var parseData = function (json) {
    var data = LogicUtils.getDictFromJsonObject(json);
    return LogicUtils.getArrayFromJson(
      LogicUtils.getJsonObjectFromDict(data, "queryData"),
      [],
    );
  };
  var generateIDFromKeys = function (keys, dict) {
    return Core__Option.getOr(keys, [])
      .map(function (key) {
        return dict[key];
      })
      .join("");
  };
  var getWeeklyData = async function (data, cols) {
    var weeklyDateRange = HSwitchRemoteFilter.getDateFilteredObject(
      undefined,
      undefined,
    );
    var weeklyTableReqBody = AnalyticsUtils.generateTablePayload(
      weeklyDateRange.start_time,
      weeklyDateRange.end_time,
      filterValueFromUrl,
      activeTab,
      [],
      undefined,
      deltaMetrics,
      deltaArray,
      false,
      undefined,
      customFilter,
      true,
      moduleName,
      undefined,
      undefined,
    );
    Core__Promise.$$catch(
      fetchDetails(
        tableEntity.uri,
        weeklyTableReqBody,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      ).then(function (json) {
        setTableData(function (param) {
          var dataArr = parseData(data);
          var weeklyArr = parseData(json);
          return getTable(
            dataArr.map(function (item) {
              var dataDict = LogicUtils.getDictFromJsonObject(item);
              var dataKey = generateIDFromKeys(activeTab, dataDict);
              weeklyArr.forEach(function (newItem) {
                var weekklyDataDict = LogicUtils.getDictFromJsonObject(newItem);
                var weekklyDataKey = generateIDFromKeys(
                  activeTab,
                  weekklyDataDict,
                );
                if (dataKey === weekklyDataKey) {
                  cols.forEach(function (obj) {
                    var val = weekklyDataDict[obj.refKey];
                    if (val !== undefined) {
                      dataDict[obj.newKey] = val;
                      return;
                    }
                  });
                  return;
                }
              });
              return dataDict;
            }),
          ).map(function (prim) {
            return prim;
          });
        });
        setTableDataLoading(function (param) {
          return false;
        });
        setShowTable(function (param) {
          return true;
        });
      }),
      function (param) {
        setTableDataLoading(function (param) {
          return false;
        });
        return Promise.resolve();
      },
    );
  };
  React.useEffect(
    function () {
      setShowTable(function (param) {
        return false;
      });
      if (
        LogicUtils.isNonEmptyString(startTimeFromUrl) &&
        LogicUtils.isNonEmptyString(endTimeFromUrl)
      ) {
        var tableReqBody = HSAnalyticsUtils.generateTablePayload(
          startTimeFromUrl,
          endTimeFromUrl,
          filterValueFromUrl,
          activeTab,
          [],
          distributionArray,
          deltaMetrics,
          deltaArray,
          false,
          undefined,
          customFilter,
          true,
          moduleName,
          undefined,
          undefined,
        );
        Core__Promise.$$catch(
          fetchDetails(
            tableEntity.uri,
            tableReqBody,
            "Post",
            undefined,
            undefined,
            undefined,
            undefined,
          ).then(function (json) {
            if (weeklyTableMetricsCols !== undefined) {
              getWeeklyData(json, weeklyTableMetricsCols);
              return;
            }
            var data = LogicUtils.getDictFromJsonObject(json);
            var value = getTable(
              LogicUtils.getJsonObjectFromDict(data, "queryData"),
            ).map(function (prim) {
              return prim;
            });
            setTableData(function (param) {
              return value;
            });
            setTableDataLoading(function (param) {
              return false;
            });
            setShowTable(function (param) {
              return true;
            });
          }),
          function (param) {
            setTableDataLoading(function (param) {
              return false;
            });
            return Promise.resolve();
          },
        );
      }
    },
    [topFiltersToSearchParam, activeTabStr, customFilter],
  );
  var newDefaultCols = React.useMemo(
    function () {
      return Belt_Array.keepMap(
        Core__Option.getOr(activeTab, []),
        function (item) {
          return Belt_Array.keepMap(defaultColumns, function (columnItem) {
            var val = getHeading(columnItem);
            if (val.key === item) {
              return Caml_option.some(columnItem);
            }
          })[0];
        },
      ).concat(allColumns);
    },
    [activeTabStr],
  );
  var newAllCols = React.useMemo(
    function () {
      return Belt_Array.keepMap(defaultColumns, function (item) {
        var val = getHeading(item);
        if (Core__Option.getOr(activeTab, []).includes(val.key)) {
          return Caml_option.some(item);
        }
      }).concat(allColumns);
    },
    [activeTabStr],
  );
  var transactionTableDefaultCols = React.useMemo(
    function () {
      return Recoil.atom(
        moduleName + "DefaultCols" + activeTabStr,
        newDefaultCols,
      );
    },
    [newDefaultCols, moduleName + "DefaultCols" + activeTabStr],
  );
  var modifyData = function (data) {
    if (formatData !== undefined) {
      return formatData(data);
    } else {
      return data;
    }
  };
  if (match$3[0]) {
    return React.createElement(
      React.Fragment,
      {},
      React.createElement(
        "div",
        {
          className: "h-full -mx-4 overflow-scroll",
        },
        React.createElement(Form.make, {
          children: React.createElement(Analytics$BaseTableComponent, {
            filters: [startTimeFromUrl, endTimeFromUrl],
            tableData: modifyData(tableData),
            defaultSort: props.defaultSort,
            tableDataLoading: match$4[0],
            transactionTableDefaultCols: transactionTableDefaultCols,
            newDefaultCols: newDefaultCols,
            newAllCols: newAllCols,
            colMapper: props.colMapper,
            tableEntity: tableEntity,
            tableGlobalFilter: props.tableGlobalFilter,
            activeTab: Core__Option.getOr(activeTab, []),
          }),
        }),
      ),
      React.createElement(RenderIf.make, {
        condition: tableData.length > 0,
        children: React.createElement(
          "div",
          {
            className:
              "flex items-start " +
              match$1.border.borderColor.primaryNormal +
              " text-sm rounded-md gap-2 px-4 py-3",
          },
          React.createElement(Icon.make, {
            name: "info-vacent",
            size: 18,
            className: match$1.font.textColor.primaryNormal + " mt-1",
          }),
          "'NA' denotes those incomplete or failed payments with no assigned values for the corresponding parameters due to reasons like customer drop-offs, technical failures, etc.",
        ),
      }),
    );
  } else {
    return React.createElement(Loader.make, {});
  }
}

var TableWrapper = {
  make: Analytics$TableWrapper,
};

function Analytics$TabDetails(props) {
  var __formatData = props.formatData;
  var moduleName = props.moduleName;
  var tableEntity = props.tableEntity;
  var activeTab = props.activeTab;
  var chartEntity = props.chartEntity;
  var formatData =
    __formatData !== undefined
      ? Caml_option.valFromOption(__formatData)
      : undefined;
  var analyticsType = AnalyticsTypes.getAnalyticsType(moduleName);
  var id = Core__Array.reduce(
    Core__Option.getOr(activeTab, ["tab"]),
    "",
    function (acc, tabName) {
      return acc.concat(tabName);
    },
  );
  var isMobileView = MatchMedia.useMobileChecker();
  var wrapperClass = React.useMemo(
    function () {
      switch (analyticsType) {
        case "USER_JOURNEY":
        case "AUTHENTICATION":
          break;
        default:
          return "bg-white border rounded-lg p-8 mt-3 mb-7";
      }
      return "h-auto basis-full mt-4 " + (isMobileView ? "w-full" : "w-1/2");
    },
    [isMobileView],
  );
  var tabTitleMapper;
  var exit = 0;
  switch (analyticsType) {
    case "USER_JOURNEY":
    case "AUTHENTICATION":
      exit = 1;
      break;
    default:
      tabTitleMapper = {};
  }
  if (exit === 1) {
    tabTitleMapper = Object.fromEntries([
      ["browser_name", "browser"],
      ["component", "checkout_platform"],
      ["platform", "customer_device"],
    ]);
  }
  var comparitionWidget;
  switch (analyticsType) {
    case "USER_JOURNEY":
    case "AUTHENTICATION":
      comparitionWidget = false;
      break;
    default:
      comparitionWidget = true;
  }
  var tab = React.createElement(
    "div",
    {
      className: wrapperClass,
    },
    React.createElement(DynamicChart.make, {
      entity: chartEntity,
      selectedTab: activeTab,
      chartId: moduleName,
      updateUrl: props.updateUrl,
      tabTitleMapper: tabTitleMapper,
      enableBottomChart: false,
      showTableLegend: false,
      showMarkers: true,
      legendType: "Points",
      comparitionWidget: comparitionWidget,
    }),
    tableEntity !== undefined
      ? React.createElement(Analytics$TableWrapper, {
          dateKeys: chartEntity.dateFilterKeys,
          filterKeys: chartEntity.allFilterDimension,
          activeTab: activeTab,
          defaultSort: props.defaultSort,
          getTable: props.getTable,
          colMapper: props.colMapper,
          tableEntity: tableEntity,
          deltaMetrics: props.deltaMetrics,
          deltaArray: props.deltaArray,
          tableUpdatedHeading: props.tableUpdatedHeading,
          tableGlobalFilter: props.tableGlobalFilter,
          moduleName: moduleName,
          weeklyTableMetricsCols: props.weeklyTableMetricsCols,
          distributionArray: Caml_option.some(props.distributionArray),
          formatData: Caml_option.some(formatData),
        })
      : null,
  );
  switch (analyticsType) {
    case "USER_JOURNEY":
    case "AUTHENTICATION":
      return tab;
    default:
      return React.createElement(FramerMotion.TransitionComponent.make, {
        id: id,
        children: tab,
      });
  }
}

var TabDetails = {
  make: Analytics$TabDetails,
};

function Analytics(props) {
  var __formatData = props.formatData;
  var generateReportType = props.generateReportType;
  var __distributionArray = props.distributionArray;
  var weeklyTableMetricsCols = props.weeklyTableMetricsCols;
  var moduleName = props.moduleName;
  var tableGlobalFilter = props.tableGlobalFilter;
  var tableUpdatedHeading = props.tableUpdatedHeading;
  var filterUri = props.filterUri;
  var singleStatEntity = props.singleStatEntity;
  var deltaArray = props.deltaArray;
  var deltaMetrics = props.deltaMetrics;
  var tableEntity = props.tableEntity;
  var colMapper = props.colMapper;
  var getTable = props.getTable;
  var initialFixedFilters = props.initialFixedFilters;
  var tabKeys = props.tabKeys;
  var defaultSort = props.defaultSort;
  var chartEntity = props.chartEntity;
  var endTimeFilterKey = props.endTimeFilterKey;
  var startTimeFilterKey = props.startTimeFilterKey;
  var __pageSubTitle = props.pageSubTitle;
  var __pageTitle = props.pageTitle;
  var pageTitle = __pageTitle !== undefined ? __pageTitle : "";
  var pageSubTitle = __pageSubTitle !== undefined ? __pageSubTitle : "";
  var distributionArray =
    __distributionArray !== undefined
      ? Caml_option.valFromOption(__distributionArray)
      : undefined;
  var formatData =
    __formatData !== undefined
      ? Caml_option.valFromOption(__formatData)
      : undefined;
  var match = Recoil$1.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var analyticsType = AnalyticsTypes.getAnalyticsType(moduleName);
  var match$1 = React.useContext(FilterContext.filterContext);
  var filterValueJson = match$1.filterValueJson;
  var updateExistingKeys = match$1.updateExistingKeys;
  var filterValue = match$1.filterValue;
  var defaultFilters = [startTimeFilterKey, endTimeFilterKey];
  var chartEntity1 = chartEntity.default;
  var pieChartEntity = chartEntity.userPieChart;
  var barChartEntity = chartEntity.userBarChart;
  var funnelChartEntity = chartEntity.userFunnelChart;
  var chartEntity1$1;
  if (chartEntity1 !== undefined) {
    var newrecord = Caml_obj.obj_dup(chartEntity1);
    chartEntity1$1 = ((newrecord.allFilterDimension = tabKeys), newrecord);
  } else {
    chartEntity1$1 = undefined;
  }
  var match$2 = React.useState(function () {
    return LogicUtils.getStrArrayFromDict(
      filterValueJson,
      moduleName + ".tabName",
      tabKeys,
    );
  });
  var setActiveTab = match$2[1];
  var activeTav = match$2[0];
  var setActiveTab$1 = React.useMemo(
    function () {
      return function (str) {
        setActiveTab(function (param) {
          return str.split(",");
        });
      };
    },
    [setActiveTab],
  );
  var startTimeVal = LogicUtils.getString(
    filterValueJson,
    startTimeFilterKey,
    "",
  );
  var endTimeVal = LogicUtils.getString(filterValueJson, endTimeFilterKey, "");
  var updateUrlWithPrefix = React.useMemo(
    function () {
      return function (chartType) {
        return function (dict) {
          var prevDictArr = Belt_Array.keepMap(
            Object.entries(filterValue),
            function (item) {
              var match = dict[item[0]];
              if (match !== undefined) {
                return;
              } else {
                return item;
              }
            },
          );
          var currentDict = Belt_Array.keepMap(
            Object.entries(dict),
            function (item) {
              var value = item[1];
              if (LogicUtils.isNonEmptyString(value)) {
                return [moduleName + chartType + "." + item[0], value];
              }
            },
          );
          updateExistingKeys(
            Object.fromEntries(prevDictArr.concat(currentDict)),
          );
        };
      };
    },
    [updateExistingKeys],
  );
  var setInitialFilters = HSwitchRemoteFilter.useSetInitialFilters(
    updateExistingKeys,
    startTimeFilterKey,
    endTimeFilterKey,
    undefined,
    "analytics",
    undefined,
  );
  React.useEffect(function () {
    setInitialFilters();
  }, []);
  var filterBody = React.useMemo(
    function () {
      var filterBodyEntity = {
        startTime: startTimeVal,
        endTime: endTimeVal,
        groupByNames: tabKeys,
        source: "BATCH",
      };
      return AnalyticsUtils.filterBody(filterBodyEntity);
    },
    [startTimeVal, endTimeVal, tabKeys.join(",")],
  );
  var match$3 = React.useState(function () {});
  var setFilterDataJson = match$3[1];
  var filterDataJson = match$3[0];
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match$4 = React.useContext(FilterContext.filterContext);
  var filterValueJson$1 = match$4.filterValueJson;
  var startTimeVal$1 = LogicUtils.getString(filterValueJson$1, "startTime", "");
  var endTimeVal$1 = LogicUtils.getString(filterValueJson$1, "endTime", "");
  React.useEffect(
    function () {
      setFilterDataJson(function (param) {});
      if (
        LogicUtils.isNonEmptyString(startTimeVal$1) &&
        LogicUtils.isNonEmptyString(endTimeVal$1)
      ) {
        try {
          if (filterUri !== undefined) {
            Core__Promise.$$catch(
              updateDetails(
                filterUri,
                filterBody,
                "Post",
                undefined,
                undefined,
                undefined,
                undefined,
              ).then(function (json) {
                setFilterDataJson(function (param) {
                  return json;
                });
              }),
              function (param) {
                return Promise.resolve();
              },
            );
          }
        } catch (exn) {}
      }
    },
    [startTimeVal$1, endTimeVal$1, JSON.stringify(filterBody)],
  );
  var filterData = Core__Option.getOr(filterDataJson, {});
  var activeTab = React.useMemo(
    function () {
      return LogicUtils.getStrArrayFromDict(
        filterValueJson,
        moduleName + ".tabName",
        activeTav,
      ).filter(function (item) {
        return LogicUtils.isNonEmptyString(item);
      });
    },
    [filterValueJson],
  );
  var isMobileView = MatchMedia.useMobileChecker();
  var tabDetailsClass = React.useMemo(
    function () {
      if (isMobileView) {
        return "flex flex-col gap-4 my-4";
      } else {
        return "flex flex-row gap-4 my-4";
      }
    },
    [isMobileView],
  );
  var topFilterUi;
  if (filterDataJson !== undefined) {
    var filterData$1;
    var exit = 0;
    switch (analyticsType) {
      case "USER_JOURNEY":
      case "AUTHENTICATION":
        exit = 1;
        break;
      default:
        filterData$1 = filterDataJson;
    }
    if (exit === 1) {
      var filteredDims = ["payment_method", "payment_experience", "source"];
      var queryData = LogicUtils.getArrayFromJson(
        LogicUtils.getJsonObjectFromDict(
          LogicUtils.getDictFromJsonObject(filterDataJson),
          "queryData",
        ),
        [],
      ).filter(function (dimension) {
        var dim = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(dimension),
          "dimension",
          "",
        );
        return !filteredDims.includes(dim);
      });
      filterData$1 = Object.fromEntries([["queryData", queryData]]);
    }
    topFilterUi = React.createElement(
      "div",
      {
        className: "flex flex-row",
      },
      JsxPPXReactSupportU.createElementWithKey("0", DynamicFilter.make, {
        initialFilters: props.initialFilters(filterData$1),
        options: [],
        popupFilterFields: props.options(filterData$1),
        initialFixedFilters: initialFixedFilters(filterData$1),
        defaultFilterKeys: defaultFilters,
        tabNames: tabKeys,
        updateUrlWith: updateExistingKeys,
        showCustomFilter: false,
        filterFieldsPortalName: HSAnalyticsUtils.filterFieldsPortalName,
        refreshFilters: false,
      }),
    );
  } else {
    topFilterUi = React.createElement(
      "div",
      {
        className: "flex flex-row",
      },
      JsxPPXReactSupportU.createElementWithKey("1", DynamicFilter.make, {
        initialFilters: [],
        options: [],
        popupFilterFields: [],
        initialFixedFilters: initialFixedFilters(filterData),
        defaultFilterKeys: defaultFilters,
        tabNames: tabKeys,
        updateUrlWith: updateExistingKeys,
        showCustomFilter: false,
        filterFieldsPortalName: HSAnalyticsUtils.filterFieldsPortalName,
        refreshFilters: false,
      }),
    );
  }
  var tmp;
  if (chartEntity1$1 !== undefined) {
    var tmp$1;
    var exit$1 = 0;
    switch (analyticsType) {
      case "USER_JOURNEY":
      case "AUTHENTICATION":
        exit$1 = 1;
        break;
      default:
        tmp$1 = React.createElement(
          "div",
          {
            className: "flex flex-col h-full overflow-scroll w-full mt-5",
          },
          React.createElement(DynamicTabs.make, {
            tabs: props.tabValues,
            tabContainerClass: "analyticsTabs",
            maxSelection: 3,
            tabId: moduleName,
            setActiveTab: setActiveTab$1,
            updateUrlDict: function (dict) {
              var updateUrlWithPrefix$1 = updateUrlWithPrefix("");
              updateUrlWithPrefix$1(dict);
            },
            initalTab: activeTab,
          }),
          React.createElement(Analytics$TabDetails, {
            chartEntity: chartEntity1$1,
            activeTab: activeTab,
            defaultSort: defaultSort,
            getTable: getTable,
            colMapper: colMapper,
            distributionArray: distributionArray,
            tableEntity: tableEntity,
            deltaMetrics: deltaMetrics,
            deltaArray: deltaArray,
            tableUpdatedHeading: tableUpdatedHeading,
            tableGlobalFilter: tableGlobalFilter,
            moduleName: moduleName,
            updateUrl: function (dict) {
              var updateUrlWithPrefix$1 = updateUrlWithPrefix("");
              updateUrlWithPrefix$1(dict);
            },
            weeklyTableMetricsCols: weeklyTableMetricsCols,
            formatData: Caml_option.some(formatData),
          }),
        );
    }
    if (exit$1 === 1) {
      var tmp$2;
      if (funnelChartEntity !== undefined) {
        var newrecord$1 = Caml_obj.obj_dup(funnelChartEntity);
        tmp$2 = React.createElement(
          "div",
          {
            className: tabDetailsClass,
          },
          React.createElement(Analytics$TabDetails, {
            chartEntity:
              ((newrecord$1.moduleName = moduleName + "Funnel"), newrecord$1),
            defaultSort: defaultSort,
            getTable: getTable,
            colMapper: colMapper,
            distributionArray: distributionArray,
            tableEntity: tableEntity,
            deltaMetrics: deltaMetrics,
            deltaArray: deltaArray,
            tableUpdatedHeading: tableUpdatedHeading,
            tableGlobalFilter: tableGlobalFilter,
            moduleName: moduleName + "Funnel",
            updateUrl: function (dict) {
              var updateUrlWithPrefix$1 = updateUrlWithPrefix("Funnel");
              updateUrlWithPrefix$1(dict);
            },
            weeklyTableMetricsCols: weeklyTableMetricsCols,
          }),
        );
      } else {
        tmp$2 = null;
      }
      var tmp$3;
      tmp$3 =
        analyticsType === "USER_JOURNEY"
          ? React.createElement(Analytics$TabDetails, {
              chartEntity: chartEntity1$1,
              activeTab: ["payment_method"],
              defaultSort: defaultSort,
              getTable: getTable,
              colMapper: colMapper,
              distributionArray: distributionArray,
              tableEntity: tableEntity,
              deltaMetrics: deltaMetrics,
              deltaArray: deltaArray,
              tableUpdatedHeading: tableUpdatedHeading,
              tableGlobalFilter: tableGlobalFilter,
              moduleName: moduleName,
              updateUrl: function (dict) {
                var updateUrlWithPrefix$1 = updateUrlWithPrefix("");
                updateUrlWithPrefix$1(dict);
              },
              weeklyTableMetricsCols: weeklyTableMetricsCols,
            })
          : null;
      var tmp$4;
      if (barChartEntity !== undefined) {
        var newrecord$2 = Caml_obj.obj_dup(barChartEntity);
        tmp$4 = React.createElement(Analytics$TabDetails, {
          chartEntity:
            ((newrecord$2.moduleName = moduleName + "Bar"), newrecord$2),
          activeTab: ["browser_name"],
          defaultSort: defaultSort,
          getTable: getTable,
          colMapper: colMapper,
          distributionArray: distributionArray,
          tableEntity: tableEntity,
          deltaMetrics: deltaMetrics,
          deltaArray: deltaArray,
          tableUpdatedHeading: tableUpdatedHeading,
          tableGlobalFilter: tableGlobalFilter,
          moduleName: moduleName + "Bar",
          updateUrl: function (dict) {
            var updateUrlWithPrefix$1 = updateUrlWithPrefix("Bar");
            updateUrlWithPrefix$1(dict);
          },
          weeklyTableMetricsCols: weeklyTableMetricsCols,
        });
      } else {
        tmp$4 = null;
      }
      tmp$1 = React.createElement(
        "div",
        {
          className: "flex flex-col bg-transparent w-full h-max",
        },
        tmp$2,
        React.createElement(
          "div",
          {
            className: tabDetailsClass,
          },
          tmp$3,
          tmp$4,
        ),
        pieChartEntity !== undefined
          ? React.createElement(
              "div",
              {
                className: tabDetailsClass,
              },
              React.createElement(Analytics$TabDetails, {
                chartEntity: pieChartEntity,
                activeTab: ["platform"],
                defaultSort: defaultSort,
                getTable: getTable,
                colMapper: colMapper,
                distributionArray: distributionArray,
                tableEntity: tableEntity,
                deltaMetrics: deltaMetrics,
                deltaArray: deltaArray,
                tableUpdatedHeading: tableUpdatedHeading,
                tableGlobalFilter: tableGlobalFilter,
                moduleName: moduleName,
                updateUrl: function (dict) {
                  var updateUrlWithPrefix$1 = updateUrlWithPrefix("");
                  updateUrlWithPrefix$1(dict);
                },
                weeklyTableMetricsCols: weeklyTableMetricsCols,
              }),
              React.createElement(Analytics$TabDetails, {
                chartEntity: pieChartEntity,
                activeTab: ["component"],
                defaultSort: defaultSort,
                getTable: getTable,
                colMapper: colMapper,
                distributionArray: distributionArray,
                tableEntity: tableEntity,
                deltaMetrics: deltaMetrics,
                deltaArray: deltaArray,
                tableUpdatedHeading: tableUpdatedHeading,
                tableGlobalFilter: tableGlobalFilter,
                moduleName: moduleName,
                updateUrl: function (dict) {
                  var updateUrlWithPrefix$1 = updateUrlWithPrefix("");
                  updateUrlWithPrefix$1(dict);
                },
                weeklyTableMetricsCols: weeklyTableMetricsCols,
              }),
            )
          : null,
      );
    }
    tmp = React.createElement(
      "div",
      undefined,
      React.createElement(
        "div",
        {
          className: "flex items-center justify-between",
        },
        React.createElement(PageUtils.PageHeading.make, {
          title: pageTitle,
          subTitle: pageSubTitle,
        }),
        React.createElement(RenderIf.make, {
          condition: match.generateReport,
          children:
            generateReportType !== undefined
              ? React.createElement(GenerateReport.make, {
                  entityName: generateReportType,
                })
              : null,
        }),
      ),
      React.createElement(
        "div",
        {
          className: "mt-2 -ml-1",
        },
        topFilterUi,
      ),
      React.createElement(
        "div",
        undefined,
        React.createElement(
          "div",
          {
            className: "mt-5",
          },
          React.createElement(DynamicSingleStat.make, {
            entity: singleStatEntity,
            filterKeys: chartEntity1$1.allFilterDimension,
            startTimeFilterKey: startTimeFilterKey,
            endTimeFilterKey: endTimeFilterKey,
            moduleName: moduleName,
            showPercentage: false,
            statSentiment: Core__Option.getOr(
              singleStatEntity.statSentiment,
              {},
            ),
          }),
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-row",
          },
          tmp$1,
        ),
      ),
    );
  } else {
    tmp = null;
  }
  return React.createElement(RenderIf.make, {
    condition: Object.entries(filterValueJson).length > 0,
    children: tmp,
  });
}

var make = Analytics;

export { BaseTableComponent, TableWrapper, TabDetails, make };
/* Form Not a pure module */
