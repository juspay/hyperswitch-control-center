// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../../../components/Table.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as EntityType from "../../../entities/EntityType.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DynamicChart from "../../../components/DynamicChart.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as DateTimeUtils from "../../../utils/DateTimeUtils.bs.js";
import * as AnalyticsTypes from "../AnalyticsTypes.bs.js";
import * as AnalyticsUtils from "../AnalyticsUtils.bs.js";
import * as HSAnalyticsUtils from "../HSAnalyticsUtils.bs.js";
import * as DynamicSingleStat from "../../../components/DynamicSingleStat.bs.js";

var domain = "disputes";

function colMapper(col) {
  switch (col) {
    case "Connector":
      return "connector";
    case "DisputeStage":
      return "dispute_stage";
    case "TotalAmountDisputed":
      return "total_amount_disputed";
    case "TotalDisputeLostAmount":
      return "total_dispute_lost_amount";
    case "NoCol":
      return "";
  }
}

function reverseColMapper(column) {
  switch (column) {
    case "connector":
      return "Connector";
    case "dispute_stage":
      return "DisputeStage";
    case "total_amount_disputed":
      return "TotalAmountDisputed";
    case "total_dispute_lost_amount":
      return "TotalDisputeLostAmount";
    default:
      return "NoCol";
  }
}

function percentFormat(value) {
  return value.toFixed(2) + "%";
}

var distribution = LogicUtils.getJsonFromArrayOfJson([
  ["distributionFor", "dispute_error_message"],
  ["distributionCardinality", "TOP_5"],
]);

function tableItemToObjMapper(dict) {
  return {
    connector: LogicUtils.getString(dict, "connector", "NA"),
    dispute_stage: LogicUtils.getString(dict, "dispute_stage", "NA"),
    total_amount_disputed: LogicUtils.getFloat(
      dict,
      "total_amount_disputed",
      0.0,
    ),
    total_dispute_lost_amount: LogicUtils.getFloat(
      dict,
      "total_dispute_lost_amount",
      0.0,
    ),
  };
}

function getUpdatedHeading(param, param$1) {
  return function (colType) {
    var key = colMapper(colType);
    switch (colType) {
      case "Connector":
        return Table.makeHeaderInfo(
          key,
          "Connector",
          "NumericType",
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      case "DisputeStage":
        return Table.makeHeaderInfo(
          key,
          "Dispute Stage",
          "NumericType",
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      case "TotalAmountDisputed":
        return Table.makeHeaderInfo(
          key,
          "Total Amount Disputed",
          "NumericType",
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      case "TotalDisputeLostAmount":
        return Table.makeHeaderInfo(
          key,
          "Total Dispute Lost Amount",
          "NumericType",
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      case "NoCol":
        return Table.makeHeaderInfo(
          key,
          "",
          undefined,
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
    }
  };
}

function getCell(disputeTable, colType) {
  var usaNumberAbbreviation = function (labelValue) {
    return LogicUtils.shortNum(
      labelValue,
      LogicUtils.getDefaultNumberFormat(),
      undefined,
      undefined,
    );
  };
  switch (colType) {
    case "Connector":
      return {
        TAG: "Text",
        _0: disputeTable.connector,
      };
    case "DisputeStage":
      return {
        TAG: "Text",
        _0: disputeTable.dispute_stage,
      };
    case "TotalAmountDisputed":
      return {
        TAG: "Numeric",
        _0: disputeTable.total_amount_disputed / 100.0,
        _1: usaNumberAbbreviation,
      };
    case "TotalDisputeLostAmount":
      return {
        TAG: "Numeric",
        _0: disputeTable.total_dispute_lost_amount / 100.0,
        _1: usaNumberAbbreviation,
      };
    case "NoCol":
      return {
        TAG: "Text",
        _0: "",
      };
  }
}

function getDisputeTable(json) {
  return LogicUtils.getArrayFromJson(json, []).map(function (item) {
    return tableItemToObjMapper(LogicUtils.getDictFromJsonObject(item));
  });
}

function disputeTableEntity() {
  return EntityType.makeEntity(
    window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
    getDisputeTable,
    AnalyticsTypes.defaultDisputeColumns,
    AnalyticsTypes.allDisputeColumns,
    getUpdatedHeading(undefined, undefined),
    getCell,
    "queryData",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    [HSAnalyticsUtils.startTimeFilterKey, HSAnalyticsUtils.endTimeFilterKey],
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
}

var singleStateInitialValue = {
  total_amount_disputed: 0.0,
  total_dispute_lost_amount: 0.0,
};

var singleStateSeriesInitialValue = {
  total_amount_disputed: 0.0,
  total_dispute_lost_amount: 0.0,
  time_series: "",
};

function singleStateItemToObjMapper(json) {
  return Core__Option.getOr(
    Core__Option.map(Core__JSON.Decode.object(json), function (dict) {
      return {
        total_amount_disputed: LogicUtils.getFloat(
          dict,
          "total_amount_disputed",
          0.0,
        ),
        total_dispute_lost_amount: LogicUtils.getFloat(
          dict,
          "total_dispute_lost_amount",
          0.0,
        ),
      };
    }),
    singleStateInitialValue,
  );
}

function singleStateSeriesItemToObjMapper(json) {
  return Core__Option.getOr(
    Core__Option.map(Core__JSON.Decode.object(json), function (dict) {
      return {
        total_amount_disputed: LogicUtils.getFloat(
          dict,
          "total_amount_disputed",
          0.0,
        ),
        total_dispute_lost_amount: LogicUtils.getFloat(
          dict,
          "total_dispute_lost_amount",
          0.0,
        ),
        time_series: LogicUtils.getString(dict, "time_bucket", ""),
      };
    }),
    singleStateSeriesInitialValue,
  );
}

function itemToObjMapper(json) {
  return HSAnalyticsUtils.getQueryData(json).map(singleStateItemToObjMapper);
}

function timeSeriesObjMapper(json) {
  return HSAnalyticsUtils.getQueryData(json).map(function (json) {
    return singleStateSeriesItemToObjMapper(json);
  });
}

function getColumns() {
  return [
    {
      sectionName: "",
      columns: DynamicSingleStat.generateDefaultStateColumns([
        "TotalAmountDisputed",
        "TotalDisputeLostAmount",
      ]),
    },
  ];
}

function compareLogic(firstValue, secondValue) {
  var temp2 = secondValue[0];
  var temp1 = firstValue[0];
  if (Caml_obj.equal(temp1, temp2)) {
    return 0;
  } else if (Caml_obj.greaterthan(temp1, temp2)) {
    return -1;
  } else {
    return 1;
  }
}

function constructData(key, singlestatTimeseriesData) {
  switch (key) {
    case "total_amount_disputed":
      return singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          ob.total_amount_disputed / 100.0,
        ];
      });
    case "total_dispute_lost_amount":
      return singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          ob.total_dispute_lost_amount / 100.0,
        ];
      });
    default:
      return [];
  }
}

function getStatData(
  singleStatData,
  timeSeriesData,
  deltaTimestampData,
  colType,
  _mode,
) {
  if (colType === "TotalAmountDisputed") {
    return {
      title: "Total Amount Disputed",
      tooltipText: "Total amount that is disputed",
      deltaTooltipComponent: AnalyticsUtils.singlestatDeltaTooltipFormat(
        singleStatData.total_amount_disputed / 100.0,
        deltaTimestampData.currentSr,
      ),
      value: singleStatData.total_amount_disputed / 100.0,
      delta: Number((singleStatData.total_amount_disputed / 100.0).toFixed(2)),
      data: constructData("total_amount_disputed", timeSeriesData),
      statType: "Volume",
      showDelta: false,
    };
  } else {
    return {
      title: "Total Dispute Lost Amount",
      tooltipText: "Total amount lost due to a dispute",
      deltaTooltipComponent: AnalyticsUtils.singlestatDeltaTooltipFormat(
        singleStatData.total_dispute_lost_amount / 100.0,
        deltaTimestampData.currentSr,
      ),
      value: singleStatData.total_dispute_lost_amount / 100.0,
      delta: Number(
        (singleStatData.total_dispute_lost_amount / 100.0).toFixed(2),
      ),
      data: constructData("total_dispute_lost_amount", timeSeriesData),
      statType: "Volume",
      showDelta: false,
    };
  }
}

function getSingleStatEntity(metrics, connector_success_rate) {
  return {
    urlConfig: [
      {
        uri: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
        metrics: HSAnalyticsUtils.getStringListFromArrayDict(metrics),
      },
    ],
    getObjects: itemToObjMapper,
    getTimeSeriesObject: timeSeriesObjMapper,
    defaultColumns: getColumns(connector_success_rate),
    getData: getStatData,
    matrixUriMapper: function (param) {
      return window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain;
    },
  };
}

var metricsConfig = [
  {
    metric_name_db: "total_amount_disputed",
    metric_label: "Total Amount Disputed",
    metric_type: "Amount",
    legendOption: ["Current", "Overall"],
  },
  {
    metric_name_db: "total_dispute_lost_amount",
    metric_label: "Total Dispute Lost Amount",
    metric_type: "Amount",
    legendOption: ["Average", "Overall"],
  },
];

function chartEntity(tabKeys) {
  return DynamicChart.makeEntity(
    {
      TAG: "String",
      _0: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
    },
    undefined,
    tabKeys,
    [HSAnalyticsUtils.startTimeFilterKey, HSAnalyticsUtils.endTimeFilterKey],
    ["Dispute Status Metric", "Total Amount Disputed"],
    [],
    [],
    ["Line"],
    [
      {
        uri: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
        timeSeriesBody: DynamicChart.getTimeSeriesChart,
        legendBody: DynamicChart.getLegendBody,
        metrics: metricsConfig,
        timeCol: "time_bucket",
        filterKeys: tabKeys,
      },
    ],
    "Dispute Analytics",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
}

var makeMultiInputFieldInfo = FormRenderer.makeMultiInputFieldInfo;

var makeInputFieldInfo = FormRenderer.makeInputFieldInfo;

var makeFieldInfo = FormRenderer.makeFieldInfo;

export {
  domain,
  makeMultiInputFieldInfo,
  makeInputFieldInfo,
  colMapper,
  reverseColMapper,
  percentFormat,
  distribution,
  tableItemToObjMapper,
  getUpdatedHeading,
  getCell,
  getDisputeTable,
  makeFieldInfo,
  disputeTableEntity,
  singleStateInitialValue,
  singleStateSeriesInitialValue,
  singleStateItemToObjMapper,
  singleStateSeriesItemToObjMapper,
  itemToObjMapper,
  timeSeriesObjMapper,
  getColumns,
  compareLogic,
  constructData,
  getStatData,
  getSingleStatEntity,
  metricsConfig,
  chartEntity,
};
/* distribution Not a pure module */
