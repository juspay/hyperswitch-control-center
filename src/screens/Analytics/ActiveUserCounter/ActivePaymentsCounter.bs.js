// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as React$1 from "@headlessui/react";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function ActivePaymentsCounter(props) {
  var match = React.useState(function () {
    return 0;
  });
  var setActivePaymentsCount = match[1];
  var activePaymentsCount = match[0];
  var match$1 = React.useState(function () {
    return true;
  });
  var setHealthCheck = match$1[1];
  var healthCheck = match$1[0];
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match$2 = React.useState(function () {
    return Date.now();
  });
  var setTimestamp = match$2[1];
  var getURL = APIUtils.useGetURL();
  var fetchMetrics = async function (setData) {
    var metric = "active_payments";
    var url = getURL(
      "ANALYTICS_ACTIVE_PAYMENTS",
      "Post",
      Caml_option.some("active_payments"),
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    var startTime = new Date(Date.now() - 60000.0);
    var body = [
      LogicUtils.getJsonFromArrayOfJson([
        [
          "timeRange",
          LogicUtils.getJsonFromArrayOfJson([
            ["startTime", startTime.toISOString()],
            ["endTime", new Date().toISOString()],
          ]),
        ],
        ["metrics", [metric]],
      ]),
    ];
    try {
      var json = await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var dict = LogicUtils.getDictFromJsonObject(json);
      var newCount = LogicUtils.getInt(
        LogicUtils.getDictFromJsonObject(
          LogicUtils.getValueFromArray(
            LogicUtils.getArrayFromJson(
              LogicUtils.getJsonObjectFromDict(dict, "queryData"),
              [],
            ),
            0,
            null,
          ),
        ),
        metric,
        0,
      );
      return setData(function (param) {
        return newCount;
      });
    } catch (raw_exn) {
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === Js_exn.$$Error) {
        return setHealthCheck(function (param) {
          return false;
        });
      }
      throw exn;
    }
  };
  React.useEffect(
    function () {
      fetchMetrics(setActivePaymentsCount);
    },
    [match$2[0]],
  );
  React.useEffect(
    function () {
      var activePaymentsCountInterval = setInterval(function () {
        if (healthCheck) {
          return setTimestamp(function (param) {
            return Date.now();
          });
        }
      }, 10000);
      if (!healthCheck) {
        clearInterval(activePaymentsCountInterval);
      }
      return function () {
        clearInterval(activePaymentsCountInterval);
      };
    },
    [healthCheck],
  );
  return React.createElement(React$1.Transition, {
    as: "span",
    show: healthCheck && activePaymentsCount > 0,
    enter: "transition ease-out duration-300",
    enterFrom: "opacity-0 translate-y-1",
    enterTo: "opacity-100 translate-y-0",
    leave: "transition ease-in duration-300",
    leaveFrom: "opacity-100 translate-y-0",
    leaveTo: "opacity-0 translate-y-1",
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className:
            "flex flex-row px-4 py-2 md:gap-8 gap-4 rounded whitespace-nowrap text-fs-13 bg-blue-200 border-blue-200 font-semibold justify-center",
        },
        React.createElement(Icon.make, {
          name: "liveTag",
          size: 40,
          className:
            "flex text-jp-gray-600 dark:text-jp-gray-text_darktheme dark:text-opacity-25",
        }),
        React.createElement(
          "div",
          {
            className: "flex gap-2",
          },
          React.createElement(
            "div",
            {
              className: "flex text-gray-500 items-center",
            },
            "Active Payments",
          ),
          React.createElement(
            "div",
            {
              className: "flex text-blue-400 items-center",
            },
            activePaymentsCount.toString(),
          ),
        ),
      ),
    ),
  });
}

var make = ActivePaymentsCounter;

export { make };
/* Icon Not a pure module */
