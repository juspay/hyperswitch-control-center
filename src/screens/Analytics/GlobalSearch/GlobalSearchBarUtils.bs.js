// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as CommonAuthUtils from "../../../entryPoints/AuthModule/Common/CommonAuthUtils.bs.js";
import * as GlobalSearchTypes from "./GlobalSearchTypes.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function GlobalSearchBarUtils$ShowMoreLink(props) {
  var searchText = props.searchText;
  var __textStyleClass = props.textStyleClass;
  var __cleanUpFunction = props.cleanUpFunction;
  var section = props.section;
  var cleanUpFunction =
    __cleanUpFunction !== undefined ? __cleanUpFunction : function () {};
  var textStyleClass = __textStyleClass !== undefined ? __textStyleClass : "";
  var linkText =
    "View " +
    section.total_results.toString() +
    " result" +
    (section.total_results > 1 ? "s" : "");
  var match = section.section;
  var tmp;
  switch (match) {
    case "Local":
    case "Others":
    case "Default":
      tmp = null;
      break;
    default:
      tmp = React.createElement(
        "div",
        {
          className:
            "font-medium cursor-pointer underline underline-offset-2 " +
            textStyleClass,
          onClick: function (param) {
            var match = section.section;
            var link;
            switch (match) {
              case "PaymentIntents":
                link = "payment-intents?query=" + searchText;
                break;
              case "PaymentAttempts":
                link = "payment-attempts?query=" + searchText;
                break;
              case "Refunds":
                link = "refunds-global?query=" + searchText;
                break;
              case "Disputes":
                link = "dispute-global?query=" + searchText;
                break;
              default:
                link = "";
            }
            RescriptReactRouter.push(GlobalVars.appendDashboardPath(link));
            cleanUpFunction();
          },
        },
        linkText,
      );
  }
  return React.createElement(RenderIf.make, {
    condition: section.total_results > 10,
    children: tmp,
  });
}

var ShowMoreLink = {
  make: GlobalSearchBarUtils$ShowMoreLink,
};

function matchInSearchOption(
  searchOptions,
  searchText,
  name,
  link,
  sectionName,
  param,
) {
  return Core__Option.getOr(searchOptions, [])
    .filter(function (item) {
      return LogicUtils.checkStringStartsWithSubstring(item[0], searchText);
    })
    .map(function (item) {
      return {
        texts: [sectionName, name, item[0]],
        redirect_link: link + item[1],
      };
    });
}

function getLocalMatchedResults(searchText, tabs) {
  var results = Core__Array.reduce(tabs, [], function (acc, item) {
    switch (item.TAG) {
      case "CustomComponent":
      case "Heading":
        return acc.concat([]);
      case "RemoteLink":
      case "Link":
        break;
      case "LinkWithTag":
        var tab = item._0;
        if (LogicUtils.checkStringStartsWithSubstring(tab.name, searchText)) {
          var matchedEle_texts = [tab.name];
          var matchedEle_redirect_link = tab.link;
          var matchedEle = {
            texts: matchedEle_texts,
            redirect_link: matchedEle_redirect_link,
          };
          acc.push(matchedEle);
        }
        var matchedSearchValues = matchInSearchOption(
          tab.searchOptions,
          searchText,
          tab.name,
          tab.link,
          "",
          undefined,
        );
        return acc.concat(matchedSearchValues);
      case "Section":
        var sectionObj = item._0;
        var sectionSearchedValues = Core__Array.reduce(
          sectionObj.links,
          [],
          function (insideAcc, item) {
            var tab = item._0;
            if (
              LogicUtils.checkStringStartsWithSubstring(
                sectionObj.name,
                searchText,
              ) ||
              LogicUtils.checkStringStartsWithSubstring(tab.name, searchText)
            ) {
              var matchedEle_texts = [sectionObj.name, tab.name];
              var matchedEle_redirect_link = tab.link;
              var matchedEle = {
                texts: matchedEle_texts,
                redirect_link: matchedEle_redirect_link,
              };
              insideAcc.push(matchedEle);
            }
            var matchedSearchValues = matchInSearchOption(
              tab.searchOptions,
              searchText,
              tab.name,
              tab.link,
              sectionObj.name,
              undefined,
            );
            return insideAcc.concat(matchedSearchValues);
          },
        );
        return acc.concat(sectionSearchedValues);
    }
    var tab$1 = item._0;
    if (LogicUtils.checkStringStartsWithSubstring(tab$1.name, searchText)) {
      var matchedEle_texts$1 = ["", tab$1.name];
      var matchedEle_redirect_link$1 = tab$1.link;
      var matchedEle$1 = {
        texts: matchedEle_texts$1,
        redirect_link: matchedEle_redirect_link$1,
      };
      acc.push(matchedEle$1);
    }
    var matchedSearchValues$1 = matchInSearchOption(
      tab$1.searchOptions,
      searchText,
      tab$1.name,
      tab$1.link,
      "",
      undefined,
    );
    return acc.concat(matchedSearchValues$1);
  });
  return {
    section: "Local",
    results: results,
    total_results: results.length,
  };
}

function getElements(hits, section) {
  var getAmount = function (value, amountKey, currencyKey) {
    return (
      String(LogicUtils.getFloat(value, amountKey, 0.0)) +
      " " +
      LogicUtils.getString(value, currencyKey, "")
    );
  };
  var getValues = function (item) {
    var value = Core__Option.getOr(Core__JSON.Decode.object(item), {});
    var payId = LogicUtils.getString(value, "payment_id", "");
    var amount = getAmount(value, "amount", "currency");
    var status = LogicUtils.getString(value, "status", "");
    return [payId, amount, status];
  };
  switch (section) {
    case "PaymentIntents":
      return hits.map(function (item) {
        var match = getValues(item);
        var payId = match[0];
        return {
          texts: [payId, match[1], match[2]].map(function (prim) {
            return prim;
          }),
          redirect_link: "/payments/" + payId,
        };
      });
    case "PaymentAttempts":
      return hits.map(function (item) {
        var match = getValues(item);
        var payId = match[0];
        return {
          texts: [payId, match[1], match[2]].map(function (prim) {
            return prim;
          }),
          redirect_link: "/payments/" + payId,
        };
      });
    case "Refunds":
      return hits.map(function (item) {
        var value = Core__Option.getOr(Core__JSON.Decode.object(item), {});
        var refId = LogicUtils.getString(value, "refund_id", "");
        var amount = getAmount(value, "total_amount", "currency");
        var status = LogicUtils.getString(value, "refund_status", "");
        return {
          texts: [refId, amount, status].map(function (prim) {
            return prim;
          }),
          redirect_link: "/refunds/" + refId,
        };
      });
    case "Disputes":
      return hits.map(function (item) {
        var value = Core__Option.getOr(Core__JSON.Decode.object(item), {});
        var disId = LogicUtils.getString(value, "dispute_id", "");
        var amount = getAmount(value, "dispute_amount", "currency");
        var status = LogicUtils.getString(value, "dispute_status", "");
        return {
          texts: [disId, amount, status].map(function (prim) {
            return prim;
          }),
          redirect_link: "/disputes/" + disId,
        };
      });
    default:
      return [];
  }
}

function getRemoteResults(json) {
  var results = [];
  Core__Option.getOr(Core__JSON.Decode.array(json), []).forEach(
    function (item) {
      var value = Core__Option.getOr(Core__JSON.Decode.object(item), {});
      var section = GlobalSearchTypes.getSectionVariant(
        LogicUtils.getString(value, "index", ""),
      );
      var hints = LogicUtils.getArrayFromDict(value, "hits", []);
      var total_results = LogicUtils.getInt(value, "count", hints.length);
      if (hints.length > 0) {
        results.push({
          section: section,
          results: getElements(hints, section),
          total_results: total_results,
        });
        return;
      }
    },
  );
  return results;
}

function getDefaultResult(searchText) {
  return {
    section: "Default",
    results: [
      {
        texts: ["Show all results for", searchText],
        redirect_link: "/search?query=" + searchText,
      },
    ],
    total_results: 1,
  };
}

function parseResponse(response) {
  return LogicUtils.getArrayFromJson(response, []).map(function (json) {
    var item = LogicUtils.getDictFromJsonObject(json);
    return {
      count: LogicUtils.getInt(item, "count", 0),
      hits: LogicUtils.getArrayFromDict(item, "hits", []),
      index: LogicUtils.getString(item, "index", ""),
    };
  });
}

function generateSearchBody(searchText, merchant_id) {
  if (CommonAuthUtils.isValidEmail(searchText)) {
    return LogicUtils.getJsonFromArrayOfJson([["query", searchText]]);
  }
  var filters = LogicUtils.getJsonFromArrayOfJson([
    ["customer_email", [searchText]],
  ]);
  return LogicUtils.getJsonFromArrayOfJson([
    ["query", merchant_id],
    ["filters", filters],
  ]);
}

export {
  ShowMoreLink,
  matchInSearchOption,
  getLocalMatchedResults,
  getElements,
  getRemoteResults,
  getDefaultResult,
  parseResponse,
  generateSearchBody,
};
/* react Not a pure module */
