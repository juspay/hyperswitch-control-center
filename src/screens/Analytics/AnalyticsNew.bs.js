// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Loader from "../../components/Loader.bs.js";
import * as Recoil from "../../libraries/Recoil.bs.js";
import * as Recoil$1 from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as Analytics from "./Analytics.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as DynamicTabs from "../../components/DynamicTabs.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DynamicChart from "../../components/DynamicChart.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as FilterContext from "../../context/FilterContext.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as AnalyticsAtoms from "./AnalyticsAtoms.bs.js";
import * as AnalyticsUtils from "./AnalyticsUtils.bs.js";
import * as HSAnalyticsUtils from "./HSAnalyticsUtils.bs.js";
import * as DynamicSingleStat from "../../components/DynamicSingleStat.bs.js";
import * as HSwitchRemoteFilter from "../HSwitchRemoteFilter.bs.js";

function AnalyticsNew$MetricsState(props) {
  var singleStatEntity = props.singleStatEntity;
  return React.createElement(
    "div",
    undefined,
    React.createElement(
      "h2",
      {
        className: "font-bold text-xl text-black text-opacity-80",
      },
      props.heading,
    ),
    React.createElement(DynamicSingleStat.make, {
      entity: singleStatEntity,
      filterKeys: props.filterKeys,
      startTimeFilterKey: props.startTimeFilterKey,
      endTimeFilterKey: props.endTimeFilterKey,
      moduleName: props.moduleName,
      showPercentage: false,
      statSentiment: Core__Option.getOr(singleStatEntity.statSentiment, {}),
      formaPayload: props.formaPayload,
    }),
  );
}

var MetricsState = {
  make: AnalyticsNew$MetricsState,
};

function AnalyticsNew$TableWrapper(props) {
  var __formatData = props.formatData;
  var __distributionArray = props.distributionArray;
  var weeklyTableMetricsCols = props.weeklyTableMetricsCols;
  var moduleName = props.moduleName;
  var deltaArray = props.deltaArray;
  var deltaMetrics = props.deltaMetrics;
  var tableEntity = props.tableEntity;
  var getTable = props.getTable;
  var activeTab = props.activeTab;
  var filterKeys = props.filterKeys;
  var dateKeys = props.dateKeys;
  var distributionArray =
    __distributionArray !== undefined
      ? Caml_option.valFromOption(__distributionArray)
      : undefined;
  var formatData =
    __formatData !== undefined
      ? Caml_option.valFromOption(__formatData)
      : undefined;
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = match.globalUIConfig;
  var customFilter = Recoil$1.useRecoilValue(AnalyticsAtoms.customFilterAtom);
  var match$2 = React.useContext(FilterContext.filterContext);
  var filterValueJson = match$2.filterValueJson;
  var fetchDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match$3 = React.useState(function () {
    return false;
  });
  var getHeading = tableEntity.getHeading;
  var defaultColumns = tableEntity.defaultColumns;
  var setShowTable = match$3[1];
  var activeTabStr = Core__Option.getOr(activeTab, []).join("-");
  var endTimeFilterKey = dateKeys[1];
  var startTimeFilterKey = dateKeys[0];
  var match$4 = React.useState(function () {
    return true;
  });
  var setTableDataLoading = match$4[1];
  var match$5 = React.useState(function () {
    return [].map(function (prim) {
      return prim;
    });
  });
  var setTableData = match$5[1];
  var tableData = match$5[0];
  var getTopLevelFilter = React.useMemo(
    function () {
      return Object.fromEntries(
        Belt_Array.keepMap(Object.entries(filterValueJson), function (item) {
          var keyArr = item[0].split(".");
          var prefix = Core__Option.getOr(keyArr[0], "");
          if (prefix === moduleName && LogicUtils.isNonEmptyString(prefix)) {
            return;
          } else {
            return [prefix, item[1]];
          }
        }),
      );
    },
    [filterValueJson],
  );
  var allColumns = Core__Option.getOr(tableEntity.allColumns, []);
  var allFilterKeys = [startTimeFilterKey, endTimeFilterKey].concat(filterKeys);
  var topFiltersToSearchParam = React.useMemo(
    function () {
      return Belt_Array.keepMap(
        Object.entries(getTopLevelFilter),
        function (entry) {
          var key = entry[0];
          if (!allFilterKeys.includes(key)) {
            return;
          }
          var str = Core__JSON.Classify.classify(entry[1]);
          if (typeof str !== "object") {
            return;
          }
          switch (str.TAG) {
            case "String":
              return key + "=" + str._0;
            case "Number":
              return key + "=" + String(str._0);
            case "Array":
              return key + "=[" + String(str._0) + "]";
            default:
              return;
          }
        },
      ).join("&");
    },
    [getTopLevelFilter],
  );
  var filterValueFromUrl = React.useMemo(
    function () {
      return Object.fromEntries(
        Belt_Array.keepMap(
          Object.entries(getTopLevelFilter),
          function (entries) {
            var key = entries[0];
            if (filterKeys.includes(key)) {
              return [key, entries[1]];
            }
          },
        ),
      );
    },
    [topFiltersToSearchParam],
  );
  var startTimeFromUrl = React.useMemo(
    function () {
      return LogicUtils.getString(getTopLevelFilter, startTimeFilterKey, "");
    },
    [topFiltersToSearchParam],
  );
  var endTimeFromUrl = React.useMemo(
    function () {
      return LogicUtils.getString(getTopLevelFilter, endTimeFilterKey, "");
    },
    [topFiltersToSearchParam],
  );
  var parseData = function (json) {
    var data = LogicUtils.getDictFromJsonObject(json);
    return LogicUtils.getArrayFromJson(
      LogicUtils.getJsonObjectFromDict(data, "queryData"),
      [],
    );
  };
  var generateIDFromKeys = function (keys, dict) {
    return Core__Option.getOr(keys, [])
      .map(function (key) {
        return dict[key];
      })
      .join("");
  };
  var getWeeklyData = function (data, cols) {
    var weeklyDateRange = HSwitchRemoteFilter.getDateFilteredObject(
      undefined,
      undefined,
    );
    var weeklyTableReqBody = AnalyticsUtils.generateTablePayload(
      weeklyDateRange.start_time,
      weeklyDateRange.end_time,
      filterValueFromUrl,
      activeTab,
      [],
      undefined,
      deltaMetrics,
      deltaArray,
      false,
      undefined,
      customFilter,
      true,
      moduleName,
      undefined,
      undefined,
    );
    Core__Promise.$$catch(
      fetchDetails(
        tableEntity.uri,
        weeklyTableReqBody,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      ).then(function (json) {
        setTableData(function (param) {
          var dataArr = parseData(data);
          var weeklyArr = parseData(json);
          return getTable(
            dataArr.map(function (item) {
              var dataDict = LogicUtils.getDictFromJsonObject(item);
              var dataKey = generateIDFromKeys(activeTab, dataDict);
              weeklyArr.forEach(function (newItem) {
                var weekklyDataDict = LogicUtils.getDictFromJsonObject(newItem);
                var weekklyDataKey = generateIDFromKeys(
                  activeTab,
                  weekklyDataDict,
                );
                if (dataKey === weekklyDataKey) {
                  cols.forEach(function (obj) {
                    var val = weekklyDataDict[obj.refKey];
                    if (val !== undefined) {
                      dataDict[obj.newKey] = val;
                      return;
                    }
                  });
                  return;
                }
              });
              return dataDict;
            }),
          ).map(function (prim) {
            return prim;
          });
        });
        setTableDataLoading(function (param) {
          return false;
        });
        setShowTable(function (param) {
          return true;
        });
      }),
      function (param) {
        setTableDataLoading(function (param) {
          return false;
        });
        return Promise.resolve();
      },
    );
  };
  React.useEffect(
    function () {
      setShowTable(function (param) {
        return false;
      });
      if (
        LogicUtils.isNonEmptyString(startTimeFromUrl) &&
        LogicUtils.isNonEmptyString(endTimeFromUrl)
      ) {
        var tableReqBody = HSAnalyticsUtils.generateTablePayload(
          startTimeFromUrl,
          endTimeFromUrl,
          filterValueFromUrl,
          activeTab,
          [],
          distributionArray,
          deltaMetrics,
          deltaArray,
          false,
          undefined,
          customFilter,
          true,
          moduleName,
          undefined,
          undefined,
        );
        Core__Promise.$$catch(
          fetchDetails(
            tableEntity.uri,
            tableReqBody,
            "Post",
            undefined,
            undefined,
            undefined,
            undefined,
          ).then(function (json) {
            if (weeklyTableMetricsCols !== undefined) {
              getWeeklyData(json, weeklyTableMetricsCols);
              return;
            }
            var data = LogicUtils.getDictFromJsonObject(json);
            var value = getTable(
              LogicUtils.getJsonObjectFromDict(data, "queryData"),
            ).map(function (prim) {
              return prim;
            });
            setTableData(function (param) {
              return value;
            });
            setTableDataLoading(function (param) {
              return false;
            });
            setShowTable(function (param) {
              return true;
            });
          }),
          function (param) {
            setTableDataLoading(function (param) {
              return false;
            });
            return Promise.resolve();
          },
        );
      }
    },
    [topFiltersToSearchParam, activeTabStr, customFilter],
  );
  var newDefaultCols = React.useMemo(
    function () {
      return Belt_Array.keepMap(
        Core__Option.getOr(activeTab, []),
        function (item) {
          return Belt_Array.keepMap(defaultColumns, function (columnItem) {
            var val = getHeading(columnItem);
            if (val.key === item) {
              return Caml_option.some(columnItem);
            }
          })[0];
        },
      ).concat(allColumns);
    },
    [activeTabStr],
  );
  var newAllCols = React.useMemo(
    function () {
      return Belt_Array.keepMap(defaultColumns, function (item) {
        var val = getHeading(item);
        if (Core__Option.getOr(activeTab, []).includes(val.key)) {
          return Caml_option.some(item);
        }
      }).concat(allColumns);
    },
    [activeTabStr],
  );
  var transactionTableDefaultCols = React.useMemo(
    function () {
      return Recoil.atom(
        moduleName + "DefaultCols" + activeTabStr,
        newDefaultCols,
      );
    },
    [newDefaultCols, moduleName + "DefaultCols" + activeTabStr],
  );
  var modifyData = function (data) {
    if (formatData !== undefined) {
      return formatData(data);
    } else {
      return data;
    }
  };
  if (match$3[0]) {
    return React.createElement(
      React.Fragment,
      {},
      React.createElement(
        "div",
        {
          className: "h-full -mx-4 overflow-scroll",
        },
        React.createElement(Form.make, {
          children: React.createElement(Analytics.BaseTableComponent.make, {
            filters: [startTimeFromUrl, endTimeFromUrl],
            tableData: modifyData(tableData),
            defaultSort: props.defaultSort,
            tableDataLoading: match$4[0],
            transactionTableDefaultCols: transactionTableDefaultCols,
            newDefaultCols: newDefaultCols,
            newAllCols: newAllCols,
            colMapper: props.colMapper,
            tableEntity: tableEntity,
            tableGlobalFilter: props.tableGlobalFilter,
            activeTab: Core__Option.getOr(activeTab, []),
          }),
        }),
      ),
      React.createElement(RenderIf.make, {
        condition: tableData.length > 0,
        children: React.createElement(
          "div",
          {
            className:
              "flex items-start " +
              match$1.border.borderColor.primaryNormal +
              " text-sm rounded-md gap-2 px-4 py-3",
          },
          React.createElement(Icon.make, {
            name: "info-vacent",
            size: 18,
            className: match$1.font.textColor.primaryNormal + " mt-1",
          }),
          "'NA' denotes those incomplete or failed payments with no assigned values for the corresponding parameters due to reasons like customer drop-offs, technical failures, etc.",
        ),
      }),
    );
  } else {
    return React.createElement(Loader.make, {});
  }
}

var TableWrapper = {
  make: AnalyticsNew$TableWrapper,
};

function AnalyticsNew$TabDetails(props) {
  var __formatData = props.formatData;
  var moduleName = props.moduleName;
  var tableEntity = props.tableEntity;
  var activeTab = props.activeTab;
  var chartEntity = props.chartEntity;
  var formatData =
    __formatData !== undefined
      ? Caml_option.valFromOption(__formatData)
      : undefined;
  var tabTitleMapper = {};
  return React.createElement(
    "div",
    {
      className: "bg-white border rounded-lg p-8 mt-3 mb-7",
    },
    React.createElement(DynamicChart.make, {
      entity: chartEntity,
      selectedTab: activeTab,
      chartId: moduleName,
      updateUrl: props.updateUrl,
      tabTitleMapper: tabTitleMapper,
      enableBottomChart: false,
      showTableLegend: false,
      showMarkers: true,
      legendType: "Points",
      comparitionWidget: true,
    }),
    tableEntity !== undefined
      ? React.createElement(AnalyticsNew$TableWrapper, {
          dateKeys: chartEntity.dateFilterKeys,
          filterKeys: chartEntity.allFilterDimension,
          activeTab: activeTab,
          defaultSort: props.defaultSort,
          getTable: props.getTable,
          colMapper: props.colMapper,
          tableEntity: tableEntity,
          deltaMetrics: props.deltaMetrics,
          deltaArray: props.deltaArray,
          tableUpdatedHeading: props.tableUpdatedHeading,
          tableGlobalFilter: props.tableGlobalFilter,
          moduleName: moduleName,
          weeklyTableMetricsCols: props.weeklyTableMetricsCols,
          distributionArray: Caml_option.some(props.distributionArray),
          formatData: Caml_option.some(formatData),
        })
      : null,
  );
}

var TabDetails = {
  make: AnalyticsNew$TabDetails,
};

function AnalyticsNew$OverallSummary(props) {
  var __formatData = props.formatData;
  var __distributionArray = props.distributionArray;
  var filteredTabKeys = props.filteredTabKeys;
  var moduleName = props.moduleName;
  var distributionArray =
    __distributionArray !== undefined
      ? Caml_option.valFromOption(__distributionArray)
      : undefined;
  var formatData =
    __formatData !== undefined
      ? Caml_option.valFromOption(__formatData)
      : undefined;
  var match = React.useContext(FilterContext.filterContext);
  var filterValueJson = match.filterValueJson;
  var updateExistingKeys = match.updateExistingKeys;
  var filterValue = match.filterValue;
  var val = filteredTabKeys[0];
  var initTab = val !== undefined ? [val] : filteredTabKeys;
  var match$1 = React.useState(function () {
    return LogicUtils.getStrArrayFromDict(
      filterValueJson,
      moduleName + ".tabName",
      initTab,
    );
  });
  var setActiveTab = match$1[1];
  var activeTav = match$1[0];
  var setInitialFilters = HSwitchRemoteFilter.useSetInitialFilters(
    updateExistingKeys,
    props.startTimeFilterKey,
    props.endTimeFilterKey,
    undefined,
    "analytics",
    undefined,
  );
  React.useEffect(function () {
    setInitialFilters();
  }, []);
  var activeTab = React.useMemo(
    function () {
      return LogicUtils.getStrArrayFromDict(
        filterValueJson,
        moduleName + ".tabName",
        activeTav,
      ).filter(function (item) {
        return LogicUtils.isNonEmptyString(item);
      });
    },
    [filterValueJson],
  );
  var setActiveTab$1 = React.useMemo(
    function () {
      return function (str) {
        setActiveTab(function (param) {
          return str.split(",");
        });
      };
    },
    [setActiveTab],
  );
  var updateUrlWithPrefix = React.useMemo(
    function () {
      return function (chartType) {
        return function (dict) {
          var prevDictArr = Belt_Array.keepMap(
            Object.entries(filterValue),
            function (item) {
              var match = dict[item[0]];
              if (match !== undefined) {
                return;
              } else {
                return item;
              }
            },
          );
          var currentDict = Belt_Array.keepMap(
            Object.entries(dict),
            function (item) {
              var value = item[1];
              if (LogicUtils.isNonEmptyString(value)) {
                return [moduleName + chartType + "." + item[0], value];
              }
            },
          );
          updateExistingKeys(
            Object.fromEntries(prevDictArr.concat(currentDict)),
          );
        };
      };
    },
    [updateExistingKeys],
  );
  return React.createElement(
    "div",
    undefined,
    React.createElement(
      "h2",
      {
        className: "font-bold text-xl text-black text-opacity-80",
      },
      props.heading,
    ),
    React.createElement(DynamicTabs.make, {
      tabs: props.filteredTabVales,
      tabContainerClass: "analyticsTabs",
      maxSelection: 3,
      tabId: moduleName,
      setActiveTab: setActiveTab$1,
      updateUrlDict: function (dict) {
        var updateUrlWithPrefix$1 = updateUrlWithPrefix("");
        updateUrlWithPrefix$1(dict);
      },
      initalTab: activeTab,
    }),
    React.createElement(AnalyticsNew$TabDetails, {
      chartEntity: props.chartEntity,
      activeTab: activeTab,
      defaultSort: props.defaultSort,
      getTable: props.getTable,
      colMapper: props.colMapper,
      distributionArray: distributionArray,
      tableEntity: props.tableEntity,
      deltaMetrics: props.deltaMetrics,
      deltaArray: props.deltaArray,
      tableUpdatedHeading: props.tableUpdatedHeading,
      tableGlobalFilter: props.tableGlobalFilter,
      moduleName: moduleName,
      updateUrl: function (dict) {
        var updateUrlWithPrefix$1 = updateUrlWithPrefix("");
        updateUrlWithPrefix$1(dict);
      },
      weeklyTableMetricsCols: props.weeklyTableMetricsCols,
      formatData: Caml_option.some(formatData),
    }),
  );
}

var OverallSummary = {
  make: AnalyticsNew$OverallSummary,
};

export { MetricsState, TableWrapper, TabDetails, OverallSummary };
/* Form Not a pure module */
