// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as PageUtils from "../../Helpers/PageUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as AnalyticsNew from "../AnalyticsNew.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as DynamicFilter from "../../../components/DynamicFilter.bs.js";
import * as FilterContext from "../../../context/FilterContext.bs.js";
import * as AnalyticsUtils from "../AnalyticsUtils.bs.js";
import * as GenerateReport from "../../GenerateReports/GenerateReport.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as HSAnalyticsUtils from "../HSAnalyticsUtils.bs.js";
import * as PageLoaderWrapper from "../../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as HSwitchRemoteFilter from "../../HSwitchRemoteFilter.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as SmartRetryAnalytics from "./SmartRetryAnalytics.bs.js";
import * as PaymentAnalyticsEntity from "./PaymentAnalyticsEntity.bs.js";

function PaymentAnalytics(props) {
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var defaultFilters = [
    HSAnalyticsUtils.startTimeFilterKey,
    HSAnalyticsUtils.endTimeFilterKey,
  ];
  var match = React.useState(function () {});
  var setFilterDataJson = match[1];
  var filterDataJson = match[0];
  var match$1 = React.useContext(FilterContext.filterContext);
  var filterValueJson = match$1.filterValueJson;
  var updateExistingKeys = match$1.updateExistingKeys;
  var filterData = Core__Option.getOr(filterDataJson, {});
  var getURL = APIUtils.useGetURL();
  var match$2 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$2[1];
  var match$3 = React.useState(function () {
    return [];
  });
  var setMetrics = match$3[1];
  var match$4 = React.useState(function () {
    return [];
  });
  var setDimensions = match$4[1];
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match$5 = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var loadInfo = async function () {
    try {
      var infoUrl = getURL(
        "ANALYTICS_PAYMENTS",
        "Get",
        Caml_option.some(PaymentAnalyticsEntity.domain),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var infoDetails = await fetchDetails(infoUrl);
      setMetrics(function (param) {
        return LogicUtils.getArrayFromDict(
          LogicUtils.getDictFromJsonObject(infoDetails),
          "metrics",
          [],
        );
      });
      setDimensions(function (param) {
        return LogicUtils.getArrayFromDict(
          LogicUtils.getDictFromJsonObject(infoDetails),
          "dimensions",
          [],
        );
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  var getPaymetsDetails = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var paymentUrl = getURL(
        "ORDERS",
        "Get",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var paymentDetails = await fetchDetails(paymentUrl);
      var data = LogicUtils.getArrayFromDict(
        LogicUtils.getDictFromJsonObject(paymentDetails),
        "data",
        [],
      );
      if (data.length < 0) {
        return setScreenState(function (param) {
          return "Custom";
        });
      } else {
        return await loadInfo();
      }
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  var generalMetrics = [
    "payment_success_rate",
    "payment_count",
    "payment_success_count",
    "connector_success_rate",
  ];
  var analyticsAmountMetrics = [
    "payment_success_rate",
    "avg_ticket_size",
    "payment_processed_amount",
  ];
  var formatMetrics = function (arrMetrics) {
    return arrMetrics.map(function (metric) {
      return LogicUtils.getJsonFromArrayOfJson([
        ["name", metric],
        ["desc", ""],
      ]);
    });
  };
  React.useEffect(function () {
    getPaymetsDetails();
  }, []);
  var tabKeys = HSAnalyticsUtils.getStringListFromArrayDict(match$4[0]);
  var tabValues = tabKeys
    .map(function (key, index) {
      if (key === "payment_method_type") {
        return {
          title: "Payment Method + Payment Method Type",
          value: "payment_method,payment_method_type",
          isRemovable: index > 2,
        };
      } else {
        return {
          title: LogicUtils.snakeToTitle(key),
          value: key,
          isRemovable: index > 2,
        };
      }
    })
    .concat([
      {
        title: "Payment Method Type",
        value: "payment_method_type",
        isRemovable: true,
      },
    ]);
  var formatData = function (data) {
    var actualdata = Core__Array.reduce(
      data.map(function (prim) {
        if (prim == null) {
          return;
        } else {
          return Caml_option.some(prim);
        }
      }),
      [],
      function (arr, value) {
        if (value !== undefined) {
          return arr.concat([value]);
        } else {
          return arr;
        }
      },
    );
    actualdata.sort(function (a, b) {
      var success_count_a = a.payment_success_count;
      var success_count_b = b.payment_success_count;
      if (success_count_a <= success_count_b) {
        return 1;
      } else {
        return -1;
      }
    });
    return actualdata.map(function (prim) {
      return prim;
    });
  };
  var title = "Payments Analytics";
  var subTitle =
    "Gain Insights, monitor performance and make Informed Decisions with Payment Analytics.";
  var formaPayload = function (singleStatBodyEntity) {
    return JSON.stringify([
      AnalyticsUtils.getFilterRequestBody(
        Caml_option.some(singleStatBodyEntity.granularity),
        Caml_option.some(["currency"]),
        Caml_option.some(singleStatBodyEntity.filter),
        Caml_option.some(singleStatBodyEntity.metrics),
        singleStatBodyEntity.delta,
        Caml_option.some(singleStatBodyEntity.prefix),
        undefined,
        singleStatBodyEntity.startDateTime,
        singleStatBodyEntity.endDateTime,
        undefined,
        Caml_option.some(singleStatBodyEntity.mode),
        singleStatBodyEntity.customFilter,
        singleStatBodyEntity.source,
        undefined,
      ),
    ]);
  };
  var setInitialFilters = HSwitchRemoteFilter.useSetInitialFilters(
    updateExistingKeys,
    HSAnalyticsUtils.startTimeFilterKey,
    HSAnalyticsUtils.endTimeFilterKey,
    undefined,
    "analytics",
    undefined,
  );
  React.useEffect(function () {
    setInitialFilters();
  }, []);
  var startTimeVal = LogicUtils.getString(filterValueJson, "startTime", "");
  var endTimeVal = LogicUtils.getString(filterValueJson, "endTime", "");
  var filterUri =
    window._env_.apiBaseUrl +
    "/analytics/v1/filters/" +
    PaymentAnalyticsEntity.domain;
  var filterBody = React.useMemo(
    function () {
      var filterBodyEntity = {
        startTime: startTimeVal,
        endTime: endTimeVal,
        groupByNames: tabKeys,
        source: "BATCH",
      };
      return AnalyticsUtils.filterBody(filterBodyEntity);
    },
    [startTimeVal, endTimeVal, tabKeys.join(",")],
  );
  React.useEffect(
    function () {
      setFilterDataJson(function (param) {});
      if (
        LogicUtils.isNonEmptyString(startTimeVal) &&
        LogicUtils.isNonEmptyString(endTimeVal)
      ) {
        try {
          Core__Promise.$$catch(
            updateDetails(
              filterUri,
              filterBody,
              "Post",
              undefined,
              undefined,
              undefined,
              undefined,
            ).then(function (json) {
              setFilterDataJson(function (param) {
                return json;
              });
            }),
            function (param) {
              return Promise.resolve();
            },
          );
        } catch (exn) {}
      }
    },
    [startTimeVal, endTimeVal, JSON.stringify(filterBody)],
  );
  var topFilterUi =
    filterDataJson !== undefined
      ? React.createElement(
          "div",
          {
            className: "flex flex-row",
          },
          JsxPPXReactSupportU.createElementWithKey("0", DynamicFilter.make, {
            initialFilters:
              HSAnalyticsUtils.initialFilterFields(filterDataJson),
            options: [],
            popupFilterFields: HSAnalyticsUtils.options(filterDataJson),
            initialFixedFilters:
              HSAnalyticsUtils.initialFixedFilterFields(filterDataJson),
            defaultFilterKeys: defaultFilters,
            tabNames: tabKeys,
            updateUrlWith: updateExistingKeys,
            showCustomFilter: false,
            filterFieldsPortalName: HSAnalyticsUtils.filterFieldsPortalName,
            refreshFilters: false,
          }),
        )
      : React.createElement(
          "div",
          {
            className: "flex flex-row",
          },
          JsxPPXReactSupportU.createElementWithKey("1", DynamicFilter.make, {
            initialFilters: [],
            options: [],
            popupFilterFields: [],
            initialFixedFilters:
              HSAnalyticsUtils.initialFixedFilterFields(filterData),
            defaultFilterKeys: defaultFilters,
            tabNames: tabKeys,
            updateUrlWith: updateExistingKeys,
            showCustomFilter: false,
            filterFieldsPortalName: HSAnalyticsUtils.filterFieldsPortalName,
            refreshFilters: false,
          }),
        );
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-5",
        },
        React.createElement(
          "div",
          {
            className: "flex items-center justify-between ",
          },
          React.createElement(PageUtils.PageHeading.make, {
            title: title,
            subTitle: subTitle,
          }),
          React.createElement(RenderIf.make, {
            condition: match$5.generateReport,
            children: React.createElement(GenerateReport.make, {
              entityName: "PAYMENT_REPORT",
            }),
          }),
        ),
        React.createElement(
          "div",
          {
            className:
              "-ml-1 sticky top-0 z-30  p-1 bg-hyperswitch_background py-3 -mt-3 rounded-lg border",
          },
          topFilterUi,
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-14",
          },
          React.createElement(AnalyticsNew.MetricsState.make, {
            singleStatEntity: PaymentAnalyticsEntity.getSingleStatEntity(
              formatMetrics(generalMetrics),
              PaymentAnalyticsEntity.generalMetricsColumns,
            ),
            filterKeys: tabKeys,
            startTimeFilterKey: HSAnalyticsUtils.startTimeFilterKey,
            endTimeFilterKey: HSAnalyticsUtils.endTimeFilterKey,
            moduleName: "general_metrics",
            heading: "Payments Overview",
          }),
          React.createElement(AnalyticsNew.MetricsState.make, {
            singleStatEntity: PaymentAnalyticsEntity.getSingleStatEntity(
              formatMetrics(analyticsAmountMetrics),
              PaymentAnalyticsEntity.amountMetricsColumns,
            ),
            filterKeys: tabKeys,
            startTimeFilterKey: HSAnalyticsUtils.startTimeFilterKey,
            endTimeFilterKey: HSAnalyticsUtils.endTimeFilterKey,
            moduleName: "payments_analytics_amount",
            heading: "Amount Metrics",
            formaPayload: formaPayload,
          }),
          React.createElement(SmartRetryAnalytics.make, {
            filterKeys: tabKeys,
            moduleName: "payments_smart_retries",
          }),
          React.createElement(AnalyticsNew.OverallSummary.make, {
            filteredTabVales: tabValues,
            moduleName: "overall_summary",
            filteredTabKeys: tabKeys,
            chartEntity: PaymentAnalyticsEntity.chartEntity(tabKeys),
            defaultSort: "total_volume",
            getTable: PaymentAnalyticsEntity.getPaymentTable,
            colMapper: PaymentAnalyticsEntity.colMapper,
            distributionArray: Caml_option.some([
              PaymentAnalyticsEntity.distribution,
            ]),
            tableEntity: PaymentAnalyticsEntity.paymentTableEntity(),
            deltaMetrics: HSAnalyticsUtils.getStringListFromArrayDict(
              match$3[0],
            ),
            deltaArray: [],
            tableGlobalFilter: HSAnalyticsUtils.filterByData,
            weeklyTableMetricsCols:
              PaymentAnalyticsEntity.weeklyTableMetricsCols,
            formatData: Caml_option.some(formatData),
            startTimeFilterKey: HSAnalyticsUtils.startTimeFilterKey,
            endTimeFilterKey: HSAnalyticsUtils.endTimeFilterKey,
            heading: "Payments Trends",
          }),
        ),
      ),
    ),
    screenState: match$2[0],
    customUI: Caml_option.some(
      React.createElement(HSAnalyticsUtils.NoData.make, {
        title: title,
        subTitle: subTitle,
      }),
    ),
  });
}

var make = PaymentAnalytics;

export { make };
/* react Not a pure module */
