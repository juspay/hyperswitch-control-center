// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DateTimeUtils from "../../../utils/DateTimeUtils.bs.js";
import * as AnalyticsUtils from "../AnalyticsUtils.bs.js";
import * as HSAnalyticsUtils from "../HSAnalyticsUtils.bs.js";
import * as DynamicSingleStat from "../../../components/DynamicSingleStat.bs.js";

var domain = "payments";

var singleStateInitialValue = {
  successful_smart_retries: 0,
  total_smart_retries: 0,
  smart_retried_amount: 0.0,
  currency: "NA",
};

var singleStateSeriesInitialValue = {
  successful_smart_retries: 0,
  total_smart_retries: 0,
  smart_retried_amount: 0.0,
  time_series: "",
  currency: "NA",
};

function singleStateItemToObjMapper(json) {
  return Core__Option.getOr(
    Core__Option.map(Core__JSON.Decode.object(json), function (dict) {
      return {
        successful_smart_retries: LogicUtils.getInt(
          dict,
          "successful_smart_retries",
          0,
        ),
        total_smart_retries: LogicUtils.getInt(dict, "total_smart_retries", 0),
        smart_retried_amount: LogicUtils.getFloat(
          dict,
          "smart_retried_amount",
          0.0,
        ),
        currency: LogicUtils.getString(dict, "currency", "NA"),
      };
    }),
    singleStateInitialValue,
  );
}

function singleStateSeriesItemToObjMapper(json) {
  return Core__Option.getOr(
    Core__Option.map(Core__JSON.Decode.object(json), function (dict) {
      return {
        successful_smart_retries: LogicUtils.getInt(
          dict,
          "successful_smart_retries",
          0,
        ),
        total_smart_retries: LogicUtils.getInt(dict, "total_smart_retries", 0),
        smart_retried_amount: LogicUtils.getFloat(
          dict,
          "smart_retried_amount",
          0.0,
        ),
        time_series: LogicUtils.getString(dict, "time_bucket", ""),
        currency: LogicUtils.getString(dict, "currency", "NA"),
      };
    }),
    singleStateSeriesInitialValue,
  );
}

function itemToObjMapper(json) {
  return HSAnalyticsUtils.getQueryData(json).map(singleStateItemToObjMapper);
}

function timeSeriesObjMapper(json) {
  return HSAnalyticsUtils.getQueryData(json).map(function (json) {
    return singleStateSeriesItemToObjMapper(json);
  });
}

function constructData(key, singlestatTimeseriesData) {
  switch (key) {
    case "smart_retried_amount":
      return singlestatTimeseriesData
        .map(function (ob) {
          return [
            DateTimeUtils.parseAsFloat(ob.time_series),
            ob.smart_retried_amount / 100.0,
          ];
        })
        .toSorted(LogicUtils.compareLogic);
    case "successful_smart_retries":
      return singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          ob.successful_smart_retries,
        ];
      });
    case "total_smart_retries":
      return singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          ob.total_smart_retries,
        ];
      });
    default:
      return [];
  }
}

function getStatData(
  singleStatData,
  timeSeriesData,
  deltaTimestampData,
  colType,
  _mode,
) {
  switch (colType) {
    case "SuccessfulSmartRetries":
      return {
        title: "Successful Smart Retries",
        tooltipText:
          "Total number of retries that succeeded out of all the retry attempts.",
        deltaTooltipComponent: AnalyticsUtils.singlestatDeltaTooltipFormat(
          singleStatData.successful_smart_retries,
          deltaTimestampData.currentSr,
        ),
        value: singleStatData.successful_smart_retries,
        delta: singleStatData.successful_smart_retries,
        data: constructData("successful_smart_retries", timeSeriesData),
        statType: "Volume",
        showDelta: false,
      };
    case "TotalSmartRetries":
      return {
        title: "Smart Retries made",
        tooltipText:
          "Total number of retries that were attempted after a failed payment attempt.",
        deltaTooltipComponent: AnalyticsUtils.singlestatDeltaTooltipFormat(
          singleStatData.total_smart_retries,
          deltaTimestampData.currentSr,
        ),
        value: singleStatData.total_smart_retries,
        delta: singleStatData.total_smart_retries,
        data: constructData("total_smart_retries", timeSeriesData),
        statType: "Volume",
        showDelta: false,
      };
    case "SmartRetriedAmount":
      return {
        title: "Smart Retries Savings",
        tooltipText:
          "Total savings in amount terms from retrying failed payments again through a second processor.",
        deltaTooltipComponent: AnalyticsUtils.singlestatDeltaTooltipFormat(
          singleStatData.smart_retried_amount / 100.0,
          deltaTimestampData.currentSr,
        ),
        value: singleStatData.smart_retried_amount / 100.0,
        delta: Number((singleStatData.smart_retried_amount / 100.0).toFixed(2)),
        data: constructData("smart_retried_amount", timeSeriesData),
        statType: "Amount",
        showDelta: false,
        label: singleStatData.currency,
      };
  }
}

function getSmartRetriesSingleStatEntity(metrics, defaultColumns) {
  return {
    urlConfig: [
      {
        uri: window._env_.apiBaseUrl + "/analytics/v2/metrics/" + domain,
        metrics: HSAnalyticsUtils.getStringListFromArrayDict(metrics),
      },
    ],
    getObjects: itemToObjMapper,
    getTimeSeriesObject: timeSeriesObjMapper,
    defaultColumns: defaultColumns,
    getData: getStatData,
    matrixUriMapper: function (param) {
      return window._env_.apiBaseUrl + "/analytics/v2/metrics/" + domain;
    },
  };
}

function getSmartRetriesAmountSingleStatEntity(metrics, defaultColumns) {
  return {
    urlConfig: [
      {
        uri: window._env_.apiBaseUrl + "/analytics/v2/metrics/" + domain,
        metrics: HSAnalyticsUtils.getStringListFromArrayDict(metrics),
      },
    ],
    getObjects: itemToObjMapper,
    getTimeSeriesObject: timeSeriesObjMapper,
    defaultColumns: defaultColumns,
    getData: getStatData,
    matrixUriMapper: function (param) {
      return window._env_.apiBaseUrl + "/analytics/v2/metrics/" + domain;
    },
  };
}

var smartRetrivesColumns = [
  {
    sectionName: "",
    columns: [
      {
        colType: "SuccessfulSmartRetries",
      },
      {
        colType: "TotalSmartRetries",
      },
    ],
  },
];

var smartRetrivesAmountColumns = [
  {
    sectionName: "",
    columns: [
      {
        colType: "SmartRetriedAmount",
        chartType: "Table",
      },
    ],
  },
];

function SmartRetryAnalytics(props) {
  var moduleName = props.moduleName;
  var filterKeys = props.filterKeys;
  var smartRetrieMetrics = [
    "successful_smart_retries",
    "total_smart_retries",
    "smart_retried_amount",
  ];
  var formatMetrics = function (arrMetrics) {
    return arrMetrics.map(function (metric) {
      return LogicUtils.getJsonFromArrayOfJson([
        ["name", metric],
        ["desc", ""],
      ]);
    });
  };
  var singleStatEntity = getSmartRetriesSingleStatEntity(
    formatMetrics(smartRetrieMetrics),
    smartRetrivesColumns,
  );
  var singleStatAMountEntity = getSmartRetriesSingleStatEntity(
    formatMetrics(smartRetrieMetrics),
    smartRetrivesAmountColumns,
  );
  var formaPayload = function (singleStatBodyEntity) {
    return JSON.stringify([
      AnalyticsUtils.getFilterRequestBody(
        Caml_option.some(singleStatBodyEntity.granularity),
        Caml_option.some(["currency"]),
        Caml_option.some(singleStatBodyEntity.filter),
        Caml_option.some(singleStatBodyEntity.metrics),
        singleStatBodyEntity.delta,
        Caml_option.some(singleStatBodyEntity.prefix),
        undefined,
        singleStatBodyEntity.startDateTime,
        singleStatBodyEntity.endDateTime,
        undefined,
        Caml_option.some(singleStatBodyEntity.mode),
        singleStatBodyEntity.customFilter,
        singleStatBodyEntity.source,
        undefined,
      ),
    ]);
  };
  return React.createElement(
    "div",
    undefined,
    React.createElement(
      "h2",
      {
        className: "font-bold text-xl text-black text-opacity-80",
      },
      "Smart Retries",
    ),
    React.createElement(
      "div",
      {
        className: "flex items-start text-sm rounded-md gap-2 py-2 opacity-60",
      },
      "Note: Only date range filters are supported currently for Smart Retry metrics",
    ),
    React.createElement(
      "div",
      {
        className: "relative",
      },
      React.createElement(
        "div",
        undefined,
        React.createElement(DynamicSingleStat.make, {
          entity: singleStatEntity,
          filterKeys: filterKeys,
          startTimeFilterKey: HSAnalyticsUtils.startTimeFilterKey,
          endTimeFilterKey: HSAnalyticsUtils.endTimeFilterKey,
          moduleName: moduleName,
          showPercentage: false,
          statSentiment: Core__Option.getOr(singleStatEntity.statSentiment, {}),
        }),
      ),
      React.createElement(
        "div",
        {
          className:
            "absolute top-0 w-full h-full grid grid-cols-3 grid-rows-2",
        },
        React.createElement("div", {
          className: "col-span-2 ",
        }),
        React.createElement(
          "div",
          {
            className: "row-span-2 h-full",
          },
          React.createElement(DynamicSingleStat.make, {
            entity: singleStatAMountEntity,
            filterKeys: filterKeys,
            startTimeFilterKey: HSAnalyticsUtils.startTimeFilterKey,
            endTimeFilterKey: HSAnalyticsUtils.endTimeFilterKey,
            moduleName: moduleName,
            showPercentage: false,
            statSentiment: Core__Option.getOr(
              singleStatAMountEntity.statSentiment,
              {},
            ),
            formaPayload: formaPayload,
          }),
        ),
      ),
    ),
  );
}

var make = SmartRetryAnalytics;

export {
  domain,
  singleStateInitialValue,
  singleStateSeriesInitialValue,
  singleStateItemToObjMapper,
  singleStateSeriesItemToObjMapper,
  itemToObjMapper,
  timeSeriesObjMapper,
  constructData,
  getStatData,
  getSmartRetriesSingleStatEntity,
  getSmartRetriesAmountSingleStatEntity,
  smartRetrivesColumns,
  smartRetrivesAmountColumns,
  make,
};
/* react Not a pure module */
