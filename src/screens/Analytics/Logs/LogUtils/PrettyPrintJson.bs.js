// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../../components/Icon.bs.js";
import * as React from "react";
import * as RenderIf from "../../../../utils/RenderIf.bs.js";
import * as Clipboard from "../../../../libraries/Clipboard.bs.js";
import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import ReactSyntaxHighlighter from "react-syntax-highlighter";
import * as Hljs from "react-syntax-highlighter/dist/esm/styles/hljs";

function PrettyPrintJson(props) {
  var __headerText = props.headerText;
  var jsonToDisplay = props.jsonToDisplay;
  var headerText =
    __headerText !== undefined
      ? Caml_option.valFromOption(__headerText)
      : undefined;
  var showToast = ToastState.useShowToast();
  var match = React.useState(function () {
    return "";
  });
  var setParsedJson = match[1];
  var parsedJson = match[0];
  var parseJsonValue = function () {
    try {
      var parsedValue = JSON.stringify(JSON.parse(jsonToDisplay), null, 3);
      return setParsedJson(function (param) {
        return parsedValue;
      });
    } catch (exn) {
      return setParsedJson(function (param) {
        return jsonToDisplay;
      });
    }
  };
  React.useEffect(
    function () {
      parseJsonValue();
    },
    [jsonToDisplay],
  );
  var copyParsedJson = React.createElement(
    "div",
    {
      className: "cursor-pointer",
      onClick: function (param) {
        Clipboard.writeText(parsedJson);
        showToast(
          "Copied to Clipboard!",
          "ToastSuccess",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      },
    },
    React.createElement(Icon.make, {
      name: "copy-code",
    }),
  );
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-2",
    },
    React.createElement(RenderIf.make, {
      condition: LogicUtils.isNonEmptyString(parsedJson),
      children: React.createElement(
        React.Fragment,
        {},
        React.createElement(RenderIf.make, {
          condition: Core__Option.isSome(headerText),
          children: React.createElement(
            "div",
            {
              className: "flex justify-between items-center",
            },
            React.createElement(
              "p",
              {
                className:
                  "font-bold text-fs-16 text-jp-gray-900 text-opacity-75",
              },
              Core__Option.getOr(headerText, ""),
            ),
            copyParsedJson,
          ),
        }),
        React.createElement(
          "div",
          {
            className: "overflow-auto",
          },
          React.createElement(ReactSyntaxHighlighter, {
            language: "json",
            style: Caml_option.some(Hljs.googlecode),
            customStyle: {
              backgroundColor: "transparent",
              lineHeight: "1.7rem",
              fontSize: "0.875rem",
              padding: "5px",
            },
            showLineNumbers: true,
            lineNumberContainerStyle: {
              backgroundColor: "red",
              paddingLeft: "0px",
              padding: "100px",
            },
            children: parsedJson,
          }),
        ),
      ),
    }),
    React.createElement(RenderIf.make, {
      condition: LogicUtils.isEmptyString(parsedJson),
      children: React.createElement(
        "div",
        {
          className: "flex flex-col justify-start items-start gap-2 h-25-rem",
        },
        React.createElement(
          "p",
          {
            className: "font-bold text-fs-16 text-jp-gray-900 text-opacity-75",
          },
          Core__Option.getOr(headerText, ""),
        ),
        React.createElement(
          "p",
          {
            className:
              "font-normal text-fs-14 text-jp-gray-900 text-opacity-50",
          },
          "Failed to load!",
        ),
      ),
    }),
  );
}

var make = PrettyPrintJson;

export { make };
/* Icon Not a pure module */
