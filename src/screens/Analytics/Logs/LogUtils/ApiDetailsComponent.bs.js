// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as LogTypes from "./LogTypes.bs.js";
import * as LogUtils from "./LogUtils.bs.js";
import * as RenderIf from "../../../../utils/RenderIf.bs.js";
import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as ThemeProvider from "../../../../context/ThemeProvider.bs.js";

function ApiDetailsComponent(props) {
  var __filteredKeys = props.filteredKeys;
  var index = props.index;
  var currentSelected = props.currentSelected;
  var setSelectedOption = props.setSelectedOption;
  var setLogDetails = props.setLogDetails;
  var dataDict = props.dataDict;
  var filteredKeys = __filteredKeys !== undefined ? __filteredKeys : [];
  var match = React.useContext(ThemeProvider.themeContext);
  var headerStyle = "text-sm font-medium text-gray-700 break-all";
  var logType = props.getLogType(dataDict);
  var tmp;
  switch (logType) {
    case "SDK":
      tmp = LogicUtils.getString(dataDict, "event_name", "default value");
      break;
    case "API_EVENTS":
      tmp = LogicUtils.camelCaseToTitle(
        LogicUtils.getString(dataDict, "api_flow", "default value"),
      );
      break;
    case "WEBHOOKS":
      tmp = LogicUtils.snakeToTitle(
        LogicUtils.getString(dataDict, "event_type", "default value"),
      );
      break;
    case "CONNECTOR":
      tmp = LogicUtils.camelCaseToTitle(
        LogUtils.apiNameMapper(
          LogicUtils.getString(dataDict, "flow", "default value"),
        ),
      );
      break;
  }
  var apiName = props.nameToURLMapper(tmp);
  var createdTime = LogicUtils.getString(dataDict, "created_at", "00000");
  var requestObject;
  switch (logType) {
    case "SDK":
      requestObject = JSON.stringify(
        LogicUtils.getJsonFromArrayOfJson(
          Object.entries(dataDict).filter(function (entry) {
            return !filteredKeys.includes(entry[0]);
          }),
        ),
      );
      break;
    case "WEBHOOKS":
      requestObject = LogicUtils.getString(
        dataDict,
        "outgoing_webhook_event_type",
        "",
      );
      break;
    case "API_EVENTS":
    case "CONNECTOR":
      requestObject = LogicUtils.getString(dataDict, "request", "");
      break;
  }
  var responseObject;
  switch (logType) {
    case "SDK":
      var isErrorLog =
        LogicUtils.getString(dataDict, "log_type", "") === "ERROR";
      responseObject = isErrorLog
        ? LogicUtils.getString(dataDict, "value", "")
        : "";
      break;
    case "API_EVENTS":
      responseObject = LogicUtils.getString(dataDict, "response", "");
      break;
    case "WEBHOOKS":
      responseObject = LogicUtils.getString(dataDict, "content", "");
      break;
    case "CONNECTOR":
      responseObject = LogicUtils.getString(dataDict, "masked_response", "");
      break;
  }
  var statusCode;
  switch (logType) {
    case "SDK":
      statusCode = LogicUtils.getString(dataDict, "log_type", "INFO");
      break;
    case "WEBHOOKS":
      statusCode = LogicUtils.getBool(dataDict, "is_error", false)
        ? "500"
        : "200";
      break;
    case "API_EVENTS":
    case "CONNECTOR":
      statusCode = LogicUtils.getInt(dataDict, "status_code", 200).toString();
      break;
  }
  var method;
  switch (logType) {
    case "SDK":
      method = "";
      break;
    case "API_EVENTS":
      method = LogicUtils.getString(dataDict, "http_method", "");
      break;
    case "WEBHOOKS":
      method = "POST";
      break;
    case "CONNECTOR":
      method = LogicUtils.getString(dataDict, "method", "");
      break;
  }
  var statusCodeTextColor;
  var exit = 0;
  switch (logType) {
    case "SDK":
      switch (statusCode) {
        case "ERROR":
          statusCodeTextColor = "red-400";
          break;
        case "INFO":
          statusCodeTextColor = "blue-500";
          break;
        case "WARNING":
          statusCodeTextColor = "yellow-800";
          break;
        default:
          statusCodeTextColor = "gray-700 opacity-50";
      }
      break;
    case "WEBHOOKS":
      switch (statusCode) {
        case "200":
          statusCodeTextColor = "green-700";
          break;
        default:
          statusCodeTextColor = "gray-700 opacity-50";
      }
      break;
    case "API_EVENTS":
    case "CONNECTOR":
      exit = 1;
      break;
  }
  if (exit === 1) {
    switch (statusCode) {
      case "200":
        statusCodeTextColor = "green-700";
        break;
      case "400":
        statusCodeTextColor = "yellow-800";
        break;
      default:
        statusCodeTextColor = "gray-700 opacity-50";
    }
  }
  var statusCodeBg;
  var exit$1 = 0;
  switch (logType) {
    case "SDK":
      switch (statusCode) {
        case "ERROR":
          statusCodeBg = "red-100";
          break;
        case "INFO":
          statusCodeBg = "blue-100";
          break;
        case "WARNING":
          statusCodeBg = "yellow-100";
          break;
        default:
          statusCodeBg = "gray-100";
      }
      break;
    case "WEBHOOKS":
      switch (statusCode) {
        case "200":
          statusCodeBg = "green-50";
          break;
        default:
          statusCodeBg = "gray-100";
      }
      break;
    case "API_EVENTS":
    case "CONNECTOR":
      exit$1 = 1;
      break;
  }
  if (exit$1 === 1) {
    switch (statusCode) {
      case "200":
        statusCodeBg = "green-50";
        break;
      case "400":
        statusCodeBg = "orange-100";
        break;
      default:
        statusCodeBg = "gray-100";
    }
  }
  var isSelected = currentSelected === index;
  var stepperColor;
  if (isSelected) {
    var exit$2 = 0;
    switch (logType) {
      case "SDK":
        switch (statusCode) {
          case "ERROR":
            stepperColor = "red-400";
            break;
          case "INFO":
            stepperColor = "blue-500";
            break;
          case "WARNING":
            stepperColor = "yellow-300";
            break;
          default:
            stepperColor = "gray-700 opacity-50";
        }
        break;
      case "WEBHOOKS":
        switch (statusCode) {
          case "200":
            stepperColor = "green-700";
            break;
          default:
            stepperColor = "gray-700 opacity-50";
        }
        break;
      case "API_EVENTS":
      case "CONNECTOR":
        exit$2 = 1;
        break;
    }
    if (exit$2 === 1) {
      switch (statusCode) {
        case "200":
          stepperColor = "green-700";
          break;
        case "400":
          stepperColor = "yellow-300";
          break;
        default:
          stepperColor = "gray-700 opacity-50";
      }
    }
  } else {
    stepperColor = "gray-200";
  }
  var stepperBorderColor;
  if (isSelected) {
    var exit$3 = 0;
    switch (logType) {
      case "SDK":
        switch (statusCode) {
          case "ERROR":
            stepperBorderColor = "red-400";
            break;
          case "INFO":
            stepperBorderColor = "blue-500";
            break;
          case "WARNING":
            stepperBorderColor = "orange-500";
            break;
          default:
            stepperBorderColor = "gray-600";
        }
        break;
      case "WEBHOOKS":
        switch (statusCode) {
          case "200":
            stepperBorderColor = "green-700";
            break;
          default:
            stepperBorderColor = "gray-600";
        }
        break;
      case "API_EVENTS":
      case "CONNECTOR":
        exit$3 = 1;
        break;
    }
    if (exit$3 === 1) {
      switch (statusCode) {
        case "200":
          stepperBorderColor = "green-700";
          break;
        case "400":
          stepperBorderColor = "orange-500";
          break;
        default:
          stepperBorderColor = "gray-600";
      }
    }
  } else {
    stepperBorderColor = "gray-200";
  }
  var statusCodeBorderColor;
  var exit$4 = 0;
  switch (logType) {
    case "SDK":
      switch (statusCode) {
        case "ERROR":
          statusCodeBorderColor = "border border-red-400";
          break;
        case "INFO":
          statusCodeBorderColor =
            match.globalUIConfig.border.borderColor.primaryNormal;
          break;
        case "WARNING":
          statusCodeBorderColor = "border border-yellow-800";
          break;
        default:
          statusCodeBorderColor = "border border-gray-700 opacity-50";
      }
      break;
    case "WEBHOOKS":
      switch (statusCode) {
        case "200":
          statusCodeBorderColor = "border border-green-700";
          break;
        default:
          statusCodeBorderColor = "border border-gray-700 opacity-80";
      }
      break;
    case "API_EVENTS":
    case "CONNECTOR":
      exit$4 = 1;
      break;
  }
  if (exit$4 === 1) {
    switch (statusCode) {
      case "200":
        statusCodeBorderColor = "border border-green-700";
        break;
      case "400":
        statusCodeBorderColor = "border border-yellow-800";
        break;
      default:
        statusCodeBorderColor = "border border-gray-700 opacity-50";
    }
  }
  var borderClass = isSelected
    ? statusCodeBorderColor + " rounded-md"
    : "border border-transparent";
  var tmp$1;
  tmp$1 =
    logType === "SDK"
      ? React.createElement(
          "p",
          {
            className:
              headerStyle + " mt-1 " + (isSelected ? "" : "opacity-80"),
          },
          LogicUtils.snakeToTitle(apiName.toLowerCase()),
        )
      : React.createElement(
          "p",
          {
            className: headerStyle + " " + (isSelected ? "" : "opacity-80"),
          },
          React.createElement(
            "span",
            {
              className: "mr-3 border-2 px-1 py-0.5 rounded text-sm",
            },
            method.toUpperCase(),
          ),
          React.createElement(
            "span",
            {
              className: "leading-7",
            },
            apiName,
          ),
        );
  return React.createElement(
    "div",
    {
      className: "flex items-start gap-4",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-col items-center h-full",
      },
      React.createElement("div", {
        className:
          "w-fit h-fit p-1  border rounded-md bg-" +
          stepperColor +
          " border-gray-300",
      }),
      React.createElement(RenderIf.make, {
        condition: index !== props.logsDataLength,
        children: React.createElement("div", {
          className:
            "h-full border-" +
            stepperBorderColor +
            " border-dashed rounded divide-x-2 border-2 my-1",
        }),
      }),
    ),
    React.createElement(
      "div",
      {
        key: currentSelected.toString(),
        className:
          "flex gap-6 items-start w-full py-3 px-3 cursor-pointer " +
          borderClass +
          " -mt-5 mb-8",
        onClick: function (param) {
          setLogDetails(function (param) {
            return {
              response: responseObject,
              request: requestObject,
              data: dataDict,
            };
          });
          setSelectedOption(function (param) {
            return {
              value: index,
              optionType: logType,
            };
          });
        },
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-1",
        },
        React.createElement(
          "div",
          {
            className: "flex gap-3",
          },
          React.createElement(
            "div",
            {
              className:
                "bg-" + statusCodeBg + " h-fit w-fit px-2 py-1 rounded-md",
            },
            React.createElement(
              "p",
              {
                className:
                  "text-" + statusCodeTextColor + " text-sm font-bold ",
              },
              statusCode,
            ),
          ),
          tmp$1,
        ),
        React.createElement(
          "div",
          {
            className: headerStyle + " opacity-40 flex gap-1",
          },
          new Date(createdTime).toUTCString(),
          React.createElement(
            "span",
            undefined,
            ", [ " + LogTypes.getTagName(logType) + " ]",
          ),
        ),
      ),
    ),
  );
}

var make = ApiDetailsComponent;

export { make };
/* react Not a pure module */
