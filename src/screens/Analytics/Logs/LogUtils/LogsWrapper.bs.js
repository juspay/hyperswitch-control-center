// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../../components/Icon.bs.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as RenderIf from "../../../../utils/RenderIf.bs.js";
import * as MatchMedia from "../../../../context/MatchMedia.bs.js";
import * as HyperswitchAtom from "../../../../Recoils/HyperswitchAtom.bs.js";

function LogsWrapper$EventLogMobileView(props) {
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(
      "div",
      {
        className: "font-bold text-lg mb-5",
      },
      "Events and logs",
    ),
    React.createElement(
      "div",
      {
        className:
          "flex items-center gap-2 bg-white w-fit border-2 p-3 !opacity-100 rounded-lg text-md font-medium",
      },
      React.createElement(Icon.make, {
        name: "info-circle-unfilled",
        size: 16,
      }),
      React.createElement(
        "div",
        {
          className: "text-lg font-medium opacity-50",
        },
        "To view logs for this " +
          props.wrapperFor.toLowerCase() +
          " please switch to desktop mode",
      ),
    ),
  );
}

var EventLogMobileView = {
  make: LogsWrapper$EventLogMobileView,
};

function LogsWrapper(props) {
  var match = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var isSmallDevice = MatchMedia.useMatchMedia("(max-width: 700px)");
  return React.createElement(
    "div",
    {
      className: "overflow-x-scroll",
    },
    React.createElement(RenderIf.make, {
      condition: isSmallDevice,
      children: React.createElement(LogsWrapper$EventLogMobileView, {
        wrapperFor: props.wrapperFor,
      }),
    }),
    React.createElement(RenderIf.make, {
      condition: !isSmallDevice && match.auditTrail,
      children: props.children,
    }),
  );
}

var make = LogsWrapper;

export { EventLogMobileView, make };
/* Icon Not a pure module */
