// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogUtils from "./LogUtils.bs.js";
import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

var tabkeys = ["Logdetails", "Request", "Response"];

function getLogType(dict) {
  if (Core__Option.isSome(dict["connector_name"])) {
    return "CONNECTOR";
  } else if (Core__Option.isSome(dict["request_id"])) {
    return "API_EVENTS";
  } else if (Core__Option.isSome(dict["component"])) {
    return "SDK";
  } else {
    return "WEBHOOKS";
  }
}

function getTagName(tag) {
  switch (tag) {
    case "SDK":
      return "SDK";
    case "API_EVENTS":
      return "API";
    case "WEBHOOKS":
      return "WEBHOOKS";
    case "CONNECTOR":
      return "CONNECTOR";
  }
}

function getTabKeyName(key, option) {
  if (option === "SDK") {
    switch (key) {
      case "Logdetails":
        return "Log Details";
      case "Request":
        return "Event";
      case "Response":
        return "Metadata";
      default:
        return "";
    }
  } else {
    switch (key) {
      case "Logdetails":
        return "Log Details";
      case "Request":
        return "Request";
      case "Response":
        return "Response";
      default:
        return "";
    }
  }
}

function getLogTypefromString(log) {
  switch (log) {
    case "Event":
      return "Event";
    case "Log Details":
      return "Logdetails";
    case "Metadata":
      return "Metadata";
    case "Request":
      return "Request";
    case "Response":
      return "Response";
    default:
      return "Unknown";
  }
}

function setDefaultValue(initialData, setLogDetails, setSelectedOption) {
  var match = getLogType(initialData);
  switch (match) {
    case "SDK":
      var request = JSON.stringify(
        LogicUtils.getJsonFromArrayOfJson(
          Object.entries(initialData).filter(function (entry) {
            return !LogUtils.filteredKeys.includes(entry[0]);
          }),
        ),
      );
      var response =
        LogicUtils.getString(initialData, "log_type", "") === "ERROR"
          ? LogicUtils.getString(initialData, "value", "")
          : "";
      setLogDetails(function (param) {
        return {
          response: response,
          request: request,
          data: initialData,
        };
      });
      return setSelectedOption(function (param) {
        return {
          value: 0,
          optionType: "SDK",
        };
      });
    case "API_EVENTS":
      var request$1 = LogicUtils.getString(initialData, "request", "");
      var response$1 = LogicUtils.getString(initialData, "response", "");
      setLogDetails(function (param) {
        return {
          response: response$1,
          request: request$1,
          data: initialData,
        };
      });
      return setSelectedOption(function (param) {
        return {
          value: 0,
          optionType: "API_EVENTS",
        };
      });
    case "WEBHOOKS":
      var request$2 = LogicUtils.getString(
        initialData,
        "outgoing_webhook_event_type",
        "",
      );
      var response$2 = LogicUtils.getString(initialData, "content", "");
      setLogDetails(function (param) {
        return {
          response: response$2,
          request: request$2,
          data: initialData,
        };
      });
      return setSelectedOption(function (param) {
        return {
          value: 0,
          optionType: "WEBHOOKS",
        };
      });
    case "CONNECTOR":
      var request$3 = LogicUtils.getString(initialData, "request", "");
      var response$3 = LogicUtils.getString(initialData, "masked_response", "");
      setLogDetails(function (param) {
        return {
          response: response$3,
          request: request$3,
          data: initialData,
        };
      });
      return setSelectedOption(function (param) {
        return {
          value: 0,
          optionType: "CONNECTOR",
        };
      });
  }
}

export {
  tabkeys,
  getLogType,
  getTagName,
  getTabKeyName,
  getLogTypefromString,
  setDefaultValue,
};
/* LogUtils Not a pure module */
