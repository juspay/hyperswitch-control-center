// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../../components/Icon.bs.js";
import * as React from "react";
import * as APIUtils from "../../../APIUtils/APIUtils.bs.js";
import * as LogTypes from "./LogTypes.bs.js";
import * as LogUtils from "./LogUtils.bs.js";
import * as RenderIf from "../../../../utils/RenderIf.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as OrderUtils from "../../../../components/OrderUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as DynamicTabs from "../../../../components/DynamicTabs.bs.js";
import * as NoDataFound from "../../../../components/NoDataFound.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FramerMotion from "../../../../libraries/FramerMotion.bs.js";
import * as PromiseUtils from "../../../../utils/PromiseUtils.bs.js";
import * as CommonAuthHooks from "../../../../entryPoints/AuthModule/Common/CommonAuthHooks.bs.js";
import * as PrettyPrintJson from "./PrettyPrintJson.bs.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as HelperComponents from "../../../Helpers/HelperComponents.bs.js";
import * as HSwitchOrderUtils from "../../../Order/HSwitchOrderUtils.bs.js";
import * as PageLoaderWrapper from "../../../Helpers/PageLoaderWrapper.bs.js";
import * as ApiDetailsComponent from "./ApiDetailsComponent.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import ReactSyntaxHighlighter from "react-syntax-highlighter";
import * as Hljs from "react-syntax-highlighter/dist/esm/styles/hljs";

function AuditLogUI$LogDetailsSection(props) {
  return React.createElement(
    "div",
    {
      className: "pb-3 px-5 py-3",
    },
    Object.entries(props.logDetails.data)
      .filter(function (item) {
        if (LogUtils.detailsSectionFilterKeys.includes(item[0])) {
          return false;
        } else {
          var value = item[1];
          var match = Core__JSON.Classify.classify(value);
          if (typeof match !== "object" || match.TAG === "Array") {
            return false;
          } else {
            return true;
          }
        }
      })
      .map(function (item) {
        return React.createElement(
          "div",
          {
            className: "text-sm font-medium text-gray-700 flex",
          },
          React.createElement(
            "span",
            {
              className: "w-2/5",
            },
            LogicUtils.snakeToTitle(item[0]),
          ),
          React.createElement(
            "span",
            {
              className:
                "w-3/5 overflow-scroll cursor-pointer relative hover:bg-gray-50 p-1 rounded",
            },
            React.createElement(ReactSyntaxHighlighter, {
              language: "json",
              style: Caml_option.some(Hljs.googlecode),
              customStyle: {
                backgroundColor: "transparent",
                fontSize: "0.875rem",
                padding: "0px",
              },
              showLineNumbers: false,
              wrapLines: true,
              wrapLongLines: true,
              lineNumberContainerStyle: {
                backgroundColor: "red",
                paddingLeft: "0px",
                padding: "0px",
              },
              children: JSON.stringify(item[1]),
            }),
          ),
        );
      }),
  );
}

var LogDetailsSection = {
  make: AuditLogUI$LogDetailsSection,
};

function AuditLogUI$TabDetails(props) {
  var selectedOption = props.selectedOption;
  var logDetails = props.logDetails;
  var activeTab = props.activeTab;
  var id = Core__Array.reduce(
    Core__Option.getOr(activeTab, ["tab"]),
    "",
    function (acc, tabName) {
      return acc.concat(tabName);
    },
  );
  var currTab = Core__Option.getOr(Core__Option.getOr(activeTab, [])[0], "");
  var match = LogTypes.getLogTypefromString(currTab);
  var tmp;
  var exit = 0;
  switch (match) {
    case "Logdetails":
      tmp = React.createElement(AuditLogUI$LogDetailsSection, {
        logDetails: logDetails,
      });
      break;
    case "Request":
    case "Event":
      exit = 1;
      break;
    case "Response":
    case "Metadata":
      exit = 2;
      break;
    case "Unknown":
      tmp = null;
      break;
  }
  switch (exit) {
    case 1:
      tmp = React.createElement(
        "div",
        {
          className: "px-5 py-3",
        },
        React.createElement(
          RenderIf.make,
          {
            condition:
              LogicUtils.isNonEmptyString(logDetails.request) &&
              selectedOption.optionType !== "WEBHOOKS",
            children: null,
          },
          React.createElement(
            "div",
            {
              className: "flex justify-end",
            },
            React.createElement(HelperComponents.CopyTextCustomComp.make, {
              displayValue: " ",
              copyValue: Caml_option.some(logDetails.request),
              customTextCss: "text-nowrap",
            }),
          ),
          React.createElement(PrettyPrintJson.make, {
            jsonToDisplay: logDetails.request,
          }),
        ),
        React.createElement(RenderIf.make, {
          condition:
            LogicUtils.isEmptyString(logDetails.request) &&
            selectedOption.optionType !== "WEBHOOKS",
          children: React.createElement(NoDataFound.make, {
            message: "No Data Available",
            renderType: "Painting",
            customCssClass: "my-6",
          }),
        }),
      );
      break;
    case 2:
      tmp = React.createElement(
        "div",
        {
          className: "px-5 py-3",
        },
        React.createElement(
          RenderIf.make,
          {
            condition: LogicUtils.isNonEmptyString(logDetails.response),
            children: null,
          },
          React.createElement(
            "div",
            {
              className: "flex justify-end",
            },
            React.createElement(HelperComponents.CopyTextCustomComp.make, {
              displayValue: " ",
              copyValue: Caml_option.some(logDetails.response),
              customTextCss: "text-nowrap",
            }),
          ),
          React.createElement(PrettyPrintJson.make, {
            jsonToDisplay: logDetails.response,
          }),
        ),
        React.createElement(RenderIf.make, {
          condition: LogicUtils.isEmptyString(logDetails.response),
          children: React.createElement(NoDataFound.make, {
            message: "No Data Available",
            renderType: "Painting",
            customCssClass: "my-6",
          }),
        }),
      );
      break;
  }
  var tab = React.createElement("div", undefined, tmp);
  return React.createElement(FramerMotion.TransitionComponent.make, {
    id: id,
    children: tab,
  });
}

var TabDetails = {
  make: AuditLogUI$TabDetails,
};

function AuditLogUI(props) {
  var logType = props.logType;
  var urls = props.urls;
  var id = props.id;
  var match = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  var merchantId = match.merchant_id;
  var fetchDetails = APIUtils.useGetMethod(false, undefined);
  var fetchPostDetils = APIUtils.useUpdateMethod(undefined, undefined);
  var match$1 = React.useState(function () {
    return [];
  });
  var setData = match$1[1];
  var data = match$1[0];
  var isError = React.useMemo(function () {
    return {
      contents: false,
    };
  }, []);
  var match$2 = React.useState(function () {
    return {
      response: "",
      request: "",
      data: {},
    };
  });
  var setLogDetails = match$2[1];
  var logDetails = match$2[0];
  var match$3 = React.useState(function () {
    return {
      value: 0,
      optionType: "API_EVENTS",
    };
  });
  var setSelectedOption = match$3[1];
  var selectedOption = match$3[0];
  var match$4 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$4[1];
  var match$5 = React.useState(function () {
    return false;
  });
  var setCollapseTab = match$5[1];
  var match$6 = React.useState(function () {
    return ["Log Details"];
  });
  var setActiveTab = match$6[1];
  var activeTab = match$6[0];
  var tabKeys = LogTypes.tabkeys.map(function (item) {
    return LogTypes.getTabKeyName(item, selectedOption.optionType);
  });
  var tabValues = tabKeys.map(function (key) {
    return {
      title: key,
      value: key,
      isRemovable: false,
    };
  });
  var activeTab$1 = React.useMemo(
    function () {
      return activeTab;
    },
    [activeTab],
  );
  var setActiveTab$1 = React.useMemo(
    function () {
      return function (str) {
        setActiveTab(function (param) {
          return str.split(",");
        });
      };
    },
    [setActiveTab],
  );
  React.useEffect(
    function () {
      setCollapseTab(function (prev) {
        return !prev;
      });
    },
    [logDetails],
  );
  var getDetails = async function () {
    var logs = [];
    if (HSwitchOrderUtils.isTestData(id)) {
      return setScreenState(function (param) {
        return "Custom";
      });
    }
    var promiseArr = urls.map(function (url) {
      var match = url.apiMethod;
      if (typeof match === "object") {
        return fetchDetails(url.url);
      }
      if (match !== "Post") {
        return fetchDetails(url.url);
      }
      var val = url.body;
      var body = val !== undefined ? val : {};
      return fetchPostDetils(
        url.url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
    });
    var resArr = await PromiseUtils.allSettledPolyfill(promiseArr);
    resArr.forEach(function (json) {
      var arr = Core__JSON.Classify.classify(json);
      if (typeof arr !== "object") {
        return;
      }
      switch (arr.TAG) {
        case "String":
          isError.contents = true;
          return;
        case "Array":
          var arr$1 = arr._0;
          var dict = arr$1[0];
          if (dict === undefined) {
            return;
          }
          var match = LogTypes.getLogType(
            LogicUtils.getDictFromJsonObject(dict),
          );
          if (match === "SDK") {
            Caml_splice_call.spliceObjApply(logs, "push", [
              LogUtils.parseSdkResponse(arr$1),
            ]);
            return;
          }
          Caml_splice_call.spliceObjApply(logs, "push", [arr$1]);
          return;
        default:
          return;
      }
    });
    if (logs.length === 0 && isError.contents) {
      return setScreenState(function (param) {
        return {
          TAG: "Error",
          _0: "Failed to Fetch!",
        };
      });
    }
    setScreenState(function (param) {
      return "Success";
    });
    logs.sort(LogUtils.sortByCreatedAt);
    setData(function (param) {
      return logs;
    });
    var value = logs[0];
    if (value === undefined) {
      return;
    }
    var initialData = LogicUtils.getDictFromJsonObject(value);
    return LogTypes.setDefaultValue(
      initialData,
      setLogDetails,
      setSelectedOption,
    );
  };
  React.useEffect(function () {
    getDetails();
  }, []);
  var timeLine = React.createElement(
    "div",
    {
      className: "flex flex-col w-2/5 overflow-y-scroll no-scrollbar pt-7 pl-5",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-col",
      },
      data.map(function (detailsValue, index) {
        return JsxPPXReactSupportU.createElementWithKey(
          index.toString(),
          ApiDetailsComponent.make,
          {
            dataDict: LogicUtils.getDictFromJsonObject(detailsValue),
            setLogDetails: setLogDetails,
            setSelectedOption: setSelectedOption,
            currentSelected: selectedOption.value,
            index: index,
            logsDataLength: (data.length - 1) | 0,
            getLogType: LogTypes.getLogType,
            nameToURLMapper: LogUtils.nameToURLMapper(id, merchantId),
            filteredKeys: LogUtils.filteredKeys,
          },
        );
      }),
    ),
  );
  var codeBlock = React.createElement(RenderIf.make, {
    condition:
      LogicUtils.isNonEmptyString(logDetails.response) ||
      LogicUtils.isNonEmptyString(logDetails.request),
    children: React.createElement(
      "div",
      {
        className:
          "flex flex-col gap-4 border-l-2 border-border-light-grey show-scrollbar scroll-smooth overflow-scroll  w-3/5",
      },
      React.createElement(
        "div",
        {
          className: "sticky top-0 bg-white z-10",
        },
        React.createElement(DynamicTabs.make, {
          tabs: tabValues,
          tabContainerClass: "px-2",
          maxSelection: 1,
          setActiveTab: setActiveTab$1,
          initalTab: tabKeys,
          updateCollapsableTabs: match$5[0],
          showAddMoreTabs: false,
        }),
      ),
      React.createElement(AuditLogUI$TabDetails, {
        activeTab: activeTab$1,
        logDetails: logDetails,
        selectedOption: selectedOption,
      }),
    ),
  });
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        React.Fragment,
        {},
        React.createElement(RenderIf.make, {
          condition: HSwitchOrderUtils.isTestData(id) || data.length === 0,
          children: React.createElement(
            "div",
            {
              className:
                "flex items-center gap-2 bg-white w-full border-2 p-3 !opacity-100 rounded-lg text-md font-medium",
            },
            React.createElement(Icon.make, {
              name: "info-circle-unfilled",
              size: 16,
            }),
            React.createElement(
              "div",
              {
                className: "text-lg font-medium opacity-50",
              },
              "No logs available for this " + logType.toLowerCase(),
            ),
          ),
        }),
        React.createElement(RenderIf.make, {
          condition: !(HSwitchOrderUtils.isTestData(id) || data.length === 0),
          children: React.createElement(
            OrderUtils.Section.make,
            {
              children: null,
              customCssClass:
                "bg-white dark:bg-jp-gray-lightgray_background rounded-md pt-2 pb-4 flex gap-7 justify-between h-48-rem !max-h-50-rem !min-w-[55rem] max-w-[72rem] overflow-scroll",
            },
            timeLine,
            codeBlock,
          ),
        }),
      ),
    ),
    screenState: match$4[0],
    customUI: Caml_option.some(
      React.createElement(NoDataFound.make, {
        message: "No logs available for this " + logType.toLowerCase(),
      }),
    ),
    customLoader: Caml_option.some(
      React.createElement(
        "p",
        {
          className: " text-center text-sm text-jp-gray-900",
        },
        "Crunching the latest data…",
      ),
    ),
  });
}

var make = AuditLogUI;

export { LogDetailsSection, TabDetails, make };
/* Icon Not a pure module */
