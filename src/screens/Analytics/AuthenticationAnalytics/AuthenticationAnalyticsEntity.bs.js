// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DynamicChart from "../../../components/DynamicChart.bs.js";
import * as DateTimeUtils from "../../../utils/DateTimeUtils.bs.js";
import * as HSAnalyticsUtils from "../HSAnalyticsUtils.bs.js";
import * as DynamicSingleStat from "../../../components/DynamicSingleStat.bs.js";

var domain = "auth_events";

var singleStatInitialValue = {
  three_ds_sdk_count: 0,
  authentication_success_count: 0,
  authentication_attempt_count: 0,
  challenge_flow_count: 0,
  challenge_attempt_count: 0,
  challenge_success_count: 0,
  frictionless_flow_count: 0,
  frictionless_success_count: 0,
};

var singleStatSeriesInitialValue = {
  three_ds_sdk_count: 0,
  authentication_success_count: 0,
  authentication_attempt_count: 0,
  challenge_flow_count: 0,
  challenge_attempt_count: 0,
  challenge_success_count: 0,
  frictionless_flow_count: 0,
  frictionless_success_count: 0,
  time_series: "",
};

function singleStatItemToObjMapper(json) {
  return Core__Option.getOr(
    Core__Option.map(Core__JSON.Decode.object(json), function (dict) {
      return {
        three_ds_sdk_count: LogicUtils.getInt(dict, "three_ds_sdk_count", 0),
        authentication_success_count: LogicUtils.getInt(
          dict,
          "authentication_success_count",
          0,
        ),
        authentication_attempt_count: LogicUtils.getInt(
          dict,
          "authentication_attempt_count",
          0,
        ),
        challenge_flow_count: LogicUtils.getInt(
          dict,
          "challenge_flow_count",
          0,
        ),
        challenge_attempt_count: LogicUtils.getInt(
          dict,
          "challenge_attempt_count",
          0,
        ),
        challenge_success_count: LogicUtils.getInt(
          dict,
          "challenge_success_count",
          0,
        ),
        frictionless_flow_count: LogicUtils.getInt(
          dict,
          "frictionless_flow_count",
          0,
        ),
        frictionless_success_count: LogicUtils.getInt(
          dict,
          "frictionless_success_count",
          0,
        ),
      };
    }),
    singleStatInitialValue,
  );
}

function singleStatSeriesItemToObjMapper(json) {
  return Core__Option.getOr(
    Core__Option.map(Core__JSON.Decode.object(json), function (dict) {
      return {
        three_ds_sdk_count: LogicUtils.getInt(dict, "three_ds_sdk_count", 0),
        authentication_success_count: LogicUtils.getInt(
          dict,
          "authentication_success_count",
          0,
        ),
        authentication_attempt_count: LogicUtils.getInt(
          dict,
          "authentication_attempt_count",
          0,
        ),
        challenge_flow_count: LogicUtils.getInt(
          dict,
          "challenge_flow_count",
          0,
        ),
        challenge_attempt_count: LogicUtils.getInt(
          dict,
          "challenge_attempt_count",
          0,
        ),
        challenge_success_count: LogicUtils.getInt(
          dict,
          "challenge_success_count",
          0,
        ),
        frictionless_flow_count: LogicUtils.getInt(
          dict,
          "frictionless_flow_count",
          0,
        ),
        frictionless_success_count: LogicUtils.getInt(
          dict,
          "frictionless_success_count",
          0,
        ),
        time_series: LogicUtils.getString(dict, "time_bucket", ""),
      };
    }),
    singleStatSeriesInitialValue,
  );
}

function itemToObjMapper(json) {
  return HSAnalyticsUtils.getQueryData(json).map(singleStatItemToObjMapper);
}

function timeSeriesObjMapper(json) {
  return HSAnalyticsUtils.getQueryData(json).map(function (json) {
    return singleStatSeriesItemToObjMapper(json);
  });
}

var defaultColumns = [
  {
    sectionName: "",
    columns: DynamicSingleStat.generateDefaultStateColumns([
      "ThreeDsCount",
      "AuthenticationSuccessRate",
      "ChallengeFlowRate",
      "FrictionlessFlowRate",
      "ChallengeAttemptRate",
      "ChallengeSuccessRate",
      "FrictionlessSuccessRate",
    ]),
  },
];

function compareLogic(firstValue, secondValue) {
  var temp2 = secondValue[0];
  var temp1 = firstValue[0];
  if (Caml_obj.equal(temp1, temp2)) {
    return 0;
  } else if (Caml_obj.greaterthan(temp1, temp2)) {
    return -1;
  } else {
    return 1;
  }
}

function constructData(key, singlestatTimeseriesData) {
  var tmp;
  switch (key) {
    case "ThreeDsCount":
      tmp = singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          ob.three_ds_sdk_count,
        ];
      });
      break;
    case "AuthenticationSuccessRate":
      tmp = singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          (ob.authentication_success_count * 100) /
            ob.authentication_attempt_count,
        ];
      });
      break;
    case "ChallengeFlowRate":
      tmp = singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          (ob.challenge_flow_count * 100) / ob.three_ds_sdk_count,
        ];
      });
      break;
    case "FrictionlessFlowRate":
      tmp = singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          (ob.frictionless_flow_count * 100) / ob.three_ds_sdk_count,
        ];
      });
      break;
    case "ChallengeAttemptRate":
      tmp = singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          (ob.challenge_attempt_count * 100) / ob.challenge_flow_count,
        ];
      });
      break;
    case "ChallengeSuccessRate":
      tmp = singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          (ob.challenge_success_count * 100) / ob.challenge_flow_count,
        ];
      });
      break;
    case "FrictionlessSuccessRate":
      tmp = singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          (ob.frictionless_success_count * 100) / ob.frictionless_flow_count,
        ];
      });
      break;
  }
  return tmp.toSorted(compareLogic);
}

function getStatData(
  singleStatData,
  timeSeriesData,
  _deltaTimestampData,
  colType,
  _mode,
) {
  switch (colType) {
    case "ThreeDsCount":
      return {
        title: "Payments requiring 3DS Authentication",
        tooltipText:
          "Total number of payments which require 3DS 2.0 Authentication.",
        deltaTooltipComponent: function (param) {
          return null;
        },
        value: singleStatData.three_ds_sdk_count,
        delta: 0.0,
        data: constructData("ThreeDsCount", timeSeriesData),
        statType: "Volume",
        showDelta: false,
      };
    case "AuthenticationSuccessRate":
      return {
        title: "Authentication Success Rate",
        tooltipText: "Successful Authentication Requests over Total Requests.",
        deltaTooltipComponent: function (param) {
          return null;
        },
        value:
          (singleStatData.authentication_success_count * 100.0) /
          singleStatData.authentication_attempt_count,
        delta: 0.0,
        data: constructData("AuthenticationSuccessRate", timeSeriesData),
        statType: "Rate",
        showDelta: false,
      };
    case "ChallengeFlowRate":
      return {
        title: "Challenge Flow Rate",
        tooltipText:
          "Payments requiring a challenge to be passed over total number of payments which require 3DS 2.0 Authentication.",
        deltaTooltipComponent: function (param) {
          return null;
        },
        value:
          (singleStatData.challenge_flow_count * 100.0) /
          singleStatData.three_ds_sdk_count,
        delta: 0.0,
        data: constructData("ChallengeFlowRate", timeSeriesData),
        statType: "Rate",
        showDelta: false,
      };
    case "FrictionlessFlowRate":
      return {
        title: "Frictionless Flow Rate",
        tooltipText:
          "Payments going through a frictionless flow over total number of payments which require 3DS 2.0 Authentication.",
        deltaTooltipComponent: function (param) {
          return null;
        },
        value:
          (singleStatData.frictionless_flow_count * 100.0) /
          singleStatData.three_ds_sdk_count,
        delta: 0.0,
        data: constructData("FrictionlessFlowRate", timeSeriesData),
        statType: "Rate",
        showDelta: false,
      };
    case "ChallengeAttemptRate":
      return {
        title: "Challenge Attempt Rate",
        tooltipText:
          "Percentage of payments where user attempted the challenge.",
        deltaTooltipComponent: function (param) {
          return null;
        },
        value:
          (singleStatData.challenge_attempt_count * 100) /
          singleStatData.challenge_flow_count,
        delta: 0.0,
        data: constructData("ChallengeAttemptRate", timeSeriesData),
        statType: "Rate",
        showDelta: false,
      };
    case "ChallengeSuccessRate":
      return {
        title: "Challenge Success Rate",
        tooltipText:
          "Total number of payments authenticated where user successfully attempted the challenge over the total number of payments requiring a challenge to be passed.",
        deltaTooltipComponent: function (param) {
          return null;
        },
        value:
          (singleStatData.challenge_success_count * 100) /
          singleStatData.challenge_flow_count,
        delta: 0.0,
        data: constructData("ChallengeSuccessRate", timeSeriesData),
        statType: "Rate",
        showDelta: false,
      };
    case "FrictionlessSuccessRate":
      return {
        title: "Frictionless Success Rate",
        tooltipText:
          "Total number of payments authenticated over a frictionless flow successfully over the total number of payments going through a frictionless flow.",
        deltaTooltipComponent: function (param) {
          return null;
        },
        value:
          (singleStatData.challenge_success_count * 100) /
          singleStatData.challenge_flow_count,
        delta: 0.0,
        data: constructData("FrictionlessSuccessRate", timeSeriesData),
        statType: "Rate",
        showDelta: false,
      };
  }
}

function getSingleStatEntity(metrics) {
  return {
    urlConfig: [
      {
        uri: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
        metrics: HSAnalyticsUtils.getStringListFromArrayDict(metrics),
      },
    ],
    getObjects: itemToObjMapper,
    getTimeSeriesObject: timeSeriesObjMapper,
    defaultColumns: defaultColumns,
    getData: getStatData,
    matrixUriMapper: function (param) {
      return window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain;
    },
    statSentiment: {},
    statThreshold: {},
  };
}

var paymentMetricsConfig = [
  {
    metric_name_db: "three_ds_sdk_count",
    metric_label: "Volume",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
  },
];

var authenticationMetricsConfig = [
  {
    metric_name_db: "three_ds_sdk_count",
    metric_label: "Volume",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
  },
];

var authenticationFunnelMetricsConfig = [
  {
    metric_name_db: "three_ds_sdk_count",
    metric_label: "Payments requiring 3DS 2.0 Authentication",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
  },
  {
    metric_name_db: "authentication_attempt_count",
    metric_label: "Authentication Request Attempt",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
  },
  {
    metric_name_db: "authentication_success_count",
    metric_label: "Authentication Request Successful",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
  },
  {
    metric_name_db: "frictionless_flow_count",
    metric_label: "Frictionless Attempted",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
    disabled: true,
  },
  {
    metric_name_db: "challenge_attempt_count",
    metric_label: "Authentication Attempted",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
    data_transformation_func: function (dict) {
      var total_auth_attempts =
        LogicUtils.getFloat(dict, "challenge_attempt_count", 0.0) +
        LogicUtils.getFloat(dict, "frictionless_flow_count", 0.0);
      dict["challenge_attempt_count"] = total_auth_attempts;
      return dict;
    },
  },
  {
    metric_name_db: "frictionless_success_count",
    metric_label: "Frictionless Successful",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
    disabled: true,
  },
  {
    metric_name_db: "challenge_success_count",
    metric_label: "Authentication Successful",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
    data_transformation_func: function (dict) {
      var total_auth_attempts =
        LogicUtils.getFloat(dict, "challenge_success_count", 0.0) +
        LogicUtils.getFloat(dict, "frictionless_success_count", 0.0);
      dict["challenge_success_count"] = total_auth_attempts;
      return dict;
    },
  },
];

function commonAuthenticationChartEntity(tabKeys) {
  return DynamicChart.makeEntity(
    {
      TAG: "String",
      _0: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
    },
    undefined,
    tabKeys,
    [HSAnalyticsUtils.startTimeFilterKey, HSAnalyticsUtils.endTimeFilterKey],
    ["Success Rate", "Volume"],
    [],
    [],
    ["SemiDonut"],
    [
      {
        uri: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
        timeSeriesBody: DynamicChart.getTimeSeriesChart,
        legendBody: DynamicChart.getLegendBody,
        metrics: paymentMetricsConfig,
        timeCol: "time_bucket",
        filterKeys: tabKeys,
      },
    ],
    "User Journey Analytics",
    undefined,
    undefined,
    function (param, param$1) {
      return [""];
    },
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
}

function authenticationFunnelChartEntity(tabKeys) {
  var newrecord = Caml_obj.obj_dup(commonAuthenticationChartEntity(tabKeys));
  newrecord.chartDescription = "Breakdown of ThreeDS 2.0 Journey";
  newrecord.uriConfig = [
    {
      uri: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
      timeSeriesBody: DynamicChart.getTimeSeriesChart,
      legendBody: DynamicChart.getLegendBody,
      metrics: authenticationFunnelMetricsConfig,
      timeCol: "time_bucket",
      filterKeys: tabKeys,
    },
  ];
  newrecord.chartTypes = ["Funnel"];
  return newrecord;
}

export {
  domain,
  singleStatInitialValue,
  singleStatSeriesInitialValue,
  singleStatItemToObjMapper,
  singleStatSeriesItemToObjMapper,
  itemToObjMapper,
  timeSeriesObjMapper,
  defaultColumns,
  compareLogic,
  constructData,
  getStatData,
  getSingleStatEntity,
  paymentMetricsConfig,
  authenticationMetricsConfig,
  authenticationFunnelMetricsConfig,
  commonAuthenticationChartEntity,
  authenticationFunnelChartEntity,
};
/* defaultColumns Not a pure module */
