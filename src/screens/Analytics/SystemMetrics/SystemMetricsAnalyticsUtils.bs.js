// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DynamicChart from "../../../components/DynamicChart.bs.js";
import * as DateTimeUtils from "../../../utils/DateTimeUtils.bs.js";
import * as AnalyticsUtils from "../AnalyticsUtils.bs.js";
import * as HSAnalyticsUtils from "../HSAnalyticsUtils.bs.js";

var domain = "api_events";

var singleStateInitialValue = {
  latency: 0.0,
  api_count: 0,
  status_code_count: 0,
};

var singleStateSeriesInitialValue = {
  latency: 0.0,
  api_count: 0,
  status_code_count: 0,
  time_series: "",
};

function singleStateItemToObjMapper(json) {
  return Core__Option.getOr(
    Core__Option.map(Core__JSON.Decode.object(json), function (dict) {
      return {
        latency: LogicUtils.getFloat(dict, "latency", 0.0),
        api_count: LogicUtils.getInt(dict, "api_count", 0),
        status_code_count: LogicUtils.getInt(dict, "status_code_count", 0),
      };
    }),
    singleStateInitialValue,
  );
}

function singleStateSeriesItemToObjMapper(json) {
  return Core__Option.getOr(
    Core__Option.map(Core__JSON.Decode.object(json), function (dict) {
      return {
        latency: LogicUtils.getFloat(dict, "latency", 0.0),
        api_count: LogicUtils.getInt(dict, "api_count", 0),
        status_code_count: LogicUtils.getInt(dict, "status_code_count", 0),
        time_series: LogicUtils.getString(dict, "time_bucket", ""),
      };
    }),
    singleStateSeriesInitialValue,
  );
}

function itemToObjMapper(json) {
  return HSAnalyticsUtils.getQueryData(json).map(singleStateItemToObjMapper);
}

function timeSeriesObjMapper(json) {
  return HSAnalyticsUtils.getQueryData(json).map(function (json) {
    return singleStateSeriesItemToObjMapper(json);
  });
}

var defaultColumns = [
  {
    sectionName: "",
    columns: [
      {
        colType: "Latency",
      },
      {
        colType: "ApiCount",
      },
    ],
  },
];

function constructData(key, singlestatTimeseriesData) {
  switch (key) {
    case "api_count":
      return singlestatTimeseriesData
        .map(function (ob) {
          return [DateTimeUtils.parseAsFloat(ob.time_series), ob.api_count];
        })
        .toSorted(LogicUtils.compareLogic);
    case "latency":
      return singlestatTimeseriesData
        .map(function (ob) {
          return [DateTimeUtils.parseAsFloat(ob.time_series), ob.latency];
        })
        .toSorted(LogicUtils.compareLogic);
    case "status_code_count":
      return singlestatTimeseriesData
        .map(function (ob) {
          return [
            DateTimeUtils.parseAsFloat(ob.time_series),
            ob.status_code_count,
          ];
        })
        .toSorted(LogicUtils.compareLogic);
    default:
      return [];
  }
}

function getStatData(
  singleStatData,
  timeSeriesData,
  deltaTimestampData,
  colType,
  _mode,
) {
  if (colType === "Latency") {
    return {
      title: "APIs latency",
      tooltipText:
        "API latency refers to the time it takes for a request to travel from the client to the server and back, and it also includes the connector-side latency if it is involved.",
      deltaTooltipComponent: AnalyticsUtils.singlestatDeltaTooltipFormat(
        singleStatData.latency,
        deltaTimestampData.currentSr,
      ),
      value: singleStatData.latency / 1000.0,
      delta: singleStatData.latency,
      data: constructData("latency", timeSeriesData),
      statType: "LatencyMs",
      showDelta: false,
    };
  } else {
    return {
      title: "API Count",
      tooltipText:
        "API request count is the tally of requests made to the Hyperswitch APIs, reflecting the volume of interactions and usage during a defined timeframe.",
      deltaTooltipComponent: AnalyticsUtils.singlestatDeltaTooltipFormat(
        singleStatData.api_count,
        deltaTimestampData.currentSr,
      ),
      value: singleStatData.api_count,
      delta: singleStatData.api_count,
      data: constructData("api_count", timeSeriesData),
      statType: "Volume",
      showDelta: false,
    };
  }
}

function getSingleStatEntity(metrics) {
  return {
    urlConfig: [
      {
        uri: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
        metrics: HSAnalyticsUtils.getStringListFromArrayDict(metrics),
      },
    ],
    getObjects: itemToObjMapper,
    getTimeSeriesObject: timeSeriesObjMapper,
    defaultColumns: defaultColumns,
    getData: getStatData,
    matrixUriMapper: function (param) {
      return window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain;
    },
  };
}

function chartEntity(tabKeys) {
  return DynamicChart.makeEntity(
    {
      TAG: "String",
      _0: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
    },
    undefined,
    tabKeys,
    [HSAnalyticsUtils.startTimeFilterKey, HSAnalyticsUtils.endTimeFilterKey],
    ["Success Rate", "Volume"],
    [],
    [],
    ["Line"],
    [],
    "Payment Analytics",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
}

export {
  domain,
  singleStateInitialValue,
  singleStateSeriesInitialValue,
  singleStateItemToObjMapper,
  singleStateSeriesItemToObjMapper,
  itemToObjMapper,
  timeSeriesObjMapper,
  defaultColumns,
  constructData,
  getStatData,
  getSingleStatEntity,
  chartEntity,
};
/* LogicUtils Not a pure module */
