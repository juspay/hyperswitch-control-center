// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as Modal from "../../../utils/Modal.bs.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Shimmer from "../../../libraries/Shimmer.bs.js";
import * as ToolTip from "../../../components/tooltip/ToolTip.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as DynamicFilter from "../../../components/DynamicFilter.bs.js";
import * as FilterContext from "../../../context/FilterContext.bs.js";
import * as AnalyticsUtils from "../AnalyticsUtils.bs.js";
import * as HSAnalyticsUtils from "../HSAnalyticsUtils.bs.js";
import * as DynamicSingleStat from "../../../components/DynamicSingleStat.bs.js";
import * as PageLoaderWrapper from "../../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as HSwitchRemoteFilter from "../../HSwitchRemoteFilter.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as SystemMetricsAnalyticsUtils from "./SystemMetricsAnalyticsUtils.bs.js";

function SystemMetricsAnalytics$HeadingTile(props) {
  return React.createElement(
    "div",
    {
      className: "flex items-center justify-between",
    },
    React.createElement(
      "div",
      {
        className: "mt-10",
      },
      React.createElement(
        "h2",
        {
          className:
            "font-bold text-xl pb-2 text-black text-opacity-75 dark:text-white dark:text-opacity-75",
        },
        props.pageTitle,
      ),
      React.createElement(
        "div",
        {
          className:
            "text-black pb-2 text-opacity-60 dark:text-white dark:text-opacity-75",
        },
        props.pageSubTitle,
      ),
    ),
  );
}

var HeadingTile = {
  make: SystemMetricsAnalytics$HeadingTile,
};

function SystemMetricsAnalytics$APITableInfo(props) {
  var match = React.useState(function () {
    return false;
  });
  var setShowModal = match[1];
  var showModal = match[0];
  var apis = [
    "PaymentsCreate",
    "IncomingWebhookReceive",
    "PaymentsRetrieve",
    "RefundsCreate",
    "RefundsRetrieve",
    "CustomerPaymentMethodsList",
    "PaymentsConfirm",
    "UserSigninV2",
    "VerifyEmail",
    "PaymentsSessionToken",
    "CustomersCreate",
    "CustomersRetrieve",
    "CustomersDelete",
    "CustomersUpdate",
    "PaymentsUpdate",
    "PaymentsCapture",
    "PaymentsCancel",
    "PaymentMethodsCreate",
    "VerifyPaymentConnector",
    "UserSignOut",
    "PaymentsStart",
    "PaymentsRedirect",
  ];
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(
      "div",
      {
        className: "underline underline-offset-4 font-medium cursor-pointer",
        onClick: function (param) {
          setShowModal(function (param) {
            return !showModal;
          });
        },
      },
      "API endpoints",
    ),
    React.createElement(Modal.make, {
      showModal: showModal,
      setShowModal: setShowModal,
      children: React.createElement(
        "div",
        undefined,
        React.createElement(
          "div",
          {
            className: "mb-3",
          },
          "API endpoints subject to performance metrics monitoring.",
        ),
        React.createElement(
          "div",
          {
            className: "h-96 overflow-scroll show-scrollbar",
          },
          apis.map(function (path) {
            return React.createElement(
              "div",
              {
                className: "bg-gray-100 p-2 mb-1 rounded mr-2",
              },
              "/" + path,
            );
          }),
        ),
      ),
      modalHeading: "API endpoints",
      modalClass: "w-full max-w-md mx-auto md:mt-44 ",
      closeOnOutsideClick: true,
    }),
  );
}

var APITableInfo = {
  make: SystemMetricsAnalytics$APITableInfo,
};

function SystemMetricsAnalytics$HSiwtchPaymentConfirmLatency(props) {
  var url =
    window._env_.apiBaseUrl +
    "/analytics/v1/metrics/" +
    SystemMetricsAnalyticsUtils.domain;
  var match = React.useState(function () {
    return true;
  });
  var setIsLoading = match[1];
  var match$1 = React.useState(function () {
    return 0;
  });
  var setLatency = match$1[1];
  var match$2 = React.useState(function () {
    return 0;
  });
  var setConnectorLatency = match$2[1];
  var connectorLatency = match$2[0];
  var match$3 = React.useState(function () {
    return 0;
  });
  var setOverallrLatency = match$3[1];
  var overallLatency = match$3[0];
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var dateDict = HSwitchRemoteFilter.getDateFilteredObject(
    undefined,
    undefined,
  );
  var singleStatBodyEntity_metrics = [
    "latency",
    "api_count",
    "status_code_count",
  ];
  var singleStatBodyEntity_startDateTime = dateDict.start_time;
  var singleStatBodyEntity_endDateTime = dateDict.end_time;
  var singleStatBodyEntity = {
    metrics: singleStatBodyEntity_metrics,
    startDateTime: singleStatBodyEntity_startDateTime,
    endDateTime: singleStatBodyEntity_endDateTime,
  };
  var singleStatBodyMake = function (singleStatBodyEntity, flowType) {
    var filters = LogicUtils.getJsonFromArrayOfJson([
      ["api_name", ["PaymentsConfirm"]],
      ["status_code", [200.0]],
      ["flow_type", [flowType]],
    ]);
    return [
      AnalyticsUtils.getFilterRequestBody(
        Caml_option.some(singleStatBodyEntity.granularity),
        undefined,
        Caml_option.some(filters),
        Caml_option.some(singleStatBodyEntity.metrics),
        singleStatBodyEntity.delta,
        Caml_option.some(singleStatBodyEntity.prefix),
        undefined,
        singleStatBodyEntity.startDateTime,
        singleStatBodyEntity.endDateTime,
        undefined,
        Caml_option.some(singleStatBodyEntity.mode),
        singleStatBodyEntity.customFilter,
        singleStatBodyEntity.source,
        undefined,
      ),
    ];
  };
  var parseJson = function (json) {
    return LogicUtils.getInt(
      LogicUtils.getDictFromJsonObject(
        Core__Option.getOr(
          LogicUtils.getArrayFromJson(
            LogicUtils.getJsonObjectFromDict(
              LogicUtils.getDictFromJsonObject(json),
              "queryData",
            ),
            [],
          )[0],
          {},
        ),
      ),
      "latency",
      0,
    );
  };
  var getOverallLatency = async function () {
    Core__Promise.$$catch(
      updateDetails(
        url,
        singleStatBodyMake(singleStatBodyEntity, "Payment"),
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      ).then(function (json) {
        setOverallrLatency(function (param) {
          return parseJson(json);
        });
      }),
      function (param) {
        setIsLoading(function (param) {
          return false;
        });
        return Promise.resolve();
      },
    );
  };
  var getConnectorLatency = function () {
    Core__Promise.$$catch(
      updateDetails(
        url,
        singleStatBodyMake(singleStatBodyEntity, "OutgoingEvent"),
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      ).then(function (json) {
        setConnectorLatency(function (param) {
          return parseJson(json);
        });
        setIsLoading(function (param) {
          return false;
        });
      }),
      function (param) {
        setIsLoading(function (param) {
          return false;
        });
        return Promise.resolve();
      },
    );
  };
  React.useEffect(
    function () {
      var value = (overallLatency - connectorLatency) | 0;
      setLatency(function (param) {
        return value;
      });
    },
    [overallLatency, connectorLatency],
  );
  React.useEffect(function () {
    getOverallLatency();
    getConnectorLatency();
  }, []);
  if (match[0]) {
    return React.createElement(
      "div",
      {
        className: "p-4 w-full",
      },
      React.createElement(Shimmer.make, {
        styleClass: "w-full h-28",
      }),
    );
  } else {
    return React.createElement(
      "div",
      {
        className: "mt-4 w-full",
      },
      React.createElement(
        "div",
        {
          className:
            "h-full flex flex-col border rounded dark:border-jp-gray-850 bg-white dark:bg-jp-gray-lightgray_background overflow-hidden singlestatBox p-4 mr-4",
        },
        React.createElement(
          "div",
          {
            className:
              "px-4 pb-4 pt-1 flex flex-col justify-between h-full gap-auto",
          },
          React.createElement(
            "div",
            {
              className: "flex flex-row h-1/2 items-end",
            },
            React.createElement(
              "div",
              {
                className: "font-bold text-3xl",
              },
              LogicUtils.latencyShortNum(
                match$1[0] / 1000.0,
                true,
                undefined,
              ).toLowerCase(),
            ),
          ),
          React.createElement(
            "div",
            {
              className:
                "flex gap-2 items-center pt-4 text-jp-gray-700 font-bold self-start h-1/2",
            },
            React.createElement(
              "div",
              {
                className: "font-semibold text-base text-black dark:text-white",
              },
              "Hyperswitch overhead for payment confirm",
            ),
            React.createElement(ToolTip.make, {
              description:
                "Average time added by the Hyperswitch application to the overall Payments Confirm API latency",
              toolTipFor: Caml_option.some(
                React.createElement(
                  "div",
                  {
                    className: "cursor-pointer",
                  },
                  React.createElement(Icon.make, {
                    name: "info-vacent",
                    size: 13,
                  }),
                ),
              ),
              toolTipPosition: "Top",
            }),
          ),
        ),
      ),
    );
  }
}

var HSiwtchPaymentConfirmLatency = {
  make: SystemMetricsAnalytics$HSiwtchPaymentConfirmLatency,
};

function SystemMetricsAnalytics$SystemMetricsAnalytics(props) {
  var filterUri = props.filterUri;
  var singleStatEntity = props.singleStatEntity;
  var filteredTabKeys = props.filteredTabKeys;
  var endTimeFilterKey = props.endTimeFilterKey;
  var startTimeFilterKey = props.startTimeFilterKey;
  var __pageSubTitle = props.pageSubTitle;
  var __pageTitle = props.pageTitle;
  var pageTitle = __pageTitle !== undefined ? __pageTitle : "";
  var pageSubTitle = __pageSubTitle !== undefined ? __pageSubTitle : "";
  var match = React.useContext(FilterContext.filterContext);
  var filterValueJson = match.filterValueJson;
  var startTimeVal = LogicUtils.getString(
    filterValueJson,
    startTimeFilterKey,
    "",
  );
  var endTimeVal = LogicUtils.getString(filterValueJson, endTimeFilterKey, "");
  var match$1 = React.useContext(FilterContext.filterContext);
  var updateExistingKeys = match$1.updateExistingKeys;
  var defaultFilters = [startTimeFilterKey, endTimeFilterKey];
  var chartEntity1 = props.chartEntity.default;
  var chartEntity1$1;
  if (chartEntity1 !== undefined) {
    var newrecord = Caml_obj.obj_dup(chartEntity1);
    chartEntity1$1 =
      ((newrecord.allFilterDimension = filteredTabKeys), newrecord);
  } else {
    chartEntity1$1 = undefined;
  }
  var setInitialFilters = HSwitchRemoteFilter.useSetInitialFilters(
    updateExistingKeys,
    startTimeFilterKey,
    endTimeFilterKey,
    undefined,
    "analytics",
    undefined,
  );
  React.useEffect(function () {
    setInitialFilters();
  }, []);
  var filterBody = React.useMemo(
    function () {
      var filterBodyEntity = {
        startTime: startTimeVal,
        endTime: endTimeVal,
        groupByNames: filteredTabKeys,
        source: "BATCH",
      };
      return AnalyticsUtils.filterBody(filterBodyEntity);
    },
    [startTimeVal, endTimeVal, filteredTabKeys.join(",")],
  );
  var match$2 = React.useState(function () {});
  var setFilterDataJson = match$2[1];
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match$3 = React.useContext(FilterContext.filterContext);
  var filterValueJson$1 = match$3.filterValueJson;
  var startTimeVal$1 = LogicUtils.getString(filterValueJson$1, "startTime", "");
  var endTimeVal$1 = LogicUtils.getString(filterValueJson$1, "endTime", "");
  React.useEffect(
    function () {
      setFilterDataJson(function (param) {});
      if (
        LogicUtils.isNonEmptyString(startTimeVal$1) &&
        LogicUtils.isNonEmptyString(endTimeVal$1)
      ) {
        try {
          Core__Promise.$$catch(
            updateDetails(
              filterUri,
              filterBody,
              "Post",
              undefined,
              undefined,
              undefined,
              undefined,
            ).then(function (json) {
              setFilterDataJson(function (param) {
                return json;
              });
            }),
            function (param) {
              return Promise.resolve();
            },
          );
        } catch (exn) {}
      }
    },
    [startTimeVal$1, endTimeVal$1, JSON.stringify(filterBody)],
  );
  var filterData = Core__Option.getOr(match$2[0], {});
  return React.createElement(RenderIf.make, {
    condition: Object.entries(filterValueJson).length > 0,
    children:
      chartEntity1$1 !== undefined
        ? React.createElement(
            "div",
            {
              className: "h-75-vh",
            },
            React.createElement(SystemMetricsAnalytics$HeadingTile, {
              pageTitle: pageTitle,
              pageSubTitle: pageSubTitle,
            }),
            React.createElement(
              "div",
              {
                className: "mt-2 -ml-1",
              },
              JsxPPXReactSupportU.createElementWithKey(
                "1",
                DynamicFilter.make,
                {
                  initialFilters: [],
                  options: [],
                  popupFilterFields: [],
                  initialFixedFilters: props.initialFixedFilters(filterData),
                  defaultFilterKeys: defaultFilters,
                  tabNames: filteredTabKeys,
                  updateUrlWith: updateExistingKeys,
                  showCustomFilter: false,
                  filterFieldsPortalName:
                    HSAnalyticsUtils.filterFieldsPortalName,
                  filtersDisplayOption: false,
                  refreshFilters: false,
                },
              ),
            ),
            React.createElement(SystemMetricsAnalytics$APITableInfo, {}),
            React.createElement(DynamicSingleStat.make, {
              entity: singleStatEntity,
              filterKeys: chartEntity1$1.allFilterDimension,
              startTimeFilterKey: startTimeFilterKey,
              endTimeFilterKey: endTimeFilterKey,
              moduleName: props.moduleName,
              showPercentage: false,
              statSentiment: Core__Option.getOr(
                singleStatEntity.statSentiment,
                {},
              ),
            }),
          )
        : null,
  });
}

var SystemMetricsAnalytics = {
  make: SystemMetricsAnalytics$SystemMetricsAnalytics,
};

function SystemMetricsAnalytics$1(props) {
  var getURL = APIUtils.useGetURL();
  var match = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return [];
  });
  var setMetrics = match$1[1];
  var match$2 = React.useState(function () {
    return [];
  });
  var setDimensions = match$2[1];
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var loadInfo = async function () {
    try {
      var infoUrl = getURL(
        "ANALYTICS_PAYMENTS",
        "Get",
        Caml_option.some(SystemMetricsAnalyticsUtils.domain),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var infoDetails = await fetchDetails(infoUrl);
      setMetrics(function (param) {
        return LogicUtils.getArrayFromDict(
          LogicUtils.getDictFromJsonObject(infoDetails),
          "metrics",
          [],
        );
      });
      setDimensions(function (param) {
        return LogicUtils.getArrayFromDict(
          LogicUtils.getDictFromJsonObject(infoDetails),
          "dimensions",
          [],
        );
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  React.useEffect(function () {
    loadInfo();
  }, []);
  var tabKeys = HSAnalyticsUtils.getStringListFromArrayDict(match$2[0]);
  var title = "System Metrics";
  var subTitle =
    "Gain Insights, monitor performance and make Informed Decisions with System Metrics.";
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      JsxPPXReactSupportU.createElementWithKey(
        "SystemMetrics",
        SystemMetricsAnalytics$SystemMetricsAnalytics,
        {
          pageTitle: title,
          pageSubTitle: subTitle,
          startTimeFilterKey: HSAnalyticsUtils.startTimeFilterKey,
          endTimeFilterKey: HSAnalyticsUtils.endTimeFilterKey,
          chartEntity: {
            default: SystemMetricsAnalyticsUtils.chartEntity(tabKeys),
          },
          filteredTabKeys: tabKeys,
          initialFixedFilters: HSAnalyticsUtils.initialFixedFilterFields,
          singleStatEntity: SystemMetricsAnalyticsUtils.getSingleStatEntity(
            match$1[0],
          ),
          filterUri:
            window._env_.apiBaseUrl +
            "/analytics/v1/filters/" +
            SystemMetricsAnalyticsUtils.domain,
          moduleName: "SystemMetrics",
        },
      ),
    ),
    screenState: match[0],
    customUI: Caml_option.some(
      React.createElement(HSAnalyticsUtils.NoData.make, {
        title: title,
        subTitle: subTitle,
      }),
    ),
  });
}

var make = SystemMetricsAnalytics$1;

export {
  HeadingTile,
  APITableInfo,
  HSiwtchPaymentConfirmLatency,
  SystemMetricsAnalytics,
  make,
};
/* Icon Not a pure module */
