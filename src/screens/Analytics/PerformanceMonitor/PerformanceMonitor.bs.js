// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DynamicFilter from "../../../components/DynamicFilter.bs.js";
import * as FilterContext from "../../../context/FilterContext.bs.js";
import * as AnalyticsUtils from "../AnalyticsUtils.bs.js";
import * as HSAnalyticsUtils from "../HSAnalyticsUtils.bs.js";
import * as PageLoaderWrapper from "../../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as BarChartPerformance from "./BarChartPerformance/BarChartPerformance.bs.js";
import * as HSwitchRemoteFilter from "../../HSwitchRemoteFilter.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as PieChartPerformance from "./DonutchartPerformance/PieChartPerformance.bs.js";
import * as PerformanceMonitorEntity from "./PerformanceMonitorEntity.bs.js";

function PerformanceMonitor(props) {
  var getURL = APIUtils.useGetURL();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var defaultFilters = [
    HSAnalyticsUtils.startTimeFilterKey,
    HSAnalyticsUtils.endTimeFilterKey,
  ];
  var match = React.useContext(FilterContext.filterContext);
  var filterValueJson = match.filterValueJson;
  var updateExistingKeys = match.updateExistingKeys;
  var startTimeVal = LogicUtils.getString(filterValueJson, "startTime", "");
  var endTimeVal = LogicUtils.getString(filterValueJson, "endTime", "");
  var match$1 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$1[1];
  var match$2 = React.useState(function () {
    return PerformanceMonitorEntity.dimensionObjMapper([]);
  });
  var setDimensions = match$2[1];
  var dimensions = match$2[0];
  var setInitialFilters = HSwitchRemoteFilter.useSetInitialFilters(
    updateExistingKeys,
    HSAnalyticsUtils.startTimeFilterKey,
    HSAnalyticsUtils.endTimeFilterKey,
    undefined,
    "analytics",
    undefined,
  );
  var filterBody = function (groupBy) {
    var filterBodyEntity = {
      startTime: startTimeVal,
      endTime: endTimeVal,
      groupByNames: groupBy,
      source: "BATCH",
    };
    return AnalyticsUtils.filterBody(filterBodyEntity);
  };
  var fetchFilterData = async function (dimensions) {
    try {
      var groupBy = HSAnalyticsUtils.getStringListFromArrayDict(dimensions);
      var filterUri =
        window._env_.apiBaseUrl + "/analytics/v1/filters/payments";
      var res = await updateDetails(
        filterUri,
        filterBody(groupBy),
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var dim = PerformanceMonitorEntity.dimensionObjMapper(
        LogicUtils.getArrayFromJson(
          LogicUtils.getJsonObjectFromDict(
            LogicUtils.getDictFromJsonObject(res),
            "queryData",
          ),
          [],
        ),
      );
      setDimensions(function (param) {
        return dim;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      return;
    }
  };
  var loadInfo = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var infoUrl = getURL(
        "ANALYTICS_PAYMENTS",
        "Get",
        Caml_option.some("payments"),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var infoDetails = await fetchDetails(infoUrl);
      var dimensions = LogicUtils.getArrayFromDict(
        LogicUtils.getDictFromJsonObject(infoDetails),
        "dimensions",
        [],
      );
      fetchFilterData(dimensions);
      return;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  React.useEffect(function () {
    setInitialFilters();
  }, []);
  React.useEffect(
    function () {
      if (
        LogicUtils.isNonEmptyString(startTimeVal) &&
        LogicUtils.isNonEmptyString(endTimeVal)
      ) {
        loadInfo();
      }
    },
    [startTimeVal, endTimeVal],
  );
  var topFilterUi = React.createElement(
    "div",
    {
      className: "flex flex-row",
    },
    JsxPPXReactSupportU.createElementWithKey("1", DynamicFilter.make, {
      initialFilters: [],
      options: [],
      popupFilterFields: [],
      initialFixedFilters: HSAnalyticsUtils.initialFixedFilterFields({}),
      defaultFilterKeys: defaultFilters,
      tabNames: [],
      updateUrlWith: updateExistingKeys,
      showCustomFilter: false,
      filterFieldsPortalName: HSAnalyticsUtils.filterFieldsPortalName,
      refreshFilters: false,
    }),
  );
  return React.createElement(React.Fragment, {
    children: Caml_option.some(
      React.createElement(
        PageLoaderWrapper.make,
        {
          children: Caml_option.some(null),
          screenState: match$1[0],
        },
        React.createElement(
          "div",
          {
            className:
              "-ml-1 sticky top-0 z-30  p-1 bg-hyperswitch_background py-3 -mt-3 rounded-lg border",
          },
          topFilterUi,
        ),
        React.createElement(
          "div",
          {
            className: "flex gap-2",
          },
          React.createElement(
            "div",
            {
              className: "flex-col",
            },
            React.createElement(BarChartPerformance.make, {
              startTimeVal: startTimeVal,
              endTimeVal: endTimeVal,
              dimensions: dimensions,
              entity: PerformanceMonitorEntity.getStatusPerformanceEntity,
            }),
          ),
        ),
        React.createElement(
          "div",
          {
            className: "flex gap-2",
          },
          React.createElement(
            "div",
            {
              className: "flex-col",
            },
            React.createElement(BarChartPerformance.make, {
              startTimeVal: startTimeVal,
              endTimeVal: endTimeVal,
              dimensions: dimensions,
              entity: PerformanceMonitorEntity.getConnectorPerformanceEntity,
            }),
          ),
          React.createElement(
            "div",
            {
              className: "flex-col",
            },
            React.createElement(BarChartPerformance.make, {
              startTimeVal: startTimeVal,
              endTimeVal: endTimeVal,
              dimensions: dimensions,
              entity:
                PerformanceMonitorEntity.getPaymentMethodPerformanceEntity,
            }),
          ),
        ),
        React.createElement(
          "div",
          {
            className: "grid grid-cols-3 gap-4",
          },
          React.createElement(
            "div",
            {
              className: "",
            },
            React.createElement(PieChartPerformance.make, {
              startTimeVal: startTimeVal,
              endTimeVal: endTimeVal,
              dimensions: dimensions,
              entity: PerformanceMonitorEntity.getConnectorFailureEntity,
            }),
          ),
          React.createElement(
            "div",
            {
              className: "",
            },
            React.createElement(PieChartPerformance.make, {
              startTimeVal: startTimeVal,
              endTimeVal: endTimeVal,
              dimensions: dimensions,
              entity: PerformanceMonitorEntity.getPaymentMethodFailureEntity,
            }),
          ),
          React.createElement(
            "div",
            {
              className: "",
            },
            React.createElement(PieChartPerformance.make, {
              startTimeVal: startTimeVal,
              endTimeVal: endTimeVal,
              dimensions: dimensions,
              entity:
                PerformanceMonitorEntity.getConnectorPaymentMethodFailureEntity,
            }),
          ),
        ),
      ),
    ),
  });
}

var make = PerformanceMonitor;

export { make };
/* react Not a pure module */
