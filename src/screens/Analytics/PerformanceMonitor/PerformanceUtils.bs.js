// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

function distributionObjMapper(dict) {
  return {
    payment_count: LogicUtils.getInt(
      LogicUtils.getDictFromJsonObject(dict),
      "payment_count",
      0,
    ),
    status: LogicUtils.getString(
      LogicUtils.getDictFromJsonObject(dict),
      "status",
      "",
    ),
    connector: LogicUtils.getString(
      LogicUtils.getDictFromJsonObject(dict),
      "connector",
      "",
    ),
    payment_method: LogicUtils.getString(
      LogicUtils.getDictFromJsonObject(dict),
      "payment_method",
      "",
    ),
  };
}

function paymentDistributionObjMapper(json) {
  return LogicUtils.getArrayFromDict(
    LogicUtils.getDictFromJsonObject(json),
    "queryData",
    [],
  ).map(function (dict) {
    return distributionObjMapper(dict);
  });
}

var defaultDimesions_values = [];

var defaultDimesions = {
  dimension: "no_value",
  values: defaultDimesions_values,
};

function getSpecificDimension(dimensions, dimension) {
  return Core__Option.getOr(
    dimensions
      .filter(function (ele) {
        return ele.dimension === dimension;
      })
      .at(0),
    defaultDimesions,
  );
}

function getGroupByForPerformance(dimensions) {
  return dimensions.map(function (v) {
    return v;
  });
}

function getMetricForPerformance(metrics) {
  return metrics.map(function (v) {
    return v;
  });
}

function getFilterForPerformance(
  dimensions,
  filters,
  customOpt,
  customValueOpt,
) {
  var custom =
    customOpt !== undefined ? Caml_option.valFromOption(customOpt) : undefined;
  var customValue =
    customValueOpt !== undefined
      ? Caml_option.valFromOption(customValueOpt)
      : undefined;
  var filtersDict = {};
  var customFilter = Core__Option.getOr(custom, "no_value");
  filters.forEach(function (filter) {
    var data =
      filter === customFilter
        ? Core__Option.getOr(customValue, []).map(function (v) {
            return v;
          })
        : getSpecificDimension(dimensions, filter).values.map(function (v) {
            return v;
          });
    filtersDict[filter] = data;
  });
  return filtersDict;
}

function getTimeRange(startTime, endTime) {
  return Object.fromEntries([
    ["startTime", startTime],
    ["endTimeVal", endTime],
  ]);
}

function requestBody(
  dimensions,
  startTime,
  endTime,
  metrics,
  groupBy,
  filters,
  customFilter,
  applyFilterFor,
) {
  var timeRange = getTimeRange(startTime, endTime);
  var metrics$1 = metrics.map(function (v) {
    return v;
  });
  var filters$1 = getFilterForPerformance(
    dimensions,
    filters,
    Caml_option.some(customFilter),
    Caml_option.some(applyFilterFor),
  );
  var groupByNames = groupBy.map(function (v) {
    return v;
  });
  return [
    {
      timeRange: timeRange,
      groupByNames: groupByNames,
      filters: filters$1,
      metrics: metrics$1,
    },
  ];
}

function getGroupByKey(dict, keys) {
  return keys
    .map(function (key) {
      return LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(dict),
        key,
        "",
      );
    })
    .join("+");
}

function getGroupByDataForStatusAndPaymentCount(array, keys) {
  var result = {};
  array.forEach(function (entry) {
    var key = getGroupByKey(entry, keys);
    var connectorResult = Js_dict.get(result, key);
    if (connectorResult !== undefined) {
      var st = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(entry),
        "status",
        "",
      );
      var pc = LogicUtils.getInt(
        LogicUtils.getDictFromJsonObject(entry),
        "payment_count",
        0,
      );
      var currentCount = Belt_Option.getWithDefault(
        Js_dict.get(connectorResult, st),
        0,
      );
      connectorResult[st] = (currentCount + pc) | 0;
      return;
    }
    var newConnectorResult = {};
    var st$1 = LogicUtils.getString(
      LogicUtils.getDictFromJsonObject(entry),
      "status",
      "",
    );
    var pc$1 = LogicUtils.getInt(
      LogicUtils.getDictFromJsonObject(entry),
      "payment_count",
      0,
    );
    result[key] = newConnectorResult;
    newConnectorResult[st$1] = pc$1;
  });
  console.log(result, "result");
  return result;
}

var paymentDistributionInitialValue = {
  payment_count: 0,
  status: "",
  connector: "",
  payment_method: "",
};

export {
  paymentDistributionInitialValue,
  distributionObjMapper,
  paymentDistributionObjMapper,
  defaultDimesions,
  getSpecificDimension,
  getGroupByForPerformance,
  getMetricForPerformance,
  getFilterForPerformance,
  getTimeRange,
  requestBody,
  getGroupByKey,
  getGroupByDataForStatusAndPaymentCount,
};
/* LogicUtils Not a pure module */
