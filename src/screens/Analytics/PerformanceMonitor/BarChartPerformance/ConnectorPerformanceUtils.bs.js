// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as PaymentAnalyticsEntity from "../../PaymentsAnalytics/PaymentAnalyticsEntity.bs.js";

function getBarOptions(mappedResponse) {
  var groupedData = Core__Array.reduce(
    mappedResponse,
    {},
    function (acc, curr) {
      var d = LogicUtils.getArrayFromDict(acc, curr.status, []);
      d.push(curr);
      acc[curr.status] = d;
      return acc;
    },
  );
  var charged = LogicUtils.getArrayFromDict(groupedData, "charged", []).map(
    function (dict) {
      return PaymentAnalyticsEntity.distributionObjMapper(dict);
    },
  );
  var failure = LogicUtils.getArrayFromDict(groupedData, "failure", []).map(
    function (dict) {
      return PaymentAnalyticsEntity.distributionObjMapper(dict);
    },
  );
  var missingInFailure = charged
    .filter(function (c) {
      return !failure.some(function (f) {
        return f.connector === c.connector;
      });
    })
    .map(function (c) {
      return {
        payment_count: 0,
        status: "failure",
        connector: c.connector,
      };
    });
  var missingInCharged = failure
    .filter(function (c) {
      return !charged.some(function (f) {
        return f.connector === c.connector;
      });
    })
    .map(function (c) {
      return {
        payment_count: 0,
        status: "charged",
        connector: c.connector,
      };
    });
  while (failure.length < charged.length && missingInFailure.length > 0) {
    var shift = Core__Option.getOr(
      missingInFailure.shift(),
      PaymentAnalyticsEntity.paymentDistributionInitialValue,
    );
    failure.push(shift);
  }
  while (charged.length < failure.length && missingInCharged.length > 0) {
    var shift$1 = Core__Option.getOr(
      missingInCharged.shift(),
      PaymentAnalyticsEntity.paymentDistributionInitialValue,
    );
    charged.push(shift$1);
  }
  return [
    charged.map(function (v) {
      return v.connector;
    }),
    [
      {
        name: "Success",
        data: charged.map(function (v) {
          return v.payment_count;
        }),
      },
      {
        name: "Failed",
        data: failure.map(function (v) {
          return v.payment_count;
        }),
      },
    ],
  ];
}

export { getBarOptions };
/* LogicUtils Not a pure module */
