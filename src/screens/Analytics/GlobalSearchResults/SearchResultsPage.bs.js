// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Loader from "../../../components/Loader.bs.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as UrlUtils from "../../../utils/UrlUtils.bs.js";
import * as PageUtils from "../../Helpers/PageUtils.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DisputeTable from "./GlobalSearchTables/Disputes/DisputeTable.bs.js";
import * as HSwitchUtils from "../../HSwitchUtils.bs.js";
import * as RefundsTable from "./GlobalSearchTables/Refunds/RefundsTable.bs.js";
import * as SidebarValues from "../../../entryPoints/SidebarValues.bs.js";
import * as GlobalSearchBar from "../GlobalSearch/GlobalSearchBar.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as GlobalSearchTypes from "../GlobalSearch/GlobalSearchTypes.bs.js";
import * as PaymentIntentTable from "./GlobalSearchTables/PaymentIntent/PaymentIntentTable.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as PaymentAttemptTable from "./GlobalSearchTables/PaymentAttempt/PaymentAttemptTable.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as GlobalSearchBarUtils from "../GlobalSearch/GlobalSearchBarUtils.bs.js";
import * as SearchResultsPageUtils from "./SearchResultsPageUtils.bs.js";

function SearchResultsPage$RenderSearchResultBody(props) {
  var section = props.section;
  var match = section.section;
  switch (match) {
    case "Local":
      return section.results.map(function (item, indx) {
        var elementsArray = item.texts;
        return React.createElement(
          "div",
          {
            key: indx.toString(),
            className: "p-2 text-sm cursor-pointer hover:bg-gray-100 -ml-2",
            onClick: function (param) {
              var redirectLink = Core__Option.getOr(
                Core__JSON.Decode.string(item.redirect_link),
                "",
              );
              if (LogicUtils.isNonEmptyString(redirectLink)) {
                return RescriptReactRouter.replace(
                  GlobalVars.appendDashboardPath(redirectLink),
                );
              }
            },
          },
          elementsArray.map(function (item, index) {
            var elementValue = Core__Option.getOr(
              Core__JSON.Decode.string(item),
              "",
            );
            return JsxPPXReactSupportU.createElementVariadicWithKey(
              index.toString(),
              RenderIf.make,
              {
                condition: LogicUtils.isNonEmptyString(elementValue),
                children: null,
              },
              [
                React.createElement(
                  "span",
                  {
                    key: index.toString(),
                    className:
                      " font-medium text-lightgray_background opacity-60 underline underline-offset-4",
                  },
                  elementValue,
                ),
                React.createElement(RenderIf.make, {
                  condition:
                    index >= 0 && index < ((elementsArray.length - 1) | 0),
                  children: React.createElement(
                    "span",
                    {
                      className: "mx-2 text-lightgray_background opacity-60",
                    },
                    ">",
                  ),
                }),
              ],
            );
          }),
        );
      });
    case "PaymentIntents":
      return React.createElement(PaymentIntentTable.PreviewTable.make, {
        data: section.results,
      });
    case "PaymentAttempts":
      return React.createElement(PaymentAttemptTable.PreviewTable.make, {
        data: section.results,
      });
    case "Refunds":
      return React.createElement(RefundsTable.PreviewTable.make, {
        data: section.results,
      });
    case "Disputes":
      return React.createElement(DisputeTable.PreviewTable.make, {
        data: section.results,
      });
    case "Others":
    case "Default":
      return "Not implemented";
  }
}

var RenderSearchResultBody = {
  make: SearchResultsPage$RenderSearchResultBody,
};

function SearchResultsPage$SearchResultsComponent(props) {
  var searchText = props.searchText;
  var searchResults = props.searchResults;
  return searchResults.map(function (section, i) {
    var borderClass =
      searchResults.length > 0 ? "" : "border-b dark:border-jp-gray-960";
    return React.createElement(
      "div",
      {
        key: i.toString(),
        className: "py-5 " + borderClass,
      },
      React.createElement(
        "div",
        {
          className: "flex justify-between",
        },
        React.createElement(
          "div",
          {
            className: "text-lightgray_background font-bold  text-lg pb-2",
          },
          GlobalSearchTypes.getSectionHeader(section.section),
        ),
        React.createElement(GlobalSearchBarUtils.ShowMoreLink.make, {
          section: section,
          textStyleClass: "text-sm pt-2 font-medium text-blue-900",
          searchText: searchText,
        }),
      ),
      React.createElement(SearchResultsPage$RenderSearchResultBody, {
        section: section,
      }),
    );
  });
}

var SearchResultsComponent = {
  make: SearchResultsPage$SearchResultsComponent,
};

function SearchResultsPage(props) {
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var prefix = LogicUtils.useUrlPrefix();
  var match = React.useState(function () {
    return "Idle";
  });
  var setState = match[1];
  var match$1 = React.useState(function () {
    return "";
  });
  var setSearchText = match$1[1];
  var match$2 = React.useState(function () {
    return [];
  });
  var setSearchResults = match$2[1];
  var searchResults = match$2[0];
  var globalSearchResult = Recoil.useRecoilValue(
    HyperswitchAtom.globalSeacrchAtom,
  );
  var merchentDetails = HSwitchUtils.useMerchantDetailsValue();
  var isReconEnabled = merchentDetails.recon_status === "Active";
  var hswitchTabs = SidebarValues.useGetSidebarValues(isReconEnabled);
  var query = LogicUtils.getString(
    UrlUtils.useGetFilterDictFromUrl(""),
    "query",
    "",
  );
  var match$3 = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var permissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var merchantDetailsValue = HSwitchUtils.useMerchantDetailsValue();
  var isShowRemoteResults =
    match$3.globalSearch && permissionJson.operationsView === "Access";
  var getSearchResults = async function (results) {
    try {
      var url = getURL(
        "GLOBAL_SEARCH",
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = GlobalSearchBarUtils.generateSearchBody(
        query,
        merchantDetailsValue.merchant_id,
      );
      var response = await fetchDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var local_results = [];
      results.forEach(function (item) {
        var match = item.section;
        if (match !== "Local") {
          return;
        }
        Caml_splice_call.spliceObjApply(local_results, "push", [item.results]);
      });
      var remote_results = GlobalSearchBarUtils.parseResponse(response);
      var data = {
        local_results: local_results,
        remote_results: remote_results,
        searchText: query,
      };
      var match = SearchResultsPageUtils.getSearchresults(data);
      var text = match[1];
      var results$1 = match[0];
      setSearchResults(function (param) {
        return results$1;
      });
      setSearchText(function (param) {
        return text;
      });
      return setState(function (param) {
        return "Loaded";
      });
    } catch (exn) {
      return setState(function (param) {
        return "Failed";
      });
    }
  };
  React.useEffect(
    function () {
      var match = SearchResultsPageUtils.getSearchresults(globalSearchResult);
      var text = match[1];
      var results = match[0];
      if (LogicUtils.isNonEmptyString(text)) {
        setSearchResults(function (param) {
          return results;
        });
        setSearchText(function (param) {
          return text;
        });
        setState(function (param) {
          return "Loaded";
        });
      } else if (LogicUtils.isNonEmptyString(query)) {
        var results$1 = [];
        setState(function (param) {
          return "Loading";
        });
        var localResults = GlobalSearchBarUtils.getLocalMatchedResults(
          query,
          hswitchTabs,
        );
        if (localResults.results.length > 0) {
          results$1.push(localResults);
        }
        if (isShowRemoteResults) {
          getSearchResults(results$1);
        } else {
          if (results$1.length > 0) {
            setSearchResults(function (param) {
              return results$1;
            });
          } else {
            setSearchResults(function (param) {
              return [];
            });
          }
          setState(function (param) {
            return "Loaded";
          });
        }
      } else {
        setState(function (param) {
          return "Idle";
        });
        setSearchResults(function (param) {
          return [];
        });
      }
    },
    [query, url.search],
  );
  var tmp;
  tmp =
    match[0] === "Loading"
      ? React.createElement(
          "div",
          {
            className: "my-14 py-4",
          },
          React.createElement(Loader.make, {}),
        )
      : searchResults.length === 0
        ? React.createElement(GlobalSearchBar.EmptyResult.make, {
            prefix: prefix,
            searchText: match$1[0],
          })
        : React.createElement(SearchResultsPage$SearchResultsComponent, {
            searchResults: searchResults,
            searchText: query,
          });
  return React.createElement(
    "div",
    undefined,
    React.createElement(PageUtils.PageHeading.make, {
      title: "Search results",
    }),
    tmp,
  );
}

var make = SearchResultsPage;

export { RenderSearchResultBody, SearchResultsComponent, make };
/* react Not a pure module */
