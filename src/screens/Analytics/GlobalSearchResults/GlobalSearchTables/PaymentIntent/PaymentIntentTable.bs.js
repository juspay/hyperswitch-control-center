// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Recoil from "recoil";
import * as APIUtils from "../../../../APIUtils/APIUtils.bs.js";
import * as UrlUtils from "../../../../../utils/UrlUtils.bs.js";
import * as PageUtils from "../../../../Helpers/PageUtils.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as LoadedTable from "../../../../../components/LoadedTable.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as PageLoaderWrapper from "../../../../Helpers/PageLoaderWrapper.bs.js";
import * as ResultsTableUtils from "../ResultsTableUtils.bs.js";
import * as PaymentIntentEntity from "./PaymentIntentEntity.bs.js";

function PaymentIntentTable$PreviewTable(props) {
  var tableData = props.data
    .map(function (item) {
      var data = Core__Option.getOr(item.texts[0], {});
      return Core__Option.getOr(Core__JSON.Decode.object(data), {});
    })
    .filter(function (dict) {
      return Object.keys(dict).length > 0;
    })
    .map(function (item) {
      return PaymentIntentEntity.tableItemToObjMapper(item);
    });
  return React.createElement(LoadedTable.make, {
    visibleColumns: PaymentIntentEntity.visibleColumns,
    defaultSort: {
      key: "",
      order: "INC",
    },
    title: PaymentIntentEntity.domain,
    actualData: tableData,
    totalResults: tableData.length,
    resultsPerPage: 10,
    offset: 0,
    setOffset: function (param) {},
    entity: PaymentIntentEntity.tableEntity,
    currrentFetchCount: tableData.length,
    hideTitle: true,
    ignoreHeaderBg: true,
    tableLocalFilter: false,
    tableheadingClass: ResultsTableUtils.tableBorderClass,
    tableBorderClass: ResultsTableUtils.tableBorderClass,
    tableDataBorderClass: ResultsTableUtils.tableBorderClass,
    isAnalyticsModule: false,
    paginationClass: "hidden",
    showResultsPerPageSelector: false,
  });
}

var PreviewTable = {
  make: PaymentIntentTable$PreviewTable,
};

function PaymentIntentTable(props) {
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var fetchTableData = ResultsTableUtils.useGetData();
  var match = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return [];
  });
  var setData = match$1[1];
  var data = match$1[0];
  var match$2 = React.useState(function () {
    return 0;
  });
  var setTotalCount = match$2[1];
  var defaultValue = {
    offset: 0,
    resultsPerPage: 10,
  };
  var pageDetailDict = Recoil.useRecoilValue(LoadedTable.table_pageDetails);
  var setPageDetails = Recoil.useSetRecoilState(LoadedTable.table_pageDetails);
  var pageDetail = Core__Option.getOr(
    pageDetailDict[PaymentIntentEntity.domain],
    defaultValue,
  );
  var match$3 = React.useState(function () {
    return pageDetail.offset;
  });
  var setOffset = match$3[1];
  var offset = match$3[0];
  var searchText = LogicUtils.getString(
    UrlUtils.useGetFilterDictFromUrl(""),
    "query",
    "",
  );
  var clearPageDetails = function () {
    var newDict = Object.fromEntries(Object.entries(pageDetailDict));
    newDict[PaymentIntentEntity.domain] = defaultValue;
    setPageDetails(function (param) {
      return newDict;
    });
  };
  var getData = async function () {
    setScreenState(function (param) {
      return "Loading";
    });
    try {
      var match = await fetchTableData(
        updateDetails,
        offset,
        searchText,
        PaymentIntentEntity.domain,
      );
      var total = match[1];
      var arr = Core__Array.make(offset, {});
      if (total <= offset) {
        setOffset(function (param) {
          return 0;
        });
      }
      if (total <= 0) {
        return setScreenState(function (param) {
          return "Custom";
        });
      }
      var dataDictArr = Belt_Array.keepMap(match[0], Core__JSON.Decode.object);
      var orderData = arr
        .concat(dataDictArr)
        .map(PaymentIntentEntity.tableItemToObjMapper);
      var list = orderData.map(function (prim) {
        return prim;
      });
      setTotalCount(function (param) {
        return total;
      });
      setData(function (param) {
        return list;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      return setScreenState(function (param) {
        return {
          TAG: "Error",
          _0: "Something went wrong!",
        };
      });
    }
  };
  React.useEffect(
    function () {
      if (searchText.length > 0) {
        getData();
      } else {
        setScreenState(function (param) {
          return "Success";
        });
      }
      return function () {
        clearPageDetails();
      };
    },
    [offset, searchText],
  );
  return React.createElement(
    "div",
    {
      className: "flex flex-col mx-auto h-full w-full  min-h-[50vh]",
    },
    React.createElement(PageUtils.PageHeading.make, {
      title: "Payment Intent",
    }),
    React.createElement(PageLoaderWrapper.make, {
      children: Caml_option.some(
        React.createElement(LoadedTable.make, {
          visibleColumns: PaymentIntentEntity.visibleColumns,
          title: PaymentIntentEntity.domain,
          showSerialNumber: true,
          actualData: data,
          totalResults: match$2[0],
          resultsPerPage: 10,
          offset: offset,
          setOffset: setOffset,
          entity: PaymentIntentEntity.tableEntity,
          currrentFetchCount: data.length,
          hideTitle: true,
          ignoreHeaderBg: true,
          tableLocalFilter: false,
          tableheadingClass: ResultsTableUtils.tableBorderClass,
          tableBorderClass: ResultsTableUtils.tableBorderClass,
          tableDataBorderClass: ResultsTableUtils.tableBorderClass,
          isAnalyticsModule: false,
          showResultsPerPageSelector: false,
        }),
      ),
      screenState: match[0],
    }),
  );
}

var make = PaymentIntentTable;

export { PreviewTable, make };
/* react Not a pure module */
