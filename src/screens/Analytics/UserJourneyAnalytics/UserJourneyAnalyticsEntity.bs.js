// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as InputFields from "../../../components/InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DynamicChart from "../../../components/DynamicChart.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as DateTimeUtils from "../../../utils/DateTimeUtils.bs.js";
import * as AnalyticsUtils from "../AnalyticsUtils.bs.js";
import * as HSAnalyticsUtils from "../HSAnalyticsUtils.bs.js";
import * as DynamicSingleStat from "../../../components/DynamicSingleStat.bs.js";

var domain = "sdk_events";

var singleStatInitialValue = {
  payment_attempts: 0,
  sdk_rendered_count: 0,
  average_payment_time: 0.0,
  load_time: 0.0,
};

var singleStatSeriesInitialValue = {
  payment_attempts: 0,
  sdk_rendered_count: 0,
  average_payment_time: 0.0,
  load_time: 0.0,
  time_series: "",
};

function singleStatItemToObjMapper(json) {
  return Core__Option.getOr(
    Core__Option.map(Core__JSON.Decode.object(json), function (dict) {
      return {
        payment_attempts: LogicUtils.getInt(dict, "payment_attempts", 0),
        sdk_rendered_count: LogicUtils.getInt(dict, "sdk_rendered_count", 0),
        average_payment_time:
          LogicUtils.getFloat(dict, "average_payment_time", 0.0) / 1000,
        load_time: LogicUtils.getFloat(dict, "load_time", 0.0) / 1000,
      };
    }),
    singleStatInitialValue,
  );
}

function singleStatSeriesItemToObjMapper(json) {
  return Core__Option.getOr(
    Core__Option.map(Core__JSON.Decode.object(json), function (dict) {
      return {
        payment_attempts: LogicUtils.getInt(dict, "payment_attempts", 0),
        sdk_rendered_count: LogicUtils.getInt(dict, "sdk_rendered_count", 0),
        average_payment_time:
          HSAnalyticsUtils.setPrecision(
            LogicUtils.getFloat(dict, "average_payment_time", 0.0),
            undefined,
            undefined,
          ) / 1000,
        load_time: LogicUtils.getFloat(dict, "load_time", 0.0) / 1000,
        time_series: LogicUtils.getString(dict, "time_bucket", ""),
      };
    }),
    singleStatSeriesInitialValue,
  );
}

function itemToObjMapper(json) {
  return HSAnalyticsUtils.getQueryData(json).map(singleStatItemToObjMapper);
}

function timeSeriesObjMapper(json) {
  return HSAnalyticsUtils.getQueryData(json).map(function (json) {
    return singleStatSeriesItemToObjMapper(json);
  });
}

var defaultColumns = [
  {
    sectionName: "",
    columns: DynamicSingleStat.generateDefaultStateColumns([
      "SdkRenderedCount",
      "Count",
      "ConversionRate",
      "DropOutRate",
      "AvgPaymentTime",
      "LoadTime",
    ]),
  },
];

function compareLogic(firstValue, secondValue) {
  var temp2 = secondValue[0];
  var temp1 = firstValue[0];
  if (Caml_obj.equal(temp1, temp2)) {
    return 0;
  } else if (Caml_obj.greaterthan(temp1, temp2)) {
    return -1;
  } else {
    return 1;
  }
}

function constructData(key, singlestatTimeseriesData) {
  switch (key) {
    case "average_payment_time":
      return singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          ob.average_payment_time,
        ];
      });
    case "conversion_rate":
      return singlestatTimeseriesData
        .map(function (ob) {
          return [
            DateTimeUtils.parseAsFloat(ob.time_series),
            (100 * ob.payment_attempts) / ob.sdk_rendered_count,
          ];
        })
        .toSorted(compareLogic);
    case "drop_out_rate":
      return singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          100 - (100 * ob.payment_attempts) / ob.sdk_rendered_count,
        ];
      });
    case "load_time":
      return singlestatTimeseriesData.map(function (ob) {
        return [DateTimeUtils.parseAsFloat(ob.time_series), ob.load_time];
      });
    case "payment_attempts":
      return singlestatTimeseriesData
        .map(function (ob) {
          return [
            DateTimeUtils.parseAsFloat(ob.time_series),
            ob.payment_attempts,
          ];
        })
        .toSorted(compareLogic);
    case "sdk_rendered_count":
      return singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          ob.sdk_rendered_count,
        ];
      });
    default:
      return [];
  }
}

function getStatData(
  singleStatData,
  timeSeriesData,
  deltaTimestampData,
  colType,
  _mode,
) {
  switch (colType) {
    case "SdkRenderedCount":
      return {
        title: "Checkout Page Renders",
        tooltipText: "Total SDK Renders",
        deltaTooltipComponent: AnalyticsUtils.singlestatDeltaTooltipFormat(
          singleStatData.sdk_rendered_count,
          deltaTimestampData.currentSr,
        ),
        value: singleStatData.sdk_rendered_count,
        delta: Number(singleStatData.sdk_rendered_count.toFixed(2)),
        data: constructData("sdk_rendered_count", timeSeriesData),
        statType: "Volume",
        showDelta: false,
      };
    case "Count":
      return {
        title: "Total Payments",
        tooltipText: "Sessions where users attempted a payment",
        deltaTooltipComponent: AnalyticsUtils.singlestatDeltaTooltipFormat(
          singleStatData.payment_attempts,
          deltaTimestampData.currentSr,
        ),
        value: singleStatData.payment_attempts,
        delta: singleStatData.payment_attempts,
        data: constructData("payment_attempts", timeSeriesData),
        statType: "Volume",
        showDelta: false,
      };
    case "ConversionRate":
      return {
        title: "Converted User Sessions",
        tooltipText: "Percentage of sessions where users attempted a payment",
        deltaTooltipComponent: AnalyticsUtils.singlestatDeltaTooltipFormat(
          (singleStatData.payment_attempts * 100) /
            singleStatData.sdk_rendered_count,
          deltaTimestampData.currentSr,
        ),
        value:
          (singleStatData.payment_attempts * 100) /
          singleStatData.sdk_rendered_count,
        delta: Number(
          (
            (singleStatData.payment_attempts * 100) /
            singleStatData.sdk_rendered_count
          ).toFixed(2),
        ),
        data: constructData("conversion_rate", timeSeriesData),
        statType: "Rate",
        showDelta: false,
      };
    case "DropOutRate":
      return {
        title: "Dropped Out User Sessions",
        tooltipText: "Sessions where users did not attempt a payment",
        deltaTooltipComponent: AnalyticsUtils.singlestatDeltaTooltipFormat(
          100 -
            (singleStatData.payment_attempts * 100) /
              singleStatData.sdk_rendered_count,
          deltaTimestampData.currentSr,
        ),
        value:
          100 -
          (singleStatData.payment_attempts * 100) /
            singleStatData.sdk_rendered_count,
        delta: Number(singleStatData.sdk_rendered_count.toFixed(2)),
        data: constructData("drop_out_rate", timeSeriesData),
        statType: "Rate",
        showDelta: false,
      };
    case "AvgPaymentTime":
      return {
        title: "Payment Time",
        tooltipText:
          "The time spent on Checkout upto the moment the payment request is sent to the backend server.",
        deltaTooltipComponent: AnalyticsUtils.singlestatDeltaTooltipFormat(
          singleStatData.average_payment_time,
          deltaTimestampData.currentSr,
        ),
        value: singleStatData.average_payment_time,
        delta: Number(singleStatData.average_payment_time.toFixed(2)),
        data: constructData("average_payment_time", timeSeriesData),
        statType: "LatencyMs",
        showDelta: false,
      };
    case "LoadTime":
      return {
        title: "Checkout Load Time",
        tooltipText:
          "Time taken from Checkout creation to the start of its rendering",
        deltaTooltipComponent: AnalyticsUtils.singlestatDeltaTooltipFormat(
          singleStatData.load_time,
          deltaTimestampData.currentSr,
        ),
        value: singleStatData.load_time,
        delta: Number(singleStatData.load_time.toFixed(2)),
        data: constructData("load_time", timeSeriesData),
        statType: "LatencyMs",
        showDelta: false,
      };
  }
}

var getStatSentiment = Object.fromEntries([
  ["Checkout Page Impressions", "Positive"],
  ["Total Payments", "Positive"],
  ["Converted User Sessions", "Positive"],
  ["Dropped Out User Sessions", "Negative"],
  ["TP-50 Payment Time", "Negative"],
  ["TP-50 Load Time", "Negative"],
]);

var getStatThresholds = Object.fromEntries([
  ["Dropped Out User Sessions", 40],
  ["Converted User Sessions", 60],
]);

function getSingleStatEntity(metrics) {
  return {
    urlConfig: [
      {
        uri: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
        metrics: HSAnalyticsUtils.getStringListFromArrayDict(metrics),
      },
    ],
    getObjects: itemToObjMapper,
    getTimeSeriesObject: timeSeriesObjMapper,
    defaultColumns: defaultColumns,
    getData: getStatData,
    matrixUriMapper: function (param) {
      return window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain;
    },
    statSentiment: getStatSentiment,
    statThreshold: getStatThresholds,
  };
}

var paymentMetricsConfig = [
  {
    metric_name_db: "payment_attempts",
    metric_label: "Volume",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
  },
];

var userJourneyMetricsConfig = [
  {
    metric_name_db: "sdk_rendered_count",
    metric_label: "Volume",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
  },
];

var userJourneyFunnelMetricsConfig = [
  {
    metric_name_db: "sdk_rendered_count",
    metric_label: "Checkout Page Rendered",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
  },
  {
    metric_name_db: "payment_methods_call_count",
    metric_label: "Payment Methods Loaded",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
  },
  {
    metric_name_db: "payment_method_selected_count",
    metric_label: "Payment Method Selected",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
  },
  {
    metric_name_db: "payment_data_filled_count",
    metric_label: "Payment Method Data Entered",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
  },
  {
    metric_name_db: "payment_attempts",
    metric_label: "Payment Attempted",
    metric_type: "Volume",
    legendOption: ["Average", "Overall"],
  },
];

function commonUserJourneyChartEntity(tabKeys) {
  return DynamicChart.makeEntity(
    {
      TAG: "String",
      _0: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
    },
    undefined,
    tabKeys,
    [HSAnalyticsUtils.startTimeFilterKey, HSAnalyticsUtils.endTimeFilterKey],
    ["Success Rate", "Volume"],
    [],
    [],
    ["SemiDonut"],
    [
      {
        uri: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
        timeSeriesBody: DynamicChart.getTimeSeriesChart,
        legendBody: DynamicChart.getLegendBody,
        metrics: paymentMetricsConfig,
        timeCol: "time_bucket",
        filterKeys: tabKeys,
      },
    ],
    "User Journey Analytics",
    undefined,
    undefined,
    function (param, param$1) {
      return [""];
    },
    undefined,
    undefined,
    undefined,
    undefined,
    true,
    undefined,
  );
}

function userJourneyChartEntity(tabKeys) {
  var newrecord = Caml_obj.obj_dup(commonUserJourneyChartEntity(tabKeys));
  newrecord.uriConfig = [
    {
      uri: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
      timeSeriesBody: DynamicChart.getTimeSeriesChart,
      legendBody: DynamicChart.getLegendBody,
      metrics: userJourneyMetricsConfig,
      timeCol: "time_bucket",
      filterKeys: tabKeys,
    },
  ];
  return newrecord;
}

function userJourneyBarChartEntity(tabKeys) {
  var newrecord = Caml_obj.obj_dup(commonUserJourneyChartEntity(tabKeys));
  newrecord.uriConfig = [
    {
      uri: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
      timeSeriesBody: DynamicChart.getTimeSeriesChart,
      legendBody: DynamicChart.getLegendBody,
      metrics: userJourneyMetricsConfig,
      timeCol: "time_bucket",
      filterKeys: tabKeys,
    },
  ];
  newrecord.chartTypes = ["HorizontalBar"];
  return newrecord;
}

function userJourneyFunnelChartEntity(tabKeys) {
  var newrecord = Caml_obj.obj_dup(commonUserJourneyChartEntity(tabKeys));
  newrecord.chartDescription =
    "Breakdown of users based on journey checkpoints";
  newrecord.uriConfig = [
    {
      uri: window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain,
      timeSeriesBody: DynamicChart.getTimeSeriesChart,
      legendBody: DynamicChart.getLegendBody,
      metrics: userJourneyFunnelMetricsConfig,
      timeCol: "time_bucket",
      filterKeys: tabKeys,
    },
  ];
  newrecord.chartTypes = ["Funnel"];
  return newrecord;
}

function fixedFilterFields(_json) {
  return [
    {
      field: FormRenderer.makeMultiInputFieldInfo(
        "",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        false,
        InputFields.filterDateRangeField(
          HSAnalyticsUtils.startTimeFilterKey,
          HSAnalyticsUtils.endTimeFilterKey,
          "YYYY-MM-DDTHH:mm:ss[Z]",
          false,
          true,
          true,
          [
            "Today",
            "Yesterday",
            {
              TAG: "Day",
              _0: 2.0,
            },
            {
              TAG: "Day",
              _0: 7.0,
            },
            {
              TAG: "Day",
              _0: 30.0,
            },
            "ThisMonth",
            "LastMonth",
          ],
          false,
          2,
          180,
          undefined,
          HSAnalyticsUtils.optFilterKey,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ),
        undefined,
        [],
        undefined,
      ),
      localFilter: undefined,
    },
  ];
}

export {
  domain,
  singleStatInitialValue,
  singleStatSeriesInitialValue,
  singleStatItemToObjMapper,
  singleStatSeriesItemToObjMapper,
  itemToObjMapper,
  timeSeriesObjMapper,
  defaultColumns,
  compareLogic,
  constructData,
  getStatData,
  getStatSentiment,
  getStatThresholds,
  getSingleStatEntity,
  paymentMetricsConfig,
  userJourneyMetricsConfig,
  userJourneyFunnelMetricsConfig,
  commonUserJourneyChartEntity,
  userJourneyChartEntity,
  userJourneyBarChartEntity,
  userJourneyFunnelChartEntity,
  fixedFilterFields,
};
/* defaultColumns Not a pure module */
