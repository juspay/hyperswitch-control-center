// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as ACLDiv from "../../components/ACLDiv.bs.js";
import * as Button from "../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as ACLButton from "../../components/ACLButton.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../components/custom-icons/GatewayIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../HSwitchUtils.bs.js";
import * as MixpanelHook from "../MixpanelHook.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as AddDataAttributes from "../../components/AddDataAttributes.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as HSwitchFeedBackModal from "../../components/HSwitchFeedBackModal.bs.js";

var p1MediumTextStyle = HSwitchUtils.getTextClass(["P1", "Medium"]);

function ProcessorCards$RequestConnector(props) {
  var setShowModal = props.setShowModal;
  return React.createElement(RenderIf.make, {
    condition: props.connectorList.length === 0,
    children: React.createElement(
      "div",
      {
        className:
          "flex flex-col gap-6 items-center justify-center w-full bg-white rounded-lg border p-8",
      },
      React.createElement(
        "div",
        {
          className: "mb-8 mt-4 max-w-full h-auto",
        },
        React.createElement("img", {
          alt: "notfound",
          src: LogicUtils.useUrlPrefix() + "/notfound.svg",
        }),
      ),
      React.createElement(
        "p",
        {
          className: "jp-grey-700 opacity-50",
        },
        "Uh-oh! Looks like we couldn't find the processor you were searching for.",
      ),
      React.createElement(Button.make, {
        text: "Request a processor",
        buttonType: "Primary",
        onClick: function (param) {
          setShowModal(function (param) {
            return true;
          });
        },
      }),
    ),
  });
}

var RequestConnector = {
  make: ProcessorCards$RequestConnector,
};

function ProcessorCards$CantFindProcessor(props) {
  var setShowModal = props.setShowModal;
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  return React.createElement(RenderIf.make, {
    condition: props.showRequestConnectorBtn,
    children: React.createElement(ACLButton.make, {
      text: "Request a Processor",
      buttonType: "Transparent",
      buttonSize: "Small",
      leftIcon: {
        TAG: "CustomIcon",
        _0: React.createElement(Icon.make, {
          name: "new-window",
          size: 16,
          className:
            "text-jp-gray-900 fill-opacity-50 dark:jp-gray-text_darktheme",
        }),
      },
      onClick: function (param) {
        setShowModal(function (param) {
          return true;
        });
      },
      textStyle: "text-jp-gray-900",
      access: userPermissionJson.merchantDetailsManage,
    }),
  });
}

var CantFindProcessor = {
  make: ProcessorCards$CantFindProcessor,
};

function ProcessorCards(props) {
  var __showTestProcessor = props.showTestProcessor;
  var __setProcessorModal = props.setProcessorModal;
  var __connectorType = props.connectorType;
  var urlPrefix = props.urlPrefix;
  var __showAllConnectors = props.showAllConnectors;
  var configuredConnectors = props.configuredConnectors;
  var connectorsAvailableForIntegration =
    props.connectorsAvailableForIntegration;
  var showAllConnectors =
    __showAllConnectors !== undefined ? __showAllConnectors : true;
  var connectorType =
    __connectorType !== undefined ? __connectorType : "Processor";
  var setProcessorModal =
    __setProcessorModal !== undefined
      ? __setProcessorModal
      : function (param) {};
  var showTestProcessor =
    __showTestProcessor !== undefined ? __showTestProcessor : false;
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var unConfiguredConnectors = connectorsAvailableForIntegration.filter(
    function (total) {
      return Core__Option.isNone(
        configuredConnectors.find(function (item) {
          return item === total;
        }),
      );
    },
  );
  var match = React.useState(function () {
    return false;
  });
  var setShowModal = match[1];
  var showModal = match[0];
  var match$1 = React.useState(function () {
    return "";
  });
  var setSearchedConnector = match$1[1];
  var searchedConnector = match$1[0];
  var searchRef = React.useRef(null);
  var unConfiguredConnectorsCount = unConfiguredConnectors.length;
  var handleSearch = function ($$event) {
    var val = {
      contents: $$event.currentTarget.value,
    };
    setSearchedConnector(function (param) {
      return val.contents;
    });
  };
  var descriptedConnectors = function (
    connectorList,
    heading,
    showRequestConnectorBtn,
    showSearchOpt,
    showDummyConnectorButtonOpt,
    param,
  ) {
    var showSearch = showSearchOpt !== undefined ? showSearchOpt : true;
    var showDummyConnectorButton =
      showDummyConnectorButtonOpt !== undefined
        ? showDummyConnectorButtonOpt
        : false;
    if (connectorList.length > 0) {
      connectorList.sort(ConnectorUtils.sortByName);
    }
    return React.createElement(
      React.Fragment,
      {},
      React.createElement(AddDataAttributes.make, {
        attributes: [
          ["data-testid", LogicUtils.titleToSnake(heading).toLowerCase()],
        ],
        children: React.createElement(
          "h2",
          {
            className:
              "font-bold text-xl text-black text-opacity-75 dark:text-white dark:text-opacity-75",
          },
          heading,
        ),
      }),
      React.createElement(
        "div",
        {
          className: "flex w-full justify-start gap-4",
        },
        React.createElement(RenderIf.make, {
          condition: showSearch,
          children: React.createElement(AddDataAttributes.make, {
            attributes: [["data-testid", "search-processor"]],
            children: React.createElement("input", {
              ref: Caml_option.some(searchRef),
              className: "rounded-md px-4 py-2 focus:outline-none w-1/3 border",
              id: "search-processor",
              placeholder: "Search a processor",
              type: "text",
              value: searchedConnector,
              onChange: handleSearch,
            }),
          }),
        }),
        React.createElement(RenderIf.make, {
          condition:
            !featureFlagDetails.isLiveMode &&
            configuredConnectors.length > 0 &&
            showDummyConnectorButton &&
            urlPrefix === "connectors/new",
          children: React.createElement(ACLButton.make, {
            text: "Connect a Dummy Processor",
            buttonType: "Transparent",
            buttonSize: "Small",
            leftIcon: {
              TAG: "CustomIcon",
              _0: React.createElement(Icon.make, {
                name: "plus",
                size: 16,
                className:
                  "text-jp-gray-900 fill-opacity-50 dark:jp-gray-text_darktheme",
              }),
            },
            onClick: function (param) {
              setProcessorModal(function (param) {
                return true;
              });
            },
            textStyle: "text-jp-gray-900",
            access: userPermissionJson.connectorsManage,
          }),
        }),
        React.createElement(ProcessorCards$CantFindProcessor, {
          showRequestConnectorBtn: showRequestConnectorBtn,
          setShowModal: setShowModal,
        }),
      ),
      React.createElement(RenderIf.make, {
        condition: connectorList.length > 0,
        children: React.createElement(
          "div",
          {
            className:
              "grid gap-x-5 gap-y-6 " +
              (showDummyConnectorButton
                ? "2xl:grid-cols-4 lg:grid-cols-3"
                : "") +
              " md:grid-cols-2 grid-cols-1 mb-5",
          },
          connectorList.map(function (connector, i) {
            var connectorName =
              ConnectorUtils.getConnectorNameString(connector);
            var connectorInfo = ConnectorUtils.getConnectorInfo(connector);
            return JsxPPXReactSupportU.createElementVariadicWithKey(
              String(i),
              ACLDiv.make,
              {
                permission: userPermissionJson.connectorsManage,
                onClick: function (param) {},
                children: null,
                className:
                  "border p-6 gap-4 bg-white rounded flex flex-col justify-between",
                dataAttrStr: connectorName,
              },
              [
                React.createElement(
                  "div",
                  {
                    className: "flex flex-col gap-3 items-start",
                  },
                  React.createElement(GatewayIcon.make, {
                    gateway: connectorName.toUpperCase(),
                    className: "w-14 h-14 rounded-sm",
                  }),
                  React.createElement(
                    "p",
                    {
                      className: p1MediumTextStyle + " break-all",
                    },
                    ConnectorUtils.getDisplayNameForConnector(
                      connectorType,
                      connectorName,
                    ),
                  ),
                ),
                React.createElement(
                  "p",
                  {
                    className:
                      "overflow-hidden text-gray-400 flex-1 line-clamp-3",
                  },
                  connectorInfo.description,
                ),
                React.createElement(ACLButton.make, {
                  text: "Connect",
                  buttonType: "Transparent",
                  buttonSize: "Small",
                  leftIcon: {
                    TAG: "CustomIcon",
                    _0: React.createElement(Icon.make, {
                      name: "plus",
                      size: 16,
                      className:
                        "text-jp-gray-900 fill-opacity-50 dark:jp-gray-text_darktheme",
                    }),
                  },
                  onClick: function (param) {
                    mixpanelEvent(
                      "connect_processor_" + connectorName,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                    );
                    RescriptReactRouter.push(
                      GlobalVars.appendDashboardPath(
                        "/" + urlPrefix + "?name=" + connectorName,
                      ),
                    );
                  },
                  textStyle: "text-jp-gray-900",
                  access: userPermissionJson.connectorsManage,
                }),
              ],
            );
          }),
        ),
      }),
      React.createElement(ProcessorCards$RequestConnector, {
        connectorList: connectorList,
        setShowModal: setShowModal,
      }),
    );
  };
  var connectorListFiltered = LogicUtils.isNonEmptyString(searchedConnector)
    ? connectorsAvailableForIntegration.filter(function (item) {
        return ConnectorUtils.getConnectorNameString(item).includes(
          searchedConnector.toLowerCase(),
        );
      })
    : connectorsAvailableForIntegration;
  return React.createElement(
    RenderIf.make,
    {
      condition: unConfiguredConnectorsCount > 0,
      children: null,
    },
    React.createElement(
      RenderIf.make,
      {
        condition: showAllConnectors,
        children: null,
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-4",
        },
        descriptedConnectors(
          connectorListFiltered,
          "Connect a new processor",
          true,
          undefined,
          true,
          undefined,
        ),
      ),
      React.createElement(RenderIf.make, {
        condition: showModal,
        children: React.createElement(HSwitchFeedBackModal.make, {
          modalHeading: "Request a processor",
          setShowModal: setShowModal,
          showModal: showModal,
          modalType: "RequestConnectorModal",
        }),
      }),
    ),
    React.createElement(RenderIf.make, {
      condition: showTestProcessor,
      children: descriptedConnectors(
        ConnectorUtils.dummyConnectorList(showTestProcessor),
        "",
        false,
        false,
        false,
        undefined,
      ),
    }),
  );
}

var make = ProcessorCards;

export { p1MediumTextStyle, RequestConnector, CantFindProcessor, make };
/* p1MediumTextStyle Not a pure module */
