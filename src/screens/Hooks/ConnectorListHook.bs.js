// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";

function useFetchConnectorList() {
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var setConnectorList = Recoil.useSetRecoilState(
    HyperswitchAtom.connectorListAtom,
  );
  return async function (param) {
    try {
      var url = getURL(
        "CONNECTOR",
        "Get",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await fetchDetails(url);
      setConnectorList(function (param) {
        return ConnectorListMapper.getArrayOfConnectorListPayloadType(res);
      });
      return res;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to Fetch!"),
        );
      }
      throw e;
    }
  };
}

export { useFetchConnectorList };
/* recoil Not a pure module */
