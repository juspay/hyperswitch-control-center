// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as HomeUtils from "../Home/HomeUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DictionaryUtils from "../../utils/DictionaryUtils.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as QuickStartUtils from "../Home/QuickStart/QuickStartUtils.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function useFetchEnumDetails() {
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var setEnumVariantValues = Recoil.useSetRecoilState(
    HyperswitchAtom.enumVariantAtom,
  );
  return async function (enumArray) {
    try {
      var url = getURL(
        "USERS",
        "Get",
        undefined,
        undefined,
        "USER_DATA",
        undefined,
        undefined,
        Caml_option.some("keys=" + enumArray.join(",")),
        undefined,
      );
      var res = await fetchDetails(url);
      var responseDict = HomeUtils.responseDataMapper(
        res,
        HomeUtils.getValueMapped,
      );
      setEnumVariantValues(function (param) {
        return JSON.stringify(responseDict);
      });
      return responseDict;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to Fetch!"),
        );
      }
      throw e;
    }
  };
}

function useUpdateEnumInRecoil() {
  var match = Recoil.useRecoilState(HyperswitchAtom.enumVariantAtom);
  var setEnumVariantValues = match[1];
  var enumVariantValues = match[0];
  return function (enumVariantsAndBodies) {
    var enumValueDict = LogicUtils.getDictFromJsonObject(
      LogicUtils.safeParse(enumVariantValues),
    );
    var enumDictsArray = [enumValueDict];
    enumVariantsAndBodies.forEach(function (item) {
      var enumVariant = item[1];
      var body = item[0];
      var bodyValForApi = QuickStartUtils.generateBodyBasedOnType(
        enumVariant,
        body,
      );
      switch (body.TAG) {
        case "Boolean":
          var booleanDict = Object.fromEntries([[enumVariant, true]]);
          enumDictsArray.push(booleanDict);
          return;
        case "String":
          var stringDict = Object.fromEntries([[enumVariant, body._0]]);
          enumDictsArray.push(stringDict);
          return;
        default:
          enumDictsArray.push(LogicUtils.getDictFromJsonObject(bodyValForApi));
          return;
      }
    });
    var updatedRecoilValueDict = DictionaryUtils.mergeDicts(enumDictsArray);
    setEnumVariantValues(function (param) {
      return JSON.stringify(updatedRecoilValueDict);
    });
    return updatedRecoilValueDict;
  };
}

function usePostEnumDetails() {
  var getURL = APIUtils.useGetURL();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var updateEnumInRecoil = useUpdateEnumInRecoil();
  return async function (body, enumVariant) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "MERCHANT_DATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var bodyValForApi = QuickStartUtils.generateBodyBasedOnType(
        enumVariant,
        body,
      );
      await updateDetails(
        url,
        bodyValForApi,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return updateEnumInRecoil([[body, enumVariant]]);
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to Fetch!"),
        );
      }
      throw e;
    }
  };
}

export { useFetchEnumDetails, useUpdateEnumInRecoil, usePostEnumDetails };
/* recoil Not a pure module */
