// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function useVerifyTotp() {
  var getURL = APIUtils.useGetURL();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  return async function (body, methodType) {
    try {
      var url = getURL(
        "USERS",
        methodType,
        undefined,
        undefined,
        "VERIFY_TOTP",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return await updateDetails(
        url,
        body,
        methodType,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to Fetch!"),
        );
      }
      throw e;
    }
  };
}

function useVerifyRecoveryCode() {
  var getURL = APIUtils.useGetURL();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  return async function (body) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "VERIFY_RECOVERY_CODE",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to Fetch!"),
        );
      }
      throw e;
    }
  };
}

export { useVerifyTotp, useVerifyRecoveryCode };
/* APIUtils Not a pure module */
