// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";
import * as BusinessProfileMapper from "../../utils/Mappers/BusinessProfileMapper.bs.js";

function useFetchBusinessProfiles() {
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var setBusinessProfiles = Recoil.useSetRecoilState(
    HyperswitchAtom.businessProfilesAtom,
  );
  return async function (param) {
    try {
      var url = getURL(
        "BUSINESS_PROFILE",
        "Get",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await fetchDetails(url);
      setBusinessProfiles(function (param) {
        return BusinessProfileMapper.getArrayOfBusinessProfile(res);
      });
      return BusinessProfileMapper.getArrayOfBusinessProfile(res);
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to Fetch!"),
        );
      }
      throw e;
    }
  };
}

function useGetBusinessProflile(profileId) {
  return Core__Option.getOr(
    Recoil.useRecoilValue(HyperswitchAtom.businessProfilesAtom).find(
      function (profile) {
        return profile.profile_id === profileId;
      },
    ),
    MerchantAccountUtils.defaultValueForBusinessProfile,
  );
}

export { useFetchBusinessProfiles, useGetBusinessProflile };
/* recoil Not a pure module */
