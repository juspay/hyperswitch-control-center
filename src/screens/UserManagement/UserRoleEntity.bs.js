// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../../components/Table.bs.js";
import * as React from "react";
import * as EntityType from "../../entities/EntityType.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";

var defaultColumnsForUser = ["Name", "Role", "Email", "Status"];

var allColumnsForUser = ["Name", "Role", "Email", "Status"];

function itemToObjMapperForUser(dict) {
  return {
    email: LogicUtils.getString(dict, "email", ""),
    name: LogicUtils.getString(dict, "name", ""),
    role_id: LogicUtils.getString(dict, "role_id", ""),
    role_name: LogicUtils.getString(dict, "role_name", ""),
    status: LogicUtils.getString(dict, "status", ""),
  };
}

function getHeadingForUser(colType) {
  switch (colType) {
    case "Email":
      return Table.makeHeaderInfo(
        "email",
        "Email",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Name":
      return Table.makeHeaderInfo(
        "name",
        "Name",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Role":
      return Table.makeHeaderInfo(
        "role",
        "Role",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Status":
      return Table.makeHeaderInfo(
        "status",
        "Status",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function roleToVariantMapper(role) {
  switch (role) {
    case "ADMIN":
      return "Admin";
    case "CUSTOMER SUPPORT":
      return "CustomerSupport";
    case "DEVELOPER":
      return "Developer";
    case "IAM":
      return "IAM";
    case "OPERATOR":
      return "Operator";
    case "ORGANIZATION ADMIN":
      return "OrgAdmin";
    case "VIEW ONLY":
      return "ViewOnly";
    default:
      return "None";
  }
}

function statusToVariantMapper(role) {
  var match = role.toUpperCase();
  switch (match) {
    case "ACTIVE":
      return "Active";
    case "INVITATIONSENT":
      return "InviteSent";
    default:
      return "None";
  }
}

function getCssMapperForRole(role) {
  switch (role) {
    case "Admin":
    case "OrgAdmin":
      return "border-blue-200 bg-blue-200";
    case "None":
      return "";
    default:
      return "border-light-grey bg-extra-light-grey";
  }
}

function getCssMapperForStatus(status) {
  switch (status) {
    case "Active":
      return "text-green-700";
    case "InviteSent":
      return "text-grey-700 opacity-50";
    case "None":
      return "";
  }
}

function getCellForUser(data, colType) {
  var role_name = LogicUtils.snakeToTitle(data.role_name).toUpperCase();
  var role = roleToVariantMapper(role_name);
  var status = statusToVariantMapper(data.status);
  switch (colType) {
    case "Email":
      return {
        TAG: "Text",
        _0: data.email,
      };
    case "Name":
      return {
        TAG: "Text",
        _0: data.name,
      };
    case "Role":
      return {
        TAG: "CustomCell",
        _0: React.createElement(
          "div",
          {
            className:
              "w-fit font-semibold text-sm px-3 py-1 rounded-full border-1 " +
              getCssMapperForRole(role),
          },
          role_name,
        ),
        _1: "",
      };
    case "Status":
      var tmp;
      switch (status) {
        case "InviteSent":
          tmp = "INVITE SENT".toUpperCase();
          break;
        case "Active":
        case "None":
          tmp = data.status.toUpperCase();
          break;
      }
      return {
        TAG: "CustomCell",
        _0: React.createElement(
          "div",
          {
            className: "font-semibold text-sm " + getCssMapperForStatus(status),
          },
          tmp,
        ),
        _1: "",
      };
  }
}

function getUserData(json) {
  return LogicUtils.getArrayDataFromJson(json, itemToObjMapperForUser);
}

var userEntity = EntityType.makeEntity(
  "",
  getUserData,
  defaultColumnsForUser,
  allColumnsForUser,
  getHeadingForUser,
  getCellForUser,
  "",
  undefined,
  undefined,
  undefined,
  undefined,
  function (userId) {
    return GlobalVars.appendDashboardPath(
      "/users/details?email=" + userId.email,
    );
  },
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

export {
  defaultColumnsForUser,
  allColumnsForUser,
  itemToObjMapperForUser,
  getHeadingForUser,
  roleToVariantMapper,
  statusToVariantMapper,
  getCssMapperForRole,
  getCssMapperForStatus,
  getCellForUser,
  getUserData,
  userEntity,
};
/* userEntity Not a pure module */
