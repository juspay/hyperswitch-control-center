// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Tabs from "../../components/Tabs.bs.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as ACLButton from "../../components/ACLButton.bs.js";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "../../components/LoadedTable.bs.js";
import * as MixpanelHook from "../MixpanelHook.bs.js";
import * as ReactDebounce from "../../components/ReactDebounce.bs.js";
import * as GlobalProvider from "../../entryPoints/Provider/GlobalProvider.bs.js";
import * as ProviderHelper from "../../entryPoints/Provider/ProviderHelper.bs.js";
import * as UserRoleEntity from "./UserRoleEntity.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as RoleListTableView from "./RoleListTableView.bs.js";
import * as TableSearchFilter from "../Helpers/TableSearchFilter.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as UserManagementUtils from "./UserManagementUtils.bs.js";

function UserRoleEntry(props) {
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var match = React.useState(function () {
    return [];
  });
  var setUsersData = match[1];
  var usersData = match[0];
  var match$1 = React.useState(function () {
    return [];
  });
  var setUsersFilterData = match$1[1];
  var usersFilterData = match$1[0];
  var match$2 = React.useState(function () {
    return "Loading";
  });
  var setScreenStateUsers = match$2[1];
  var screenStateUsers = match$2[0];
  var match$3 = React.useState(function () {
    return 0;
  });
  var setUserOffset = match$3[1];
  var userOffset = match$3[0];
  var match$4 = React.useState(function () {
    return "";
  });
  var setSearchText = match$4[1];
  var searchText = match$4[0];
  var match$5 = React.useState(function () {
    return 0;
  });
  var setTabIndex = match$5[1];
  var match$6 = React.useContext(GlobalProvider.defaultContext);
  var setPermissionInfo = match$6.setPermissionInfo;
  var permissionInfo = match$6.permissionInfo;
  var getURL = APIUtils.useGetURL();
  var getUserData = async function () {
    setScreenStateUsers(function (param) {
      return "Loading";
    });
    try {
      var userDataURL = getURL(
        "USER_MANAGEMENT",
        "Get",
        undefined,
        undefined,
        undefined,
        "USER_LIST",
        undefined,
        undefined,
        undefined,
      );
      var res = await fetchDetails(userDataURL);
      var userData = LogicUtils.getArrayDataFromJson(
        res,
        UserRoleEntity.itemToObjMapperForUser,
      );
      setUsersData(function (param) {
        return userData.map(function (prim) {
          return prim;
        });
      });
      setUsersFilterData(function (param) {
        return userData.map(function (prim) {
          return prim;
        });
      });
      return setScreenStateUsers(function (param) {
        return "Success";
      });
    } catch (exn) {
      return setScreenStateUsers(function (param) {
        return {
          TAG: "Error",
          _0: "",
        };
      });
    }
  };
  var getPermissionInfo = async function () {
    try {
      var url = getURL(
        "USERS",
        "Get",
        undefined,
        undefined,
        "PERMISSION_INFO",
        undefined,
        undefined,
        "groups=true",
        undefined,
      );
      var res = await fetchDetails(url);
      setPermissionInfo(function (param) {
        return LogicUtils.getArrayDataFromJson(
          res,
          ProviderHelper.itemToObjMapperForGetInfo,
        );
      });
      await getUserData();
      return;
    } catch (exn) {
      return setScreenStateUsers(function (param) {
        return {
          TAG: "Error",
          _0: "",
        };
      });
    }
  };
  React.useEffect(function () {
    if (permissionInfo.length === 0) {
      getPermissionInfo();
    } else {
      getUserData();
    }
  }, []);
  var filterLogicForUsers = ReactDebounce.useDebounced(200, function (ob) {
    var arr = ob[1];
    var searchText = ob[0];
    var filteredList = LogicUtils.isNonEmptyString(searchText)
      ? arr.filter(function (obj) {
          if (obj == null) {
            return false;
          } else if (
            LogicUtils.isContainingStringLowercase(obj.email, searchText)
          ) {
            return true;
          } else {
            return LogicUtils.isContainingStringLowercase(obj.name, searchText);
          }
        })
      : arr;
    setUsersFilterData(function (param) {
      return filteredList;
    });
  });
  var tabList = [
    {
      title: "Users",
      renderContent: function () {
        return React.createElement(PageLoaderWrapper.make, {
          children: Caml_option.some(
            React.createElement(
              "div",
              {
                className: "mt-5",
              },
              React.createElement(LoadedTable.make, {
                title: "Users",
                showSerialNumber: true,
                actualData: usersFilterData,
                totalResults: usersFilterData.length,
                resultsPerPage: 10,
                offset: userOffset,
                setOffset: setUserOffset,
                entity: UserRoleEntity.userEntity,
                currrentFetchCount: usersFilterData.length,
                filters: Caml_option.some(
                  React.createElement(TableSearchFilter.make, {
                    data: usersData,
                    filterLogic: filterLogicForUsers,
                    placeholder: "Search by name or email..",
                    searchVal: searchText,
                    setSearchVal: setSearchText,
                    customSearchBarWrapperWidth: "w-full lg:w-1/3",
                    customInputBoxWidth: "w-full",
                  }),
                ),
                hideTitle: true,
                tableheadingClass: "h-12",
                collapseTableRow: false,
              }),
            ),
          ),
          screenState: screenStateUsers,
        });
      },
    },
    {
      title: "Roles",
      renderContent: function () {
        return React.createElement(RoleListTableView.make, {});
      },
    },
  ];
  var match$7 = UserManagementUtils.tabIndeToVariantMapper(match$5[0]);
  var buttonValueBasedonTab;
  buttonValueBasedonTab =
    match$7 === "Users"
      ? React.createElement(ACLButton.make, {
          text: "Invite users",
          buttonType: "Primary",
          onClick: function (param) {
            mixpanelEvent(
              "invite_users",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            RescriptReactRouter.push(
              GlobalVars.appendDashboardPath("/users/invite-users"),
            );
          },
          customButtonStyle: "w-48",
          access: userPermissionJson.usersManage,
        })
      : React.createElement(ACLButton.make, {
          text: "Create custom roles",
          buttonType: "Primary",
          onClick: function (param) {
            mixpanelEvent(
              "invite_users",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            RescriptReactRouter.push(
              GlobalVars.appendDashboardPath("/users/create-custom-role"),
            );
          },
          customButtonStyle: "w-48",
          access: userPermissionJson.usersManage,
        });
  return React.createElement(
    "div",
    {
      className: "flex flex-col overflow-y-scroll",
    },
    React.createElement(
      React.Fragment,
      {},
      React.createElement(PageUtils.PageHeading.make, {
        title: "Team management",
        subTitle: "Manage user roles and invite members of your organisation",
      }),
      React.createElement(
        "div",
        {
          className: "relative",
        },
        React.createElement(
          "div",
          {
            className: "absolute right-0 top-5",
          },
          buttonValueBasedonTab,
        ),
        React.createElement(Tabs.make, {
          tabs: tabList,
          onTitleClick: function (tabId) {
            setTabIndex(function (param) {
              return tabId;
            });
          },
          disableIndicationArrow: true,
          lightThemeColor: "black",
          defaultClasses:
            "font-ibm-plex w-max flex flex-auto flex-row items-center justify-center px-6 font-semibold text-body",
          showBorder: false,
          includeMargin: false,
        }),
      ),
    ),
  );
}

var make = UserRoleEntry;

export { make };
/* Tabs Not a pure module */
