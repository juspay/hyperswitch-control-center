// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CheckBoxIcon from "../../components/custom-icons/CheckBoxIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as FormValuesSpy from "../../components/form/FormValuesSpy.bs.js";
import * as GlobalProvider from "../../entryPoints/Provider/GlobalProvider.bs.js";
import * as ProviderHelper from "../../entryPoints/Provider/ProviderHelper.bs.js";
import * as CommonAuthHooks from "../../entryPoints/AuthModule/Common/CommonAuthHooks.bs.js";
import * as PermissionUtils from "./PermissionUtils.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as UserManagementUtils from "./UserManagementUtils.bs.js";
import * as BreadCrumbNavigation from "../../utils/BreadCrumbNavigation.bs.js";

function CreateCustomRole$RenderCustomRoles(props) {
  var groupName = props.groupName;
  var groupsInput = ReactFinalForm.useField("groups").input;
  var groupsAdded = LogicUtils.getStrArryFromJson(groupsInput.value);
  var match = React.useState(function () {
    return groupsAdded.includes(groupName);
  });
  var setCheckboxSelected = match[1];
  return React.createElement(RenderIf.make, {
    condition:
      PermissionUtils.mapStringToPermissionType(groupName) !==
      "OrganizationManage",
    children: React.createElement(
      "div",
      {
        className: "flex gap-6 items-start cursor-pointer",
        onClick: function (param) {
          if (groupsAdded.includes(groupName)) {
            var arr = LogicUtils.getStrArryFromJson(groupsInput.value);
            var filteredValue = arr.filter(function (value) {
              return value !== groupName;
            });
            groupsInput.onChange(filteredValue);
          } else {
            groupsAdded.push(groupName);
            groupsInput.onChange(groupsAdded);
          }
          setCheckboxSelected(function (prev) {
            return !prev;
          });
        },
      },
      React.createElement(
        "div",
        {
          className: "mt-1",
        },
        React.createElement(CheckBoxIcon.make, {
          isSelected: match[0],
          size: "Large",
        }),
      ),
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-3 items-start",
        },
        React.createElement(
          "div",
          {
            className: "font-semibold",
          },
          props.heading,
        ),
        React.createElement(
          "div",
          {
            className: "text-base text-hyperswitch_black opacity-50 flex-1",
          },
          props.description,
        ),
      ),
    ),
  });
}

var RenderCustomRoles = {
  make: CreateCustomRole$RenderCustomRoles,
};

function CreateCustomRole$NewCustomRoleInputFields(props) {
  var match = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  return React.createElement(
    "div",
    {
      className: "flex justify-between",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-4 w-full",
      },
      React.createElement(FormRenderer.FieldRenderer.make, {
        field: UserManagementUtils.roleScope(match.user_role),
        fieldWrapperClass: "w-4/5",
        labelClass: "!text-black !text-base !-ml-[0.5px]",
      }),
      React.createElement(FormRenderer.FieldRenderer.make, {
        field: UserManagementUtils.createCustomRole,
        fieldWrapperClass: "w-4/5",
        labelClass: "!text-black !text-base !-ml-[0.5px]",
      }),
    ),
    React.createElement(
      "div",
      {
        className: "absolute top-10 right-5",
      },
      React.createElement(FormRenderer.SubmitButton.make, {
        text: "Create role",
        loadingText: "Loading...",
      }),
    ),
  );
}

var NewCustomRoleInputFields = {
  make: CreateCustomRole$NewCustomRoleInputFields,
};

function CreateCustomRole(props) {
  var __isInviteUserFlow = props.isInviteUserFlow;
  var isInviteUserFlow =
    __isInviteUserFlow !== undefined ? __isInviteUserFlow : true;
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var initialValuesForForm = Object.fromEntries([
    ["role_scope", "merchant"],
    ["groups", []],
  ]);
  var match = React.useContext(GlobalProvider.defaultContext);
  var setPermissionInfo = match.setPermissionInfo;
  var permissionInfo = match.permissionInfo;
  var match$1 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$1[1];
  var match$2 = React.useState(function () {
    return initialValuesForForm;
  });
  var setInitialValues = match$2[1];
  var paddingClass = isInviteUserFlow ? "p-10" : "";
  var marginClass = isInviteUserFlow ? "mt-5" : "";
  var showToast = ToastState.useShowToast();
  var onSubmit = async function (values, param) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var copiedJson = JSON.parse(JSON.stringify(values));
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "CREATE_CUSTOM_ROLE",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = LogicUtils.getDictFromJsonObject(copiedJson);
      var roleNameValue = LogicUtils.titleToSnake(
        LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(body),
          "role_name",
          "",
        ).trim(),
      );
      LogicUtils.getDictFromJsonObject(body)["role_name"] = roleNameValue;
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setScreenState(function (param) {
        return "Success";
      });
      RescriptReactRouter.replace(GlobalVars.appendDashboardPath("/users"));
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Something went wrong");
        var errorCode = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "code",
          "",
        );
        var errorMessage = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "message",
          "",
        );
        if (errorCode === "UR_35") {
          setInitialValues(function (param) {
            return LogicUtils.getDictFromJsonObject(values);
          });
          setScreenState(function (param) {
            return "Success";
          });
        } else {
          showToast(
            errorMessage,
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: err,
            };
          });
        }
      } else {
        throw e;
      }
    }
    return null;
  };
  var getPermissionInfo = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var url = getURL(
        "USERS",
        "Get",
        undefined,
        undefined,
        "PERMISSION_INFO",
        undefined,
        undefined,
        "groups=true",
        undefined,
      );
      var res = await fetchDetails(url);
      var permissionInfoValue = LogicUtils.getArrayDataFromJson(
        res,
        ProviderHelper.itemToObjMapperForGetInfo,
      );
      setPermissionInfo(function (param) {
        return permissionInfoValue;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      return setScreenState(function (param) {
        return {
          TAG: "Error",
          _0: "Something went wrong!",
        };
      });
    }
  };
  React.useEffect(function () {
    if (permissionInfo.length === 0) {
      getPermissionInfo();
    } else {
      setScreenState(function (param) {
        return "Success";
      });
    }
  }, []);
  return React.createElement(
    "div",
    {
      className: "flex flex-col overflow-y-scroll h-full",
    },
    React.createElement(
      RenderIf.make,
      {
        condition: isInviteUserFlow,
        children: null,
      },
      React.createElement(BreadCrumbNavigation.make, {
        path: [
          {
            title: "Users",
            link: "/users",
          },
        ],
        currentPageTitle: "Create custom roles",
      }),
      React.createElement(PageUtils.PageHeading.make, {
        title: "Create custom role",
        subTitle:
          "Adjust permissions to create custom roles that match your requirement",
      }),
    ),
    React.createElement(
      "div",
      {
        className:
          "h-4/5 bg-white relative overflow-y-scroll flex flex-col gap-10 " +
          paddingClass +
          " " +
          marginClass,
      },
      React.createElement(PageLoaderWrapper.make, {
        children: Caml_option.some(
          JsxPPXReactSupportU.createElementVariadicWithKey(
            "invite-user-management",
            Form.make,
            {
              children: null,
              onSubmit: onSubmit,
              initialValues: match$2[0],
              validate: function (values) {
                return UserManagementUtils.validateFormForRoles(values);
              },
              formClass: "flex flex-col gap-8",
            },
            [
              React.createElement(
                CreateCustomRole$NewCustomRoleInputFields,
                {},
              ),
              React.createElement(
                "div",
                {
                  className:
                    "flex flex-col justify-between gap-12 show-scrollbar overflow-scroll",
                },
                permissionInfo.map(function (ele, index) {
                  return JsxPPXReactSupportU.createElementWithKey(
                    index.toString(),
                    CreateCustomRole$RenderCustomRoles,
                    {
                      heading: LogicUtils.snakeToTitle(ele.module_),
                      description: ele.description,
                      groupName: ele.module_,
                    },
                  );
                }),
              ),
              React.createElement(FormValuesSpy.make, {}),
            ],
          ),
        ),
        screenState: match$1[0],
      }),
    ),
  );
}

var make = CreateCustomRole;

export { RenderCustomRoles, NewCustomRoleInputFields, make };
/* Form Not a pure module */
