// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoaderModal from "../../utils/LoaderModal.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as DownloadUtils from "../../utils/DownloadUtils.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as GlobalProvider from "../../entryPoints/Provider/GlobalProvider.bs.js";
import * as ProviderHelper from "../../entryPoints/Provider/ProviderHelper.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as HyperSwitchUtils from "../../utils/HyperSwitchUtils.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as UserManagementUtils from "./UserManagementUtils.bs.js";
import * as BreadCrumbNavigation from "../../utils/BreadCrumbNavigation.bs.js";
import * as HyperSwitchEntryUtils from "../../entryPoints/HyperSwitchEntryUtils.bs.js";

function InviteUsers$InviteEmailForm(props) {
  var setNewRoleSelected = props.setNewRoleSelected;
  var isEmailTextInputVisible = props.isEmailTextInputVisible;
  var setRoleTypeValue = props.setRoleTypeValue;
  var getURL = APIUtils.useGetURL();
  var match = React.useContext(ThemeProvider.themeContext);
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match$1 = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var match$2 = React.useState(function () {
    return [];
  });
  var setRoleListData = match$2[1];
  var role = LogicUtils.getStringFromJson(
    LogicUtils.getValueFromArray(
      LogicUtils.getArrayFromJson(
        ReactFinalForm.useField("roleType").input.value,
        [],
      ),
      0,
      "",
    ),
    "",
  );
  React.useEffect(
    function () {
      setNewRoleSelected(function (param) {
        return role;
      });
    },
    [role],
  );
  var getRolesList = async function () {
    try {
      var roleListUrl = getURL(
        "USER_MANAGEMENT",
        "Get",
        undefined,
        undefined,
        undefined,
        "ROLE_LIST",
        undefined,
        undefined,
        undefined,
      );
      var response = await fetchDetails(roleListUrl + "?groups=true");
      var typedResponse = LogicUtils.getArrayDataFromJson(
        response,
        UserManagementUtils.roleListResponseMapper,
      );
      return setRoleListData(function (param) {
        return typedResponse;
      });
    } catch (exn) {
      return;
    }
  };
  React.useEffect(function () {
    getRolesList();
  }, []);
  React.useEffect(
    function () {
      setRoleTypeValue(function (param) {
        return role;
      });
    },
    [role],
  );
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(RenderIf.make, {
      condition: isEmailTextInputVisible,
      children: React.createElement(
        "div",
        {
          className: "flex justify-between",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-col w-full",
          },
          React.createElement(FormRenderer.FieldRenderer.make, {
            field: UserManagementUtils.inviteEmail,
            fieldWrapperClass: "w-4/5",
            labelClass: "!text-black !text-base !-ml-[0.5px]",
          }),
        ),
        React.createElement(
          "div",
          {
            className: "absolute top-10 right-5",
          },
          React.createElement(FormRenderer.SubmitButton.make, {
            text: match$1.email ? "Send Invite" : "Add User",
            loadingText: "Loading...",
          }),
        ),
      ),
    }),
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-4",
      },
      React.createElement(FormRenderer.FieldRenderer.make, {
        field: UserManagementUtils.roleType(
          match$2[0],
          match.globalUIConfig.border.borderColor.primaryNormal,
        ),
        fieldWrapperClass: "w-full " + (isEmailTextInputVisible ? "mt-5" : ""),
        labelClass: "!text-black !font-semibold",
        errorClass: UserManagementUtils.errorClass,
      }),
      React.createElement(
        "p",
        {
          className:
            "ml-2 text-sm underline text-blue-400 cursor-pointer underline-offset-2",
          onClick: function (param) {
            RescriptReactRouter.replace(
              GlobalVars.appendDashboardPath("/users/create-custom-role"),
            );
          },
        },
        "or create a custom role",
      ),
    ),
  );
}

var InviteEmailForm = {
  make: InviteUsers$InviteEmailForm,
};

function InviteUsers(props) {
  var currentRole = props.currentRole;
  var __setNewRoleSelected = props.setNewRoleSelected;
  var __isInviteUserFlow = props.isInviteUserFlow;
  var isInviteUserFlow =
    __isInviteUserFlow !== undefined ? __isInviteUserFlow : true;
  var setNewRoleSelected =
    __setNewRoleSelected !== undefined
      ? __setNewRoleSelected
      : function (param) {};
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast();
  var defaultRole =
    currentRole !== undefined ? currentRole : "merchant_view_only";
  var match = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var email = match.email;
  var match$1 = React.useContext(GlobalProvider.defaultContext);
  var setPermissionInfo = match$1.setPermissionInfo;
  var permissionInfo = match$1.permissionInfo;
  var match$2 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$2[1];
  var match$3 = React.useState(function () {
    return defaultRole;
  });
  var roleTypeValue = match$3[0];
  var match$4 = React.useState(function () {
    return {};
  });
  var setRoleDict = match$4[1];
  var roleDict = match$4[0];
  var match$5 = React.useState(function () {
    return false;
  });
  var setLoaderForInviteUsers = match$5[1];
  var paddingClass = isInviteUserFlow ? "p-10" : "";
  var marginClass = isInviteUserFlow ? "mt-5" : "";
  var authId = HyperSwitchEntryUtils.getSessionData(
    "auth_id",
    undefined,
    undefined,
  );
  var initialValues = React.useMemo(function () {
    return LogicUtils.getJsonFromArrayOfJson([["roleType", [defaultRole]]]);
  }, []);
  var getURLForInviteMultipleUser = match.totp
    ? getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "INVITE_MULTIPLE_TOKEN_ONLY",
        undefined,
        undefined,
        Caml_option.some("auth_id=" + authId),
        undefined,
      )
    : getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "INVITE_MULTIPLE",
        undefined,
        undefined,
        Caml_option.some("auth_id=" + authId),
        undefined,
      );
  var inviteListOfUsersWithInviteMultiple = async function (values) {
    if (!email) {
      setLoaderForInviteUsers(function (param) {
        return true;
      });
    }
    var valDict = LogicUtils.getDictFromJsonObject(values);
    var role = LogicUtils.getValueFromArray(
      LogicUtils.getStrArray(valDict, "roleType"),
      0,
      "",
    );
    var emailList = LogicUtils.getStrArray(valDict, "emailList");
    var body = emailList.map(function (ele) {
      return LogicUtils.getJsonFromArrayOfJson([
        ["email", ele.toLowerCase()],
        ["name", LogicUtils.getNameFromEmail(ele)],
        ["role_id", role],
      ]);
    });
    var response = await updateDetails(
      getURLForInviteMultipleUser,
      body,
      "Post",
      undefined,
      undefined,
      undefined,
      undefined,
    );
    var decodedResponse = LogicUtils.getArrayFromJson(response, []);
    if (!email) {
      var invitedUserData = decodedResponse
        .map(function (ele, index) {
          var responseDict = LogicUtils.getDictFromJsonObject(ele);
          if (
            !(
              Core__Option.isNone(
                LogicUtils.getOptionString(responseDict, "error"),
              ) && LogicUtils.getString(responseDict, "password", "").length > 0
            )
          ) {
            return null;
          }
          var passwordFromResponse = LogicUtils.getString(
            responseDict,
            "password",
            "",
          );
          return LogicUtils.getJsonFromArrayOfJson([
            ["email", LogicUtils.getValueFromArray(emailList, index, "")],
            ["password", passwordFromResponse],
          ]);
        })
        .filter(function (ele) {
          return ele !== null;
        });
      setLoaderForInviteUsers(function (param) {
        return false;
      });
      if (invitedUserData.length > 0) {
        DownloadUtils.download(
          "invited-users.txt",
          JSON.stringify(invitedUserData, null, 3),
          "application/json",
        );
      }
    }
    var match = decodedResponse.every(function (ele) {
      return Core__Option.isSome(
        LogicUtils.getOptionString(
          LogicUtils.getDictFromJsonObject(ele),
          "error",
        ),
      );
    })
      ? [
          "We've faced some problem while sending emails or creating users. Please check and try again.",
          "ToastError",
        ]
      : decodedResponse.some(function (ele) {
            return Core__Option.isSome(
              LogicUtils.getOptionString(
                LogicUtils.getDictFromJsonObject(ele),
                "error",
              ),
            );
          })
        ? [
            "We faced difficulties sending some invitations. Please check and try again.",
            "ToastWarning",
          ]
        : [
            email
              ? "Invite(s) sent successfully via Email"
              : "The user accounts have been successfully created. The file with their credentials has been downloaded.",
            "ToastSuccess",
          ];
    showToast(
      match[0],
      match[1],
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    RescriptReactRouter.push(GlobalVars.appendDashboardPath("/users"));
    return null;
  };
  var onSubmit = function (values, param) {
    return inviteListOfUsersWithInviteMultiple(values);
  };
  var settingUpValues = function (json, permissionInfoValue) {
    var defaultList =
      UserManagementUtils.defaultPresentInInfoList(permissionInfoValue);
    setPermissionInfo(function (param) {
      return defaultList;
    });
    var updatedPermissionListForGivenRole =
      UserManagementUtils.updatePresentInInfoList(
        defaultList,
        UserManagementUtils.getArrayOfPermissionData(json),
      );
    setPermissionInfo(function (param) {
      return updatedPermissionListForGivenRole;
    });
  };
  var getRoleForUser = async function (permissionInfoValue) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var url = getURL(
        "USER_MANAGEMENT",
        "Get",
        Caml_option.some(roleTypeValue),
        undefined,
        undefined,
        "ROLE_ID",
        undefined,
        undefined,
        undefined,
      );
      var res = await fetchDetails(url + "?groups=true");
      setRoleDict(function (prevDict) {
        prevDict[roleTypeValue] = res;
        return prevDict;
      });
      settingUpValues(res, permissionInfoValue);
      await HyperSwitchUtils.delay(200);
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  var getRoleInfo = function (permissionInfoValue) {
    var roleTypeValue$1 = roleDict[roleTypeValue];
    if (Core__Option.isNone(roleTypeValue$1)) {
      getRoleForUser(permissionInfoValue);
      return;
    } else {
      return settingUpValues(
        Core__Option.getOr(roleTypeValue$1, null),
        permissionInfoValue,
      );
    }
  };
  var getPermissionInfo = async function () {
    try {
      var url = getURL(
        "USERS",
        "Get",
        undefined,
        undefined,
        "PERMISSION_INFO",
        undefined,
        undefined,
        "groups=true",
        undefined,
      );
      var res = await fetchDetails(url);
      var permissionInfoValue = LogicUtils.getArrayDataFromJson(
        res,
        ProviderHelper.itemToObjMapperForGetInfo,
      );
      setPermissionInfo(function (param) {
        return permissionInfoValue;
      });
      return getRoleInfo(permissionInfoValue);
    } catch (exn) {
      return;
    }
  };
  React.useEffect(
    function () {
      if (permissionInfo.length === 0) {
        getPermissionInfo();
      } else {
        getRoleInfo(permissionInfo);
      }
    },
    [roleTypeValue],
  );
  return React.createElement(
    "div",
    {
      className: "flex flex-col overflow-y-scroll h-full",
    },
    React.createElement(
      RenderIf.make,
      {
        condition: isInviteUserFlow,
        children: null,
      },
      React.createElement(BreadCrumbNavigation.make, {
        path: [
          {
            title: "Users",
            link: "/users",
          },
        ],
        currentPageTitle: "Invite new users",
      }),
      React.createElement(PageUtils.PageHeading.make, {
        title: "Invite New Users",
        subTitle:
          "An invite will be sent to the email addresses to set up a new account",
      }),
    ),
    React.createElement(
      "div",
      {
        className:
          "h-4/5 bg-white relative overflow-y-scroll flex flex-col gap-10 " +
          paddingClass +
          " " +
          marginClass,
      },
      JsxPPXReactSupportU.createElementWithKey(
        "invite-user-management",
        Form.make,
        {
          children: React.createElement(InviteUsers$InviteEmailForm, {
            setRoleTypeValue: match$3[1],
            isEmailTextInputVisible: isInviteUserFlow,
            setNewRoleSelected: setNewRoleSelected,
          }),
          onSubmit: onSubmit,
          initialValues: initialValues,
          validate: function (values) {
            return UserManagementUtils.validateForm(values, ["emailList"]);
          },
        },
      ),
      React.createElement(PageLoaderWrapper.make, {
        children: Caml_option.some(
          React.createElement(
            "div",
            {
              className:
                "flex flex-col justify-between gap-12 show-scrollbar overflow-scroll",
            },
            permissionInfo.map(function (ele, index) {
              return JsxPPXReactSupportU.createElementWithKey(
                index.toString(),
                UserManagementUtils.RolePermissionValueRenderer.make,
                {
                  heading: LogicUtils.snakeToTitle(ele.module_) + " module",
                  description: ele.description,
                  isPermissionAllowed: ele.isPermissionAllowed,
                },
              );
            }),
          ),
        ),
        screenState: match$2[0],
      }),
    ),
    React.createElement(RenderIf.make, {
      condition: !email,
      children: React.createElement(LoaderModal.make, {
        showModal: match$5[0],
        setShowModal: setLoaderForInviteUsers,
        text: "Inviting Users",
      }),
    }),
  );
}

var make = InviteUsers;

export { InviteEmailForm, make };
/* Form Not a pure module */
