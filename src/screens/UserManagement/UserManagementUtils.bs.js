// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../HSwitchUtils.bs.js";

var inviteEmail = FormRenderer.makeFieldInfo(
  "Enter email",
  undefined,
  "emailList",
  InputFields.iconFieldWithMessageDes(
    function (input, param) {
      var showPlaceHolder =
        LogicUtils.getArrayFromJson(input.value, []).length === 0;
      return InputFields.textTagInput(
        input,
        showPlaceHolder ? "Eg: mehak.sam@wise.com, deepak.ven@wise.com" : "",
        undefined,
        undefined,
        undefined,
        true,
        undefined,
        "!rounded-full !px-4",
        undefined,
      );
    },
    "Press Enter to add more",
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var createCustomRole = FormRenderer.makeFieldInfo(
  "Enter custom role name",
  undefined,
  "role_name",
  InputFields.textInput(
    undefined,
    undefined,
    false,
    undefined,
    undefined,
    undefined,
    "off",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

function roleScope(userRole) {
  var roleScopeArray = ["Merchant", "Organization"].map(function (item) {
    return {
      label: item,
      value: item.toLowerCase(),
    };
  });
  return FormRenderer.makeFieldInfo(
    "Role Scope ",
    undefined,
    "role_scope",
    InputFields.selectInput(
      roleScopeArray,
      "Select Option",
      true,
      undefined,
      userRole !== "org_admin",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    ),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    true,
    undefined,
    undefined,
    undefined,
  );
}

function validateEmptyValue(key, errors) {
  if (key === "emailList") {
    errors["email"] = "Please enter Invite mails";
    return;
  }
  errors[key] = "Please enter a " + LogicUtils.snakeToTitle(key);
}

function validateForm(values, fieldsToValidate) {
  var errors = {};
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  fieldsToValidate.forEach(function (key) {
    var value = LogicUtils.getArrayFromDict(valuesDict, key, []);
    if (value.length === 0) {
      return validateEmptyValue(key, errors);
    } else {
      value.forEach(function (ele) {
        if (
          HSwitchUtils.isValidEmail(
            Core__Option.getOr(Core__JSON.Decode.string(ele), ""),
          )
        ) {
          errors["email"] = "Please enter a valid email";
          return;
        }
      });
      return;
    }
  });
  return errors;
}

function validateFormForRoles(values) {
  var errors = {};
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  if (
    LogicUtils.isEmptyString(LogicUtils.getString(valuesDict, "role_scope", ""))
  ) {
    errors["role_scope"] = "Role scope is required";
  }
  if (
    LogicUtils.isEmptyString(LogicUtils.getString(valuesDict, "role_name", ""))
  ) {
    errors["role_name"] = "Role name is required";
  }
  if (LogicUtils.getString(valuesDict, "role_name", "").length > 64) {
    errors["role_name"] = "Role name should be less than 64 characters";
  }
  if (LogicUtils.getArrayFromDict(valuesDict, "groups", []).length === 0) {
    errors["groups"] = "Roles required";
  }
  return errors;
}

function roleListDataMapper(ele) {
  var match = ele.role_name;
  var roleNameToDisplay =
    match === "iam"
      ? ele.role_name.toLocaleUpperCase()
      : LogicUtils.snakeToTitle(ele.role_name);
  return {
    label: roleNameToDisplay,
    value: ele.role_id,
  };
}

function roleOptions(roleListData) {
  return roleListData.map(roleListDataMapper);
}

function roleType(roleListData, boderColor) {
  return FormRenderer.makeFieldInfo(
    "Choose a role",
    undefined,
    "roleType",
    InputFields.infraSelectInput(
      roleListData.map(roleListDataMapper),
      undefined,
      undefined,
      boderColor,
      undefined,
      undefined,
      false,
      undefined,
    ),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    true,
    undefined,
    undefined,
    undefined,
  );
}

function getArrayOfPermissionData(json) {
  return LogicUtils.getArrayFromDict(
    LogicUtils.getDictFromJsonObject(json),
    "groups",
    [],
  ).map(function (i) {
    return Core__Option.getOr(Core__JSON.Decode.string(i), "");
  });
}

function updatePresentInInfoList(infoData, permissionsData) {
  var copyOfInfoData = infoData.slice();
  var copyOfPermissionsData = permissionsData.slice();
  return copyOfInfoData.map(function (infoValItem) {
    if (copyOfPermissionsData.includes(infoValItem.module_)) {
      infoValItem.isPermissionAllowed = true;
    } else {
      infoValItem.isPermissionAllowed = false;
    }
    return infoValItem;
  });
}

function defaultPresentInInfoList(infoData) {
  var copyOfInfoData = infoData.slice();
  return copyOfInfoData.map(function (infoValItem) {
    infoValItem.isPermissionAllowed = false;
    return infoValItem;
  });
}

function UserManagementUtils$RolePermissionValueRenderer(props) {
  var __isPermissionAllowed = props.isPermissionAllowed;
  var isPermissionAllowed =
    __isPermissionAllowed !== undefined ? __isPermissionAllowed : false;
  return React.createElement(
    "div",
    {
      className: "flex justify-between",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-3 items-start col-span-1",
      },
      React.createElement(
        "div",
        {
          className: "font-semibold",
        },
        props.heading,
      ),
      React.createElement(
        "div",
        {
          className: "text-base text-hyperswitch_black opacity-50 flex-1",
        },
        props.description,
      ),
    ),
    React.createElement(Icon.make, {
      name: isPermissionAllowed ? "permitted" : "not-permitted",
      size: 22,
    }),
  );
}

var RolePermissionValueRenderer = {
  make: UserManagementUtils$RolePermissionValueRenderer,
};

function roleListResponseMapper(dict) {
  return {
    role_id: LogicUtils.getString(dict, "role_id", ""),
    role_name: LogicUtils.getString(dict, "role_name", ""),
  };
}

function tabIndeToVariantMapper(index) {
  if (index !== 0) {
    return "Roles";
  } else {
    return "Users";
  }
}

var errorClass = "text-sm leading-4 font-medium text-start ml-1 mt-2";

export {
  errorClass,
  inviteEmail,
  createCustomRole,
  roleScope,
  validateEmptyValue,
  validateForm,
  validateFormForRoles,
  roleListDataMapper,
  roleOptions,
  roleType,
  getArrayOfPermissionData,
  updatePresentInInfoList,
  defaultPresentInInfoList,
  RolePermissionValueRenderer,
  roleListResponseMapper,
  tabIndeToVariantMapper,
};
/* inviteEmail Not a pure module */
