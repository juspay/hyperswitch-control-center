// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

function mapPermissionTypeToString(permissionType) {
  if (typeof permissionType === "object") {
    return permissionType._0;
  }
  switch (permissionType) {
    case "OperationsView":
      return "operations_view";
    case "OperationsManage":
      return "operations_manage";
    case "ConnectorsView":
      return "connectors_view";
    case "ConnectorsManage":
      return "connectors_manage";
    case "WorkflowsView":
      return "workflows_view";
    case "WorkflowsManage":
      return "workflows_manage";
    case "AnalyticsView":
      return "analytics_view";
    case "UsersView":
      return "users_view";
    case "UsersManage":
      return "users_manage";
    case "MerchantDetailsView":
      return "merchant_details_view";
    case "MerchantDetailsManage":
      return "merchant_details_manage";
    case "OrganizationManage":
      return "organization_manage";
  }
}

function mapStringToPermissionType(val) {
  switch (val) {
    case "analytics_view":
      return "AnalyticsView";
    case "connectors_manage":
      return "ConnectorsManage";
    case "connectors_view":
      return "ConnectorsView";
    case "merchant_details_manage":
      return "MerchantDetailsManage";
    case "merchant_details_view":
      return "MerchantDetailsView";
    case "operations_manage":
      return "OperationsManage";
    case "operations_view":
      return "OperationsView";
    case "organization_manage":
      return "OrganizationManage";
    case "users_manage":
      return "UsersManage";
    case "users_view":
      return "UsersView";
    case "workflows_manage":
      return "WorkflowsManage";
    case "workflows_view":
      return "WorkflowsView";
    default:
      return {
        TAG: "UnknownPermission",
        _0: val,
      };
  }
}

function getAccessValue(permissionValue, permissionList) {
  var isPermissionFound = permissionList.find(function (ele) {
    return Caml_obj.equal(ele, permissionValue);
  });
  if (Core__Option.isSome(isPermissionFound)) {
    return "Access";
  } else {
    return "NoAccess";
  }
}

function getPermissionJson(permissionList) {
  return {
    operationsView: getAccessValue("OperationsView", permissionList),
    operationsManage: getAccessValue("OperationsManage", permissionList),
    connectorsView: getAccessValue("ConnectorsView", permissionList),
    connectorsManage: getAccessValue("ConnectorsManage", permissionList),
    workflowsView: getAccessValue("WorkflowsView", permissionList),
    workflowsManage: getAccessValue("WorkflowsManage", permissionList),
    analyticsView: getAccessValue("AnalyticsView", permissionList),
    usersView: getAccessValue("UsersView", permissionList),
    usersManage: getAccessValue("UsersManage", permissionList),
    merchantDetailsView: getAccessValue("MerchantDetailsView", permissionList),
    merchantDetailsManage: getAccessValue(
      "MerchantDetailsManage",
      permissionList,
    ),
    organizationManage: getAccessValue("OrganizationManage", permissionList),
  };
}

function linkForGetShowLinkViaAccess(permission, url) {
  if (permission === "Access") {
    return url;
  } else {
    return "";
  }
}

function cursorStyles(permission) {
  if (permission === "Access") {
    return "cursor-pointer";
  } else {
    return "cursor-not-allowed";
  }
}

function hasAnyPermission(permission1, permission2) {
  if (permission1 === "NoAccess" && permission2 === "NoAccess") {
    return "NoAccess";
  } else {
    return "Access";
  }
}

var defaultValueForPermission = {
  operationsView: "NoAccess",
  operationsManage: "NoAccess",
  connectorsView: "NoAccess",
  connectorsManage: "NoAccess",
  workflowsView: "NoAccess",
  workflowsManage: "NoAccess",
  analyticsView: "NoAccess",
  usersView: "NoAccess",
  usersManage: "NoAccess",
  merchantDetailsView: "NoAccess",
  merchantDetailsManage: "NoAccess",
  organizationManage: "NoAccess",
};

export {
  mapPermissionTypeToString,
  mapStringToPermissionType,
  getAccessValue,
  defaultValueForPermission,
  getPermissionJson,
  linkForGetShowLinkViaAccess,
  cursorStyles,
  hasAnyPermission,
};
/* No side effect */
