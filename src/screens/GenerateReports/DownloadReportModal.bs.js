// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as Modal from "../../utils/Modal.bs.js";
import * as React from "react";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as MixpanelHook from "../MixpanelHook.bs.js";
import * as TimeZoneHook from "../../hooks/TimeZoneHook.bs.js";

function DownloadReportModal(props) {
  var entityName = props.entityName;
  var setReportModal = props.setReportModal;
  var getURL = APIUtils.useGetURL();
  var showToast = ToastState.useShowToast();
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var downloadReport = async function (body) {
    try {
      var url = getURL(
        entityName,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setReportModal(function (param) {
        return false;
      });
      showToast(
        "Email Sent",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {
      showToast(
        "Something went wrong. Please try again.",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return null;
  };
  var onSubmit = function (values, param) {
    var dateCreatedDict = LogicUtils.getDictFromJsonObject(
      LogicUtils.getJsonObjectFromDict(
        LogicUtils.getDictFromJsonObject(
          LogicUtils.getJsonObjectFromDict(
            LogicUtils.getDictFromJsonObject(values),
            "filters",
          ),
        ),
        "dateCreated",
      ),
    );
    var gte = LogicUtils.getJsonObjectFromDict(dateCreatedDict, "gte");
    var lte = LogicUtils.getJsonObjectFromDict(dateCreatedDict, "lte");
    var body = {
      timeRange: {
        startTime: gte,
        endTime: lte,
      },
    };
    mixpanelEvent(
      "generate_reports_download",
      undefined,
      undefined,
      undefined,
      body,
      undefined,
    );
    return downloadReport(body);
  };
  var getPreviousDate = function () {
    var currentDate = new Date().getTime();
    var previousDateMilliseconds = currentDate - 86400000.0;
    var previousDate = new Date(previousDateMilliseconds).toISOString();
    return TimeZoneHook.formattedISOString(
      previousDate,
      "YYYY-MM-DDTHH:mm:ss[Z]",
    );
  };
  var initialValues = {
    filters: {
      dateCreated: {
        gte: getPreviousDate(),
        lte: new Date(Date.now()).toISOString(),
      },
    },
  };
  var category;
  switch (entityName) {
    case "PAYMENT_REPORT":
      category = "Payment";
      break;
    case "REFUND_REPORT":
      category = "Refund";
      break;
    case "DISPUTE_REPORT":
      category = "Dispute";
      break;
    default:
      category = "";
  }
  return React.createElement(Modal.make, {
    showModal: props.reportModal,
    setShowModal: setReportModal,
    children: React.createElement(
      Form.make,
      {
        children: null,
        onSubmit: onSubmit,
        initialValues: initialValues,
      },
      React.createElement(FormRenderer.FieldRenderer.make, {
        field: FormRenderer.makeMultiInputFieldInfo(
          "Date Range",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          true,
          InputFields.dateRangeField(
            "filters.dateCreated.gte",
            "filters.dateCreated.lte",
            "YYYY-MM-DDTHH:mm:ss[Z]",
            false,
            true,
            false,
            ["Today", "Yesterday", "ThisMonth", "LastMonth"],
            false,
            2,
            400,
            undefined,
            "filters.dateCreated.opt",
            undefined,
            undefined,
            undefined,
            undefined,
            false,
            undefined,
          ),
          undefined,
          [],
          undefined,
        ),
      }),
      React.createElement(FormRenderer.SubmitButton.make, {
        text: "Generate",
        customSumbitButtonStyle: "mt-10 ml-3",
      }),
    ),
    modalHeading: "Generate " + category + " Reports",
    modalClass: "w-1/4 m-auto",
    modalHeadingDescriptionElement: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "text-md font-medium leading-7 opacity-50 mt-1 w-full",
        },
        "The generated reports will be emailed to you.",
      ),
    ),
  });
}

var make = DownloadReportModal;

export { make };
/* Form Not a pure module */
