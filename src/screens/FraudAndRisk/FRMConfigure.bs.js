// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Recoil from "recoil";
import * as FRMInfo from "./FRMInfo.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as FRMUtils from "./FRMUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as UrlUtils from "../../utils/UrlUtils.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as FRMSummary from "./FRMSummary.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as HSwitchUtils from "../HSwitchUtils.bs.js";
import * as ConnectorHome from "../Connectors/ConnectorHome.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as FRMPaymentMethods from "./FRMPaymentMethods.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as BreadCrumbNavigation from "../../utils/BreadCrumbNavigation.bs.js";
import * as FRMIntegrationFields from "./FRMIntegrationFields.bs.js";

function FRMConfigure(props) {
  var getURL = APIUtils.useGetURL();
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return {};
  });
  var setInitialValues = match$1[1];
  var initialValues = match$1[0];
  var frmName = LogicUtils.getString(
    UrlUtils.useGetFilterDictFromUrl(""),
    "name",
    "",
  );
  var frmID = HSwitchUtils.getConnectorIDFromUrl(
    Core__List.toArray(url.path),
    "",
  );
  var match$2 = HSwitchUtils.urlPath(url.path);
  var isUpdateFlow;
  if (match$2 && match$2.hd === "fraud-risk-management") {
    var match$3 = match$2.tl;
    isUpdateFlow =
      match$3 && match$3.hd === "new" && !match$3.tl ? false : true;
  } else {
    isUpdateFlow = true;
  }
  var match$4 = React.useState(function () {
    if (isUpdateFlow) {
      return "Preview";
    } else {
      return "PaymentMethods";
    }
  });
  var setCurrentStep = match$4[1];
  var currentStep = match$4[0];
  var selectedFRMName = React.useMemo(
    function () {
      var frmName$1 = ConnectorUtils.getConnectorNameTypeFromString(
        frmName,
        "FRMPlayer",
        undefined,
      );
      setInitialValues(function (param) {
        return FRMUtils.generateInitialValuesDict(
          frmName$1,
          featureFlagDetails.isLiveMode,
          undefined,
        );
      });
      setCurrentStep(function (param) {
        if (isUpdateFlow) {
          return "Preview";
        } else {
          return "PaymentMethods";
        }
      });
      return frmName$1;
    },
    [frmName],
  );
  var getFRMDetails = async function (url) {
    try {
      var res = await fetchDetails(url);
      setInitialValues(function (param) {
        return res;
      });
      setScreenState(function (param) {
        return "Success";
      });
      return setCurrentStep(function (prev) {
        return FRMInfo.getNextStep(prev);
      });
    } catch (exn) {
      return setScreenState(function (param) {
        return {
          TAG: "Error",
          _0: "Error Occured!",
        };
      });
    }
  };
  React.useEffect(function () {
    if (frmID !== "new") {
      setScreenState(function (param) {
        return "Loading";
      });
      var url = getURL(
        "FRAUD_RISK_MANAGEMENT",
        "Get",
        Caml_option.some(frmID),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      getFRMDetails(url);
    } else {
      setScreenState(function (param) {
        return "Success";
      });
    }
  }, []);
  var path = [];
  if (frmID === "new") {
    path.push({
      title: "Fraud Risk Management",
      link: "/fraud-risk-management",
      warning:
        "You have not yet completed configuring your " +
        LogicUtils.snakeToTitle(
          ConnectorUtils.getConnectorNameString(selectedFRMName),
        ) +
        " player. Are you sure you want to go back?",
      mixPanelCustomString:
        " " + ConnectorUtils.getConnectorNameString(selectedFRMName),
    });
  } else {
    path.push({
      title: "Fraud Risk Management",
      link: "/fraud-risk-management",
    });
  }
  var tmp;
  switch (currentStep) {
    case "IntegFields":
      tmp = React.createElement(FRMIntegrationFields.make, {
        setCurrentStep: setCurrentStep,
        selectedFRMName: selectedFRMName,
        retrivedValues: Caml_option.some(initialValues),
        setInitialValues: setInitialValues,
        isUpdateFlow: isUpdateFlow,
      });
      break;
    case "PaymentMethods":
      tmp = React.createElement(FRMPaymentMethods.make, {
        setCurrentStep: setCurrentStep,
        retrivedValues: Caml_option.some(initialValues),
        setInitialValues: setInitialValues,
        isUpdateFlow: isUpdateFlow,
      });
      break;
    case "SummaryAndTest":
    case "Preview":
      tmp = React.createElement(FRMSummary.make, {
        initialValues: initialValues,
        currentStep: currentStep,
        setCurrentStep: setCurrentStep,
      });
      break;
    case "AutomaticFlow":
      tmp = null;
      break;
  }
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-8 h-full",
        },
        React.createElement(BreadCrumbNavigation.make, {
          path: path,
          currentPageTitle: LogicUtils.capitalizeString(frmName),
          cursorStyle: "cursor-pointer",
        }),
        React.createElement(RenderIf.make, {
          condition: currentStep !== "Preview",
          children: React.createElement(
            ConnectorHome.ConnectorCurrentStepIndicator.make,
            {
              currentStep: currentStep,
              stepsArr: FRMInfo.stepsArr,
            },
          ),
        }),
        React.createElement(
          "div",
          {
            className:
              "bg-white rounded border h-3/4 p-2 md:p-6 overflow-scroll",
          },
          tmp,
        ),
      ),
    ),
    screenState: match[0],
  });
}

var make = FRMConfigure;

export { make };
/* react Not a pure module */
