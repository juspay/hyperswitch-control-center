// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as FRMInfo from "./FRMInfo.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as FRMTypes from "./FRMTypes.bs.js";
import * as FRMUtils from "./FRMUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../components/custom-icons/GatewayIcon.bs.js";
import * as MixpanelHook from "../MixpanelHook.bs.js";
import * as ConnectorPreview from "../Connectors/ConnectorPreview.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function FRMSummary$InfoField(props) {
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-2 mb-7",
    },
    React.createElement(
      "h4",
      {
        className: "text-lg font-semibold underline",
      },
      LogicUtils.snakeToTitle(props.label),
    ),
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-1",
      },
      React.createElement(
        "h3",
        {
          className: "break-all",
        },
        React.createElement(
          "span",
          {
            className: "font-semibold mr-3",
          },
          "Flow :",
        ),
        FRMInfo.getFlowTypeLabel(props.flowTypeValue),
      ),
      React.createElement(
        "h3",
        {
          className: "break-all",
        },
        React.createElement(
          "span",
          {
            className: "font-semibold mr-3",
          },
          "Action :",
        ),
        FRMInfo.getActionTypeLabel(props.actionTypeValue),
      ),
    ),
  );
}

var InfoField = {
  make: FRMSummary$InfoField,
};

function FRMSummary$ConfigInfo(props) {
  return props.frmConfigs.map(function (config, i) {
    return React.createElement(
      "div",
      {
        key: i.toString(),
        className: "grid grid-cols-2 md:w-1/2 ml-12 my-12",
      },
      React.createElement(
        "h4",
        {
          className: "text-lg font-semibold",
        },
        LogicUtils.snakeToTitle(config.gateway),
      ),
      React.createElement(
        "div",
        undefined,
        config.payment_methods.map(function (paymentMethod, ind) {
          return React.createElement(
            "div",
            {
              key: ind.toString(),
            },
            paymentMethod.payment_method_types.map(
              function (paymentMethodType, index) {
                return JsxPPXReactSupportU.createElementWithKey(
                  index.toString(),
                  FRMSummary$InfoField,
                  {
                    label: paymentMethodType.payment_method_type,
                    flowTypeValue: paymentMethodType.flow,
                    actionTypeValue: paymentMethodType.action,
                  },
                );
              },
            ),
          );
        }),
      ),
    );
  });
}

var ConfigInfo = {
  make: FRMSummary$ConfigInfo,
};

function FRMSummary(props) {
  var initialValues = props.initialValues;
  var getURL = APIUtils.useGetURL();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var showToast = ToastState.useShowToast();
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var frmInfo = ConnectorListMapper.getProcessorPayloadType(
    LogicUtils.getDictFromJsonObject(initialValues),
  );
  var isfrmDisabled = LogicUtils.getBool(
    LogicUtils.getDictFromJsonObject(initialValues),
    "disabled",
    false,
  );
  var config = frmInfo.frm_configs;
  var frmConfigs = config !== undefined ? config : [];
  var disableFRM = async function (isFRMDisabled) {
    try {
      var frmID = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(initialValues),
        "merchant_connector_id",
        "",
      );
      var disableFRMPayload = FRMTypes.getDisableConnectorPayload(
        initialValues,
        isFRMDisabled,
      );
      var url = getURL(
        "FRAUD_RISK_MANAGEMENT",
        "Post",
        Caml_option.some(frmID),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        url,
        disableFRMPayload,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      showToast(
        "Successfully Saved the Changes",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return RescriptReactRouter.push(
        GlobalVars.appendDashboardPath("/fraud-risk-management"),
      );
    } catch (raw_exn) {
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === Js_exn.$$Error) {
        return showToast(
          "Failed to Disable connector!",
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      }
      throw exn;
    }
  };
  var tmp;
  tmp =
    props.currentStep === "Preview"
      ? React.createElement(
          "div",
          {
            className: "flex gap-6 items-center",
          },
          React.createElement(
            "p",
            {
              className:
                "text-fs-13 font-bold " +
                (isfrmDisabled ? "text-red-800" : "text-green-700"),
            },
            isfrmDisabled ? "INACTIVE" : "ACTIVE",
          ),
          React.createElement(ConnectorPreview.MenuOption.make, {
            updateStepValue: "PaymentMethods",
            setCurrentStep: props.setCurrentStep,
            disableConnector: disableFRM,
            isConnectorDisabled: isfrmDisabled,
            pageName: LogicUtils.getListHead(undefined, url.path),
            connector: frmInfo.connector_name,
          }),
        )
      : React.createElement(Button.make, {
          text: "Done",
          buttonType: "Primary",
          onClick: function (param) {
            mixpanelEvent(
              "frm_step3",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            RescriptReactRouter.push(
              GlobalVars.appendDashboardPath("/fraud-risk-management"),
            );
          },
        });
  return React.createElement(
    "div",
    undefined,
    React.createElement(
      "div",
      {
        className: "flex justify-between border-b sticky top-0 bg-white pb-2",
      },
      React.createElement(
        "div",
        {
          className: "flex gap-2 items-center",
        },
        React.createElement(GatewayIcon.make, {
          gateway: frmInfo.connector_name.toUpperCase(),
          className: FRMUtils.size,
        }),
        React.createElement(
          "h2",
          {
            className: "text-xl font-semibold",
          },
          LogicUtils.capitalizeString(frmInfo.connector_name),
        ),
      ),
      tmp,
    ),
    React.createElement(
      "div",
      undefined,
      React.createElement(
        "div",
        {
          className: "grid grid-cols-2 md:w-1/2 m-12",
        },
        React.createElement(
          "h4",
          {
            className: "text-lg font-semibold",
          },
          "Profile id",
        ),
        React.createElement("div", undefined, frmInfo.profile_id),
      ),
      React.createElement(RenderIf.make, {
        condition: frmConfigs.length > 0,
        children: React.createElement(FRMSummary$ConfigInfo, {
          frmConfigs: frmConfigs,
        }),
      }),
    ),
  );
}

var make = FRMSummary;

export { InfoField, ConfigInfo, make };
/* react Not a pure module */
