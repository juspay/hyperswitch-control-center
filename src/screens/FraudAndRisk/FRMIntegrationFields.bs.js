// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as FRMInfo from "./FRMInfo.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as FRMUtils from "./FRMUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as UrlUtils from "../../utils/UrlUtils.bs.js";
import * as BoolInput from "../../components/form/BoolInput.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as MixpanelHook from "../MixpanelHook.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as FormValuesSpy from "../../components/form/FormValuesSpy.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";
import * as CommonAuthHooks from "../../entryPoints/AuthModule/Common/CommonAuthHooks.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as JsonFlattenUtils from "../../utils/JsonFlattenUtils.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";
import * as ConnectorAccountDetailsHelper from "../Connectors/ConnectorAccountDetailsHelper.bs.js";

function FRMIntegrationFields$AdvanceSettings(props) {
  var isUpdateFlow = props.isUpdateFlow;
  var match = React.useState(function () {
    return isUpdateFlow;
  });
  var setIsFRMSettings = match[1];
  var isFRMSettings = match[0];
  var form = ReactFinalForm.useForm();
  var inputLabel_onBlur = function (_ev) {};
  var inputLabel_onChange = function (ev) {
    setIsFRMSettings(function (param) {
      return ev;
    });
  };
  var inputLabel_onFocus = function (_ev) {};
  var inputLabel = {
    name: "input",
    onBlur: inputLabel_onBlur,
    onChange: inputLabel_onChange,
    onFocus: inputLabel_onFocus,
    value: isFRMSettings,
    checked: true,
  };
  var businessProfileValue = MerchantAccountUtils.getValueFromBusinessProfile(
    Recoil.useRecoilValue(HyperswitchAtom.businessProfilesAtom),
  );
  React.useEffect(
    function () {
      if (!isUpdateFlow) {
        form.change("profile_id", businessProfileValue.profile_id);
      }
    },
    [businessProfileValue.profile_id],
  );
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(
      "div",
      {
        className: "flex gap-2 items-center p-2",
      },
      React.createElement(BoolInput.make, {
        input: inputLabel,
        isDisabled: isUpdateFlow,
        boolCustomClass: "rounded-full",
      }),
      React.createElement(
        "p",
        {
          className: "font-semibold !text-black opacity-50 ",
        },
        "Show advanced settings",
      ),
    ),
    React.createElement(RenderIf.make, {
      condition: props.renderCountrySelector && isFRMSettings,
      children: React.createElement(
        ConnectorAccountDetailsHelper.BusinessProfileRender.make,
        {
          isUpdateFlow: isUpdateFlow,
          selectedConnector: props.frmName,
        },
      ),
    }),
  );
}

var AdvanceSettings = {
  make: FRMIntegrationFields$AdvanceSettings,
};

function FRMIntegrationFields$IntegrationFieldsForm(props) {
  var isUpdateFlow = props.isUpdateFlow;
  var setCurrentStep = props.setCurrentStep;
  var __pageState = props.pageState;
  var __renderCountrySelector = props.renderCountrySelector;
  var renderCountrySelector =
    __renderCountrySelector !== undefined ? __renderCountrySelector : true;
  var pageState = __pageState !== undefined ? __pageState : "Success";
  var buttonText;
  if (typeof pageState !== "object") {
    switch (pageState) {
      case "Loading":
        buttonText = "Loading...";
        break;
      case "Success":
      case "Custom":
        buttonText = isUpdateFlow ? "Update" : "Connect and Finish";
        break;
    }
  } else {
    buttonText =
      pageState._0 === ""
        ? "Try Again"
        : isUpdateFlow
          ? "Update"
          : "Connect and Finish";
  }
  var validateRequiredFields = function (valuesFlattenJson, fields, errors) {
    fields.forEach(function (field) {
      var key = field.name;
      var value = LogicUtils.getStringFromJson(
        Core__Option.getOr(valuesFlattenJson[key], ""),
        "",
      );
      if (Core__Option.getOr(field.isRequired, true) && value.length === 0) {
        errors[key] = "Please enter " + Core__Option.getOr(field.label, "");
        return;
      }
    });
  };
  var validateCountryCurrency = function (valuesFlattenJson, errors) {
    var profileId = LogicUtils.getString(valuesFlattenJson, "profile_id", "");
    if (profileId.length <= 0) {
      errors["Profile Id"] = "Please select your business profile";
      return;
    }
  };
  var selectedFRMInfo = ConnectorUtils.getConnectorInfo(props.selectedFRMName);
  var validate = function (values) {
    var errors = {};
    var valuesFlattenJson = JsonFlattenUtils.flattenObject(values, true);
    validateRequiredFields(
      valuesFlattenJson,
      Core__Option.getOr(selectedFRMInfo.validate, []),
      errors,
    );
    if (renderCountrySelector) {
      validateCountryCurrency(valuesFlattenJson, errors);
    }
    return errors;
  };
  var validateMandatoryField = function (values) {
    var errors = {};
    var valuesFlattenJson = JsonFlattenUtils.flattenObject(values, true);
    validateRequiredFields(
      valuesFlattenJson,
      Core__Option.getOr(selectedFRMInfo.validate, []),
      errors,
    );
    if (renderCountrySelector) {
      validateCountryCurrency(valuesFlattenJson, errors);
    }
    return errors;
  };
  return React.createElement(
    Form.make,
    {
      children: null,
      onSubmit: props.onSubmit,
      initialValues: props.initialValues,
      validate: validateMandatoryField,
    },
    React.createElement(
      "div",
      {
        className: "flex",
      },
      React.createElement(
        "div",
        {
          className: "grid grid-cols-2 flex-1 gap-5",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-3",
          },
          React.createElement(FRMIntegrationFields$AdvanceSettings, {
            isUpdateFlow: isUpdateFlow,
            frmName: props.frmName,
            renderCountrySelector: renderCountrySelector,
          }),
          Core__Option.getOr(selectedFRMInfo.validate, []).map(
            function (field, index) {
              var parse = Core__Option.getOr(field.encodeToBase64, false)
                ? FRMUtils.base64Parse
                : FRMUtils.leadingSpaceStrParser;
              var format = Core__Option.getOr(field.encodeToBase64, false)
                ? FRMUtils.base64Format
                : undefined;
              return React.createElement(
                "div",
                {
                  key: index.toString(),
                },
                React.createElement(FormRenderer.FieldRenderer.make, {
                  field: FormRenderer.makeFieldInfo(
                    Core__Option.getOr(field.label, ""),
                    undefined,
                    field.name,
                    undefined,
                    Core__Option.getOr(field.description, ""),
                    undefined,
                    undefined,
                    undefined,
                    Core__Option.getOr(field.placeholder, ""),
                    undefined,
                    undefined,
                    format,
                    undefined,
                    parse,
                    undefined,
                    true,
                    undefined,
                    undefined,
                    undefined,
                  ),
                  labelClass: "font-semibold !text-black",
                }),
                React.createElement(
                  ConnectorAccountDetailsHelper.ErrorValidation.make,
                  {
                    fieldName: field.name,
                    validate: validate,
                  },
                ),
              );
            },
          ),
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-row mt-6 md:mt-0 md:justify-self-end h-min",
          },
          pageState === "Loading"
            ? React.createElement(Button.make, {
                buttonState: "Loading",
                text: buttonText,
                buttonType: "Primary",
              })
            : React.createElement(
                "div",
                {
                  className: "flex gap-5",
                },
                React.createElement(Button.make, {
                  text: "Back",
                  buttonType: "Secondary",
                  onClick: function (param) {
                    setCurrentStep(function (prev) {
                      return FRMInfo.getPrevStep(prev);
                    });
                  },
                }),
                React.createElement(FormRenderer.SubmitButton.make, {
                  text: buttonText,
                  loadingText: "Processing...",
                }),
              ),
        ),
      ),
    ),
    React.createElement(FormValuesSpy.make, {}),
  );
}

var IntegrationFieldsForm = {
  make: FRMIntegrationFields$IntegrationFieldsForm,
};

function FRMIntegrationFields(props) {
  var isUpdateFlow = props.isUpdateFlow;
  var setInitialValues = props.setInitialValues;
  var __retrivedValues = props.retrivedValues;
  var selectedFRMName = props.selectedFRMName;
  var setCurrentStep = props.setCurrentStep;
  var retrivedValues =
    __retrivedValues !== undefined
      ? Caml_option.valFromOption(__retrivedValues)
      : undefined;
  var getURL = APIUtils.useGetURL();
  var showToast = ToastState.useShowToast();
  var fetchApi = APIUtils.useUpdateMethod(undefined, undefined);
  var frmName = LogicUtils.getString(
    UrlUtils.useGetFilterDictFromUrl(""),
    "name",
    "",
  );
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var match = React.useState(function () {
    return "Success";
  });
  var setPageState = match[1];
  var match$1 = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  var merchantId = match$1.merchant_id;
  var initialValues = React.useMemo(
    function () {
      if (retrivedValues === undefined) {
        return FRMUtils.generateInitialValuesDict(
          selectedFRMName,
          featureFlagDetails.isLiveMode,
          undefined,
        );
      }
      var initialValuesObj = LogicUtils.getDictFromJsonObject(retrivedValues);
      var frmAccountDetailsObj = LogicUtils.getObj(
        initialValuesObj,
        "connector_account_details",
        {},
      );
      frmAccountDetailsObj["auth_type"] =
        FRMInfo.getFRMAuthType(selectedFRMName);
      initialValuesObj["connector_account_details"] = frmAccountDetailsObj;
      return initialValuesObj;
    },
    [retrivedValues],
  );
  var frmID = LogicUtils.getString(
    LogicUtils.getDictFromJsonObject(Core__Option.getOr(retrivedValues, {})),
    "merchant_connector_id",
    "",
  );
  var submitText = isUpdateFlow
    ? "Details Updated!"
    : "FRM Player Created Successfully!";
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var frmUrl =
    frmID.length <= 0
      ? getURL(
          "FRAUD_RISK_MANAGEMENT",
          "Post",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        )
      : getURL(
          "FRAUD_RISK_MANAGEMENT",
          "Post",
          Caml_option.some(frmID),
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
  var updateMerchantDetails = async function () {
    var info = Object.fromEntries([
      ["data", "signifyd"],
      ["type", "single"],
    ]);
    var body = Object.fromEntries([
      ["frm_routing_algorithm", info],
      ["merchant_id", merchantId],
    ]);
    var url = getURL(
      "MERCHANT_ACCOUNT",
      "Post",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    try {
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {}
    return null;
  };
  var setFRMValues = async function (body) {
    Core__Promise.$$catch(
      fetchApi(
        frmUrl,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      ).then(function (res) {
        setCurrentStep(function (prev) {
          return FRMInfo.getNextStep(prev);
        });
        updateMerchantDetails();
        setInitialValues(function (param) {
          return res;
        });
        showToast(
          submitText,
          "ToastSuccess",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
        setPageState(function (param) {
          return "Success";
        });
      }),
      function (param) {
        setPageState(function (param) {
          return {
            TAG: "Error",
            _0: "",
          };
        });
        return Promise.resolve();
      },
    );
    return null;
  };
  var onSubmit = function (values, param) {
    mixpanelEvent(
      "frm_step2",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    setPageState(function (param) {
      return "Loading";
    });
    var body = isUpdateFlow ? FRMUtils.ignoreFields(values) : values;
    setFRMValues(body);
    return Promise.resolve(null);
  };
  return React.createElement(FRMIntegrationFields$IntegrationFieldsForm, {
    selectedFRMName: selectedFRMName,
    initialValues: initialValues,
    onSubmit: onSubmit,
    pageState: match[0],
    setCurrentStep: setCurrentStep,
    frmName: frmName,
    isUpdateFlow: isUpdateFlow,
  });
}

var make = FRMIntegrationFields;

export { AdvanceSettings, IntegrationFieldsForm, make };
/* Form Not a pure module */
