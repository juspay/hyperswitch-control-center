// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../components/custom-icons/GatewayIcon.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";
import * as GlobalProvider from "../../entryPoints/Provider/GlobalProvider.bs.js";
import * as SetupConnector from "../Home/CommonConnectorFlow/SetupConnector.bs.js";
import * as EnumVariantHook from "../Hooks/EnumVariantHook.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as PaymentSettings from "../Developer/PaymentSettings/PaymentSettings.bs.js";
import * as QuickStartUtils from "../Home/QuickStart/QuickStartUtils.bs.js";
import * as ConnectorPreview from "../Connectors/ConnectorPreview.bs.js";
import * as WooCommerceUtils from "./WooCommerceUtils.bs.js";
import * as QuickStartUIUtils from "../Home/QuickStart/QuickStartUIUtils.bs.js";
import * as HSSelfServeSidebar from "../Helpers/HSSelfServeSidebar.bs.js";
import * as WooCommerceUIUtils from "./WooCommerceUIUtils.bs.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";
import * as ProdOnboardingUIUtils from "../SelfServe/HSwitchProdOnboarding/ProdOnboardingUIUtils.bs.js";
import * as UserOnboardingUIUtils from "../SelfServe/HSwitchSandboxOnboarding/UserOnboardingUIUtils.bs.js";

var steps = [
  "PLUGIN_INSTALL",
  "PLUGIN_CONFIGURE",
  "WEBHOOK_SETUP",
  "PROCESSOR_SETUP",
];

function WooCommerce$BaseComponent(props) {
  var handleNavigation = props.handleNavigation;
  return React.createElement(QuickStartUIUtils.BaseComponent.make, {
    children: props.children,
    headerText: "Hyperswitch for Woocommerce",
    headerLeftIcon: "hyperswitch-logo-short",
    nextButton: Caml_option.some(
      React.createElement(Button.make, {
        text: "Continue",
        buttonType: "Primary",
        onClick: function (param) {
          handleNavigation(true);
        },
      }),
    ),
  });
}

var BaseComponent = {
  make: WooCommerce$BaseComponent,
};

function WooCommerce$WooCommerceStepWrapper(props) {
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-6",
    },
    React.createElement(
      "div",
      undefined,
      React.createElement(
        "h2",
        {
          className: "text-xl font-semibold",
        },
        props.title,
      ),
      React.createElement(
        "p",
        {
          className: "text-gray-500",
        },
        props.description,
      ),
    ),
    props.children,
  );
}

var WooCommerceStepWrapper = {
  make: WooCommerce$WooCommerceStepWrapper,
};

function WooCommerce$InstallPlugin(props) {
  return React.createElement(WooCommerce$BaseComponent, {
    handleNavigation: props.handleNavigation,
    children: React.createElement(WooCommerce$WooCommerceStepWrapper, {
      title: props.title,
      description: props.description,
      children: React.createElement(
        "div",
        {
          className: "bg-gray-50 rounded border p-8 flex flex-col gap-6",
        },
        React.createElement(
          "div",
          undefined,
          React.createElement(
            "h2",
            {
              className: "text-xl font-medium",
            },
            "Hyperswitch's Checkout Plugin",
          ),
          React.createElement(
            "p",
            {
              className: "text-gray-500",
            },
            "Use this plugin to get the best checkout experience",
          ),
        ),
        React.createElement(
          UserOnboardingUIUtils.DownloadWordPressPlugin.make,
          {
            currentRoute: "WooCommercePlugin",
            currentTabName: "downloadWordpressPlugin",
          },
        ),
      ),
    }),
  });
}

var InstallPlugin = {
  make: WooCommerce$InstallPlugin,
};

function WooCommerce$ConfigurePlugin(props) {
  return React.createElement(WooCommerce$BaseComponent, {
    handleNavigation: props.handleNavigation,
    children: React.createElement(WooCommerce$WooCommerceStepWrapper, {
      title: props.title,
      description: props.description,
      children: React.createElement(
        "div",
        {
          className: "p-8 flex flex-col gap-6",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-6",
          },
          React.createElement(
            "div",
            {
              className: "flex gap-2 items-center",
            },
            React.createElement(
              "div",
              {
                className:
                  "text-grey-0 bg-gray-700 rounded flex items-center px-1",
              },
              "1",
            ),
            React.createElement(
              "h2",
              {
                className: "font-medium",
              },
              "Navigate to WooCommerce Settings > Payments Tab",
            ),
          ),
          React.createElement(
            "div",
            {
              className:
                "bg-white p-7 flex flex-col gap-6 border !shadow-hyperswitch_box_shadow rounded-md",
            },
            React.createElement("img", {
              style: {
                height: "400px",
                width: "100%",
                objectFit: "cover",
                objectPosition: "0% 12%",
              },
              alt: "hyperswitch-settings",
              src: "https://hyperswitch.io/img/site/wordpress_hyperswitch_settings.png",
            }),
          ),
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-6",
          },
          React.createElement(
            "div",
            {
              className: "flex gap-2 items-center",
            },
            React.createElement(
              "div",
              {
                className:
                  "text-grey-0 bg-gray-700 rounded flex items-center px-1",
              },
              "2",
            ),
            React.createElement(
              "h2",
              {
                className: "font-medium",
              },
              "Copy-Paste your API keys & below details in your WooCommerce Plugin Settings",
            ),
          ),
          React.createElement(
            "div",
            {
              className: "bg-gray-50 p-7",
            },
            React.createElement(
              "div",
              {
                className: "grid grid-cols-3 w-full border-b py-4",
              },
              React.createElement(
                "div",
                {
                  className: "col-span-2",
                },
                React.createElement(
                  "div",
                  {
                    className: "font-medium",
                  },
                  "API Key",
                ),
                React.createElement(
                  "div",
                  {
                    className: "text-gray-500 mt-2",
                  },
                  "Use this key to authenticate all API requests from your application's server",
                ),
              ),
              React.createElement(
                UserOnboardingUIUtils.DownloadAPIKeyButton.make,
                {
                  buttonText: "Download API key",
                  currentRoute: "WooCommercePlugin",
                  currentTabName: "downloadWordpressPlugin",
                },
              ),
            ),
            React.createElement(
              "div",
              {
                className: "grid grid-cols-3 w-full border-b py-4",
              },
              React.createElement(
                "div",
                {
                  className: "col-span-2",
                },
                React.createElement(
                  "div",
                  {
                    className: "font-medium",
                  },
                  "Publishable Key",
                ),
                React.createElement(
                  "div",
                  {
                    className: "text-gray-500 mt-2",
                  },
                  "Use this key to authenticate all calls from your application's client",
                ),
              ),
              React.createElement(
                UserOnboardingUIUtils.PublishableKeyArea.make,
                {},
              ),
            ),
            React.createElement(
              "div",
              {
                className: "grid grid-cols-3 w-full py-4",
              },
              React.createElement(
                "div",
                {
                  className: "col-span-2",
                },
                React.createElement(
                  "div",
                  {
                    className: "font-medium",
                  },
                  "Payment Response Hash Key",
                ),
                React.createElement(
                  "div",
                  {
                    className: "text-gray-500 mt-2",
                  },
                  "This helps to authenticate and verify live events send by Hyperswitch.",
                ),
              ),
              React.createElement(
                UserOnboardingUIUtils.PaymentResponseHashKeyArea.make,
                {},
              ),
            ),
          ),
        ),
      ),
    }),
  });
}

var ConfigurePlugin = {
  make: WooCommerce$ConfigurePlugin,
};

function WooCommerce$ConfigureWebHook(props) {
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var defaultBusinessProfile =
    MerchantAccountUtils.getValueFromBusinessProfile(businessProfiles);
  return React.createElement(WooCommerce$BaseComponent, {
    handleNavigation: props.handleNavigation,
    children: React.createElement(WooCommerce$WooCommerceStepWrapper, {
      title: props.title,
      description: props.description,
      children: React.createElement(
        "div",
        {
          className: "p-8 flex flex-col gap-6",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-6",
          },
          React.createElement(
            "div",
            {
              className: "flex gap-2 items-center",
            },
            React.createElement(
              "div",
              {
                className:
                  "text-grey-0 bg-gray-700 rounded flex items-center px-1",
              },
              "1",
            ),
            React.createElement(
              "h2",
              {
                className: "font-medium",
              },
              "Enable Hyperswitch Webhook in “Enable Webhook” Section (Ignore if enabled)",
            ),
          ),
          React.createElement(
            "div",
            {
              className:
                "bg-white p-7 flex flex-col gap-6 border !shadow-hyperswitch_box_shadow rounded-md",
            },
            React.createElement("img", {
              style: {
                height: "250px",
                width: "100%",
                objectFit: "cover",
                objectPosition: "0% 40%",
              },
              alt: "hyperswitch-settings",
              src: "https://hyperswitch.io/img/site/wordpress_hyperswitch_settings.png",
            }),
          ),
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-6",
          },
          React.createElement(
            "div",
            {
              className: "flex gap-2 items-center",
            },
            React.createElement(
              "div",
              {
                className:
                  "text-grey-0 bg-gray-700 rounded flex items-center px-1",
              },
              "2",
            ),
            React.createElement(
              "h2",
              {
                className: "font-medium",
              },
              "Copy the URL under “Enable Webhook” section & paste here",
            ),
          ),
          React.createElement(
            "div",
            {
              className: "bg-gray-50 p-7",
            },
            React.createElement(
              "div",
              {
                className: "grid grid-cols-2 w-full py-4",
              },
              React.createElement(
                "div",
                undefined,
                React.createElement(
                  "div",
                  {
                    className: "font-medium",
                  },
                  "API Key",
                ),
                React.createElement(
                  "div",
                  {
                    className: "text-gray-500 mt-2",
                  },
                  "Use this key to authenticate all API requests from your application's server",
                ),
              ),
              React.createElement(PaymentSettings.make, {
                webhookOnly: true,
                showFormOnly: true,
                profileId: defaultBusinessProfile.profile_id,
              }),
            ),
          ),
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-6",
          },
          React.createElement(
            "div",
            {
              className: "flex gap-2 items-center",
            },
            React.createElement(
              "div",
              {
                className:
                  "text-grey-0 bg-gray-700 rounded flex items-center px-1",
              },
              "3",
            ),
            React.createElement(
              "h2",
              {
                className: "font-medium",
              },
              'Scroll to the bottom & click on "Save Changes"',
            ),
          ),
          React.createElement(
            "div",
            {
              className:
                "bg-white p-7 flex flex-col gap-6 border !shadow-hyperswitch_box_shadow rounded-md",
            },
            React.createElement("img", {
              style: {
                height: "150px",
                width: "100%",
                objectFit: "cover",
                objectPosition: "0% 100%",
              },
              alt: "hyperswitch-settings",
              src: "https://hyperswitch.io/img/site/wordpress_hyperswitch_settings.png",
            }),
          ),
        ),
      ),
    }),
  });
}

var ConfigureWebHook = {
  make: WooCommerce$ConfigureWebHook,
};

function WooCommerce(props) {
  var postEnumDetails = EnumVariantHook.usePostEnumDetails();
  var enumDetails = Recoil.useRecoilValue(HyperswitchAtom.enumVariantAtom);
  var match = React.useState(function () {
    return {
      TAG: "UnknownConnector",
      _0: "",
    };
  });
  var selectedConnector = match[0];
  var match$1 = React.useState(function () {
    return {};
  });
  var setInitialValues = match$1[1];
  var initialValues = match$1[0];
  var match$2 = React.useState(function () {
    return "Select_processor";
  });
  var setConnectorConfigureState = match$2[1];
  var match$3 = React.useState(function () {
    return "PLUGIN_INSTALL";
  });
  var setStepInView = match$3[1];
  var stepInView = match$3[0];
  var match$4 = React.useContext(GlobalProvider.defaultContext);
  var setDashboardPageState = match$4.setDashboardPageState;
  var match$5 = React.useState(function () {
    return "Normal";
  });
  var buttonState = match$5[0];
  var connectorName = ConnectorUtils.getConnectorNameString(selectedConnector);
  var activeBusinessProfile = MerchantAccountUtils.getValueFromBusinessProfile(
    Recoil.useRecoilValue(HyperswitchAtom.businessProfilesAtom),
  );
  var naviagteToHome = function (param) {
    setDashboardPageState(function (param) {
      return "HOME";
    });
    RescriptReactRouter.replace(GlobalVars.appendDashboardPath("/home"));
  };
  var handleNavigation = async function (forward) {
    var enums = QuickStartUtils.getTypedValueFromDict(
      LogicUtils.safeParse(enumDetails),
    );
    var isAnyConnectorConfigured = LogicUtils.isNonEmptyString(
      enums.firstProcessorConnected.processorID,
    );
    try {
      if (
        !(forward && !WooCommerceUtils.enumToValueMapper(stepInView, enums))
      ) {
        return;
      }
      var currentStepVariant = WooCommerceUtils.variantToEnumMapper(stepInView);
      await postEnumDetails(
        {
          TAG: "Boolean",
          _0: true,
        },
        currentStepVariant,
      );
      return setStepInView(function (prev) {
        switch (prev) {
          case "PLUGIN_INSTALL":
            if (forward) {
              return "PLUGIN_CONFIGURE";
            } else {
              return "PLUGIN_INSTALL";
            }
          case "PLUGIN_CONFIGURE":
            if (forward) {
              return "WEBHOOK_SETUP";
            } else {
              return "PLUGIN_INSTALL";
            }
          case "WEBHOOK_SETUP":
            if (forward && isAnyConnectorConfigured) {
              return "COMPLETED_WOOCOMMERCE";
            } else if (forward) {
              return "PROCESSOR_SETUP";
            } else {
              return "PLUGIN_CONFIGURE";
            }
          case "PROCESSOR_SETUP":
            if (forward) {
              return "PROCESSOR_SETUP";
            } else {
              return "WEBHOOK_SETUP";
            }
          case "COMPLETED_WOOCOMMERCE":
            return "COMPLETED_WOOCOMMERCE";
        }
      });
    } catch (exn) {
      return;
    }
  };
  React.useEffect(
    function () {
      var enums = QuickStartUtils.getTypedValueFromDict(
        LogicUtils.safeParse(enumDetails),
      );
      var currentPending = steps.find(function (step) {
        return WooCommerceUtils.enumToValueMapper(step, enums) === false;
      });
      if (currentPending !== undefined) {
        setStepInView(function (param) {
          return currentPending;
        });
      } else {
        setStepInView(function (param) {
          return "COMPLETED_WOOCOMMERCE";
        });
      }
    },
    [enumDetails],
  );
  var match$6;
  switch (stepInView) {
    case "PLUGIN_INSTALL":
      match$6 = [
        "Download and Install Plugin",
        "Start by downloading our Plugin, and installing it on your WordPress Admin Dashboard. Activate the Plugin post installation.",
      ];
      break;
    case "PLUGIN_CONFIGURE":
      match$6 = [
        "Configure Plugin",
        "Configure our WooCommerce plugin details",
      ];
      break;
    case "WEBHOOK_SETUP":
      match$6 = [
        "Setup Webhook & Save Changes",
        "Configure WooCommerce webhook on our end & complete setup",
      ];
      break;
    case "PROCESSOR_SETUP":
    case "COMPLETED_WOOCOMMERCE":
      match$6 = ["", ""];
      break;
  }
  var description = match$6[1];
  var title = match$6[0];
  React.useEffect(
    function () {
      var defaultJsonOnNewConnector = Object.fromEntries([
        ["profile_id", activeBusinessProfile.profile_id],
      ]);
      setInitialValues(function (param) {
        return defaultJsonOnNewConnector;
      });
    },
    [activeBusinessProfile.profile_id, connectorName],
  );
  var tmp;
  switch (stepInView) {
    case "PLUGIN_INSTALL":
      tmp = React.createElement(WooCommerce$InstallPlugin, {
        handleNavigation: handleNavigation,
        title: title,
        description: description,
      });
      break;
    case "PLUGIN_CONFIGURE":
      tmp = React.createElement(WooCommerce$ConfigurePlugin, {
        handleNavigation: handleNavigation,
        title: title,
        description: description,
      });
      break;
    case "WEBHOOK_SETUP":
      tmp = React.createElement(WooCommerce$ConfigureWebHook, {
        handleNavigation: handleNavigation,
        title: title,
        description: description,
      });
      break;
    case "PROCESSOR_SETUP":
      switch (match$2[0]) {
        case "Select_processor":
          tmp = React.createElement(WooCommerceUIUtils.SelectProcessor.make, {
            setSelectedConnector: match[1],
            selectedConnector: selectedConnector,
            setConnectorConfigureState: setConnectorConfigureState,
            connectorArray: [],
          });
          break;
        case "Select_configuration_type":
          tmp = null;
          break;
        case "Configure_keys":
          tmp = React.createElement(SetupConnector.ConfigureProcessor.make, {
            selectedConnector: selectedConnector,
            initialValues: initialValues,
            setInitialValues: setInitialValues,
            setConnectorConfigureState: setConnectorConfigureState,
          });
          break;
        case "Setup_payment_methods":
          tmp = React.createElement(
            WooCommerceUIUtils.SelectPaymentMethods.make,
            {
              selectedConnector: selectedConnector,
              initialValues: initialValues,
              setInitialValues: setInitialValues,
              setConnectorConfigureState: setConnectorConfigureState,
              setButtonState: match$5[1],
              buttonState: buttonState,
            },
          );
          break;
        case "Summary":
          tmp = React.createElement(QuickStartUIUtils.BaseComponent.make, {
            children: React.createElement(
              ConnectorPreview.ConnectorSummaryGrid.make,
              {
                connectorInfo: ConnectorListMapper.getProcessorPayloadType(
                  LogicUtils.getDictFromJsonObject(initialValues),
                ),
                connector: connectorName,
                isPayoutFlow: false,
                setScreenState: function (param) {},
              },
            ),
            headerText: LogicUtils.capitalizeString(connectorName),
            nextButton: Caml_option.some(
              React.createElement(Button.make, {
                buttonState: buttonState,
                text: "Continue & Proceed",
                buttonType: "Primary",
                buttonSize: "Small",
                onClick: function (param) {
                  handleNavigation(true);
                },
                customButtonStyle: "rounded-md",
              }),
            ),
            backButton: Caml_option.some(
              React.createElement(Button.make, {
                text: "Back",
                buttonType: "PrimaryOutline",
                onClick: function (param) {
                  handleNavigation(false);
                },
              }),
            ),
            customIcon: Caml_option.some(
              React.createElement(GatewayIcon.make, {
                gateway: connectorName.toUpperCase(),
                className: "w-6 h-6 rounded-md",
              }),
            ),
            customCss: "show-scrollbar",
          });
          break;
      }
      break;
    case "COMPLETED_WOOCOMMERCE":
      tmp = React.createElement(
        "div",
        {
          className: "bg-white rounded h-40-rem",
        },
        React.createElement(
          ProdOnboardingUIUtils.BasicAccountSetupSuccessfulPage.make,
          {
            iconName: "account-setup-completed",
            statusText: "WooCommerce Plugin Setup Successfully Completed",
            buttonText: "Go To Home",
            buttonOnClick: naviagteToHome,
            customWidth: "w-30-rem text-center",
          },
        ),
      );
      break;
  }
  return React.createElement(
    "div",
    {
      className: "flex bg-blue-background_blue",
    },
    React.createElement(HSSelfServeSidebar.make, {
      heading: "Hyperswitch for Woocommerce",
      sidebarOptions:
        WooCommerceUtils.getSidebarOptionsForWooCommerceIntegration(
          enumDetails,
          stepInView,
        ),
    }),
    React.createElement(
      "div",
      {
        className: "flex-1 flex flex-col items-center justify-center ml-12",
      },
      tmp,
    ),
  );
}

var make = WooCommerce;

export {
  steps,
  BaseComponent,
  WooCommerceStepWrapper,
  InstallPlugin,
  ConfigurePlugin,
  ConfigureWebHook,
  make,
};
/* react Not a pure module */
