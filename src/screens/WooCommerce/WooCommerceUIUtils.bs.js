// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../components/custom-icons/GatewayIcon.bs.js";
import * as PaymentMethod from "../Connectors/ConnectorUIUtils/PaymentMethod.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";
import * as EnumVariantHook from "../Hooks/EnumVariantHook.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as QuickStartUtils from "../Home/QuickStart/QuickStartUtils.bs.js";
import * as QuickStartUIUtils from "../Home/QuickStart/QuickStartUIUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function WooCommerceUIUtils$SelectProcessor(props) {
  var connectorArray = props.connectorArray;
  var setConnectorConfigureState = props.setConnectorConfigureState;
  var selectedConnector = props.selectedConnector;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var connectorName = ConnectorUtils.getConnectorNameString(selectedConnector);
  var basePath = Core__List.toArray(url.path).join("/");
  var tmp;
  tmp = selectedConnector.TAG === "UnknownConnector" ? "Disabled" : "Normal";
  return React.createElement(QuickStartUIUtils.BaseComponent.make, {
    children: React.createElement(QuickStartUIUtils.SelectConnectorGrid.make, {
      selectedConnector: selectedConnector,
      setSelectedConnector: props.setSelectedConnector,
      connectorList: ConnectorUtils.connectorList.filter(function (value) {
        return !connectorArray.includes(
          ConnectorUtils.getConnectorNameString(value),
        );
      }),
    }),
    headerText: "Select Processor",
    nextButton: Caml_option.some(
      React.createElement(Button.make, {
        buttonState: tmp,
        text: "Proceed",
        buttonType: "Primary",
        buttonSize: "Small",
        onClick: function (param) {
          setConnectorConfigureState(function (param) {
            return "Configure_keys";
          });
          RescriptReactRouter.replace(
            "/" + basePath + "?name=" + connectorName,
          );
        },
      }),
    ),
    customCss: "show-scrollbar",
  });
}

var SelectProcessor = {
  make: WooCommerceUIUtils$SelectProcessor,
};

function WooCommerceUIUtils$SelectPaymentMethods(props) {
  var setButtonState = props.setButtonState;
  var setConnectorConfigureState = props.setConnectorConfigureState;
  var setInitialValues = props.setInitialValues;
  var initialValues = props.initialValues;
  var getURL = APIUtils.useGetURL();
  var updateEnumInRecoil = EnumVariantHook.useUpdateEnumInRecoil();
  var enumDetails = Recoil.useRecoilValue(HyperswitchAtom.enumVariantAtom);
  var updateAPIHook = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast();
  var postEnumDetails = EnumVariantHook.usePostEnumDetails();
  var connectorName = ConnectorUtils.getConnectorNameString(
    props.selectedConnector,
  );
  var match = React.useState(function () {
    return ConnectorUtils.getPaymentMethodEnabled({});
  });
  var setPaymentMethods = match[1];
  var paymentMethodsEnabled = match[0];
  var match$1 = React.useState(function () {
    return {};
  });
  var setMetaData = match$1[1];
  var metaData = match$1[0];
  var updateDetails = function (value) {
    setPaymentMethods(function (param) {
      return value.slice();
    });
  };
  var updateEnumForConnector = async function (connectorResponse) {
    var enums = QuickStartUtils.getTypedValueFromDict(
      LogicUtils.safeParse(enumDetails),
    );
    try {
      var processorVal_processorID = LogicUtils.getString(
        connectorResponse,
        "merchant_connector_id",
        "",
      );
      var processorVal_processorName = LogicUtils.getString(
        connectorResponse,
        "connector_name",
        "",
      );
      var processorVal = {
        processorID: processorVal_processorID,
        processorName: processorVal_processorName,
      };
      var body = {
        TAG: "ProcesorType",
        _0: processorVal,
      };
      var enumRecoilUpdateArr = [];
      if (enums.firstProcessorConnected.processorID.length === 0) {
        await postEnumDetails(body, "FirstProcessorConnected");
        enumRecoilUpdateArr.push([body, "FirstProcessorConnected"]);
      }
      if (enums.configurationType.length === 0) {
        await postEnumDetails(
          {
            TAG: "StringEnumType",
            _0: QuickStartUtils.connectorChoiceVariantToString(
              "MultipleProcessorWithSmartRouting",
            ),
          },
          "ConfigurationType",
        );
        enumRecoilUpdateArr.push([
          {
            TAG: "StringEnumType",
            _0: QuickStartUtils.connectorChoiceVariantToString(
              "MultipleProcessorWithSmartRouting",
            ),
          },
          "ConfigurationType",
        ]);
      }
      updateEnumInRecoil(enumRecoilUpdateArr);
      return;
    } catch (exn) {
      return setButtonState(function (param) {
        return "Normal";
      });
    }
  };
  var onSubmitMain = async function () {
    setButtonState(function (param) {
      return "Loading";
    });
    try {
      var obj = {
        payment_methods_enabled: paymentMethodsEnabled,
        connector: connectorName,
        metadata: metaData,
      };
      var body = ConnectorUtils.constructConnectorRequestBody(
        obj,
        initialValues,
      );
      var connectorUrl = getURL(
        "CONNECTOR",
        "Post",
        Caml_option.some(undefined),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await updateAPIHook(
        connectorUrl,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setInitialValues(function (param) {
        return response;
      });
      updateEnumForConnector(LogicUtils.getDictFromJsonObject(response));
      setConnectorConfigureState(function (param) {
        return "Summary";
      });
      showToast(
        LogicUtils.getFirstLetterCaps(connectorName, undefined, undefined) +
          " connected successfully!",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setButtonState(function (param) {
        return "Normal";
      });
    } catch (exn) {
      return setButtonState(function (param) {
        return "Normal";
      });
    }
  };
  React.useEffect(
    function () {
      ConnectorUtils.getConnectorPaymentMethodDetails(
        initialValues,
        setPaymentMethods,
        setMetaData,
        false,
        false,
        connectorName,
        updateDetails,
      );
    },
    [connectorName],
  );
  return React.createElement(QuickStartUIUtils.BaseComponent.make, {
    children: React.createElement(PaymentMethod.PaymentMethodsRender.make, {
      _showAdvancedConfiguration: false,
      connector: connectorName,
      paymentMethodsEnabled: paymentMethodsEnabled,
      updateDetails: updateDetails,
      setMetaData: setMetaData,
      isPayoutFlow: false,
    }),
    headerText: "Connect payment methods",
    nextButton: Caml_option.some(
      React.createElement(Button.make, {
        buttonState: props.buttonState,
        text: "Proceed",
        buttonType: "Primary",
        buttonSize: "Small",
        onClick: function (param) {
          onSubmitMain();
        },
        customButtonStyle: "rounded-md",
      }),
    ),
    backButton: Caml_option.some(
      React.createElement(Button.make, {
        text: "Back",
        buttonType: "PrimaryOutline",
        buttonSize: "Small",
        onClick: function (param) {
          setConnectorConfigureState(function (param) {
            return "Configure_keys";
          });
        },
      }),
    ),
    customIcon: Caml_option.some(
      React.createElement(GatewayIcon.make, {
        gateway: connectorName.toUpperCase(),
        className: "w-6 h-6 rounded-md",
      }),
    ),
    customCss: "show-scrollbar",
  });
}

var SelectPaymentMethods = {
  make: WooCommerceUIUtils$SelectPaymentMethods,
};

export { SelectProcessor, SelectPaymentMethods };
/* react Not a pure module */
