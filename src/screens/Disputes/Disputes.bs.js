// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as TableAtoms from "../../Recoils/TableAtoms.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as DisputesEntity from "./DisputesEntity.bs.js";
import * as GenerateReport from "../GenerateReports/GenerateReport.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as LoadedTableWithCustomColumns from "../../components/LoadedTableWithCustomColumns.bs.js";

function Disputes(props) {
  var getURL = APIUtils.useGetURL();
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = match.globalUIConfig;
  var textColor = match$1.font.textColor;
  var match$2 = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var match$3 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$3[1];
  var match$4 = React.useState(function () {
    return [];
  });
  var setDisputesData = match$4[1];
  var disputesData = match$4[0];
  var match$5 = React.useState(function () {
    return 0;
  });
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var getDisputesList = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var disputesUrl = getURL(
        "DISPUTES",
        "Get",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await fetchDetails(disputesUrl);
      var disputesValue = LogicUtils.getArrayDataFromJson(
        response,
        DisputesEntity.itemToObjMapper,
      );
      if (disputesValue.length > 0) {
        setDisputesData(function (param) {
          return disputesValue.map(function (prim) {
            return prim;
          });
        });
        return setScreenState(function (param) {
          return "Success";
        });
      } else {
        return setScreenState(function (param) {
          return "Custom";
        });
      }
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        if (err.includes("HE_02")) {
          return setScreenState(function (param) {
            return "Custom";
          });
        } else {
          return setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: err,
            };
          });
        }
      }
      throw e;
    }
  };
  React.useEffect(function () {
    getDisputesList();
  }, []);
  var customUI = React.createElement(
    React.Fragment,
    {},
    React.createElement(RenderIf.make, {
      condition: !match$2.branding,
      children: React.createElement(
        "div",
        {
          className:
            match$1.border.borderColor.primaryNormal +
            " flex  items-start  text-sm rounded-md gap-2 px-4 py-3 mt-5",
        },
        React.createElement(Icon.make, {
          name: "info-vacent",
          size: 18,
          className: textColor.primaryNormal + " mt-1",
        }),
        React.createElement(
          "p",
          undefined,
          "Missing disputes? Disputes might not be supported for your payment processor or might not yet have been integrated with hyperswitch. Please check the",
          React.createElement(
            "a",
            {
              className: textColor.primaryNormal,
              href: "https://hyperswitch.io/pm-list",
              target: "_blank",
            },
            " feature matrix ",
          ),
          "for your processor.",
        ),
      ),
    }),
    React.createElement(HelperComponents.BluredTableComponent.make, {
      infoText: "No disputes as of now.",
      moduleName: " ",
      showRedirectCTA: false,
    }),
  );
  var match$6 = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  return React.createElement(
    "div",
    undefined,
    React.createElement(PageUtils.PageHeading.make, {
      title: "Disputes",
      subTitle: "View and manage all disputes",
    }),
    React.createElement(
      "div",
      {
        className: "flex w-full justify-end pb-3 gap-3",
      },
      React.createElement(RenderIf.make, {
        condition: match$6.generateReport && disputesData.length > 0,
        children: React.createElement(GenerateReport.make, {
          entityName: "DISPUTE_REPORT",
        }),
      }),
    ),
    React.createElement(PageLoaderWrapper.make, {
      children: Caml_option.some(
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-4",
          },
          React.createElement(LoadedTableWithCustomColumns.make, {
            title: " ",
            showSerialNumber: true,
            actualData: disputesData,
            totalResults: disputesData.length,
            resultsPerPage: 10,
            offset: match$5[0],
            setOffset: match$5[1],
            entity: DisputesEntity.disputesEntity,
            currrentFetchCount: disputesData.length,
            hideTitle: true,
            customColumnMapper: TableAtoms.disputesMapDefaultCols,
            defaultColumns: DisputesEntity.defaultColumns,
            sortingBasedOnDisabled: false,
            showSerialNumberInCustomizeColumns: false,
          }),
        ),
      ),
      screenState: match$3[0],
      customUI: Caml_option.some(customUI),
    }),
  );
}

var make = Disputes;

export { make };
/* Icon Not a pure module */
