// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../../utils/LogicUtils.bs.js";

var connectorsSupportEvidenceUpload = [
  {
    TAG: "Processors",
    _0: "CHECKOUT",
  },
  {
    TAG: "Processors",
    _0: "STRIPE",
  },
];

var connectorsSupportAcceptDispute = [
  {
    TAG: "Processors",
    _0: "CHECKOUT",
  },
];

var connectorSupportCounterDispute = [
  {
    TAG: "Processors",
    _0: "CHECKOUT",
  },
  {
    TAG: "Processors",
    _0: "STRIPE",
  },
];

function disputeStageVariantMapper(stage) {
  switch (stage) {
    case "dispute":
      return "Dispute";
    case "pre-arbitration":
      return "PreArbitration";
    case "pre_dispute":
      return "PreDispute";
    default:
      return "NotFound";
  }
}

function disputeStatusVariantMapper(status) {
  switch (status) {
    case "dispute_accepted":
      return "DisputeAccepted";
    case "dispute_cancelled":
      return "DisputeCancelled";
    case "dispute_challenged":
      return "DisputeChallenged";
    case "dispute_expired":
      return "DisputeExpired";
    case "dispute_lost":
      return "DisputeLost";
    case "dispute_opened":
      return "DisputeOpened";
    case "dispute_won":
      return "DisputeWon";
    default:
      return {
        TAG: "NotFound",
        _0: status,
      };
  }
}

var showDisputeInfoStatus = [
  "DisputeOpened",
  "DisputeAccepted",
  "DisputeChallenged",
];

var evidenceList = [
  "Receipt",
  "Refund Policy",
  "Uncategorized File",
  "Customer Signature",
  "Service Documentation",
  "Customer Communication",
  "Shipping Documentation",
  "Recurring Transaction Agreement",
  "Invoice Showing Distinct Transactions",
];

function getDictFromFilesAvailable(arrayValue) {
  var manipulatedDict = {};
  arrayValue.forEach(function (val) {
    var dictFromJson = LogicUtils.getDictFromJsonObject(val);
    var evidenceTypekey = LogicUtils.getString(
      dictFromJson,
      "evidence_type",
      "",
    );
    var filemetadata = LogicUtils.getDictfromDict(
      dictFromJson,
      "file_metadata_response",
    );
    var file_id = LogicUtils.getString(filemetadata, "file_id", "");
    var file_name = LogicUtils.getString(filemetadata, "file_name", "");
    var fileVal = LogicUtils.getJsonFromArrayOfJson([
      ["fileId", file_id],
      ["fileName", file_name],
    ]);
    manipulatedDict[evidenceTypekey] = fileVal;
  });
  return manipulatedDict;
}

function constructDisputesBody(dict, disputesId) {
  var body = {};
  Object.keys(dict).forEach(function (value) {
    var fileID = LogicUtils.getString(
      LogicUtils.getDictfromDict(dict, value),
      "fileId",
      "",
    );
    if (fileID.length > 0) {
      body[value] = fileID;
      return;
    }
  });
  body["dispute_id"] = disputesId;
  return body;
}

function getFileTypeFromFileName(fileName) {
  var lastIndex = fileName.lastIndexOf(".");
  return fileName.substring((lastIndex + 1) | 0);
}

export {
  connectorsSupportEvidenceUpload,
  connectorsSupportAcceptDispute,
  connectorSupportCounterDispute,
  disputeStageVariantMapper,
  disputeStatusVariantMapper,
  showDisputeInfoStatus,
  evidenceList,
  getDictFromFilesAvailable,
  constructDisputesBody,
  getFileTypeFromFileName,
};
/* LogicUtils Not a pure module */
