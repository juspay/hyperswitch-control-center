// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Recoil from "recoil";
import * as ToolTip from "../../../components/tooltip/ToolTip.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as BoolInput from "../../../components/form/BoolInput.bs.js";
import * as Clipboard from "../../../libraries/Clipboard.bs.js";
import * as TextInput from "../../../components/form/TextInput.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as InputFields from "../../../components/InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../../HSwitchUtils.bs.js";
import * as FormValuesSpy from "../../../components/form/FormValuesSpy.bs.js";
import * as ConnectorUtils from "../../Connectors/ConnectorUtils.bs.js";
import * as DeveloperUtils from "../APIKeys/DeveloperUtils.bs.js";
import * as ReactFinalForm from "../../../libraries/ReactFinalForm.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as PageLoaderWrapper from "../../Helpers/PageLoaderWrapper.bs.js";
import * as BusinessProfileHook from "../../Hooks/BusinessProfileHook.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as BreadCrumbNavigation from "../../../utils/BreadCrumbNavigation.bs.js";
import * as MerchantAccountUtils from "../../Settings/MerchantAccountUtils.bs.js";
import * as BusinessProfileMapper from "../../../utils/Mappers/BusinessProfileMapper.bs.js";

function PaymentSettings$InfoViewForWebhooks(props) {
  var __isCopy = props.isCopy;
  var subHeading = props.subHeading;
  var isCopy = __isCopy !== undefined ? __isCopy : false;
  var showToast = ToastState.useShowToast();
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-2 m-2 md:m-4 w-1/2",
    },
    React.createElement(
      "p",
      {
        className: "font-semibold text-fs-15",
      },
      props.heading,
    ),
    React.createElement(
      "div",
      {
        className: "flex gap-2 break-all w-full items-start",
      },
      React.createElement(
        "p",
        {
          className: "font-medium text-fs-14 text-black opacity-50",
        },
        subHeading,
      ),
      React.createElement(RenderIf.make, {
        condition: isCopy,
        children: React.createElement("img", {
          className: "cursor-pointer",
          alt: "copy-clipboard",
          src: "/assets/CopyToClipboard.svg",
          onClick: function (ev) {
            ev.stopPropagation();
            Clipboard.writeText(subHeading);
            showToast(
              "Copied to Clipboard!",
              "ToastSuccess",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
          },
        }),
      }),
    ),
  );
}

var InfoViewForWebhooks = {
  make: PaymentSettings$InfoViewForWebhooks,
};

function PaymentSettings$AuthenticationInput(props) {
  var index = props.index;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var match = React.useState(function () {
    return "";
  });
  var setKey = match[1];
  var key = match[0];
  var match$1 = React.useState(function () {
    return "";
  });
  var setValue = match$1[1];
  var metaValue = match$1[0];
  var getOutGoingWebhook = function () {
    var outGoingWebhookDict = LogicUtils.getDictfromDict(
      LogicUtils.getDictFromJsonObject(formState.values),
      "outgoing_webhook_custom_http_headers",
    );
    var key = LogicUtils.getValueFromArray(
      Object.keys(outGoingWebhookDict),
      index,
      "",
    );
    var outGoingWebHookVal = LogicUtils.getOptionString(
      outGoingWebhookDict,
      key,
    );
    if (outGoingWebHookVal !== undefined) {
      return [key, outGoingWebHookVal];
    } else {
      return ["", ""];
    }
  };
  React.useEffect(function () {
    var match = getOutGoingWebhook();
    var outGoingWebHookValue = match[1];
    var outGoingWebhookKey = match[0];
    setValue(function (param) {
      return outGoingWebHookValue;
    });
    setKey(function (param) {
      return outGoingWebhookKey;
    });
  }, []);
  var form = ReactFinalForm$1.useForm();
  var keyInput_onBlur = function (param) {};
  var keyInput_onChange = function (ev) {
    var value = ev.target.value;
    if (value.length <= 0) {
      var name = "outgoing_webhook_custom_http_headers." + key;
      form.change(name, null);
    }
    var match = Core__Option.isNone(LogicUtils.getOptionIntFromString(value));
    if (match) {
      return setKey(function (param) {
        return value;
      });
    }
  };
  var keyInput_onFocus = function (param) {};
  var keyInput = {
    name: "string",
    onBlur: keyInput_onBlur,
    onChange: keyInput_onChange,
    onFocus: keyInput_onFocus,
    value: key,
    checked: true,
  };
  var valueInput_onBlur = function (param) {
    if (key.length <= 0) {
      return;
    }
    var name = "outgoing_webhook_custom_http_headers." + key;
    form.change(name, metaValue);
  };
  var valueInput_onChange = function (ev) {
    var value = ev.target.value;
    setValue(function (param) {
      return value;
    });
  };
  var valueInput_onFocus = function (param) {};
  var valueInput = {
    name: "string",
    onBlur: valueInput_onBlur,
    onChange: valueInput_onChange,
    onFocus: valueInput_onFocus,
    value: metaValue,
    checked: true,
  };
  return React.createElement(
    FormRenderer.DesktopRow.make,
    {
      children: null,
      wrapperClass: "flex-1",
    },
    React.createElement(
      "div",
      {
        className: "mt-5",
      },
      React.createElement(TextInput.make, {
        input: keyInput,
        placeholder: "Enter key",
      }),
    ),
    React.createElement(
      "div",
      {
        className: "mt-5",
      },
      React.createElement(TextInput.make, {
        input: valueInput,
        placeholder: "Enter value",
      }),
    ),
  );
}

var AuthenticationInput = {
  make: PaymentSettings$AuthenticationInput,
};

function PaymentSettings$WebHookAuthenticationHeaders(props) {
  return React.createElement(
    "div",
    {
      className: "flex-1",
    },
    React.createElement(
      "p",
      {
        className:
          "ml-4 text-fs-13 text-jp-gray-900 dark:text-jp-gray-text_darktheme dark:text-opacity-50 ml-1 !text-base !text-grey-700 font-semibold ml-1",
      },
      "Custom HTTP Headers",
    ),
    React.createElement(
      "div",
      {
        className: "grid grid-cols-5 flex gap-2",
      },
      Core__Array.fromInitializer(4, function (i) {
        return i;
      }).map(function (param, index) {
        return React.createElement(
          "div",
          {
            key: index.toString(),
            className: "col-span-4",
          },
          React.createElement(PaymentSettings$AuthenticationInput, {
            index: index,
          }),
        );
      }),
    ),
  );
}

var WebHookAuthenticationHeaders = {
  make: PaymentSettings$WebHookAuthenticationHeaders,
};

function PaymentSettings$WebHook(props) {
  var enableCustomHttpHeaders = props.enableCustomHttpHeaders;
  var setCustomHttpHeaders = props.setCustomHttpHeaders;
  var match = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var customWebhookHeaders = match.customWebhookHeaders;
  var form = ReactFinalForm$1.useForm();
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var h2RegularTextStyle = HSwitchUtils.getTextClass(["H3", "Leading_1"]);
  var webHookURL = Core__Option.isSome(
    LogicUtils.getOptionString(
      LogicUtils.getDictFromJsonObject(formState.values),
      "webhook_url",
    ),
  );
  var outGoingHeaders = LogicUtils.isEmptyDict(
    LogicUtils.getDictfromDict(
      LogicUtils.getDictFromJsonObject(formState.values),
      "outgoing_webhook_custom_http_headers",
    ),
  );
  React.useEffect(
    function () {
      if (!webHookURL) {
        setCustomHttpHeaders(function (param) {
          return false;
        });
        form.change("outgoing_webhook_custom_http_headers", null);
      }
    },
    [webHookURL],
  );
  React.useEffect(function () {
    if (webHookURL && !outGoingHeaders) {
      setCustomHttpHeaders(function (param) {
        return true;
      });
    }
  }, []);
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(
      "div",
      undefined,
      React.createElement(
        "div",
        {
          className: "ml-4",
        },
        React.createElement(
          "p",
          {
            className: h2RegularTextStyle,
          },
          "Webhook Setup",
        ),
      ),
      React.createElement(
        "div",
        {
          className: "ml-4 mt-4",
        },
        React.createElement(FormRenderer.FieldRenderer.make, {
          field: DeveloperUtils.webhookUrl,
          fieldWrapperClass: "max-w-xl",
          labelClass: "!text-base !text-grey-700 font-semibold",
        }),
      ),
      React.createElement(RenderIf.make, {
        condition: customWebhookHeaders,
        children: React.createElement(
          "div",
          {
            className: "ml-4",
          },
          React.createElement(
            "div",
            {
              className:
                "mt-4 flex items-center text-jp-gray-700 font-bold self-start",
            },
            React.createElement(
              "div",
              {
                className: "font-semibold text-base text-black dark:text-white",
              },
              "Enable Custom HTTP Headers",
            ),
            React.createElement(ToolTip.make, {
              description: "Enter Webhook url to enable",
              toolTipPosition: "Right",
            }),
          ),
          React.createElement(
            "div",
            {
              className: "mt-4",
            },
            React.createElement(BoolInput.BaseComponent.make, {
              isSelected: enableCustomHttpHeaders,
              setIsSelected: function (param) {
                if (webHookURL) {
                  return setCustomHttpHeaders(function (param) {
                    return !enableCustomHttpHeaders;
                  });
                }
              },
              size: "Large",
              boolCustomClass: "rounded-lg",
            }),
          ),
        ),
      }),
    ),
    React.createElement(RenderIf.make, {
      condition: enableCustomHttpHeaders && customWebhookHeaders,
      children: React.createElement(
        PaymentSettings$WebHookAuthenticationHeaders,
        {},
      ),
    }),
  );
}

var WebHook = {
  make: PaymentSettings$WebHook,
};

function PaymentSettings$ReturnUrl(props) {
  return React.createElement(React.Fragment, {
    children: Caml_option.some(
      React.createElement(FormRenderer.DesktopRow.make, {
        children: React.createElement(FormRenderer.FieldRenderer.make, {
          field: DeveloperUtils.returnUrl,
          fieldWrapperClass: "max-w-xl",
          labelClass: "!text-base !text-grey-700 font-semibold",
          errorClass: HSwitchUtils.errorClass,
        }),
      }),
    ),
  });
}

var ReturnUrl = {
  make: PaymentSettings$ReturnUrl,
};

function PaymentSettings(props) {
  var __profileId = props.profileId;
  var __showFormOnly = props.showFormOnly;
  var __webhookOnly = props.webhookOnly;
  var webhookOnly = __webhookOnly !== undefined ? __webhookOnly : false;
  var showFormOnly = __showFormOnly !== undefined ? __showFormOnly : false;
  var profileId = __profileId !== undefined ? __profileId : "";
  var getURL = APIUtils.useGetURL();
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var id = HSwitchUtils.getConnectorIDFromUrl(
    Core__List.toArray(url.path),
    profileId,
  );
  var businessProfileDetails = BusinessProfileHook.useGetBusinessProflile(id);
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var showToast = ToastState.useShowToast();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match = React.useState(function () {
    return businessProfileDetails;
  });
  var setBusiProfie = match[1];
  var busiProfieDetails = match[0];
  var match$1 = React.useState(function () {
    return "Success";
  });
  var setScreenState = match$1[1];
  var match$2 = React.useState(function () {
    return false;
  });
  var setCustomHttpHeaders = match$2[1];
  var enableCustomHttpHeaders = match$2[0];
  var bgClass = webhookOnly
    ? ""
    : "bg-white dark:bg-jp-gray-lightgray_background";
  var fetchBusinessProfiles = BusinessProfileHook.useFetchBusinessProfiles();
  var threedsConnectorList = Recoil.useRecoilValue(
    HyperswitchAtom.connectorListAtom,
  ).filter(function (item) {
    return (
      ConnectorUtils.connectorTypeStringToTypeMapper(item.connector_type) ===
      "AuthenticationProcessor"
    );
  });
  var isBusinessProfileHasThreeds = threedsConnectorList.some(function (item) {
    return item.profile_id === id;
  });
  var fieldsToValidate = function () {
    return ["WebhookUrl", "ReturnUrl"].filter(function (urlField) {
      if (urlField === "WebhookUrl") {
        return true;
      } else {
        return !webhookOnly;
      }
    });
  };
  var onSubmit = async function (values, param) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var valuesDict = LogicUtils.getDictFromJsonObject(values);
      if (!enableCustomHttpHeaders) {
        valuesDict["outgoing_webhook_custom_http_headers"] = null;
      }
      var url = getURL(
        "BUSINESS_PROFILE",
        "Post",
        Caml_option.some(id),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = MerchantAccountUtils.getBusinessProfilePayload(valuesDict);
      var res = await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setBusiProfie(function (param) {
        return BusinessProfileMapper.businessProfileTypeMapper(res);
      });
      showToast(
        "Details updated",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setScreenState(function (param) {
        return "Success";
      });
      fetchBusinessProfiles();
    } catch (exn) {
      setScreenState(function (param) {
        return "Success";
      });
      showToast(
        "Failed to updated",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return null;
  };
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className:
            (showFormOnly ? "" : "py-4 md:py-10") + " h-full flex flex-col",
        },
        React.createElement(RenderIf.make, {
          condition: !showFormOnly,
          children: React.createElement(BreadCrumbNavigation.make, {
            path: [
              {
                title: "Payment Settings",
                link: "/payment-settings",
              },
            ],
            currentPageTitle: busiProfieDetails.profile_name,
            cursorStyle: "cursor-pointer",
          }),
        }),
        React.createElement(
          "div",
          {
            className: showFormOnly ? "" : "mt-4",
          },
          React.createElement(
            "div",
            {
              className:
                "w-full " +
                (showFormOnly
                  ? ""
                  : "border border-jp-gray-500 rounded-md dark:border-jp-gray-960") +
                " " +
                bgClass +
                " ",
            },
            JsxPPXReactSupportU.createElementWithKey(
              "merchantAccount",
              ReactFinalForm$1.Form,
              {
                initialValues:
                  MerchantAccountUtils.parseBussinessProfileJson(
                    busiProfieDetails,
                  ),
                onSubmit: onSubmit,
                render: function (param) {
                  return React.createElement(
                    "form",
                    {
                      className:
                        (showFormOnly ? "" : "px-2 py-4") +
                        " flex flex-col gap-7 overflow-hidden",
                      onSubmit: param.handleSubmit,
                    },
                    React.createElement(
                      "div",
                      {
                        className: "flex items-center",
                      },
                      React.createElement(PaymentSettings$InfoViewForWebhooks, {
                        heading: "Profile ID",
                        subHeading: busiProfieDetails.profile_id,
                        isCopy: true,
                      }),
                      React.createElement(PaymentSettings$InfoViewForWebhooks, {
                        heading: "Profile Name",
                        subHeading: busiProfieDetails.profile_name,
                      }),
                    ),
                    React.createElement(
                      "div",
                      {
                        className: "flex items-center",
                      },
                      React.createElement(PaymentSettings$InfoViewForWebhooks, {
                        heading: "Merchant ID",
                        subHeading: busiProfieDetails.merchant_id,
                      }),
                      React.createElement(PaymentSettings$InfoViewForWebhooks, {
                        heading: "Payment Response Hash Key",
                        subHeading: Core__Option.getOr(
                          busiProfieDetails.payment_response_hash_key,
                          "NA",
                        ),
                        isCopy: true,
                      }),
                    ),
                    React.createElement(
                      FormRenderer.DesktopRow.make,
                      {
                        children: null,
                      },
                      React.createElement(FormRenderer.FieldRenderer.make, {
                        field: FormRenderer.makeFieldInfo(
                          "Collect Shipping Details",
                          undefined,
                          "collect_shipping_details_from_wallet_connector",
                          InputFields.boolInput(
                            false,
                            undefined,
                            "rounded-lg",
                            undefined,
                          ),
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                        ),
                        fieldWrapperClass: "max-w-xl",
                        labelClass: "!text-base !text-grey-700 font-semibold",
                      }),
                      React.createElement(FormRenderer.FieldRenderer.make, {
                        field: FormRenderer.makeFieldInfo(
                          "Connector Agnostic",
                          undefined,
                          "is_connector_agnostic_mit_enabled",
                          InputFields.boolInput(
                            false,
                            undefined,
                            "rounded-lg",
                            undefined,
                          ),
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                        ),
                        fieldWrapperClass: "max-w-xl",
                        labelClass: "!text-base !text-grey-700 font-semibold",
                      }),
                    ),
                    React.createElement(RenderIf.make, {
                      condition: isBusinessProfileHasThreeds,
                      children: React.createElement(
                        FormRenderer.DesktopRow.make,
                        {
                          children: null,
                        },
                        React.createElement(FormRenderer.FieldRenderer.make, {
                          field: DeveloperUtils.authenticationConnectors(
                            threedsConnectorList.map(function (item) {
                              return item.connector_name;
                            }),
                          ),
                          fieldWrapperClass: "max-w-xl",
                          labelClass: "!text-base !text-grey-700 font-semibold",
                          errorClass: HSwitchUtils.errorClass,
                        }),
                        React.createElement(FormRenderer.FieldRenderer.make, {
                          field: DeveloperUtils.threeDsRequestorUrl,
                          fieldWrapperClass: "max-w-xl",
                          labelClass: "!text-base !text-grey-700 font-semibold",
                          errorClass: HSwitchUtils.errorClass,
                        }),
                      ),
                    }),
                    React.createElement(PaymentSettings$ReturnUrl, {}),
                    React.createElement(PaymentSettings$WebHook, {
                      setCustomHttpHeaders: setCustomHttpHeaders,
                      enableCustomHttpHeaders: enableCustomHttpHeaders,
                    }),
                    React.createElement(FormRenderer.DesktopRow.make, {
                      children: React.createElement(
                        "div",
                        {
                          className: "flex justify-start w-full",
                        },
                        React.createElement(FormRenderer.SubmitButton.make, {
                          text: "Update",
                          customSumbitButtonStyle: "justify-start",
                          buttonType: "Primary",
                          buttonSize: "Small",
                        }),
                      ),
                    }),
                    React.createElement(FormValuesSpy.make, {}),
                  );
                },
                subscription: ReactFinalForm.subscribeToValues,
                validate: function (values) {
                  return MerchantAccountUtils.validateMerchantAccountForm(
                    values,
                    fieldsToValidate(),
                    featureFlagDetails.isLiveMode,
                  );
                },
              },
            ),
          ),
        ),
      ),
    ),
    screenState: match$1[0],
  });
}

var make = PaymentSettings;

export {
  InfoViewForWebhooks,
  AuthenticationInput,
  WebHookAuthenticationHeaders,
  WebHook,
  ReturnUrl,
  make,
};
/* react Not a pure module */
