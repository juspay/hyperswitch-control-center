// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as Icon from "../../components/Icon.bs.js";
import * as Modal from "../../utils/Modal.bs.js";
import * as React from "react";
import * as ACLDiv from "../../components/ACLDiv.bs.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as AuthUtils from "../../entryPoints/AuthModule/AuthUtils.bs.js";
import * as CardUtils from "../Helpers/CardUtils.bs.js";
import * as TextInput from "../../components/form/TextInput.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as LoaderModal from "../../utils/LoaderModal.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../HSwitchUtils.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as BasicAuthUtils from "../../entryPoints/AuthModule/BasicAuth/BasicAuthUtils.bs.js";
import * as CommonAuthHooks from "../../entryPoints/AuthModule/Common/CommonAuthHooks.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as PermissionUtils from "../UserManagement/PermissionUtils.bs.js";
import * as AuthInfoProvider from "../../context/AuthInfoProvider.bs.js";
import * as HyperSwitchUtils from "../../utils/HyperSwitchUtils.bs.js";
import * as React$1 from "@headlessui/react";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as ProdVerifyModalUtils from "../Home/ProdIntent/ProdVerifyModalUtils.bs.js";
import * as SwitchMerchantListHook from "./SwitchMerchantListHook.bs.js";

function SwitchMerchant$NewAccountCreationModal(props) {
  var setShowModal = props.setShowModal;
  var getURL = APIUtils.useGetURL();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast();
  var fetchSwitchMerchantList =
    SwitchMerchantListHook.useFetchSwitchMerchantList();
  var createNewAccount = async function (values) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "CREATE_MERCHANT",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        url,
        values,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await fetchSwitchMerchantList();
      showToast(
        "Account Created Successfully!",
        "ToastSuccess",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {
      showToast(
        "Account Creation Failed",
        "ToastError",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    setShowModal(function (param) {
      return false;
    });
    return null;
  };
  var onSubmit = function (values, param) {
    return createNewAccount(values);
  };
  var companyName = FormRenderer.makeFieldInfo(
    "Company Name",
    undefined,
    "company_name",
    InputFields.textInput(
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    ),
    undefined,
    undefined,
    undefined,
    undefined,
    "Eg: HyperSwitch Pvt Ltd",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    true,
    undefined,
    undefined,
    undefined,
  );
  var modalBody = React.createElement(
    "div",
    {
      className: "p-2 m-2",
    },
    React.createElement(
      "div",
      {
        className: "py-5 px-3 flex justify-between align-top",
      },
      React.createElement(CardUtils.CardHeader.make, {
        heading: "Create a New Merchant Account",
        subHeading: "Enter your company name and get started",
        customSubHeadingStyle: "w-full !max-w-none pr-10",
      }),
      React.createElement(
        "div",
        {
          className: "h-fit",
          onClick: function (param) {
            setShowModal(function (param) {
              return false;
            });
          },
        },
        React.createElement(Icon.make, {
          name: "close",
          size: 30,
          className: "border-2 p-2 rounded-2xl bg-gray-100 cursor-pointer",
        }),
      ),
    ),
    JsxPPXReactSupportU.createElementWithKey(
      "new-account-creation",
      Form.make,
      {
        children: React.createElement(
          "div",
          {
            className: "flex flex-col gap-12 h-full w-full",
          },
          React.createElement(FormRenderer.DesktopRow.make, {
            children: React.createElement(
              "div",
              {
                className: "flex flex-col gap-5",
              },
              React.createElement(FormRenderer.FieldRenderer.make, {
                field: companyName,
                fieldWrapperClass: "w-full",
                labelClass: "!text-black font-medium !-ml-[0.5px]",
                errorClass: ProdVerifyModalUtils.errorClass,
              }),
            ),
          }),
          React.createElement(
            "div",
            {
              className: "flex justify-end w-full pr-5 pb-3",
            },
            React.createElement(FormRenderer.SubmitButton.make, {
              text: "Create Account",
              buttonSize: "Small",
            }),
          ),
        ),
        onSubmit: onSubmit,
      },
    ),
  );
  return React.createElement(Modal.make, {
    showModal: props.showModal,
    setShowModal: setShowModal,
    children: modalBody,
    modalClass:
      "w-full max-w-xl mx-auto my-auto dark:!bg-jp-gray-lightgray_background",
    childClass: "p-0",
    closeOnOutsideClick: true,
    borderBottom: true,
  });
}

var NewAccountCreationModal = {
  make: SwitchMerchant$NewAccountCreationModal,
};

function SwitchMerchant$AddNewMerchantButton(props) {
  var setShowModal = props.setShowModal;
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var cursorStyles = PermissionUtils.cursorStyles(
    userPermissionJson.merchantDetailsManage,
  );
  var match = React.useContext(ThemeProvider.themeContext);
  var textColor = match.globalUIConfig.font.textColor;
  return React.createElement(ACLDiv.make, {
    permission: userPermissionJson.merchantDetailsManage,
    onClick: function (param) {
      setShowModal(function (param) {
        return true;
      });
    },
    children: React.createElement(React$1.Menu.Item, {
      children: function (props) {
        var activeClasses = props.active
          ? "group flex rounded-md items-center px-2 py-2 text-sm bg-gray-100 dark:bg-black"
          : "group flex rounded-md items-center px-2 py-2 text-sm";
        return React.createElement(
          "div",
          {
            className:
              activeClasses +
              " " +
              textColor.primaryNormal +
              " flex gap-2 font-medium w-56 ",
          },
          React.createElement(Icon.make, {
            name: "plus-circle",
            size: 15,
          }),
          "Add a new merchant",
        );
      },
    }),
    className: cursorStyles + " px-1 py-1",
    isRelative: false,
    contentAlign: "Default",
    tooltipForWidthClass: "!h-full",
  });
}

var AddNewMerchantButton = {
  make: SwitchMerchant$AddNewMerchantButton,
};

function SwitchMerchant$ExternalUser(props) {
  var isAddMerchantEnabled = props.isAddMerchantEnabled;
  var switchMerchant = props.switchMerchant;
  var match = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  var defaultMerchantId = match.merchant_id;
  var match$1 = React.useContext(ThemeProvider.themeContext);
  var textColor = match$1.globalUIConfig.font.textColor;
  var switchMerchantList = Recoil.useRecoilValue(
    HyperswitchAtom.switchMerchantListAtom,
  );
  var merchantDetailsTypedValue = HSwitchUtils.useMerchantDetailsValue();
  var defaultSelectedMerchantType = {
    merchant_id: defaultMerchantId,
    merchant_name: defaultMerchantId,
    is_active: false,
    role_id: "",
    role_name: "",
    org_id: "",
  };
  var match$2 = React.useState(function () {
    return false;
  });
  var setShowModal = match$2[1];
  var showModal = match$2[0];
  var match$3 = React.useState(function () {
    return [];
  });
  var setOptions = match$3[1];
  var options = match$3[0];
  var match$4 = React.useState(function () {
    return defaultSelectedMerchantType;
  });
  var setSelectedMerchantObject = match$4[1];
  var selectedMerchantObject = match$4[0];
  var match$5 = React.useState(function () {
    return false;
  });
  var setArrow = match$5[1];
  var arrow = match$5[0];
  var fetchMerchantIDs = function () {
    var filteredSwitchMerchantList = switchMerchantList.filter(function (ele) {
      return ele.is_active;
    });
    setOptions(function (param) {
      return filteredSwitchMerchantList;
    });
    var extractMerchantObject = Core__Option.getOr(
      switchMerchantList.find(function (ele) {
        return ele.merchant_id === defaultMerchantId;
      }),
      defaultSelectedMerchantType,
    );
    setSelectedMerchantObject(function (param) {
      return extractMerchantObject;
    });
  };
  React.useEffect(
    function () {
      fetchMerchantIDs();
    },
    [merchantDetailsTypedValue.merchant_name, switchMerchantList],
  );
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(React$1.Menu, {
      as: "div",
      className: "relative inline-block text-left",
      children: function (_menuProps) {
        return React.createElement(
          "div",
          undefined,
          React.createElement(React$1.Menu.Button, {
            className:
              "inline-flex whitespace-pre leading-5 justify-center text-sm  px-4 py-2 font-medium rounded-md hover:bg-opacity-80 bg-white border",
            children: function (_buttonProps) {
              return React.createElement(
                React.Fragment,
                {},
                selectedMerchantObject.merchant_name,
                React.createElement(Icon.make, {
                  name: "arrow-without-tail",
                  size: 15,
                  className: arrow
                    ? "rotate-0 transition duration-[250ms] ml-1 mt-1 opacity-60"
                    : "rotate-180 transition duration-[250ms] ml-1 mt-1 opacity-60",
                }),
              );
            },
          }),
          React.createElement(React$1.Transition, {
            as: "span",
            enter: "transition ease-out duration-100",
            enterFrom: "transform opacity-0 scale-95",
            enterTo: "transform opacity-100 scale-100",
            leave: "transition ease-in duration-75",
            leaveFrom: "transform opacity-100 scale-100",
            leaveTo: "transform opacity-0 scale-95",
            children: Caml_option.some(
              React.createElement(React$1.Menu.Items, {
                className:
                  "absolute right-0 z-50 w-fit mt-2 origin-top-right bg-white dark:bg-jp-gray-950 divide-y divide-gray-100 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none",
                children: function (props) {
                  if (props.open) {
                    setArrow(function (param) {
                      return true;
                    });
                  } else {
                    setArrow(function (param) {
                      return false;
                    });
                  }
                  return React.createElement(
                    React.Fragment,
                    {},
                    React.createElement(
                      "div",
                      {
                        className: "px-1 py-1 ",
                      },
                      options.map(function (option, i) {
                        return JsxPPXReactSupportU.createElementWithKey(
                          i.toString(),
                          React$1.Menu.Item,
                          {
                            children: function (props) {
                              var activeClasses = props.active
                                ? "group flex rounded-md items-center w-full px-2 py-2 text-sm bg-gray-100 dark:bg-black"
                                : "group flex rounded-md items-center w-full px-2 py-2 text-sm";
                              return React.createElement(
                                "div",
                                {
                                  className: "relative",
                                },
                                React.createElement(
                                  "button",
                                  {
                                    className:
                                      activeClasses + " font-medium text-start",
                                    onClick: function (param) {
                                      switchMerchant(option.merchant_id);
                                    },
                                  },
                                  React.createElement(
                                    "div",
                                    {
                                      className: "mr-5",
                                    },
                                    option.merchant_name,
                                  ),
                                ),
                                React.createElement(RenderIf.make, {
                                  condition:
                                    selectedMerchantObject.merchant_name ===
                                    option.merchant_name,
                                  children: React.createElement(Icon.make, {
                                    name: "check",
                                    size: 15,
                                    className:
                                      "absolute top-2 right-2 " +
                                      textColor.primaryNormal,
                                  }),
                                }),
                              );
                            },
                          },
                        );
                      }),
                    ),
                    React.createElement(RenderIf.make, {
                      condition: isAddMerchantEnabled,
                      children: React.createElement(
                        SwitchMerchant$AddNewMerchantButton,
                        {
                          setShowModal: setShowModal,
                        },
                      ),
                    }),
                  );
                },
              }),
            ),
          }),
        );
      },
    }),
    React.createElement(RenderIf.make, {
      condition: showModal,
      children: React.createElement(SwitchMerchant$NewAccountCreationModal, {
        setShowModal: setShowModal,
        showModal: showModal,
      }),
    }),
  );
}

var ExternalUser = {
  make: SwitchMerchant$ExternalUser,
};

function SwitchMerchant(props) {
  var __isAddMerchantEnabled = props.isAddMerchantEnabled;
  var isAddMerchantEnabled =
    __isAddMerchantEnabled !== undefined ? __isAddMerchantEnabled : false;
  var getURL = APIUtils.useGetURL();
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStatus = match.setAuthStatus;
  var authStatus = match.authStatus;
  var match$1 = React.useState(function () {
    return "";
  });
  var setValue = match$1[1];
  var value = match$1[0];
  var merchantId;
  if (typeof authStatus !== "object" || authStatus.TAG !== "LoggedIn") {
    merchantId = "";
  } else {
    var info = authStatus._0;
    merchantId =
      info.TAG === "BasicAuth"
        ? Core__Option.getOr(info._0.merchant_id, "")
        : info._0.merchant_id;
  }
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showPopUp = PopUpState.useShowPopUp();
  var isInternalUser = props.userRole.includes("internal_");
  var match$2 = React.useState(function () {
    return false;
  });
  var setSuccessModal = match$2[1];
  var input = React.useMemo(
    function () {
      return {
        name: "-",
        onBlur: function (_ev) {},
        onChange: function (ev) {
          var value = ev.target.value;
          if (value.includes("<script>") || value.includes("</script>")) {
            showPopUp({
              heading: "Script Tags are not allowed",
              description: "Input cannot contain <script>, </script> tags",
              popUpType: ["Warning", "WithIcon"],
              handleConfirm: {
                text: "OK",
              },
            });
          }
          var val = value.replace("<script>", "").replace("</script>", "");
          setValue(function (param) {
            return val;
          });
        },
        onFocus: function (_ev) {},
        value: value,
        checked: false,
      };
    },
    [value],
  );
  var switchMerchant = async function (value) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "SWITCH_MERCHANT",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = {};
      body["merchant_id"] = value;
      var res = await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      if (featureFlagDetails.totp) {
        var responseDict = LogicUtils.getDictFromJsonObject(res);
        var role_id = LogicUtils.getString(responseDict, "user_role", "");
        responseDict["role_id"] = role_id;
        setAuthStatus({
          TAG: "LoggedIn",
          _0: {
            TAG: "Auth",
            _0: AuthUtils.getAuthInfo(responseDict),
          },
        });
      } else {
        setAuthStatus({
          TAG: "LoggedIn",
          _0: {
            TAG: "BasicAuth",
            _0: BasicAuthUtils.getBasicAuthInfo(res),
          },
        });
      }
      setSuccessModal(function (param) {
        return true;
      });
      await HyperSwitchUtils.delay(2000);
      window.location.reload();
      return setSuccessModal(function (param) {
        return false;
      });
    } catch (exn) {
      return setValue(function (param) {
        return "";
      });
    }
  };
  var handleKeyUp = function ($$event) {
    if ($$event.keyCode === 13) {
      switchMerchant(value);
      return;
    }
  };
  if (isInternalUser) {
    return React.createElement(
      "div",
      {
        className: "flex items-center gap-4",
      },
      React.createElement(
        "div",
        {
          className:
            "p-3 rounded-lg whitespace-nowrap text-fs-13 bg-hyperswitch_green_trans border-hyperswitch_green_trans text-hyperswitch_green font-semibold",
        },
        merchantId,
      ),
      React.createElement(TextInput.make, {
        input: input,
        placeholder: "Switch merchant",
        onKeyUp: handleKeyUp,
        customWidth: "w-80",
      }),
    );
  } else {
    return React.createElement(
      React.Fragment,
      {},
      React.createElement(SwitchMerchant$ExternalUser, {
        switchMerchant: switchMerchant,
        isAddMerchantEnabled: isAddMerchantEnabled,
      }),
      React.createElement(LoaderModal.make, {
        showModal: match$2[0],
        setShowModal: setSuccessModal,
        text: "Switching merchant...",
      }),
    );
  }
}

var make = SwitchMerchant;

export { NewAccountCreationModal, AddNewMerchantButton, ExternalUser, make };
/* Form Not a pure module */
