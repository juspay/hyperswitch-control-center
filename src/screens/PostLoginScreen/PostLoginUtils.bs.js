// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as CountryUtils from "../../utils/CountryUtils.bs.js";
import * as HSwitchUtils from "../HSwitchUtils.bs.js";

var defaultValueForQuestions_options = [];

var defaultValueForQuestions = {
  question: "",
  options: defaultValueForQuestions_options,
  key: "",
};

var userRoleQuestions_options = [
  {
    label: "Product",
    value: "product",
  },
  {
    label: "Engineering",
    value: "engineering",
  },
  {
    label: "Finance",
    value: "finance",
  },
  {
    label: "Partnerships",
    value: "partnerships",
  },
];

var userRoleQuestions = {
  question: "What role fits you well?",
  options: userRoleQuestions_options,
  key: "best_fit_role",
};

var paymentProcessorQuestions_options = [
  {
    label: "Only 1",
    value: "only 1",
  },
  {
    label: "2-3",
    value: "2-3",
  },
  {
    label: "4 or more",
    value: "4 or more",
  },
  {
    label: "Not accepting digital payments yet",
    value: "not accepting digital payments yet",
  },
];

var paymentProcessorQuestions = {
  question: "How many Payment Processors do you currently use?",
  options: paymentProcessorQuestions_options,
  key: "integrated_processors",
};

var requirementsQuestion_options = [
  {
    label: "Improve Conversion",
    value: "improve conversions",
  },
  {
    label: "Reduce Costs",
    value: "reduce costs",
  },
  {
    label: "Market Expansion",
    value: "market expansion",
  },
  {
    label: "Reduce Dev Effort",
    value: "reduce dev efforts",
  },
  {
    label: "Mitigate Processor Risk",
    value: "mitigate processor risk",
  },
];

var requirementsQuestion = {
  question: "What brings you to Hyperswitch?",
  options: requirementsQuestion_options,
  key: "dashboard_purpose",
};

var questionForSurvey = [
  userRoleQuestions,
  paymentProcessorQuestions,
  requirementsQuestion,
];

function getBrowswerDetailsPayload() {
  var browserDetails = HSwitchUtils.getBrowswerDetails();
  var clientCountry = browserDetails.clientCountry;
  var clientCountryDict = Object.fromEntries([
    ["isoAlpha3", clientCountry.isoAlpha3],
    [
      "countryName",
      CountryUtils.getCountryNameFromVarient(clientCountry.countryName),
    ],
    [
      "isoAlpha2",
      CountryUtils.getCountryCodeStringFromVarient(clientCountry.isoAlpha2),
    ],
    ["timeZones", LogicUtils.getJsonFromArrayOfString(clientCountry.timeZones)],
  ]);
  return Object.fromEntries([
    ["userAgent", browserDetails.userAgent],
    ["browserVersion", browserDetails.browserVersion],
    ["platform", browserDetails.platform],
    ["browserName", browserDetails.browserName],
    ["browserLanguage", browserDetails.browserLanguage],
    ["screenHeight", browserDetails.screenHeight],
    ["screenWidth", browserDetails.screenWidth],
    ["timeZoneOffset", browserDetails.timeZoneOffset],
    ["clientCountry", clientCountryDict],
  ]);
}

function generateSurveyJson(values) {
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  var survey_json = Object.fromEntries(
    questionForSurvey.map(function (value) {
      return [value.key, LogicUtils.getString(valuesDict, value.key, "")];
    }),
  );
  var browserDetailsPayload = getBrowswerDetailsPayload();
  return Object.fromEntries([
    ["signin_survey", survey_json],
    ["browser_details", browserDetailsPayload],
  ]);
}

var initialValueDict = Object.fromEntries(
  questionForSurvey.map(function (value) {
    return [value.key, ""];
  }),
);

export {
  defaultValueForQuestions,
  userRoleQuestions,
  paymentProcessorQuestions,
  requirementsQuestion,
  questionForSurvey,
  getBrowswerDetailsPayload,
  generateSurveyJson,
  initialValueDict,
};
/* initialValueDict Not a pure module */
