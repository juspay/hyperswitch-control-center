// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../HSwitchUtils.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as FramerMotion from "framer-motion";
import * as GlobalProvider from "../../entryPoints/Provider/GlobalProvider.bs.js";
import * as HSLocalStorage from "../HSLocalStorage.bs.js";
import * as PostLoginUtils from "./PostLoginUtils.bs.js";
import * as CommonAuthHooks from "../../entryPoints/AuthModule/Common/CommonAuthHooks.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function PostLoginScreen$SurveyComponent(props) {
  var setCarouselDirection = props.setCarouselDirection;
  var currentQuestionDict = props.currentQuestionDict;
  var setCurrentStep = props.setCurrentStep;
  var currentStep = props.currentStep;
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = match.globalUIConfig;
  var currentQuestionValue = LogicUtils.getStringFromJson(
    ReactFinalForm.useField(currentQuestionDict.key).input.value,
    "",
  );
  var isNextButtonEnabled = LogicUtils.isNonEmptyString(currentQuestionValue);
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-2 h-full ",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-2",
      },
      React.createElement(
        "p",
        {
          className: "text-fs-12 text-jp-grey-700 opacity-50",
        },
        ((currentStep + 1) | 0).toString() + " of 3",
      ),
      React.createElement(
        "div",
        {
          className: "flex gap-2",
        },
        React.createElement(
          "p",
          {
            className: "text-fs-20 text-jp-grey-700 font-semibold",
          },
          currentQuestionDict.question,
        ),
        React.createElement(
          "span",
          {
            className: "text-red-950",
          },
          "*",
        ),
      ),
    ),
    React.createElement(FormRenderer.FieldRenderer.make, {
      field: FormRenderer.makeFieldInfo(
        "",
        undefined,
        currentQuestionDict.key,
        InputFields.radioInput(
          currentQuestionDict.options,
          "options",
          undefined,
          undefined,
          undefined,
          undefined,
          "p-2.5 border rounded-md text-fs-18 w-11/12 flex gap-2 !overflow-visible",
          "flex flex-col gap-4 md:!min-h-[30rem]",
          match$1.backgroundColor +
            " bg-opacity-5 " +
            match$1.border.borderColor.primaryNormal,
          match$1.font.textColor.primaryNormal,
          undefined,
          undefined,
        ),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    }),
    React.createElement(
      "div",
      {
        className: "flex gap-4 w-full mt-4",
      },
      React.createElement(Button.make, {
        buttonState: currentStep === 0 ? "Disabled" : "Normal",
        text: "Go Back",
        buttonType: "Secondary",
        onClick: function (param) {
          setCarouselDirection(function (param) {
            return "LEFT";
          });
          setCurrentStep(function (param) {
            return (currentStep - 1) | 0;
          });
        },
        customButtonStyle: "!rounded-md w-full",
      }),
      currentStep === 2
        ? React.createElement(FormRenderer.SubmitButton.make, {
            text: "Submit",
            disabledParamter: LogicUtils.isNonEmptyString(currentQuestionValue)
              ? false
              : true,
            customSumbitButtonStyle: "!rounded-md w-full",
          })
        : React.createElement(Button.make, {
            buttonState: isNextButtonEnabled ? "Normal" : "Disabled",
            text: "Continue",
            buttonType: "Primary",
            onClick: function (param) {
              setCarouselDirection(function (param) {
                return "RIGHT";
              });
              setCurrentStep(function (param) {
                return (currentStep + 1) | 0;
              });
            },
            customButtonStyle: "!rounded-md w-full",
          }),
    ),
  );
}

var SurveyComponent = {
  make: PostLoginScreen$SurveyComponent,
};

function PostLoginScreen(props) {
  var getURL = APIUtils.useGetURL();
  var showToast = ToastState.useShowToast();
  var handleLogout = APIUtils.useHandleLogout();
  var match = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  var match$1 = React.useState(function () {
    return 0;
  });
  var currentStep = match$1[0];
  var match$2 = React.useState(function () {
    return "RIGHT";
  });
  var match$3 = React.useContext(GlobalProvider.defaultContext);
  var setDashboardPageState = match$3.setDashboardPageState;
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var isPostLoginQuestionnairePending = LogicUtils.getBoolFromString(
    HSLocalStorage.getFromUserDetails("is_metadata_filled"),
    true,
  );
  React.useEffect(
    function () {
      if (!isPostLoginQuestionnairePending) {
        RescriptReactRouter.push(
          GlobalVars.appendDashboardPath("/post-login-questionare"),
        );
      }
    },
    [isPostLoginQuestionnairePending],
  );
  var onSubmit = async function (values, param) {
    try {
      var postLoginSurveyUrl = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "SET_METADATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        postLoginSurveyUrl,
        PostLoginUtils.generateSurveyJson(values),
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      HSwitchUtils.setUserDetails("is_metadata_filled", "true");
      setDashboardPageState(function (param) {
        return "AUTO_CONNECTOR_INTEGRATION";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        if (err.includes("UR_19")) {
          showToast(
            "Please login again!",
            "ToastWarning",
            undefined,
            false,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          handleLogout();
        }
      } else {
        throw e;
      }
    }
    return null;
  };
  var xPositionBasedOnDirection = match$2[0] === "RIGHT" ? 100 : -100;
  return React.createElement(HSwitchUtils.BackgroundImageWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className:
            "h-full w-full md:w-pageWidth11 mx-auto py-10 px-20 overflow-y-scroll grid grid-col-1 md:grid-rows-[8rem,1fr] md:grid-cols-[10rem,1fr] grid-flow-row md:grid-flow-col place-items-center md:place-items-start",
        },
        React.createElement(
          "div",
          {
            className: "row-span-2",
          },
          React.createElement(Icon.make, {
            name: "hyperswitch-text-icon",
            size: 24,
            className: "cursor-pointer w-36",
            parentClass: "flex flex-col justify-center items-center",
          }),
        ),
        React.createElement(
          "div",
          {
            className:
              "w-full col-span-1 flex flex-col gap-2 items-center justify-center",
          },
          React.createElement(
            "div",
            {
              className:
                " flex flex-col md:flex-row items-center justify-center",
            },
            React.createElement(
              "div",
              {
                className: "flex flex-row",
              },
              React.createElement(
                "p",
                {
                  className: "text-fs-20 font-medium",
                },
                "Hey " + LogicUtils.capitalizeString(match.name),
              ),
              React.createElement("img", {
                className: "h-8 w-8 mx-3",
                alt: "wavinghand",
                src: "/images/hyperswitchImages/WavingHandImage.svg",
              }),
            ),
            React.createElement(
              "p",
              {
                className: "text-fs-20 font-medium ",
              },
              "Welcome to Hyperswitch",
            ),
          ),
          React.createElement(
            "p",
            {
              className: "text-fs-12 text-jp-grey-700 opacity-50 ",
            },
            "Help us know you better in 3 simple steps",
          ),
        ),
        React.createElement(
          "div",
          {
            className:
              "w-full flex row-span-1 col-span-1 justify-center items-center ",
          },
          React.createElement(
            "div",
            {
              className:
                "flex flex-col gap-10 h-full items-center w-full sm:w-133 ",
            },
            React.createElement(FramerMotion.AnimatePresence, {
              children: Caml_option.some(
                React.createElement(Form.make, {
                  children: JsxPPXReactSupportU.createElementWithKey(
                    currentStep.toString(),
                    FramerMotion.motion.div,
                    {
                      animate: {
                        x: 0,
                        opacity: 1.0,
                      },
                      className:
                        "flex flex-col flex-wrap bg-white p-8 !rounded-md !shadow-[0_4px_9px_0_rgba(0,0,0,_0.12)] carousel-item",
                      exit: {
                        x: -100,
                        opacity: 0.0,
                      },
                      initial: {
                        x: xPositionBasedOnDirection,
                        opacity: 0.0,
                      },
                      transition: {
                        duration: 0.3,
                      },
                      children: Caml_option.some(
                        React.createElement(PostLoginScreen$SurveyComponent, {
                          currentStep: currentStep,
                          setCurrentStep: match$1[1],
                          currentQuestionDict: Core__Option.getOr(
                            PostLoginUtils.questionForSurvey[currentStep],
                            PostLoginUtils.defaultValueForQuestions,
                          ),
                          setCarouselDirection: match$2[1],
                        }),
                      ),
                    },
                  ),
                  onSubmit: onSubmit,
                  initialValues: PostLoginUtils.initialValueDict,
                  formClass: "!w-full",
                }),
              ),
              initial: false,
              custom: currentStep,
            }),
          ),
        ),
      ),
    ),
  });
}

var make = PostLoginScreen;

export { SurveyComponent, make };
/* Form Not a pure module */
