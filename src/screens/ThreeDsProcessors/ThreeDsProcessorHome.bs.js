// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Navbar from "../../components/Navbar.bs.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as UrlUtils from "../../utils/UrlUtils.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../HSwitchUtils.bs.js";
import * as FormValuesSpy from "../../components/form/FormValuesSpy.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as ConnectorPreview from "../Connectors/ConnectorPreview.bs.js";
import * as JsonFlattenUtils from "../../utils/JsonFlattenUtils.bs.js";
import * as React$1 from "@headlessui/react";
import * as AddDataAttributes from "../../components/AddDataAttributes.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as BreadCrumbNavigation from "../../utils/BreadCrumbNavigation.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";
import * as ConnectorAccountDetailsHelper from "../Connectors/ConnectorAccountDetailsHelper.bs.js";

function ThreeDsProcessorHome$MenuOption(props) {
  var setCurrentStep = props.setCurrentStep;
  var updateStepValue = props.updateStepValue;
  return React.createElement(React$1.Popover, {
    as: "div",
    className: "relative inline-block text-left",
    children: function (_popoverProps) {
      return React.createElement(
        React.Fragment,
        {},
        React.createElement(React$1.Popover.Button, {
          children: function (_buttonProps) {
            return React.createElement(Icon.make, {
              name: "menu-option",
              size: 28,
            });
          },
        }),
        React.createElement(React$1.Popover.Panel, {
          className: "absolute z-20 right-5 top-4",
          children: function (panelProps) {
            return React.createElement(
              "div",
              {
                className:
                  "relative flex flex-col bg-white py-3 overflow-hidden rounded ring-1 ring-black ring-opacity-5 w-40",
                id: "neglectTopbarTheme",
              },
              React.createElement(React.Fragment, {
                children: Caml_option.some(
                  React.createElement(Navbar.MenuOption.make, {
                    text: "Update",
                    onClick: function (param) {
                      panelProps.close();
                      setCurrentStep(function (param) {
                        return updateStepValue;
                      });
                    },
                  }),
                ),
              }),
            );
          },
        }),
      );
    },
  });
}

var MenuOption = {
  make: ThreeDsProcessorHome$MenuOption,
};

function ThreeDsProcessorHome(props) {
  var getURL = APIUtils.useGetURL();
  var showToast = ToastState.useShowToast();
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var updateAPIHook = APIUtils.useUpdateMethod(false, undefined);
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var connectorName = LogicUtils.getString(
    UrlUtils.useGetFilterDictFromUrl(""),
    "name",
    "",
  );
  var connectorID = HSwitchUtils.getConnectorIDFromUrl(
    Core__List.toArray(url.path),
    "",
  );
  var match = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return {};
  });
  var setInitialValues = match$1[1];
  var initialValues = match$1[0];
  var match$2 = React.useState(function () {
    return "ConfigurationFields";
  });
  var setCurrentStep = match$2[1];
  var currentStep = match$2[0];
  var activeBusinessProfile = MerchantAccountUtils.getValueFromBusinessProfile(
    Recoil.useRecoilValue(HyperswitchAtom.businessProfilesAtom),
  );
  var match$3 = HSwitchUtils.urlPath(url.path);
  var isUpdateFlow;
  if (match$3 && match$3.hd === "3ds-authenticators") {
    var match$4 = match$3.tl;
    isUpdateFlow =
      match$4 && match$4.hd === "new" && !match$4.tl ? false : true;
  } else {
    isUpdateFlow = true;
  }
  var getConnectorDetails = async function () {
    try {
      var connectorUrl = getURL(
        "CONNECTOR",
        "Get",
        Caml_option.some(connectorID),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var json = await fetchDetails(connectorUrl);
      return setInitialValues(function (param) {
        return json;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to update!"),
        );
      } else {
        return Js_exn.raiseError("Something went wrong");
      }
    }
  };
  var getDetails = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      await window.init();
      if (isUpdateFlow) {
        await getConnectorDetails();
        setCurrentStep(function (param) {
          return "Preview";
        });
      } else {
        setCurrentStep(function (param) {
          return "ConfigurationFields";
        });
      }
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID !== Js_exn.$$Error) {
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: "Something went wrong",
          };
        });
      }
      var err = Core__Option.getOr(e._1.message, "Something went wrong");
      return setScreenState(function (param) {
        return {
          TAG: "Error",
          _0: err,
        };
      });
    }
  };
  var connectorDetails = React.useMemo(
    function () {
      try {
        if (LogicUtils.isNonEmptyString(connectorName)) {
          return window.getAuthenticationConnectorConfig(connectorName);
        } else {
          return {};
        }
      } catch (raw_e) {
        var e = Caml_js_exceptions.internalToOCamlException(raw_e);
        if (e.RE_EXN_ID === Js_exn.$$Error) {
          var e$1 = e._1;
          console.log("FAILED TO LOAD CONNECTOR CONFIG", e$1);
          var err = Core__Option.getOr(e$1.message, "Something went wrong");
          setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: err,
            };
          });
          return {};
        }
        throw e;
      }
    },
    [connectorName],
  );
  var match$5 = ConnectorUtils.getConnectorFields(connectorDetails);
  var connectorLabelDetailField = match$5[5];
  var connectorWebHookDetails = match$5[4];
  var connectorMetaDataFields = match$5[2];
  var connectorAccountFields = match$5[1];
  var bodyType = match$5[0];
  React.useEffect(
    function () {
      var initialValuesToDict = LogicUtils.getDictFromJsonObject(initialValues);
      if (!isUpdateFlow) {
        initialValuesToDict["profile_id"] = activeBusinessProfile.profile_id;
        initialValuesToDict["connector_label"] =
          connectorName + "_" + activeBusinessProfile.profile_name;
      }
    },
    [connectorName, activeBusinessProfile.profile_id],
  );
  React.useEffect(
    function () {
      if (LogicUtils.isNonEmptyString(connectorName)) {
        getDetails();
      } else {
        setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: "Connector name not found",
          };
        });
      }
    },
    [connectorName],
  );
  var onSubmit = async function (values, param) {
    try {
      var body = ConnectorUtils.ignoreFields(
        ConnectorUtils.generateInitialValuesDict(
          values,
          connectorName,
          bodyType,
          false,
          false,
          "ThreeDsAuthenticator",
          undefined,
        ),
        connectorID,
        ConnectorUtils.connectorIgnoredField,
      );
      var connectorUrl = getURL(
        "CONNECTOR",
        "Post",
        Caml_option.some(isUpdateFlow ? connectorID : undefined),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await updateAPIHook(
        connectorUrl,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setInitialValues(function (param) {
        return response;
      });
      setCurrentStep(function (param) {
        return "Summary";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Something went wrong");
        var errorCode = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "code",
          "",
        );
        var errorMessage = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "message",
          "",
        );
        if (errorCode === "HE_01") {
          showToast(
            "Connector label already exist!",
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          setCurrentStep(function (param) {
            return "ConfigurationFields";
          });
        } else {
          showToast(
            errorMessage,
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: err,
            };
          });
        }
      } else {
        throw e;
      }
    }
    return null;
  };
  var validateMandatoryField = function (values) {
    var errors = {};
    var valuesFlattenJson = JsonFlattenUtils.flattenObject(values, true);
    return ConnectorUtils.validateConnectorRequiredFields(
      ConnectorUtils.getConnectorNameTypeFromString(
        connectorName,
        "ThreeDsAuthenticator",
        undefined,
      ),
      valuesFlattenJson,
      connectorAccountFields,
      connectorMetaDataFields,
      connectorWebHookDetails,
      connectorLabelDetailField,
      errors,
    );
  };
  var summaryPageButton;
  var exit = 0;
  switch (currentStep) {
    case "ConfigurationFields":
    case "Summary":
      exit = 1;
      break;
    case "Preview":
      summaryPageButton = React.createElement(ThreeDsProcessorHome$MenuOption, {
        updateStepValue: "ConfigurationFields",
        setCurrentStep: setCurrentStep,
      });
      break;
  }
  if (exit === 1) {
    summaryPageButton = React.createElement(Button.make, {
      text: "Done",
      buttonType: "Primary",
      onClick: function (param) {
        RescriptReactRouter.push(
          GlobalVars.appendDashboardPath("/3ds-authenticators"),
        );
      },
    });
  }
  var tmp;
  var exit$1 = 0;
  switch (currentStep) {
    case "ConfigurationFields":
      tmp = React.createElement(
        Form.make,
        {
          children: null,
          onSubmit: onSubmit,
          initialValues: initialValues,
          validate: validateMandatoryField,
        },
        React.createElement(
          ConnectorAccountDetailsHelper.ConnectorHeaderWrapper.make,
          {
            children: null,
            headerButton: React.createElement(AddDataAttributes.make, {
              attributes: [["data-testid", "connector-submit-button"]],
              children: React.createElement(FormRenderer.SubmitButton.make, {
                text: "Connect and Proceed",
                loadingText: "Processing...",
              }),
            }),
            connector: connectorName,
            connectorType: "ThreeDsAuthenticator",
          },
          React.createElement(
            "div",
            {
              className: "flex flex-col gap-2 p-2 md:px-10",
            },
            React.createElement(
              ConnectorAccountDetailsHelper.BusinessProfileRender.make,
              {
                isUpdateFlow: isUpdateFlow,
                selectedConnector: connectorName,
              },
            ),
          ),
          React.createElement(
            "div",
            {
              className: "flex flex-col gap-2 p-2 md:p-10",
            },
            React.createElement(
              ConnectorAccountDetailsHelper.ConnectorConfigurationFields.make,
              {
                connectorAccountFields: connectorAccountFields,
                connector: ConnectorUtils.getConnectorNameTypeFromString(
                  connectorName,
                  "ThreeDsAuthenticator",
                  undefined,
                ),
                selectedConnector: ConnectorUtils.getConnectorInfo(
                  ConnectorUtils.getConnectorNameTypeFromString(
                    connectorName,
                    "ThreeDsAuthenticator",
                    undefined,
                  ),
                ),
                connectorMetaDataFields: connectorMetaDataFields,
                connectorWebHookDetails: connectorWebHookDetails,
                connectorLabelDetailField: connectorLabelDetailField,
              },
            ),
          ),
        ),
        React.createElement(FormValuesSpy.make, {}),
      );
      break;
    case "Summary":
    case "Preview":
      exit$1 = 1;
      break;
  }
  if (exit$1 === 1) {
    tmp = React.createElement(
      ConnectorAccountDetailsHelper.ConnectorHeaderWrapper.make,
      {
        children: React.createElement(
          ConnectorPreview.ConnectorSummaryGrid.make,
          {
            connectorInfo: ConnectorListMapper.getProcessorPayloadType(
              LogicUtils.getDictFromJsonObject(initialValues),
            ),
            connector: connectorName,
            isPayoutFlow: false,
            setScreenState: function (param) {},
          },
        ),
        headerButton: summaryPageButton,
        connector: connectorName,
        connectorType: "ThreeDsAuthenticator",
      },
    );
  }
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-10 overflow-scroll h-full w-full",
        },
        React.createElement(BreadCrumbNavigation.make, {
          path: [
            connectorID === "new"
              ? {
                  title: "3DS Authenticator",
                  link: "/3ds-authenticators",
                  warning:
                    "You have not yet completed configuring your " +
                    LogicUtils.snakeToTitle(connectorName) +
                    " connector. Are you sure you want to go back?",
                }
              : {
                  title: "3DS Authenticator",
                  link: "/3ds-authenticators",
                },
          ],
          currentPageTitle: ConnectorUtils.getDisplayNameForConnector(
            "ThreeDsAuthenticator",
            connectorName,
          ),
          cursorStyle: "cursor-pointer",
        }),
        React.createElement(
          "div",
          {
            className:
              "bg-white rounded-lg border h-3/4 overflow-scroll shadow-boxShadowMultiple show-scrollbar",
          },
          tmp,
        ),
      ),
    ),
    screenState: match[0],
  });
}

var make = ThreeDsProcessorHome;

export { MenuOption, make };
/* Form Not a pure module */
