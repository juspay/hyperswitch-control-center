// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Recoil from "recoil";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "../../components/LoadedTable.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";
import * as ProcessorCards from "../Processors/ProcessorCards.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as ConnectorListHook from "../Hooks/ConnectorListHook.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as ThreeDsTableEntity from "./ThreeDsTableEntity.bs.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";

function ThreeDsConnectorList(props) {
  var fetchConnectorListResponse = ConnectorListHook.useFetchConnectorList();
  var match = React.useState(function () {
    return "Success";
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return [];
  });
  var setConfiguredConnectors = match$1[1];
  var configuredConnectors = match$1[0];
  var match$2 = React.useState(function () {
    return 0;
  });
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var getConnectorList = async function (param) {
    try {
      var response = await fetchConnectorListResponse();
      var connectorsList =
        ConnectorListMapper.getArrayOfConnectorListPayloadType(response).filter(
          function (item) {
            return (
              ConnectorUtils.connectorTypeStringToTypeMapper(
                item.connector_type,
              ) === "AuthenticationProcessor"
            );
          },
        );
      setConfiguredConnectors(function (param) {
        return connectorsList;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      return setScreenState(function (param) {
        return {
          TAG: "Error",
          _0: "Failed to fetch",
        };
      });
    }
  };
  React.useEffect(function () {
    getConnectorList();
  }, []);
  return React.createElement(
    "div",
    undefined,
    React.createElement(PageUtils.PageHeading.make, {
      title: "3DS Authentication Manager",
      subTitle:
        "Connect and manage 3DS authentication providers to enhance the conversions",
    }),
    React.createElement(PageLoaderWrapper.make, {
      children: Caml_option.some(
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-10",
          },
          React.createElement(ProcessorCards.make, {
            connectorsAvailableForIntegration:
              ConnectorUtils.threedsAuthenticatorList,
            configuredConnectors:
              ConnectorUtils.getConnectorTypeArrayFromListConnectors(
                "ThreeDsAuthenticator",
                configuredConnectors,
              ),
            urlPrefix: "3ds-authenticators/new",
            connectorType: "ThreeDsAuthenticator",
          }),
          React.createElement(RenderIf.make, {
            condition: configuredConnectors.length > 0,
            children: React.createElement(LoadedTable.make, {
              title: "Connected Processors",
              actualData: configuredConnectors.map(function (prim) {
                return prim;
              }),
              totalResults: configuredConnectors.map(function (prim) {
                return prim;
              }).length,
              resultsPerPage: 20,
              offset: match$2[0],
              setOffset: match$2[1],
              entity: ThreeDsTableEntity.threeDsAuthenticatorEntity(
                "3ds-authenticators",
                userPermissionJson.connectorsManage,
              ),
              currrentFetchCount: configuredConnectors.map(function (prim) {
                return prim;
              }).length,
              collapseTableRow: false,
            }),
          }),
        ),
      ),
      screenState: match[0],
    }),
  );
}

var make = ThreeDsConnectorList;

export { make };
/* react Not a pure module */
