// Generated by ReScript, PLEASE EDIT WITH CARE

import * as InputFields from "../../components/InputFields.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";

function statusVariantMapper(statusLabel) {
  var match = statusLabel.toUpperCase();
  switch (match) {
    case "CANCELLED":
      return "Cancelled";
    case "FAILED":
      return "Failed";
    case "PARTIALLY_CAPTURED":
      return "PartiallyCaptured";
    case "PROCESSING":
      return "Processing";
    case "REQUIRES_CONFIRMATION":
      return "RequiresConfirmation";
    case "REQUIRES_CUSTOMER_ACTION":
      return "RequiresCustomerAction";
    case "REQUIRES_PAYMENT_METHOD":
      return "RequiresPaymentMethod";
    case "SUCCEEDED":
      return "Succeeded";
    default:
      return "None";
  }
}

function paymentAttemptStatusVariantMapper(statusLabel) {
  var match = statusLabel.toUpperCase();
  switch (match) {
    case "AUTHENTICATION_FAILED":
      return "AUTHENTICATION_FAILED";
    case "AUTHENTICATION_PENDING":
      return "AUTHENTICATION_PENDING";
    case "AUTHENTICATION_SUCCESSFUL":
      return "AUTHENTICATION_SUCCESSFUL";
    case "AUTHORIZATION_FAILED":
      return "AUTHORIZATION_FAILED";
    case "AUTHORIZED":
      return "AUTHORIZED";
    case "AUTHORIZING":
      return "AUTHORIZING";
    case "AUTO_REFUNDED":
      return "AUTO_REFUNDED";
    case "CAPTURE_FAILED":
      return "CAPTURE_FAILED";
    case "CAPTURE_INITIATED":
      return "CAPTURE_INITIATED";
    case "CHARGED":
      return "CHARGED";
    case "COD_INITIATED":
      return "COD_INITIATED";
    case "CONFIRMATION_AWAITED":
      return "CONFIRMATION_AWAITED";
    case "DEVICE_DATA_COLLECTION_PENDING":
      return "DEVICE_DATA_COLLECTION_PENDING";
    case "FAILURE":
      return "FAILURE";
    case "PARTIAL_CHARGED":
      return "PARTIAL_CHARGED";
    case "PAYMENT_METHOD_AWAITED":
      return "PAYMENT_METHOD_AWAITED";
    case "PENDING":
      return "PENDING";
    case "ROUTER_DECLINED":
      return "ROUTER_DECLINED";
    case "STARTED":
      return "STARTED";
    case "UNRESOLVED":
      return "UNRESOLVED";
    case "VOIDED":
      return "VOIDED";
    case "VOID_FAILED":
      return "VOID_FAILED";
    case "VOID_INITIATED":
      return "VOID_INITIATED";
    default:
      return "NONE";
  }
}

function refundStatusVariantMapper(statusLabel) {
  var match = statusLabel.toUpperCase();
  switch (match) {
    case "FAILURE":
      return "Failure";
    case "PENDING":
      return "Pending";
    case "SUCCESS":
      return "Success";
    default:
      return "None";
  }
}

function isTestData(id) {
  return id.includes("test_");
}

var amountField = FormRenderer.makeFieldInfo(
  "Refund Amount",
  undefined,
  "amount",
  InputFields.numericTextInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter Refund Amount",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var reasonField = FormRenderer.makeFieldInfo(
  "Reason",
  undefined,
  "reason",
  InputFields.textInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter Refund Reason",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  false,
  undefined,
  undefined,
  undefined,
);

var nonRefundConnectors = ["braintree", "klarna", "airwallex"];

function isNonRefundConnector(connector) {
  return nonRefundConnectors.includes(connector);
}

export {
  statusVariantMapper,
  paymentAttemptStatusVariantMapper,
  refundStatusVariantMapper,
  isTestData,
  amountField,
  reasonField,
  nonRefundConnectors,
  isNonRefundConnector,
};
/* amountField Not a pure module */
