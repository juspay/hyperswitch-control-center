// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../../components/Table.bs.js";
import * as React from "react";
import * as Metadata from "./Metadata.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as EntityType from "../../entities/EntityType.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as DisputesEntity from "../Disputes/DisputesEntity.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";
import * as HSwitchOrderUtils from "./HSwitchOrderUtils.bs.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";

function OrderEntity$CurrencyCell(props) {
  return React.createElement(
    "p",
    {
      className: "whitespace-nowrap",
    },
    props.amount + " " + props.currency,
  );
}

var CurrencyCell = {
  make: OrderEntity$CurrencyCell,
};

function getRefundCell(refunds, refundsColType) {
  switch (refundsColType) {
    case "Amount":
      return {
        TAG: "CustomCell",
        _0: React.createElement(OrderEntity$CurrencyCell, {
          amount: (refunds.amount / 100.0).toString(),
          currency: refunds.currency,
        }),
        _1: "",
      };
    case "Created":
      return {
        TAG: "Text",
        _0: refunds.created_at,
      };
    case "Currency":
      return {
        TAG: "Text",
        _0: refunds.currency,
      };
    case "LastUpdated":
      return {
        TAG: "Text",
        _0: refunds.updated_at,
      };
    case "PaymentId":
      return {
        TAG: "Text",
        _0: refunds.payment_id,
      };
    case "RefundId":
      return {
        TAG: "Text",
        _0: refunds.refund_id,
      };
    case "RefundReason":
      return {
        TAG: "Text",
        _0: refunds.reason,
      };
    case "RefundStatus":
      var match = HSwitchOrderUtils.statusVariantMapper(refunds.status);
      var tmp;
      switch (match) {
        case "Failed":
        case "Cancelled":
          tmp = "LabelRed";
          break;
        case "Processing":
          tmp = "LabelOrange";
          break;
        case "RequiresCustomerAction":
        case "RequiresPaymentMethod":
          tmp = "LabelWhite";
          break;
        case "Succeeded":
        case "PartiallyCaptured":
          tmp = "LabelGreen";
          break;
        case "RequiresConfirmation":
        case "None":
          tmp = "LabelLightBlue";
          break;
      }
      return {
        TAG: "Label",
        _0: {
          title: refunds.status.toUpperCase(),
          color: tmp,
        },
      };
    case "ErrorMessage":
      return {
        TAG: "Text",
        _0: refunds.error_message,
      };
  }
}

function getAttemptCell(attempt, attemptColType) {
  switch (attemptColType) {
    case "AttemptId":
      return {
        TAG: "DisplayCopyCell",
        _0: attempt.attempt_id,
      };
    case "Status":
      var match = HSwitchOrderUtils.paymentAttemptStatusVariantMapper(
        attempt.status,
      );
      return {
        TAG: "Label",
        _0: {
          title: attempt.status.toUpperCase(),
          color:
            match === "AUTHORIZATION_FAILED" ||
            match === "FAILURE" ||
            match === "VOIDED" ||
            match === "VOID_FAILED" ||
            match === "AUTHENTICATION_FAILED" ||
            match === "CAPTURE_FAILED" ||
            match === "ROUTER_DECLINED"
              ? "LabelRed"
              : match === "CHARGED"
                ? "LabelGreen"
                : "LabelLightBlue",
        },
      };
    case "Amount":
      return {
        TAG: "CustomCell",
        _0: React.createElement(OrderEntity$CurrencyCell, {
          amount: (attempt.amount / 100.0).toString(),
          currency: attempt.currency,
        }),
        _1: "",
      };
    case "Currency":
      return {
        TAG: "Text",
        _0: attempt.currency,
      };
    case "Connector":
      return {
        TAG: "CustomCell",
        _0: React.createElement(HelperComponents.ConnectorCustomCell.make, {
          connectorName: attempt.connector,
        }),
        _1: "",
      };
    case "PaymentMethod":
      return {
        TAG: "Text",
        _0: attempt.payment_method,
      };
    case "PaymentMethodType":
      return {
        TAG: "Text",
        _0: attempt.payment_method_type,
      };
    case "ErrorMessage":
      return {
        TAG: "Text",
        _0: attempt.error_message,
      };
    case "ConnectorTransactionID":
      return {
        TAG: "DisplayCopyCell",
        _0: attempt.connector_transaction_id,
      };
    case "CaptureMethod":
      return {
        TAG: "Text",
        _0: attempt.capture_method,
      };
    case "AuthenticationType":
      return {
        TAG: "Text",
        _0: attempt.authentication_type,
      };
    case "CancellationReason":
      return {
        TAG: "Text",
        _0: attempt.cancellation_reason,
      };
    case "MandateID":
      return {
        TAG: "Text",
        _0: attempt.mandate_id,
      };
    case "ErrorCode":
      return {
        TAG: "Text",
        _0: attempt.error_code,
      };
    case "PaymentToken":
      return {
        TAG: "Text",
        _0: attempt.payment_token,
      };
    case "ConnectorMetadata":
      return {
        TAG: "Text",
        _0: attempt.connector_metadata,
      };
    case "PaymentExperience":
      return {
        TAG: "Text",
        _0: attempt.payment_experience,
      };
    case "ReferenceID":
      return {
        TAG: "Text",
        _0: attempt.reference_id,
      };
    case "ClientSource":
      return {
        TAG: "Text",
        _0: attempt.client_source,
      };
    case "ClientVersion":
      return {
        TAG: "Text",
        _0: attempt.client_version,
      };
  }
}

function getFrmCell(orderDetais, frmColType) {
  switch (frmColType) {
    case "PaymentId":
      return {
        TAG: "Text",
        _0: orderDetais.payment_id,
      };
    case "PaymentMethodType":
      return {
        TAG: "Text",
        _0: orderDetais.payment_method_type,
      };
    case "Amount":
      return {
        TAG: "CustomCell",
        _0: React.createElement(OrderEntity$CurrencyCell, {
          amount: (orderDetais.amount / 100.0).toString(),
          currency: orderDetais.currency,
        }),
        _1: "",
      };
    case "Currency":
      return {
        TAG: "Text",
        _0: orderDetais.currency,
      };
    case "PaymentProcessor":
      return {
        TAG: "Text",
        _0: orderDetais.connector,
      };
    case "FRMConnector":
      return {
        TAG: "Text",
        _0: orderDetais.frm_message.frm_name,
      };
    case "FRMMessage":
      return {
        TAG: "Text",
        _0: orderDetais.frm_message.frm_reason,
      };
    case "MerchantDecision":
      return {
        TAG: "Text",
        _0: orderDetais.merchant_decision,
      };
  }
}

function getAuthenticationCell(orderDetais, colType) {
  var authenticationDetails = LogicUtils.getDictFromJsonObject(
    Core__Option.getOr(orderDetais.external_authentication_details, null),
  );
  switch (colType) {
    case "AuthenticationFlow":
      return {
        TAG: "Text",
        _0: LogicUtils.getString(
          authenticationDetails,
          "authentication_flow",
          "",
        ),
      };
    case "DsTransactionId":
      return {
        TAG: "Text",
        _0: LogicUtils.getString(
          authenticationDetails,
          "ds_transaction_id",
          "",
        ),
      };
    case "ElectronicCommerceIndicator":
      return {
        TAG: "Text",
        _0: LogicUtils.getString(
          authenticationDetails,
          "electronic_commerce_indicator",
          "",
        ),
      };
    case "ErrorCode":
      return {
        TAG: "Text",
        _0: LogicUtils.getString(authenticationDetails, "error_code", ""),
      };
    case "ErrorMessage":
      return {
        TAG: "Text",
        _0: LogicUtils.getString(authenticationDetails, "error_message", ""),
      };
    case "Status":
      return {
        TAG: "Text",
        _0: LogicUtils.getString(authenticationDetails, "status", ""),
      };
    case "Version":
      return {
        TAG: "Text",
        _0: LogicUtils.getString(authenticationDetails, "version", ""),
      };
  }
}

var refundColumns = [
  "Created",
  "LastUpdated",
  "Amount",
  "PaymentId",
  "RefundStatus",
];

var attemptsColumns = [
  "Status",
  "Amount",
  "Currency",
  "Connector",
  "PaymentMethod",
  "PaymentMethodType",
];

var frmColumns = [
  "PaymentId",
  "PaymentMethodType",
  "Amount",
  "Currency",
  "PaymentProcessor",
  "FRMConnector",
  "FRMMessage",
  "MerchantDecision",
];

var authenticationColumns = [
  "AuthenticationFlow",
  "DsTransactionId",
  "ElectronicCommerceIndicator",
  "ErrorCode",
  "ErrorMessage",
  "Status",
  "Version",
];

var refundDetailsFields = [
  "RefundId",
  "PaymentId",
  "RefundStatus",
  "Amount",
  "Currency",
  "RefundReason",
  "ErrorMessage",
];

var attemptDetailsField = [
  "AttemptId",
  "Status",
  "Amount",
  "Currency",
  "Connector",
  "PaymentMethod",
  "PaymentMethodType",
  "ErrorMessage",
  "ConnectorTransactionID",
  "CaptureMethod",
  "AuthenticationType",
  "CancellationReason",
  "MandateID",
  "ErrorCode",
  "PaymentToken",
  "ConnectorMetadata",
  "PaymentExperience",
  "ReferenceID",
  "ClientSource",
  "ClientVersion",
];

function getRefundHeading(refundsColType) {
  switch (refundsColType) {
    case "Amount":
      return Table.makeHeaderInfo(
        "amount",
        "Amount",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Created":
      return Table.makeHeaderInfo(
        "created",
        "Created",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Currency":
      return Table.makeHeaderInfo(
        "currency",
        "Currency",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "LastUpdated":
      return Table.makeHeaderInfo(
        "last_updated",
        "Last Updated",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentId":
      return Table.makeHeaderInfo(
        "payment_id",
        "Payment Id",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "RefundId":
      return Table.makeHeaderInfo(
        "refund_id",
        "Refund ID",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "RefundReason":
      return Table.makeHeaderInfo(
        "reason",
        "Refund Reason",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "RefundStatus":
      return Table.makeHeaderInfo(
        "status",
        "Refund Status",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ErrorMessage":
      return Table.makeHeaderInfo(
        "error_message",
        "Error Message",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getAttemptHeading(attemptColType) {
  switch (attemptColType) {
    case "AttemptId":
      return Table.makeHeaderInfo(
        "attempt_id",
        "Attempt ID",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        "You can validate the information shown here by cross checking the payment attempt identifier (Attempt ID) in your payment processor portal.",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Status":
      return Table.makeHeaderInfo(
        "status",
        "Status",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Amount":
      return Table.makeHeaderInfo(
        "amount",
        "Amount",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Currency":
      return Table.makeHeaderInfo(
        "currency",
        "Currency",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Connector":
      return Table.makeHeaderInfo(
        "connector",
        "Connector",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentMethod":
      return Table.makeHeaderInfo(
        "payment_method",
        "Payment Method",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentMethodType":
      return Table.makeHeaderInfo(
        "payment_method_type",
        "Payment Method Type",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ErrorMessage":
      return Table.makeHeaderInfo(
        "error_message",
        "Error Message",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ConnectorTransactionID":
      return Table.makeHeaderInfo(
        "connector_transaction_id",
        "Connector Transaction ID",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CaptureMethod":
      return Table.makeHeaderInfo(
        "capture_method",
        "Capture Method",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "AuthenticationType":
      return Table.makeHeaderInfo(
        "authentication_type",
        "Authentication Type",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CancellationReason":
      return Table.makeHeaderInfo(
        "cancellation_reason",
        "Cancellation Reason",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "MandateID":
      return Table.makeHeaderInfo(
        "mandate_id",
        "Mandate ID",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ErrorCode":
      return Table.makeHeaderInfo(
        "error_code",
        "Error Code",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentToken":
      return Table.makeHeaderInfo(
        "payment_token",
        "Payment Token",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ConnectorMetadata":
      return Table.makeHeaderInfo(
        "connector_metadata",
        "Connector Metadata",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentExperience":
      return Table.makeHeaderInfo(
        "payment_experience",
        "Payment Experience",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ReferenceID":
      return Table.makeHeaderInfo(
        "reference_id",
        "Reference ID",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ClientSource":
      return Table.makeHeaderInfo(
        "client_source",
        "Client Source",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ClientVersion":
      return Table.makeHeaderInfo(
        "client_version",
        "Client Version",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getFrmHeading(frmDetailsColType) {
  switch (frmDetailsColType) {
    case "PaymentId":
      return Table.makeHeaderInfo(
        "payment_id",
        "PaymentId",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentMethodType":
      return Table.makeHeaderInfo(
        "payment_method_type",
        "Payment Method Type",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Amount":
      return Table.makeHeaderInfo(
        "amount",
        "Amount",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Currency":
      return Table.makeHeaderInfo(
        "currency",
        "Currency",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentProcessor":
      return Table.makeHeaderInfo(
        "connector",
        "Payment Processor",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "FRMConnector":
      return Table.makeHeaderInfo(
        "frm_connector",
        "FRM Connector",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "FRMMessage":
      return Table.makeHeaderInfo(
        "frm_message",
        "FRM Message",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "MerchantDecision":
      return Table.makeHeaderInfo(
        "merchant_decision",
        "Merchant Decision",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getAuthenticationHeading(authenticationDetailsColType) {
  switch (authenticationDetailsColType) {
    case "AuthenticationFlow":
      return Table.makeHeaderInfo(
        "authentication_flow",
        "Authentication Flow",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "DsTransactionId":
      return Table.makeHeaderInfo(
        "ds_transaction_id",
        "Ds Transaction Id",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ElectronicCommerceIndicator":
      return Table.makeHeaderInfo(
        "electronic_commerce_indicator",
        "Electronic Commerce Indicator",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ErrorCode":
      return Table.makeHeaderInfo(
        "error_code",
        "Error Code",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ErrorMessage":
      return Table.makeHeaderInfo(
        "error_message",
        "Error Message",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Status":
      return Table.makeHeaderInfo(
        "status",
        "Status",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Version":
      return Table.makeHeaderInfo(
        "version",
        "Version",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function refundMetaitemToObjMapper(dict) {
  return {
    udf1: LogicUtils.getString(dict, "udf1", ""),
    new_customer: LogicUtils.getString(dict, "new_customer", ""),
    login_date: LogicUtils.getString(dict, "login_date", ""),
  };
}

function getRefundMetaData(json) {
  return refundMetaitemToObjMapper(
    Core__Option.getOr(Core__JSON.Decode.object(json), {}),
  );
}

function refunditemToObjMapper(dict) {
  return {
    refund_id: LogicUtils.getString(dict, "refund_id", ""),
    payment_id: LogicUtils.getString(dict, "payment_id", ""),
    amount: LogicUtils.getFloat(dict, "amount", 0.0),
    currency: LogicUtils.getString(dict, "currency", ""),
    reason: LogicUtils.getString(dict, "reason", ""),
    status: LogicUtils.getString(dict, "status", ""),
    metadata: getRefundMetaData(
      LogicUtils.getJsonObjectFromDict(dict, "metadata"),
    ),
    updated_at: LogicUtils.getString(dict, "updated_at", ""),
    created_at: LogicUtils.getString(dict, "created_at", ""),
    error_message: LogicUtils.getString(dict, "error_message", ""),
  };
}

function attemptsItemToObjMapper(dict) {
  return {
    attempt_id: LogicUtils.getString(dict, "attempt_id", ""),
    status: LogicUtils.getString(dict, "status", ""),
    amount: LogicUtils.getFloat(dict, "amount", 0.0),
    currency: LogicUtils.getString(dict, "currency", ""),
    connector: LogicUtils.getString(dict, "connector", ""),
    error_message: LogicUtils.getString(dict, "error_message", ""),
    payment_method: LogicUtils.getString(dict, "payment_method", ""),
    connector_transaction_id: LogicUtils.getString(
      dict,
      "connector_transaction_id",
      "",
    ),
    capture_method: LogicUtils.getString(dict, "capture_method", ""),
    authentication_type: LogicUtils.getString(dict, "authentication_type", ""),
    cancellation_reason: LogicUtils.getString(dict, "cancellation_reason", ""),
    mandate_id: LogicUtils.getString(dict, "mandate_id", ""),
    error_code: LogicUtils.getString(dict, "error_code", ""),
    payment_token: LogicUtils.getString(dict, "payment_token", ""),
    connector_metadata: LogicUtils.getString(dict, "connector_metadata", ""),
    payment_experience: LogicUtils.getString(dict, "payment_experience", ""),
    payment_method_type: LogicUtils.getString(dict, "payment_method_type", ""),
    reference_id: LogicUtils.getString(dict, "reference_id", ""),
    client_source: LogicUtils.getString(dict, "client_source", ""),
    client_version: LogicUtils.getString(dict, "client_version", ""),
  };
}

function getRefunds(json) {
  return LogicUtils.getArrayDataFromJson(json, refunditemToObjMapper);
}

function getAttempts(json) {
  return LogicUtils.getArrayDataFromJson(json, attemptsItemToObjMapper);
}

var defaultColumns = [
  "PaymentId",
  "Connector",
  "ConnectorTransactionID",
  "Amount",
  "Status",
  "PaymentMethod",
  "PaymentMethodType",
  "CardNetwork",
  "Email",
  "MerchantOrderReferenceId",
  "Description",
  "Metadata",
  "Created",
];

var allColumns = [
  "Amount",
  "AmountCapturable",
  "AuthenticationType",
  "ProfileId",
  "CaptureMethod",
  "ClientSecret",
  "Connector",
  "ConnectorTransactionID",
  "Created",
  "Currency",
  "CustomerId",
  "Description",
  "Email",
  "MerchantId",
  "PaymentId",
  "PaymentMethod",
  "PaymentMethodType",
  "SetupFutureUsage",
  "Status",
  "Metadata",
  "MerchantOrderReferenceId",
  "AttemptCount",
];

function getHeading(colType) {
  switch (colType) {
    case "PaymentId":
      return Table.makeHeaderInfo(
        "payment_id",
        "Payment ID",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "MerchantId":
      return Table.makeHeaderInfo(
        "merchant_id",
        "Merchant ID",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Status":
      return Table.makeHeaderInfo(
        "status",
        "Payment Status",
        "DropDown",
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Amount":
      return Table.makeHeaderInfo(
        "amount",
        "Amount",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "AmountCapturable":
      return Table.makeHeaderInfo(
        "amount_capturable",
        "AmountCapturable",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "AmountReceived":
      return Table.makeHeaderInfo(
        "amount_received",
        "Amount Received",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ProfileId":
      return Table.makeHeaderInfo(
        "profile_id",
        "Profile Id",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Connector":
      return Table.makeHeaderInfo(
        "connector",
        "Connector",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ConnectorTransactionID":
      return Table.makeHeaderInfo(
        "connector_transaction_id",
        "Connector Transaction ID",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ClientSecret":
      return Table.makeHeaderInfo(
        "client_secret",
        "Client Secret",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Created":
      return Table.makeHeaderInfo(
        "created",
        "Created",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Currency":
      return Table.makeHeaderInfo(
        "currency",
        "Currency",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CustomerId":
      return Table.makeHeaderInfo(
        "customer_id",
        "Customer ID",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Description":
      return Table.makeHeaderInfo(
        "description",
        "Description",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Refunds":
      return Table.makeHeaderInfo(
        "refunds",
        "Refunds",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "MandateId":
      return Table.makeHeaderInfo(
        "mandate_id",
        "Mandate ID",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "MandateData":
      return Table.makeHeaderInfo(
        "mandate_data",
        "Mandate Data",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "SetupFutureUsage":
      return Table.makeHeaderInfo(
        "setup_future_usage",
        "Setup Future Usage",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "OffSession":
      return Table.makeHeaderInfo(
        "off_session",
        "Off Session",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CaptureOn":
      return Table.makeHeaderInfo(
        "capture_on",
        "Capture On",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CaptureMethod":
      return Table.makeHeaderInfo(
        "capture_method",
        "Capture Method",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentMethod":
      return Table.makeHeaderInfo(
        "payment_method",
        "Payment Method",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentMethodType":
      return Table.makeHeaderInfo(
        "payment_method_type",
        "Payment Method Type",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentMethodData":
      return Table.makeHeaderInfo(
        "payment_method_data",
        "Payment Method Data",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentToken":
      return Table.makeHeaderInfo(
        "payment_token",
        "Payment Token",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Shipping":
      return Table.makeHeaderInfo(
        "shipping",
        "Shipping",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Billing":
      return Table.makeHeaderInfo(
        "billing",
        "Billing",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Email":
      return Table.makeHeaderInfo(
        "email",
        "Customer Email",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Name":
      return Table.makeHeaderInfo(
        "name",
        "Name",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Phone":
      return Table.makeHeaderInfo(
        "phone",
        "Phone",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ReturnUrl":
      return Table.makeHeaderInfo(
        "return_url",
        "ReturnUrl",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "AuthenticationType":
      return Table.makeHeaderInfo(
        "authentication_type",
        "Authentication Type",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "StatementDescriptorName":
      return Table.makeHeaderInfo(
        "statement_descriptor_name ",
        "Statement Descriptor Name ",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "StatementDescriptorSuffix":
      return Table.makeHeaderInfo(
        "statement_descriptor_suffix",
        "Statement Descriptor Suffix",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "NextAction":
      return Table.makeHeaderInfo(
        "next_action",
        "Next Action",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CancellationReason":
      return Table.makeHeaderInfo(
        "cancellation_reason",
        "Cancellation Reason",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ErrorCode":
      return Table.makeHeaderInfo(
        "error_code",
        "Error Code",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ErrorMessage":
      return Table.makeHeaderInfo(
        "error_message",
        "Error Message",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Metadata":
      return Table.makeHeaderInfo(
        "metadata",
        "Metadata",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CardNetwork":
      return Table.makeHeaderInfo(
        "CardNetwork",
        "Card Network",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "MerchantOrderReferenceId":
      return Table.makeHeaderInfo(
        "merchant_order_reference_id",
        "Merchant Order Reference Id",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "AttemptCount":
      return Table.makeHeaderInfo(
        "attempt_count",
        "Attempt count",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function useGetStatus(order) {
  var match = React.useContext(ThemeProvider.themeContext);
  var backgroundColor = match.globalUIConfig.backgroundColor;
  var orderStatusLabel = order.status.toUpperCase();
  var fixedStatusCss = "text-sm text-white font-bold px-3 py-2 rounded-md";
  var match$1 = HSwitchOrderUtils.statusVariantMapper(order.status);
  var exit = 0;
  switch (match$1) {
    case "Failed":
    case "Cancelled":
      exit = 2;
      break;
    case "Succeeded":
    case "PartiallyCaptured":
      exit = 1;
      break;
    default:
      return React.createElement(
        "div",
        {
          className: fixedStatusCss + " " + backgroundColor + " bg-opacity-50",
        },
        orderStatusLabel,
      );
  }
  switch (exit) {
    case 1:
      return React.createElement(
        "div",
        {
          className:
            fixedStatusCss + " bg-hyperswitch_green dark:bg-opacity-50",
        },
        orderStatusLabel,
      );
    case 2:
      return React.createElement(
        "div",
        {
          className: fixedStatusCss + " bg-red-960 dark:bg-opacity-50",
        },
        orderStatusLabel,
      );
  }
}

function getHeadingForSummary(summaryColType) {
  switch (summaryColType) {
    case "Created":
      return Table.makeHeaderInfo(
        "created",
        "Created",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "NetAmount":
      return Table.makeHeaderInfo(
        "net_amount",
        "Net Amount",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "LastUpdated":
      return Table.makeHeaderInfo(
        "last_updated",
        "Last Updated",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentId":
      return Table.makeHeaderInfo(
        "payment_id",
        "Payment ID",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Currency":
      return Table.makeHeaderInfo(
        "currency",
        "Currency",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "AmountReceived":
      return Table.makeHeaderInfo(
        "amount_received",
        "Amount Received",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        "Amount captured by the payment processor for this payment.",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ClientSecret":
      return Table.makeHeaderInfo(
        "client_secret",
        "Client Secret",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "OrderQuantity":
      return Table.makeHeaderInfo(
        "order_quantity",
        "Order Quantity",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ProductName":
      return Table.makeHeaderInfo(
        "product_name",
        "Product Name",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ErrorMessage":
      return Table.makeHeaderInfo(
        "error_message",
        "Error Message",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ConnectorTransactionID":
      return Table.makeHeaderInfo(
        "connector_transaction_id",
        "Connector Transaction ID",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getHeadingForAboutPayment(aboutPaymentColType) {
  switch (aboutPaymentColType) {
    case "Connector":
      return Table.makeHeaderInfo(
        "connector",
        "Preferred connector",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ProfileId":
      return Table.makeHeaderInfo(
        "profile_id",
        "Profile Id",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ProfileName":
      return Table.makeHeaderInfo(
        "profile_name",
        "Profile Name",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentMethod":
      return Table.makeHeaderInfo(
        "payment_method",
        "Payment Method",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentMethodType":
      return Table.makeHeaderInfo(
        "payment_method_type",
        "Payment Method Type",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CardBrand":
      return Table.makeHeaderInfo(
        "card_brand",
        "Card Brand",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ConnectorLabel":
      return Table.makeHeaderInfo(
        "connector_label",
        "Connector Label",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Refunds":
      return Table.makeHeaderInfo(
        "refunds",
        "Refunds",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "AuthenticationType":
      return Table.makeHeaderInfo(
        "authentication_type",
        "Auth Type",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CaptureMethod":
      return Table.makeHeaderInfo(
        "capture_method",
        "Capture Method",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CardNetwork":
      return Table.makeHeaderInfo(
        "CardNetwork",
        "Card Network",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getHeadingForOtherDetails(otherDetailsColType) {
  switch (otherDetailsColType) {
    case "MandateData":
      return Table.makeHeaderInfo(
        "mandate_data",
        "Mandate Data",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "AmountCapturable":
      return Table.makeHeaderInfo(
        "amount_capturable",
        "AmountCapturable",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ErrorCode":
      return Table.makeHeaderInfo(
        "error_code",
        "Error Code",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ShippingAddress":
      return Table.makeHeaderInfo(
        "shipping",
        "Address",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ShippingEmail":
      return Table.makeHeaderInfo(
        "shipping",
        "Email",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ShippingPhone":
      return Table.makeHeaderInfo(
        "shipping",
        "Phone",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "BillingAddress":
      return Table.makeHeaderInfo(
        "billing",
        "Address",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "BillingEmail":
      return Table.makeHeaderInfo(
        "billing_email",
        "Email",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "BillingPhone":
      return Table.makeHeaderInfo(
        "BillingPhone",
        "Phone",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PMBillingAddress":
      return Table.makeHeaderInfo(
        "payment_method_billing_address",
        "Billing Address",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PMBillingPhone":
      return Table.makeHeaderInfo(
        "payment_method_billing_phone",
        "Billing Phone",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PMBillingEmail":
      return Table.makeHeaderInfo(
        "payment_method_billing_email",
        "Billing Email",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Email":
      return Table.makeHeaderInfo(
        "email",
        "Customer Email",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "FirstName":
      return Table.makeHeaderInfo(
        "firstName",
        "First Name",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "LastName":
      return Table.makeHeaderInfo(
        "lastName",
        "Last Name",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Phone":
      return Table.makeHeaderInfo(
        "phone",
        "Customer Phone",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CustomerId":
      return Table.makeHeaderInfo(
        "customer_id",
        "Customer ID",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Description":
      return Table.makeHeaderInfo(
        "description",
        "Description",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "MerchantId":
      return Table.makeHeaderInfo(
        "merchant_id",
        "Merchant ID",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ReturnUrl":
      return Table.makeHeaderInfo(
        "return_url",
        "Return URL",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "OffSession":
      return Table.makeHeaderInfo(
        "off_session",
        "Off Session",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CaptureOn":
      return Table.makeHeaderInfo(
        "capture_on",
        "Capture On",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CaptureMethod":
      return Table.makeHeaderInfo(
        "capture_method",
        "Capture Method",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "NextAction":
      return Table.makeHeaderInfo(
        "next_action",
        "Next Action",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "SetupFutureUsage":
      return Table.makeHeaderInfo(
        "setup_future_usage",
        "Setup Future Usage",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CancellationReason":
      return Table.makeHeaderInfo(
        "cancellation_reason",
        "Cancellation Reason",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "StatementDescriptorName":
      return Table.makeHeaderInfo(
        "statement_descriptor_name",
        "Statement Descriptor Name",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "StatementDescriptorSuffix":
      return Table.makeHeaderInfo(
        "statement_descriptor_suffix",
        "Statement Descriptor Suffix",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentExperience":
      return Table.makeHeaderInfo(
        "payment_experience",
        "Payment Experience",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "FRMName":
      return Table.makeHeaderInfo(
        "frm_name",
        "Tag",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "FRMTransactionType":
      return Table.makeHeaderInfo(
        "frm_transaction_type",
        "Transaction Flow",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "FRMStatus":
      return Table.makeHeaderInfo(
        "frm_status",
        "Message",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "MerchantOrderReferenceId":
      return Table.makeHeaderInfo(
        "merchant_order_reference_id",
        "Merchant Order Reference Id",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getCellForSummary(order, summaryColType, param) {
  switch (summaryColType) {
    case "Created":
      return {
        TAG: "Date",
        _0: order.created,
      };
    case "NetAmount":
      return {
        TAG: "CustomCell",
        _0: React.createElement(OrderEntity$CurrencyCell, {
          amount: (order.net_amount / 100.0).toString(),
          currency: order.currency,
        }),
        _1: "",
      };
    case "LastUpdated":
      return {
        TAG: "Date",
        _0: order.last_updated,
      };
    case "PaymentId":
      return {
        TAG: "DisplayCopyCell",
        _0: order.payment_id,
      };
    case "Currency":
      return {
        TAG: "Text",
        _0: order.currency,
      };
    case "AmountReceived":
      return {
        TAG: "CustomCell",
        _0: React.createElement(OrderEntity$CurrencyCell, {
          amount: (order.amount_received / 100.0).toString(),
          currency: order.currency,
        }),
        _1: "",
      };
    case "ClientSecret":
      return {
        TAG: "Text",
        _0: order.client_secret,
      };
    case "OrderQuantity":
      return {
        TAG: "Text",
        _0: order.order_quantity,
      };
    case "ProductName":
      return {
        TAG: "Text",
        _0: order.product_name,
      };
    case "ErrorMessage":
      return {
        TAG: "Text",
        _0: order.error_message,
      };
    case "ConnectorTransactionID":
      return {
        TAG: "DisplayCopyCell",
        _0: order.connector_transaction_id,
      };
  }
}

function getCellForAboutPayment(order, aboutPaymentColType, connectorList) {
  switch (aboutPaymentColType) {
    case "Connector":
      return {
        TAG: "CustomCell",
        _0: React.createElement(HelperComponents.ConnectorCustomCell.make, {
          connectorName: order.connector,
        }),
        _1: "",
      };
    case "ProfileId":
      return {
        TAG: "Text",
        _0: order.profile_id,
      };
    case "ProfileName":
      return {
        TAG: "CustomCell",
        _0: React.createElement(
          HelperComponents.BusinessProfileComponent.make,
          {
            profile_id: order.profile_id,
          },
        ),
        _1: "",
      };
    case "PaymentMethod":
      return {
        TAG: "Text",
        _0: order.payment_method,
      };
    case "PaymentMethodType":
      return {
        TAG: "Text",
        _0: order.payment_method_type,
      };
    case "CardBrand":
      return {
        TAG: "Text",
        _0: order.card_brand,
      };
    case "ConnectorLabel":
      var connectorLabel = Core__Option.getOr(
        connectorList.find(function (ele) {
          return order.merchant_connector_id === ele.merchant_connector_id;
        }),
        ConnectorListMapper.getProcessorPayloadType({}),
      );
      return {
        TAG: "Text",
        _0: connectorLabel.connector_label,
      };
    case "Refunds":
      return {
        TAG: "Text",
        _0: order.refunds.length > 0 ? "Yes" : "No",
      };
    case "AuthenticationType":
      return {
        TAG: "Text",
        _0: order.authentication_type,
      };
    case "CaptureMethod":
      return {
        TAG: "Text",
        _0: order.capture_method,
      };
    case "CardNetwork":
      var val = order.payment_method_data;
      var dict = val !== undefined ? LogicUtils.getDictFromJsonObject(val) : {};
      return {
        TAG: "Text",
        _0: LogicUtils.getString(dict, "card_network", ""),
      };
  }
}

function getCellForOtherDetails(order, aboutPaymentColType, param) {
  var splittedName = order.name.split(" ");
  switch (aboutPaymentColType) {
    case "MandateData":
      return {
        TAG: "Text",
        _0: order.mandate_data,
      };
    case "AmountCapturable":
      return {
        TAG: "Currency",
        _0: order.amount_capturable / 100.0,
        _1: order.currency,
      };
    case "ErrorCode":
      return {
        TAG: "Text",
        _0: order.error_code,
      };
    case "ShippingAddress":
      return {
        TAG: "Text",
        _0: order.shipping,
      };
    case "ShippingEmail":
      return {
        TAG: "Text",
        _0: order.shippingEmail,
      };
    case "ShippingPhone":
      return {
        TAG: "Text",
        _0: order.shippingPhone,
      };
    case "BillingAddress":
      return {
        TAG: "Text",
        _0: order.billing,
      };
    case "BillingEmail":
      return {
        TAG: "Text",
        _0: order.billingEmail,
      };
    case "BillingPhone":
      return {
        TAG: "Text",
        _0: order.billingPhone,
      };
    case "PMBillingAddress":
      return {
        TAG: "Text",
        _0: order.payment_method_billing_address,
      };
    case "PMBillingPhone":
      return {
        TAG: "Text",
        _0: order.payment_method_billing_email,
      };
    case "PMBillingEmail":
      return {
        TAG: "Text",
        _0: order.payment_method_billing_phone,
      };
    case "Email":
      return {
        TAG: "Text",
        _0: order.email,
      };
    case "FirstName":
      return {
        TAG: "Text",
        _0: Core__Option.getOr(splittedName[0], ""),
      };
    case "LastName":
      return {
        TAG: "Text",
        _0: Core__Option.getOr(splittedName[(splittedName.length - 1) | 0], ""),
      };
    case "Phone":
      return {
        TAG: "Text",
        _0: order.phone,
      };
    case "CustomerId":
      return {
        TAG: "Text",
        _0: order.customer_id,
      };
    case "Description":
      return {
        TAG: "Text",
        _0: order.description,
      };
    case "MerchantId":
      return {
        TAG: "Text",
        _0: order.merchant_id,
      };
    case "ReturnUrl":
      return {
        TAG: "Text",
        _0: order.return_url,
      };
    case "OffSession":
      return {
        TAG: "Text",
        _0: order.off_session,
      };
    case "CaptureOn":
      return {
        TAG: "Date",
        _0: order.off_session,
      };
    case "CaptureMethod":
      return {
        TAG: "Text",
        _0: order.capture_method,
      };
    case "NextAction":
      return {
        TAG: "Text",
        _0: order.next_action,
      };
    case "SetupFutureUsage":
      return {
        TAG: "Text",
        _0: order.setup_future_usage,
      };
    case "CancellationReason":
      return {
        TAG: "Text",
        _0: order.cancellation_reason,
      };
    case "StatementDescriptorName":
      return {
        TAG: "Text",
        _0: order.statement_descriptor_name,
      };
    case "StatementDescriptorSuffix":
      return {
        TAG: "Text",
        _0: order.statement_descriptor_suffix,
      };
    case "PaymentExperience":
      return {
        TAG: "Text",
        _0: order.payment_experience,
      };
    case "FRMName":
      return {
        TAG: "Text",
        _0: order.frm_message.frm_name,
      };
    case "FRMTransactionType":
      return {
        TAG: "Text",
        _0: order.frm_message.frm_transaction_type,
      };
    case "FRMStatus":
      return {
        TAG: "Text",
        _0: order.frm_message.frm_status,
      };
    case "MerchantOrderReferenceId":
      return {
        TAG: "Text",
        _0: order.merchant_order_reference_id,
      };
  }
}

function getCell(order, colType) {
  var orderStatus = HSwitchOrderUtils.statusVariantMapper(order.status);
  switch (colType) {
    case "PaymentId":
      return {
        TAG: "Text",
        _0: order.payment_id,
      };
    case "MerchantId":
      return {
        TAG: "Text",
        _0: order.merchant_id,
      };
    case "Status":
      var tmp;
      switch (orderStatus) {
        case "Failed":
        case "Cancelled":
          tmp = "LabelRed";
          break;
        case "Succeeded":
        case "PartiallyCaptured":
          tmp = "LabelGreen";
          break;
        default:
          tmp = "LabelLightBlue";
      }
      return {
        TAG: "Label",
        _0: {
          title: order.status.toUpperCase(),
          color: tmp,
        },
      };
    case "Amount":
      return {
        TAG: "CustomCell",
        _0: React.createElement(OrderEntity$CurrencyCell, {
          amount: (order.amount / 100.0).toString(),
          currency: order.currency,
        }),
        _1: "",
      };
    case "AmountCapturable":
      return {
        TAG: "Currency",
        _0: order.amount_capturable / 100.0,
        _1: order.currency,
      };
    case "AmountReceived":
      return {
        TAG: "Currency",
        _0: order.amount_received / 100.0,
        _1: order.currency,
      };
    case "ProfileId":
      return {
        TAG: "Text",
        _0: order.profile_id,
      };
    case "Connector":
      return {
        TAG: "CustomCell",
        _0: React.createElement(HelperComponents.ConnectorCustomCell.make, {
          connectorName: order.connector,
        }),
        _1: "",
      };
    case "ConnectorTransactionID":
      return {
        TAG: "Text",
        _0: order.connector_transaction_id,
      };
    case "ClientSecret":
      return {
        TAG: "Text",
        _0: order.client_secret,
      };
    case "Created":
      return {
        TAG: "Date",
        _0: order.created,
      };
    case "Currency":
      return {
        TAG: "Text",
        _0: order.currency,
      };
    case "CustomerId":
      return {
        TAG: "Text",
        _0: order.customer_id,
      };
    case "Description":
      return {
        TAG: "CustomCell",
        _0: React.createElement(Metadata.make, {
          displayValue: order.description,
          endValue: 5,
        }),
        _1: "",
      };
    case "Refunds":
      var v = JSON.stringify(order.refunds);
      return {
        TAG: "Text",
        _0: v !== undefined ? v : "-",
      };
    case "MandateId":
      return {
        TAG: "Text",
        _0: order.mandate_id,
      };
    case "MandateData":
      return {
        TAG: "Text",
        _0: order.mandate_data,
      };
    case "SetupFutureUsage":
      return {
        TAG: "Text",
        _0: order.setup_future_usage,
      };
    case "OffSession":
      return {
        TAG: "Text",
        _0: order.off_session,
      };
    case "CaptureOn":
      return {
        TAG: "Date",
        _0: order.off_session,
      };
    case "CaptureMethod":
      return {
        TAG: "Text",
        _0: order.capture_method,
      };
    case "PaymentMethod":
      return {
        TAG: "Text",
        _0: order.payment_method,
      };
    case "PaymentMethodType":
      return {
        TAG: "Text",
        _0: order.payment_method_type,
      };
    case "PaymentMethodData":
      return {
        TAG: "Text",
        _0: Core__Option.getOr(JSON.stringify(order.payment_method_data), ""),
      };
    case "PaymentToken":
      return {
        TAG: "Text",
        _0: order.payment_token,
      };
    case "Shipping":
      return {
        TAG: "Text",
        _0: order.shipping,
      };
    case "Billing":
      return {
        TAG: "Text",
        _0: order.billing,
      };
    case "Email":
      return {
        TAG: "Text",
        _0: order.email,
      };
    case "Name":
      return {
        TAG: "Text",
        _0: order.name,
      };
    case "Phone":
      return {
        TAG: "Text",
        _0: order.phone,
      };
    case "ReturnUrl":
      return {
        TAG: "Text",
        _0: order.return_url,
      };
    case "AuthenticationType":
      return {
        TAG: "Text",
        _0: order.authentication_type,
      };
    case "StatementDescriptorName":
      return {
        TAG: "Text",
        _0: order.statement_descriptor_name,
      };
    case "StatementDescriptorSuffix":
      return {
        TAG: "Text",
        _0: order.statement_descriptor_suffix,
      };
    case "NextAction":
      return {
        TAG: "Text",
        _0: order.next_action,
      };
    case "CancellationReason":
      return {
        TAG: "Text",
        _0: order.cancellation_reason,
      };
    case "ErrorCode":
      return {
        TAG: "Text",
        _0: order.error_code,
      };
    case "ErrorMessage":
      return {
        TAG: "Text",
        _0: order.error_message,
      };
    case "Metadata":
      return {
        TAG: "CustomCell",
        _0: React.createElement(Metadata.make, {
          displayValue: JSON.stringify(order.metadata),
        }),
        _1: "",
      };
    case "CardNetwork":
      var val = order.payment_method_data;
      var dict = val !== undefined ? LogicUtils.getDictFromJsonObject(val) : {};
      return {
        TAG: "Text",
        _0: LogicUtils.getString(dict, "card_network", ""),
      };
    case "MerchantOrderReferenceId":
      return {
        TAG: "Text",
        _0: order.merchant_order_reference_id,
      };
    case "AttemptCount":
      return {
        TAG: "Text",
        _0: order.attempt_count.toString(),
      };
  }
}

function itemToObjMapperForFRMDetails(dict) {
  return {
    frm_name: LogicUtils.getString(dict, "frm_name", ""),
    frm_transaction_id: LogicUtils.getString(dict, "frm_transaction_id", ""),
    frm_transaction_type: LogicUtils.getString(
      dict,
      "frm_transaction_type",
      "",
    ),
    frm_status: LogicUtils.getString(dict, "frm_status", ""),
    frm_score: LogicUtils.getInt(dict, "frm_score", 0),
    frm_reason: LogicUtils.getString(dict, "frm_reason", ""),
    frm_error: LogicUtils.getString(dict, "frm_error", ""),
  };
}

function getFRMDetails(dict) {
  return itemToObjMapperForFRMDetails(
    LogicUtils.getDictFromJsonObject(
      LogicUtils.getJsonObjectFromDict(dict, "frm_message"),
    ),
  );
}

function concatValueOfGivenKeysOfDict(dict, keys) {
  return Core__Array.reduceWithIndex(keys, "", function (acc, key, i) {
    var val = LogicUtils.getString(dict, key, "");
    var delimiter = LogicUtils.isNonEmptyString(val)
      ? key !== "first_name"
        ? ((i + 1) | 0) === keys.length
          ? "."
          : ", "
        : " "
      : "";
    return acc.concat(val + delimiter);
  });
}

function itemToObjMapper(dict) {
  var addressKeys = [
    "line1",
    "line2",
    "line3",
    "city",
    "state",
    "country",
    "zip",
  ];
  var getPhoneNumberString = function (phone, phoneKeyOpt, codeKeyOpt, param) {
    var phoneKey = phoneKeyOpt !== undefined ? phoneKeyOpt : "number";
    var codeKey = codeKeyOpt !== undefined ? codeKeyOpt : "country_code";
    return (
      LogicUtils.getString(phone, codeKey, "") +
      " " +
      LogicUtils.getString(phone, phoneKey, "NA")
    );
  };
  var getEmail = function (dict) {
    var defaultEmail = LogicUtils.getString(dict, "email", "");
    return LogicUtils.getString(
      LogicUtils.getDictfromDict(dict, "customer"),
      "email",
      defaultEmail,
    );
  };
  var paymentMethodData = LogicUtils.getJsonObjectFromDict(
    dict,
    "payment_method_data",
  );
  var value = Core__JSON.Classify.classify(paymentMethodData);
  var tmp;
  tmp =
    typeof value !== "object" || value.TAG !== "Object"
      ? undefined
      : LogicUtils.getJsonObjectFromDict(value._0, "card");
  var externalAuthenticationDetails = LogicUtils.getJsonObjectFromDict(
    dict,
    "external_authentication_details",
  );
  var match = Core__JSON.Classify.classify(externalAuthenticationDetails);
  var tmp$1;
  tmp$1 =
    typeof match !== "object" || match.TAG !== "Object"
      ? undefined
      : externalAuthenticationDetails;
  var json = LogicUtils.getArrayFromDict(dict, "attempts", []);
  return {
    payment_id: LogicUtils.getString(dict, "payment_id", ""),
    merchant_id: LogicUtils.getString(dict, "merchant_id", ""),
    net_amount: LogicUtils.getFloat(dict, "net_amount", 0.0),
    status: LogicUtils.getString(dict, "status", ""),
    amount: LogicUtils.getFloat(dict, "amount", 0.0),
    amount_capturable: LogicUtils.getFloat(dict, "amount_capturable", 0.0),
    amount_received: LogicUtils.getFloat(dict, "amount_received", 0.0),
    client_secret: LogicUtils.getString(dict, "client_secret", ""),
    created: LogicUtils.getString(dict, "created", ""),
    last_updated: LogicUtils.getString(dict, "last_updated", ""),
    currency: LogicUtils.getString(dict, "currency", ""),
    customer_id: LogicUtils.getString(dict, "customer_id", ""),
    description: LogicUtils.getString(dict, "description", ""),
    refunds: LogicUtils.getArrayDataFromJson(
      LogicUtils.getArrayFromDict(dict, "refunds", []),
      refunditemToObjMapper,
    ),
    mandate_id: LogicUtils.getString(dict, "mandate_id", ""),
    mandate_data: LogicUtils.getString(dict, "mandate_data", ""),
    setup_future_usage: LogicUtils.getString(dict, "setup_future_usage", ""),
    off_session: LogicUtils.getString(dict, "off_session", ""),
    capture_on: LogicUtils.getString(dict, "capture_on", ""),
    capture_method: LogicUtils.getString(dict, "capture_method", ""),
    payment_method: LogicUtils.getString(dict, "payment_method", ""),
    payment_method_type: LogicUtils.getString(dict, "payment_method_type", ""),
    payment_method_data: tmp,
    external_authentication_details: tmp$1,
    payment_token: LogicUtils.getString(dict, "payment_token", ""),
    shipping: concatValueOfGivenKeysOfDict(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictfromDict(dict, "shipping"),
        "address",
      ),
      addressKeys,
    ),
    shippingEmail: LogicUtils.getString(
      LogicUtils.getDictfromDict(dict, "shipping"),
      "email",
      "",
    ),
    shippingPhone: getPhoneNumberString(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictfromDict(dict, "shipping"),
        "phone",
      ),
      undefined,
      undefined,
      undefined,
    ),
    billing: concatValueOfGivenKeysOfDict(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictfromDict(dict, "billing"),
        "address",
      ),
      addressKeys,
    ),
    billingEmail: LogicUtils.getString(
      LogicUtils.getDictfromDict(dict, "billing"),
      "email",
      "",
    ),
    billingPhone: getPhoneNumberString(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictfromDict(dict, "billing"),
        "phone",
      ),
      undefined,
      undefined,
      undefined,
    ),
    payment_method_billing_address: concatValueOfGivenKeysOfDict(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictfromDict(
          LogicUtils.getDictfromDict(dict, "payment_method_data"),
          "billing",
        ),
        "address",
      ),
      addressKeys,
    ),
    payment_method_billing_phone: LogicUtils.getString(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictfromDict(dict, "payment_method_data"),
        "billing",
      ),
      "email",
      "",
    ),
    payment_method_billing_email: LogicUtils.getString(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictfromDict(dict, "payment_method_data"),
        "billing",
      ),
      "",
      "",
    ),
    metadata: LogicUtils.getDictFromJsonObject(
      LogicUtils.getJsonObjectFromDict(dict, "metadata"),
    ),
    email: getEmail(dict),
    name: LogicUtils.getString(dict, "name", ""),
    phone: getPhoneNumberString(
      LogicUtils.getDictfromDict(dict, "customer"),
      "phone",
      "phone_country_code",
      undefined,
    ),
    return_url: LogicUtils.getString(dict, "return_url", ""),
    authentication_type: LogicUtils.getString(dict, "authentication_type", ""),
    statement_descriptor_name: LogicUtils.getString(
      dict,
      "statement_descriptor_name",
      "",
    ),
    statement_descriptor_suffix: LogicUtils.getString(
      dict,
      "statement_descriptor_suffix",
      "",
    ),
    next_action: LogicUtils.getString(dict, "next_action", ""),
    cancellation_reason: LogicUtils.getString(dict, "cancellation_reason", ""),
    error_code: LogicUtils.getString(dict, "error_code", ""),
    error_message: LogicUtils.getString(dict, "error_message", ""),
    connector: LogicUtils.getString(dict, "connector", ""),
    order_quantity: LogicUtils.getString(dict, "order_quantity", ""),
    product_name: LogicUtils.getString(dict, "product_name", ""),
    card_brand: LogicUtils.getString(dict, "card_brand", ""),
    payment_experience: LogicUtils.getString(dict, "payment_experience", ""),
    frm_message: getFRMDetails(dict),
    connector_transaction_id: LogicUtils.getString(
      dict,
      "connector_transaction_id",
      "",
    ),
    merchant_connector_id: LogicUtils.getString(
      dict,
      "merchant_connector_id",
      "",
    ),
    merchant_decision: LogicUtils.getString(dict, "merchant_decision", ""),
    profile_id: LogicUtils.getString(dict, "profile_id", ""),
    disputes: DisputesEntity.getDisputes(
      LogicUtils.getArrayFromDict(dict, "disputes", []),
    ),
    attempts: LogicUtils.getArrayDataFromJson(json, attemptsItemToObjMapper),
    merchant_order_reference_id: LogicUtils.getString(
      dict,
      "merchant_order_reference_id",
      "",
    ),
    attempt_count: LogicUtils.getInt(dict, "attempt_count", 0),
  };
}

function getOrders(json) {
  return LogicUtils.getArrayDataFromJson(json, itemToObjMapper);
}

var orderEntity = EntityType.makeEntity(
  "",
  getOrders,
  defaultColumns,
  allColumns,
  getHeading,
  getCell,
  "",
  undefined,
  undefined,
  undefined,
  undefined,
  function (order) {
    return GlobalVars.appendDashboardPath("/payments/" + order.payment_id);
  },
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

export {
  CurrencyCell,
  getRefundCell,
  getAttemptCell,
  getFrmCell,
  getAuthenticationCell,
  refundColumns,
  attemptsColumns,
  frmColumns,
  authenticationColumns,
  refundDetailsFields,
  attemptDetailsField,
  getRefundHeading,
  getAttemptHeading,
  getFrmHeading,
  getAuthenticationHeading,
  refundMetaitemToObjMapper,
  getRefundMetaData,
  refunditemToObjMapper,
  attemptsItemToObjMapper,
  getRefunds,
  getAttempts,
  defaultColumns,
  allColumns,
  getHeading,
  useGetStatus,
  getHeadingForSummary,
  getHeadingForAboutPayment,
  getHeadingForOtherDetails,
  getCellForSummary,
  getCellForAboutPayment,
  getCellForOtherDetails,
  getCell,
  itemToObjMapperForFRMDetails,
  getFRMDetails,
  concatValueOfGivenKeysOfDict,
  itemToObjMapper,
  getOrders,
  orderEntity,
};
/* orderEntity Not a pure module */
