// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Modal from "../../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as ToolTip from "../../components/tooltip/ToolTip.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as ACLButton from "../../components/ACLButton.bs.js";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as OrderUtils from "../../components/OrderUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../components/custom-icons/GatewayIcon.bs.js";
import * as LogsWrapper from "../Analytics/Logs/LogUtils/LogsWrapper.bs.js";
import * as NoDataFound from "../../components/NoDataFound.bs.js";
import * as OrderEntity from "./OrderEntity.bs.js";
import * as PaymentLogs from "../Analytics/Logs/PaymentLogs/PaymentLogs.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as OrderUIUtils from "./OrderUIUtils.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as DisputesEntity from "../Disputes/DisputesEntity.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as OrderRefundForm from "./OrderRefundForm.bs.js";
import * as PrettyPrintJson from "../Analytics/Logs/LogUtils/PrettyPrintJson.bs.js";
import * as HSwitchOrderUtils from "./HSwitchOrderUtils.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as BreadCrumbNavigation from "../../utils/BreadCrumbNavigation.bs.js";
import * as CustomExpandableTable from "../../components/CustomExpandableTable.bs.js";

function ShowOrder$ShowOrderDetails(props) {
  var sectionTitle = props.sectionTitle;
  var __border = props.border;
  var connectorList = props.connectorList;
  var openRefundModal = props.openRefundModal;
  var __isButtonEnabled = props.isButtonEnabled;
  var __bgColor = props.bgColor;
  var __widthClass = props.widthClass;
  var __justifyClassName = props.justifyClassName;
  var getCell = props.getCell;
  var getHeading = props.getHeading;
  var data = props.data;
  var justifyClassName =
    __justifyClassName !== undefined ? __justifyClassName : "justify-start";
  var widthClass =
    __widthClass !== undefined ? __widthClass : "md:w-1/2 w-full";
  var bgColor =
    __bgColor !== undefined
      ? __bgColor
      : "bg-white dark:bg-jp-gray-lightgray_background";
  var isButtonEnabled =
    __isButtonEnabled !== undefined ? __isButtonEnabled : false;
  var border =
    __border !== undefined
      ? __border
      : "border border-jp-gray-940 border-opacity-75 dark:border-jp-gray-960";
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var typedPaymentStatus = HSwitchOrderUtils.statusVariantMapper(
    props.paymentStatus,
  );
  var statusUI = OrderEntity.useGetStatus(data);
  return React.createElement(
    OrderUtils.Section.make,
    {
      children: null,
      customCssClass: border + " " + bgColor + " rounded-md px-5 pt-5 h-full",
    },
    sectionTitle !== undefined
      ? React.createElement(
          "div",
          {
            className:
              "font-bold text-base ml-4 mb-3 opacity-70 underline underline-offset-4",
          },
          sectionTitle,
        )
      : null,
    React.createElement(RenderIf.make, {
      condition: isButtonEnabled,
      children: React.createElement(
        "div",
        {
          className: "flex items-center flex-wrap gap-3 m-3",
        },
        React.createElement(
          "div",
          {
            className: "flex items-start",
          },
          React.createElement(
            "div",
            {
              className: "md:text-5xl font-bold",
            },
            (data.amount / 100.0).toString() + " " + data.currency + " ",
          ),
          React.createElement(ToolTip.make, {
            description: "Original amount that was authorized for the payment",
            toolTipFor: Caml_option.some(
              React.createElement(Icon.make, {
                name: "tooltip_info",
                className: "mt-1 ml-1",
              }),
            ),
            tooltipWidthClass: "w-fit",
            toolTipPosition: "Top",
          }),
        ),
        statusUI,
        React.createElement(ACLButton.make, {
          text: "+ Refund",
          buttonState:
            !props.isNonRefundConnector &&
            (typedPaymentStatus === "Succeeded" ||
              typedPaymentStatus === "PartiallyCaptured") &&
            !HSwitchOrderUtils.isTestData(props.paymentId)
              ? "Normal"
              : "Disabled",
          buttonType: "Secondary",
          onClick: function (param) {
            openRefundModal();
          },
          access: userPermissionJson.operationsManage,
        }),
      ),
    }),
    React.createElement(FormRenderer.DesktopRow.make, {
      children: React.createElement(
        "div",
        {
          className:
            "flex flex-wrap " +
            justifyClassName +
            " dark:bg-jp-gray-lightgray_background dark:border-jp-gray-no_data_border",
        },
        props.detailsFields.map(function (colType, i) {
          return React.createElement(
            "div",
            {
              key: i.toString(),
              className: widthClass,
            },
            React.createElement(OrderUtils.DisplayKeyValueParams.make, {
              heading: getHeading(colType),
              value: getCell(
                data,
                colType,
                Core__Option.getOr(connectorList, []),
              ),
              customMoneyStyle: "!font-normal !text-sm",
              labelMargin: "!py-0 mt-2",
              textColor: "!font-normal !text-jp-gray-700",
              overiddingHeadingStyles: "text-black text-sm font-medium",
            }),
          );
        }),
      ),
    }),
  );
}

var ShowOrderDetails = {
  make: ShowOrder$ShowOrderDetails,
};

function ShowOrder$OrderInfo(props) {
  var paymentId = props.paymentId;
  var isNonRefundConnector = props.isNonRefundConnector;
  var openRefundModal = props.openRefundModal;
  var order = props.order;
  var paymentStatus = order.status;
  var headingStyles = "font-bold text-lg mb-5";
  var connectorList = Recoil.useRecoilValue(HyperswitchAtom.connectorListAtom);
  return React.createElement(
    "div",
    {
      className: "md:flex md:flex-col md:gap-5",
    },
    React.createElement(
      "div",
      {
        className: "md:flex md:gap-10 md:items-stretch md:mt-5 mb-10",
      },
      React.createElement(
        "div",
        {
          className: "md:w-1/2 w-full",
        },
        React.createElement(
          "div",
          {
            className: headingStyles,
          },
          "Summary",
        ),
        React.createElement(ShowOrder$ShowOrderDetails, {
          data: order,
          getHeading: OrderEntity.getHeadingForSummary,
          getCell: OrderEntity.getCellForSummary,
          detailsFields: [
            "Created",
            "LastUpdated",
            "AmountReceived",
            "PaymentId",
            "ConnectorTransactionID",
            "ErrorMessage",
          ],
          isButtonEnabled: true,
          isNonRefundConnector: isNonRefundConnector,
          paymentStatus: paymentStatus,
          openRefundModal: openRefundModal,
          paymentId: paymentId,
        }),
      ),
      React.createElement(
        "div",
        {
          className: "md:w-1/2 w-full",
        },
        React.createElement(
          "div",
          {
            className: headingStyles,
          },
          "About Payment",
        ),
        React.createElement(ShowOrder$ShowOrderDetails, {
          data: order,
          getHeading: OrderEntity.getHeadingForAboutPayment,
          getCell: OrderEntity.getCellForAboutPayment,
          detailsFields: [
            "ProfileId",
            "ProfileName",
            "Connector",
            "ConnectorLabel",
            "PaymentMethodType",
            "PaymentMethod",
            "AuthenticationType",
            "CardNetwork",
          ],
          isNonRefundConnector: isNonRefundConnector,
          paymentStatus: paymentStatus,
          openRefundModal: openRefundModal,
          paymentId: paymentId,
          connectorList: connectorList,
        }),
      ),
    ),
  );
}

var OrderInfo = {
  make: ShowOrder$OrderInfo,
};

function ShowOrder$RefundSection(props) {
  return React.createElement(
    "div",
    {
      className: "flex flex-row flex-wrap",
    },
    React.createElement(
      "div",
      {
        className: "w-full p-2",
      },
      React.createElement(OrderUtils.Details.make, {
        heading: {
          TAG: "String",
          _0: "Refund Details",
        },
        data: props.data,
        getHeading: OrderEntity.getRefundHeading,
        getCell: OrderEntity.getRefundCell,
        detailsFields: OrderEntity.refundDetailsFields,
        widthClass: "w-1/3",
      }),
    ),
  );
}

var RefundSection = {
  make: ShowOrder$RefundSection,
};

function ShowOrder$AttemptsSection(props) {
  return React.createElement(
    "div",
    {
      className: "flex flex-row flex-wrap",
    },
    React.createElement(
      "div",
      {
        className: "w-full p-2",
      },
      React.createElement(OrderUtils.Details.make, {
        heading: {
          TAG: "String",
          _0: "Attempt Details",
        },
        data: props.data,
        getHeading: OrderEntity.getAttemptHeading,
        getCell: OrderEntity.getAttemptCell,
        detailsFields: OrderEntity.attemptDetailsField,
        widthClass: "w-1/3",
      }),
    ),
  );
}

var AttemptsSection = {
  make: ShowOrder$AttemptsSection,
};

function ShowOrder$DisputesSection(props) {
  return React.createElement(
    "div",
    {
      className: "flex flex-row flex-wrap",
    },
    React.createElement(
      "div",
      {
        className: "w-1/2 p-2",
      },
      React.createElement(OrderUtils.Details.make, {
        heading: {
          TAG: "String",
          _0: "Dispute Details",
        },
        data: props.data,
        getHeading: DisputesEntity.getHeading,
        getCell: DisputesEntity.getCell,
        detailsFields: DisputesEntity.columnsInPaymentPage,
        widthClass: "w-4/12",
      }),
    ),
  );
}

var DisputesSection = {
  make: ShowOrder$DisputesSection,
};

function ShowOrder$Refunds(props) {
  var refundData = props.refundData;
  var match = React.useState(function () {
    return [-1];
  });
  var setExpandedRowIndexArray = match[1];
  var expandedRowIndexArray = match[0];
  var heading = OrderEntity.refundColumns.map(OrderEntity.getRefundHeading);
  React.useEffect(function () {}, [-1]);
  var onExpandIconClick = function (isCurrentRowExpanded, rowIndex) {
    if (isCurrentRowExpanded) {
      var indexOfRemovalItem = expandedRowIndexArray.findIndex(function (item) {
        return item === rowIndex;
      });
      return setExpandedRowIndexArray(function (param) {
        var array = expandedRowIndexArray.map(function (item) {
          return item;
        });
        array.splice(indexOfRemovalItem, 1);
        return array;
      });
    } else {
      return setExpandedRowIndexArray(function (param) {
        return [rowIndex];
      });
    }
  };
  var rows = refundData.map(function (item) {
    return OrderEntity.refundColumns.map(function (colType) {
      return OrderEntity.getRefundCell(item, colType);
    });
  });
  var getRowDetails = function (rowIndex) {
    var data = refundData[rowIndex];
    if (data !== undefined) {
      return React.createElement(ShowOrder$RefundSection, {
        data: data,
      });
    } else {
      return null;
    }
  };
  return React.createElement(CustomExpandableTable.make, {
    title: "Refunds",
    heading: heading,
    rows: rows,
    onExpandIconClick: onExpandIconClick,
    expandedRowIndexArray: expandedRowIndexArray,
    getRowDetails: getRowDetails,
    showSerial: true,
  });
}

var Refunds = {
  make: ShowOrder$Refunds,
};

function ShowOrder$Attempts(props) {
  var match = React.useState(function () {
    return [-1];
  });
  var setExpandedRowIndexArray = match[1];
  var expandedRowIndexArray = match[0];
  React.useEffect(function () {}, [-1]);
  var onExpandIconClick = function (isCurrentRowExpanded, rowIndex) {
    if (isCurrentRowExpanded) {
      var indexOfRemovalItem = expandedRowIndexArray.findIndex(function (item) {
        return item === rowIndex;
      });
      return setExpandedRowIndexArray(function (param) {
        var array = expandedRowIndexArray.map(function (item) {
          return item;
        });
        array.splice(indexOfRemovalItem, 1);
        return array;
      });
    } else {
      return setExpandedRowIndexArray(function (param) {
        return [rowIndex];
      });
    }
  };
  var attemptsData = props.order.attempts.toSorted(function (a, b) {
    var rowValue_a = a.attempt_id;
    var rowValue_b = b.attempt_id;
    if (rowValue_a <= rowValue_b) {
      return 1;
    } else {
      return -1;
    }
  });
  var heading = OrderEntity.attemptsColumns.map(OrderEntity.getAttemptHeading);
  var rows = attemptsData.map(function (item) {
    return OrderEntity.attemptsColumns.map(function (colType) {
      return OrderEntity.getAttemptCell(item, colType);
    });
  });
  var getRowDetails = function (rowIndex) {
    var data = attemptsData[rowIndex];
    if (data !== undefined) {
      return React.createElement(ShowOrder$AttemptsSection, {
        data: data,
      });
    } else {
      return null;
    }
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-4",
    },
    React.createElement(
      "p",
      {
        className: "font-bold text-fs-16 text-jp-gray-900",
      },
      "Payment Attempts",
    ),
    React.createElement(CustomExpandableTable.make, {
      title: "Attempts",
      heading: heading,
      rows: rows,
      onExpandIconClick: onExpandIconClick,
      expandedRowIndexArray: expandedRowIndexArray,
      getRowDetails: getRowDetails,
      showSerial: true,
    }),
  );
}

var Attempts = {
  make: ShowOrder$Attempts,
};

function ShowOrder$Disputes(props) {
  var disputesData = props.disputesData;
  var match = React.useState(function () {
    return [-1];
  });
  var setExpandedRowIndexArray = match[1];
  var expandedRowIndexArray = match[0];
  var heading = DisputesEntity.columnsInPaymentPage.map(
    DisputesEntity.getHeading,
  );
  React.useEffect(function () {}, [-1]);
  var onExpandIconClick = function (isCurrentRowExpanded, rowIndex) {
    if (isCurrentRowExpanded) {
      var indexOfRemovalItem = expandedRowIndexArray.findIndex(function (item) {
        return item === rowIndex;
      });
      return setExpandedRowIndexArray(function (param) {
        var array = expandedRowIndexArray.map(function (item) {
          return item;
        });
        array.splice(indexOfRemovalItem, 1);
        return array;
      });
    } else {
      return setExpandedRowIndexArray(function (param) {
        return [rowIndex];
      });
    }
  };
  var rows = disputesData.map(function (item) {
    return DisputesEntity.columnsInPaymentPage.map(function (colType) {
      return DisputesEntity.getCell(item, colType);
    });
  });
  var getRowDetails = function (rowIndex) {
    var data = disputesData[rowIndex];
    if (data !== undefined) {
      return React.createElement(ShowOrder$DisputesSection, {
        data: data,
      });
    } else {
      return null;
    }
  };
  return React.createElement(CustomExpandableTable.make, {
    title: "Disputes",
    heading: heading,
    rows: rows,
    onExpandIconClick: onExpandIconClick,
    expandedRowIndexArray: expandedRowIndexArray,
    getRowDetails: getRowDetails,
    showSerial: true,
  });
}

var Disputes = {
  make: ShowOrder$Disputes,
};

function ShowOrder$OrderActions(props) {
  var setShowModal = props.setShowModal;
  var orderData = props.orderData;
  var match = React.useState(function () {
    return 0.0;
  });
  var setAmoutAvailableToRefund = match[1];
  var refundData = orderData.refunds;
  var amountRefunded = {
    contents: 0.0,
  };
  var requestedRefundAmount = {
    contents: 0.0,
  };
  refundData.map(function (ele) {
    if (ele.status === "pending") {
      requestedRefundAmount.contents =
        requestedRefundAmount.contents + ele.amount;
      return;
    } else if (ele.status === "succeeded") {
      amountRefunded.contents = amountRefunded.contents + ele.amount;
      return;
    } else {
      return;
    }
  });
  React.useEffect(
    function () {
      setAmoutAvailableToRefund(function (param) {
        return (
          orderData.amount / 100.0 -
          amountRefunded.contents / 100.0 -
          requestedRefundAmount.contents / 100.0
        );
      });
    },
    [orderData],
  );
  return React.createElement(
    "div",
    {
      className: "flex flex-row justify-right gap-2",
    },
    React.createElement(Modal.make, {
      showModal: props.showModal,
      setShowModal: setShowModal,
      children: React.createElement(OrderRefundForm.make, {
        order: orderData,
        setShowModal: setShowModal,
        requestedRefundAmount: requestedRefundAmount,
        amountRefunded: amountRefunded,
        amoutAvailableToRefund: match[0],
        refetch: props.refetch,
      }),
      bgClass: "bg-white dark:bg-jp-gray-darkgray_background",
      modalClass:
        "w-fit absolute top-0 lg:top-0 md:top-1/3 left-0 lg:left-1/3 md:left-1/3 md:w-4/12 mt-10",
      childClass: "",
      borderBottom: true,
    }),
  );
}

var OrderActions = {
  make: ShowOrder$OrderActions,
};

function ShowOrder$FraudRiskBannerDetails(props) {
  var refetch = props.refetch;
  var order = props.order;
  var getURL = APIUtils.useGetURL();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast();
  var showPopUp = PopUpState.useShowPopUp();
  var updateMerchantDecision = async function (decision) {
    try {
      var ordersDecisionUrl =
        getURL(
          "ORDERS",
          "Get",
          Caml_option.some(order.payment_id),
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ) +
        "/" +
        decision.toLowerCase();
      await updateDetails(
        ordersDecisionUrl,
        {},
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      showToast(
        "Details Updated",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      refetch();
      return;
    } catch (exn) {
      return;
    }
  };
  var openPopUp = function (decision) {
    showPopUp({
      heading: "Confirm Action?",
      description:
        decision === "APPROVE"
          ? "This transaction was deemed fraudulent, to confirm that this is a legitimate transaction and submit it for review in their feedback loop, kindly confirm."
          : "Please confirm if you will like to refund the payment.",
      popUpType: ["Warning", "WithIcon"],
      handleCancel: {
        text: "Cancel",
      },
      handleConfirm: {
        text: "Confirm",
        onClick: function (param) {
          updateMerchantDecision(decision.toLowerCase());
        },
      },
    });
  };
  return React.createElement(
    "div",
    {
      className:
        "w-full bg-white dark:bg-jp-gray-lightgray_background rounded-md px-4 pb-5 h-full",
    },
    React.createElement(
      "div",
      {
        className:
          "flex flex-wrap dark:bg-jp-gray-lightgray_background dark:border-jp-gray-no_data_border",
      },
      OrderEntity.frmColumns.map(function (colType, i) {
        return React.createElement(
          "div",
          {
            key: i.toString(),
            className: "w-1/3",
          },
          React.createElement(OrderUtils.DisplayKeyValueParams.make, {
            heading: OrderEntity.getFrmHeading(colType),
            value: OrderEntity.getFrmCell(order, colType),
            customMoneyStyle: "!font-normal !text-sm",
            labelMargin: "!py-0 mt-2",
            textColor: "!font-normal !text-jp-gray-700",
            overiddingHeadingStyles: "text-black text-sm font-medium",
          }),
        );
      }),
    ),
    React.createElement(RenderIf.make, {
      condition:
        order.merchant_decision.length === 0 &&
        order.frm_message.frm_status === "fraud" &&
        HSwitchOrderUtils.statusVariantMapper(order.status) === "Succeeded",
      children: React.createElement(
        "div",
        {
          className: "flex items-center gap-5 justify-end",
        },
        React.createElement(Button.make, {
          text: "Refund",
          buttonType: "Secondary",
          onClick: function (param) {
            openPopUp("REJECT");
          },
          customTextSize: "text-sm",
          customButtonStyle: "!p-2",
        }),
        React.createElement(Button.make, {
          text: "Mark as true",
          buttonType: "Primary",
          onClick: function (param) {
            openPopUp("APPROVE");
          },
          customTextSize: "text-sm",
          customButtonStyle: "!p-2",
        }),
      ),
    }),
  );
}

var FraudRiskBannerDetails = {
  make: ShowOrder$FraudRiskBannerDetails,
};

function ShowOrder$AuthenticationDetails(props) {
  var order = props.order;
  return React.createElement(
    "div",
    {
      className:
        "w-full bg-white dark:bg-jp-gray-lightgray_background rounded-md px-4 pb-5 h-full",
    },
    React.createElement(
      "div",
      {
        className:
          "flex flex-wrap dark:bg-jp-gray-lightgray_background dark:border-jp-gray-no_data_border",
      },
      OrderEntity.authenticationColumns.map(function (colType, i) {
        return React.createElement(
          "div",
          {
            key: i.toString(),
            className: "w-1/3",
          },
          React.createElement(OrderUtils.DisplayKeyValueParams.make, {
            heading: OrderEntity.getAuthenticationHeading(colType),
            value: OrderEntity.getAuthenticationCell(order, colType),
            customMoneyStyle: "!font-normal !text-sm",
            labelMargin: "!py-0 mt-2",
            textColor: "!font-normal !text-jp-gray-700",
            overiddingHeadingStyles: "text-black text-sm font-medium",
          }),
        );
      }),
    ),
  );
}

var AuthenticationDetails = {
  make: ShowOrder$AuthenticationDetails,
};

function ShowOrder$FraudRiskBanner(props) {
  var refElement = props.refElement;
  var frmMessage = props.frmMessage;
  var match = React.useContext(ThemeProvider.themeContext);
  return React.createElement(
    "div",
    {
      className:
        "flex justify-between items-center w-full  p-4 rounded-md bg-white border border-[#C04141]/50 ",
    },
    React.createElement(
      "div",
      {
        className: "flex gap-2",
      },
      React.createElement("img", {
        alt: "image",
        src: "/icons/redFlag.svg",
      }),
      React.createElement(
        "p",
        {
          className: "text-lightgray_background font-medium text-fs-16",
        },
        "This payment is marked fraudulent by " + frmMessage.frm_name + ".",
      ),
      React.createElement(GatewayIcon.make, {
        gateway: frmMessage.frm_name.toUpperCase(),
        className: "w-6 h-6 rounded-full",
      }),
    ),
    React.createElement(
      "div",
      {
        className:
          match.globalUIConfig.font.textColor.primaryNormal +
          " font-semibold text-fs-16 cursor-pointer",
        onClick: function (param) {
          Core__Option.forEach(
            Caml_option.nullable_to_opt(refElement.current),
            function (input) {
              input.scrollIntoView({
                behavior: "smooth",
                block: "start",
                inline: "nearest",
              });
            },
          );
        },
      },
      "Review details",
    ),
  );
}

var FraudRiskBanner = {
  make: ShowOrder$FraudRiskBanner,
};

function ShowOrder(props) {
  var id = props.id;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var getURL = APIUtils.useGetURL();
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var showToast = ToastState.useShowToast();
  var match = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowModal = match$1[1];
  var match$2 = React.useState(function () {
    return OrderEntity.itemToObjMapper({});
  });
  var setOrderData = match$2[1];
  var orderData = match$2[0];
  var frmDetailsRef = React.useRef(null);
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var fetchOrderDetails = async function (url) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var res = await fetchDetails(url);
      var order = OrderEntity.itemToObjMapper(
        LogicUtils.getDictFromJsonObject(res),
      );
      setOrderData(function (param) {
        return order;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var message = e._1.message;
        if (message !== undefined) {
          if (message.includes("HE_02")) {
            return setScreenState(function (param) {
              return "Custom";
            });
          } else {
            showToast(
              "Failed to Fetch!",
              "ToastError",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            return setScreenState(function (param) {
              return {
                TAG: "Error",
                _0: "Failed to Fetch!",
              };
            });
          }
        } else {
          return setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: "Failed to Fetch!",
            };
          });
        }
      }
      throw e;
    }
  };
  React.useEffect(
    function () {
      var accountUrl = getURL(
        "ORDERS",
        "Get",
        Caml_option.some(id),
        undefined,
        undefined,
        undefined,
        undefined,
        "expand_attempts=true",
        undefined,
      );
      fetchOrderDetails(accountUrl);
    },
    [url],
  );
  var isRefundDataAvailable = orderData.refunds.length !== 0;
  var isDisputeDataVisible = orderData.disputes.length !== 0;
  var openRefundModal = function (param) {
    setShowModal(function (param) {
      return true;
    });
  };
  var showSyncButton = React.useCallback(
    function () {
      var status = HSwitchOrderUtils.statusVariantMapper(orderData.status);
      if (!HSwitchOrderUtils.isTestData(id) && status !== "Succeeded") {
        return status !== "Failed";
      } else {
        return false;
      }
    },
    [orderData],
  );
  var refreshStatus = async function () {
    try {
      var getRefreshStatusUrl = getURL(
        "ORDERS",
        "Get",
        Caml_option.some(id),
        undefined,
        undefined,
        undefined,
        undefined,
        "force_sync=true&expand_attempts=true",
        undefined,
      );
      await fetchOrderDetails(getRefreshStatusUrl);
      return showToast(
        "Details Updated",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {
      return;
    }
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-col overflow-scroll gap-8",
    },
    React.createElement(
      "div",
      {
        className: "flex justify-between w-full",
      },
      React.createElement(
        "div",
        {
          className: "flex items-end justify-between w-full",
        },
        React.createElement(
          "div",
          {
            className: "w-full",
          },
          React.createElement(PageUtils.PageHeading.make, {
            title: "Payments",
          }),
          React.createElement(BreadCrumbNavigation.make, {
            path: [
              {
                title: "Payments",
                link: "/payments",
              },
            ],
            currentPageTitle: id,
            cursorStyle: "cursor-pointer",
          }),
        ),
        React.createElement(RenderIf.make, {
          condition: showSyncButton(),
          children: React.createElement(ACLButton.make, {
            text: "Sync",
            buttonType: "Primary",
            leftIcon: {
              TAG: "CustomIcon",
              _0: React.createElement(Icon.make, {
                name: "sync",
                className:
                  "jp-gray-900 fill-opacity-50 dark:jp-gray-text_darktheme",
              }),
            },
            onClick: function (param) {
              refreshStatus();
            },
            customButtonStyle: "!w-fit !px-4",
            access: userPermissionJson.operationsView,
          }),
        }),
        React.createElement("div", undefined),
      ),
      React.createElement(ShowOrder$OrderActions, {
        orderData: orderData,
        refetch: refreshStatus,
        showModal: match$1[0],
        setShowModal: setShowModal,
      }),
    ),
    React.createElement(RenderIf.make, {
      condition: orderData.frm_message.frm_status === "fraud",
      children: React.createElement(ShowOrder$FraudRiskBanner, {
        frmMessage: orderData.frm_message,
        refElement: frmDetailsRef,
      }),
    }),
    React.createElement(PageLoaderWrapper.make, {
      children: Caml_option.some(
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-8",
          },
          React.createElement(ShowOrder$OrderInfo, {
            order: orderData,
            openRefundModal: openRefundModal,
            isNonRefundConnector: HSwitchOrderUtils.isNonRefundConnector(
              orderData.connector,
            ),
            paymentId: id,
          }),
          React.createElement(RenderIf.make, {
            condition: featureFlagDetails.auditTrail,
            children: React.createElement(OrderUIUtils.RenderAccordian.make, {
              initialExpandedArray: [0],
              accordion: [
                {
                  title: "Events and logs",
                  renderContent: function () {
                    return React.createElement(LogsWrapper.make, {
                      wrapperFor: "PAYMENT",
                      children: React.createElement(PaymentLogs.make, {
                        paymentId: id,
                        createdAt: orderData.created,
                      }),
                    });
                  },
                  renderContentOnTop: undefined,
                },
              ],
            }),
          }),
          React.createElement(
            "div",
            {
              className: "overflow-scroll",
            },
            React.createElement(ShowOrder$Attempts, {
              order: orderData,
            }),
          ),
          React.createElement(RenderIf.make, {
            condition: isRefundDataAvailable,
            children: React.createElement(
              "div",
              {
                className: "overflow-scroll",
              },
              React.createElement(OrderUIUtils.RenderAccordian.make, {
                initialExpandedArray: isRefundDataAvailable ? [0] : [],
                accordion: [
                  {
                    title: "Refunds",
                    renderContent: function () {
                      return React.createElement(ShowOrder$Refunds, {
                        refundData: orderData.refunds,
                      });
                    },
                    renderContentOnTop: undefined,
                  },
                ],
              }),
            ),
          }),
          React.createElement(RenderIf.make, {
            condition: isDisputeDataVisible,
            children: React.createElement(
              "div",
              {
                className: "overflow-scroll",
              },
              React.createElement(OrderUIUtils.RenderAccordian.make, {
                initialExpandedArray: isDisputeDataVisible ? [0] : [],
                accordion: [
                  {
                    title: "Disputes",
                    renderContent: function () {
                      return React.createElement(ShowOrder$Disputes, {
                        disputesData: orderData.disputes,
                      });
                    },
                    renderContentOnTop: undefined,
                  },
                ],
              }),
            ),
          }),
          React.createElement(OrderUIUtils.RenderAccordian.make, {
            accordion: [
              {
                title: "Customer Details",
                renderContent: function () {
                  return React.createElement(
                    "div",
                    undefined,
                    React.createElement(ShowOrder$ShowOrderDetails, {
                      data: orderData,
                      getHeading: OrderEntity.getHeadingForOtherDetails,
                      getCell: OrderEntity.getCellForOtherDetails,
                      detailsFields: [
                        "FirstName",
                        "LastName",
                        "Phone",
                        "Email",
                        "CustomerId",
                        "Description",
                      ],
                      widthClass: "md:w-1/4 w-full",
                      isNonRefundConnector:
                        HSwitchOrderUtils.isNonRefundConnector(
                          orderData.connector,
                        ),
                      paymentStatus: orderData.status,
                      openRefundModal: function () {},
                      paymentId: orderData.payment_id,
                      border: "",
                      sectionTitle: "Customer",
                    }),
                    React.createElement("div", {
                      className: "border-b-2 border-border-light-grey mx-5",
                    }),
                    React.createElement(ShowOrder$ShowOrderDetails, {
                      data: orderData,
                      getHeading: OrderEntity.getHeadingForOtherDetails,
                      getCell: OrderEntity.getCellForOtherDetails,
                      detailsFields: [
                        "BillingEmail",
                        "BillingPhone",
                        "BillingAddress",
                      ],
                      widthClass: "md:w-1/4 w-full",
                      isNonRefundConnector:
                        HSwitchOrderUtils.isNonRefundConnector(
                          orderData.connector,
                        ),
                      paymentStatus: orderData.status,
                      openRefundModal: function () {},
                      paymentId: orderData.payment_id,
                      border: "",
                      sectionTitle: "Billing",
                    }),
                    React.createElement("div", {
                      className: "border-b-2 border-border-light-grey mx-5",
                    }),
                    React.createElement(ShowOrder$ShowOrderDetails, {
                      data: orderData,
                      getHeading: OrderEntity.getHeadingForOtherDetails,
                      getCell: OrderEntity.getCellForOtherDetails,
                      detailsFields: [
                        "ShippingEmail",
                        "ShippingPhone",
                        "ShippingAddress",
                      ],
                      widthClass: "md:w-1/4 w-full",
                      isNonRefundConnector:
                        HSwitchOrderUtils.isNonRefundConnector(
                          orderData.connector,
                        ),
                      paymentStatus: orderData.status,
                      openRefundModal: function () {},
                      paymentId: orderData.payment_id,
                      border: "",
                      sectionTitle: "Shipping",
                    }),
                    React.createElement("div", {
                      className: "border-b-2 border-border-light-grey mx-5",
                    }),
                    React.createElement(ShowOrder$ShowOrderDetails, {
                      data: orderData,
                      getHeading: OrderEntity.getHeadingForOtherDetails,
                      getCell: OrderEntity.getCellForOtherDetails,
                      detailsFields: [
                        "PMBillingEmail",
                        "PMBillingPhone",
                        "PMBillingAddress",
                      ],
                      widthClass: "md:w-1/4 w-full",
                      isNonRefundConnector:
                        HSwitchOrderUtils.isNonRefundConnector(
                          orderData.connector,
                        ),
                      paymentStatus: orderData.status,
                      openRefundModal: function () {},
                      paymentId: orderData.payment_id,
                      border: "",
                      sectionTitle: "Payment Method",
                    }),
                    React.createElement("div", {
                      className: "border-b-2 border-border-light-grey mx-5",
                    }),
                    React.createElement(ShowOrder$ShowOrderDetails, {
                      data: orderData,
                      getHeading: OrderEntity.getHeadingForOtherDetails,
                      getCell: OrderEntity.getCellForOtherDetails,
                      detailsFields: [
                        "FRMName",
                        "FRMTransactionType",
                        "FRMStatus",
                      ],
                      widthClass: "md:w-1/4 w-full",
                      isNonRefundConnector:
                        HSwitchOrderUtils.isNonRefundConnector(
                          orderData.connector,
                        ),
                      paymentStatus: orderData.status,
                      openRefundModal: function () {},
                      paymentId: orderData.payment_id,
                      border: "",
                      sectionTitle: "Fraud & risk management (FRM)",
                    }),
                  );
                },
                renderContentOnTop: undefined,
              },
            ],
          }),
          React.createElement(OrderUIUtils.RenderAccordian.make, {
            accordion: [
              {
                title: "More Payment Details",
                renderContent: function () {
                  return React.createElement(
                    "div",
                    {
                      className: "mb-10",
                    },
                    React.createElement(ShowOrder$ShowOrderDetails, {
                      data: orderData,
                      getHeading: OrderEntity.getHeadingForOtherDetails,
                      getCell: OrderEntity.getCellForOtherDetails,
                      detailsFields: [
                        "AmountCapturable",
                        "ErrorCode",
                        "MandateData",
                        "MerchantId",
                        "ReturnUrl",
                        "OffSession",
                        "CaptureOn",
                        "NextAction",
                        "SetupFutureUsage",
                        "CancellationReason",
                        "StatementDescriptorName",
                        "StatementDescriptorSuffix",
                        "PaymentExperience",
                        "MerchantOrderReferenceId",
                      ],
                      widthClass: "md:w-1/4 w-full",
                      isNonRefundConnector:
                        HSwitchOrderUtils.isNonRefundConnector(
                          orderData.connector,
                        ),
                      paymentStatus: orderData.status,
                      openRefundModal: function () {},
                      paymentId: orderData.payment_id,
                      border: "",
                    }),
                  );
                },
                renderContentOnTop: undefined,
              },
            ],
          }),
          React.createElement(RenderIf.make, {
            condition:
              orderData.payment_method === "card" &&
              Core__Option.isSome(orderData.payment_method_data),
            children: React.createElement(OrderUIUtils.RenderAccordian.make, {
              accordion: [
                {
                  title: "Payment Method Details",
                  renderContent: function () {
                    return React.createElement(
                      "div",
                      {
                        className: "bg-white p-2",
                      },
                      React.createElement(PrettyPrintJson.make, {
                        jsonToDisplay: Core__Option.getOr(
                          JSON.stringify(orderData.payment_method_data),
                          "",
                        ),
                        overrideBackgroundColor: "bg-white",
                      }),
                    );
                  },
                  renderContentOnTop: undefined,
                },
              ],
            }),
          }),
          React.createElement(RenderIf.make, {
            condition: Core__Option.isSome(
              orderData.external_authentication_details,
            ),
            children: React.createElement(OrderUIUtils.RenderAccordian.make, {
              accordion: [
                {
                  title: "External Authentication Details",
                  renderContent: function () {
                    return React.createElement(
                      "div",
                      {
                        className: "bg-white p-2",
                      },
                      React.createElement(ShowOrder$AuthenticationDetails, {
                        order: orderData,
                      }),
                    );
                  },
                  renderContentOnTop: undefined,
                },
              ],
            }),
          }),
          React.createElement(RenderIf.make, {
            condition: !LogicUtils.isEmptyDict(orderData.metadata),
            children: React.createElement(OrderUIUtils.RenderAccordian.make, {
              accordion: [
                {
                  title: "Payment Metadata",
                  renderContent: function () {
                    return React.createElement(
                      "div",
                      {
                        className: "bg-white p-2",
                      },
                      React.createElement(PrettyPrintJson.make, {
                        jsonToDisplay: Core__Option.getOr(
                          JSON.stringify(orderData.metadata),
                          "",
                        ),
                        overrideBackgroundColor: "bg-white",
                      }),
                    );
                  },
                  renderContentOnTop: undefined,
                },
              ],
            }),
          }),
          React.createElement(
            "div",
            {
              className: "overflow-scroll",
            },
            React.createElement(OrderUIUtils.RenderAccordian.make, {
              accordion: [
                {
                  title: "FRM Details",
                  renderContent: function () {
                    return React.createElement(
                      "div",
                      {
                        ref: Caml_option.some(frmDetailsRef),
                      },
                      React.createElement(ShowOrder$FraudRiskBannerDetails, {
                        order: orderData,
                        refetch: refreshStatus,
                      }),
                    );
                  },
                  renderContentOnTop: undefined,
                },
              ],
            }),
          ),
        ),
      ),
      screenState: match[0],
      customUI: Caml_option.some(
        React.createElement(NoDataFound.make, {
          message: "Payment does not exists in out record",
          renderType: "NotFound",
        }),
      ),
    }),
  );
}

var make = ShowOrder;

export {
  ShowOrderDetails,
  OrderInfo,
  RefundSection,
  AttemptsSection,
  DisputesSection,
  Refunds,
  Attempts,
  Disputes,
  OrderActions,
  FraudRiskBannerDetails,
  AuthenticationDetails,
  FraudRiskBanner,
  make,
};
/* Icon Not a pure module */
