// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as Icon from "../../components/Icon.bs.js";
import * as Table from "../../components/Table.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as OrderUtils from "../../components/OrderUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as OrderEntity from "./OrderEntity.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as HSwitchOrderUtils from "./HSwitchOrderUtils.bs.js";

function OrderRefundForm(props) {
  var refetch = props.refetch;
  var amoutAvailableToRefund = props.amoutAvailableToRefund;
  var setShowModal = props.setShowModal;
  var order = props.order;
  var getURL = APIUtils.useGetURL();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast();
  var notShowRefundReasonList = ["adyen"];
  var showRefundReason = !notShowRefundReasonList.includes(
    order.connector.toLowerCase(),
  );
  var initiateValue = {};
  var updateRefundDetails = async function (body) {
    try {
      var refundsUrl = getURL(
        "REFUNDS",
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await updateDetails(
        refundsUrl,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var refundStatus = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(res),
        "status",
        "",
      );
      refetch();
      var match = HSwitchOrderUtils.statusVariantMapper(refundStatus);
      switch (match) {
        case "Succeeded":
          return showToast(
            "Refund successful",
            "ToastSuccess",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
        case "Failed":
          return showToast(
            "Refund failed - Please check refund details",
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
        default:
          return showToast(
            "Processing your refund. Please check refund status",
            "ToastInfo",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
      }
    } catch (exn) {
      return setShowModal(function (param) {
        return true;
      });
    }
  };
  var onSubmit = function (values, param) {
    setShowModal(function (param) {
      return false;
    });
    var dict = LogicUtils.getDictFromJsonObject(values);
    var amount = LogicUtils.getFloat(dict, "amount", 0.0);
    dict["amount"] = Math.round(amount * 100.0);
    dict["payment_id"] = order.payment_id;
    dict["refund_type"] = "instant";
    if (!showRefundReason) {
      dict["reason"] = "RETURN";
    }
    updateRefundDetails(dict);
    return Promise.resolve(null);
  };
  var validate = function (values) {
    var errors = {};
    var valuesDict = Object.fromEntries(
      Belt_Array.keepMap(
        Core__Option.getOr(
          Core__Option.map(Core__JSON.Decode.object(values), function (prim) {
            return Object.entries(prim);
          }),
          [],
        ),
        function (entry) {
          var strVal = Core__JSON.Classify.classify(entry[1]);
          if (typeof strVal !== "object") {
            return;
          }
          switch (strVal.TAG) {
            case "String":
            case "Number":
              return [entry[0], strVal._0];
            default:
              return;
          }
        },
      ),
    );
    ["amount"].forEach(function (key) {
      if (Core__Option.isNone(valuesDict[key])) {
        errors[key] = "Required";
        return;
      }
    });
    var amountValue = valuesDict["amount"];
    var floatVal = Core__Option.flatMap(amountValue, function (obj) {
      return Core__JSON.Decode.$$float(obj);
    });
    if (floatVal !== undefined) {
      if (floatVal > amoutAvailableToRefund) {
        var amountSplitArr = amoutAvailableToRefund.toFixed(2).split(".");
        var decimal =
          amountSplitArr.length > 1
            ? Core__Option.getOr(amountSplitArr[1], "")
            : "00";
        var receivedValue = Math.floor(amoutAvailableToRefund).toString();
        var formatted_amount = receivedValue + "." + decimal;
        errors["amount"] =
          "Refund amount should not exceed " + formatted_amount;
      } else if (floatVal === 0.0) {
        errors["amount"] = "Please enter refund amount greater than zero";
      }
    }
    return errors;
  };
  return React.createElement(
    "div",
    undefined,
    React.createElement(Form.make, {
      children: React.createElement(
        "div",
        {
          className: "flex flex-col mx-1 mt-2",
        },
        React.createElement(
          "div",
          {
            className:
              "flex border-b-2 px-2 h-24 items-center border-jp-gray-940 border-opacity-75 dark:border-jp-gray-960 dark:border-opacity-75",
          },
          React.createElement(FormRenderer.DesktopRow.make, {
            children: React.createElement(
              OrderUtils.DisplayKeyValueParams.make,
              {
                heading: Table.makeHeaderInfo(
                  "amount",
                  "Amount",
                  undefined,
                  true,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                ),
                value: OrderEntity.getCell(order, "Amount"),
                isInHeader: true,
              },
            ),
            wrapperClass: "ml-2",
          }),
          React.createElement(
            "span",
            {
              className: "ml-5 pb-1",
            },
            React.createElement(OrderUtils.DisplayKeyValueParams.make, {
              showTitle: false,
              heading: OrderEntity.getHeading("Status"),
              value: OrderEntity.getCell(order, "Status"),
            }),
          ),
        ),
        React.createElement(
          "div",
          {
            className:
              "flex items-start border border-red-500 p-3 bg-red-100/[0.5] dark:bg-jp-gray-950 rounded-lg mx-6 my-6 text-fs-14 font-medium",
          },
          React.createElement(Icon.make, {
            name: "exclamation-circle",
            size: 14,
            className: "fill-red-500 mr-2 mt-1",
          }),
          "Note : Once a refund is placed, it cannot be cancelled. Please Verify before proceeding further",
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-row mx-3",
          },
          React.createElement(
            "div",
            {
              className: "flex flex-col w-1/2 gap-7",
            },
            React.createElement(FormRenderer.DesktopRow.make, {
              children: React.createElement(
                OrderUtils.DisplayKeyValueParams.make,
                {
                  heading: OrderEntity.getHeading("CustomerId"),
                  value: OrderEntity.getCell(order, "CustomerId"),
                },
              ),
            }),
            React.createElement(FormRenderer.DesktopRow.make, {
              children: React.createElement(
                OrderUtils.DisplayKeyValueParams.make,
                {
                  heading: OrderEntity.getHeading("PaymentId"),
                  value: OrderEntity.getCell(order, "PaymentId"),
                },
              ),
            }),
            React.createElement(FormRenderer.DesktopRow.make, {
              children: React.createElement(
                OrderUtils.DisplayKeyValueParams.make,
                {
                  heading: OrderEntity.getHeading("Email"),
                  value: OrderEntity.getCell(order, "Email"),
                },
              ),
            }),
            React.createElement(FormRenderer.DesktopRow.make, {
              children: React.createElement(
                OrderUtils.DisplayKeyValueParams.make,
                {
                  heading: Table.makeHeaderInfo(
                    "amount",
                    "Amount Refunded",
                    undefined,
                    true,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                  ),
                  value: {
                    TAG: "Currency",
                    _0: props.amountRefunded.contents / 100.0,
                    _1: order.currency,
                  },
                },
              ),
            }),
          ),
          React.createElement(
            "div",
            {
              className: "flex flex-col w-1/2 gap-2",
            },
            React.createElement(FormRenderer.DesktopRow.make, {
              children: React.createElement(
                OrderUtils.DisplayKeyValueParams.make,
                {
                  heading: Table.makeHeaderInfo(
                    "amount",
                    "Pending Requested Amount",
                    undefined,
                    true,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                  ),
                  value: {
                    TAG: "Currency",
                    _0: props.requestedRefundAmount.contents / 100.0,
                    _1: order.currency,
                  },
                },
              ),
            }),
            React.createElement(FormRenderer.DesktopRow.make, {
              children: React.createElement(FormRenderer.FieldRenderer.make, {
                field: HSwitchOrderUtils.amountField,
                labelClass: "text-fs-11",
              }),
            }),
            React.createElement(RenderIf.make, {
              condition: showRefundReason,
              children: React.createElement(FormRenderer.DesktopRow.make, {
                children: React.createElement(FormRenderer.FieldRenderer.make, {
                  field: HSwitchOrderUtils.reasonField,
                  labelClass: "text-fs-11",
                }),
              }),
            }),
          ),
        ),
        React.createElement(
          "div",
          {
            className: "flex justify-end gap-4 pr-5 pb-2 mb-3 mt-14",
          },
          React.createElement(Button.make, {
            text: "Cancel",
            onClick: function (param) {
              setShowModal(function (param) {
                return false;
              });
            },
            customButtonStyle: "w-20 !h-10",
          }),
          React.createElement(FormRenderer.SubmitButton.make, {
            text: "Initiate Refund",
            customSumbitButtonStyle: "w-50 !h-10",
            showToolTip: false,
          }),
        ),
      ),
      onSubmit: onSubmit,
      initialValues: initiateValue,
      validate: validate,
    }),
  );
}

var make = OrderRefundForm;

export { make };
/* Form Not a pure module */
