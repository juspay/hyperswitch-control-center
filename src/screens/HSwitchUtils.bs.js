// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as $$Window from "../libraries/Window.bs.js";
import * as Recoil from "recoil";
import * as Country from "../utils/Country.bs.js";
import * as RenderIf from "../utils/RenderIf.bs.js";
import * as GlobalVars from "../utils/GlobalVars.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as LocalStorage from "../libraries/LocalStorage.bs.js";
import * as HSLocalStorage from "./HSLocalStorage.bs.js";
import * as HyperswitchAtom from "../Recoils/HyperswitchAtom.bs.js";

function HSwitchUtils$TextFieldRow(props) {
  var __labelWidth = props.labelWidth;
  var __isRequired = props.isRequired;
  var isRequired = __isRequired !== undefined ? __isRequired : true;
  var labelWidth = __labelWidth !== undefined ? __labelWidth : "w-72";
  return React.createElement(
    "div",
    {
      className: "flex mt-5",
    },
    React.createElement(
      "div",
      {
        className:
          "mt-2 " +
          labelWidth +
          " text-gray-900/50 dark:text-jp-gray-text_darktheme dark:text-opacity-50 font-semibold text-fs-14",
      },
      props.label,
      React.createElement(RenderIf.make, {
        condition: isRequired,
        children: React.createElement(
          "span",
          {
            className: "text-red-500",
          },
          "*",
        ),
      }),
    ),
    props.children,
  );
}

var TextFieldRow = {
  make: HSwitchUtils$TextFieldRow,
};

function HSwitchUtils$WarningArea(props) {
  return React.createElement(
    "h1",
    {
      className:
        "text-orange-950 bg-orange-100 border w-full py-2 px-4 rounded-md ",
    },
    React.createElement(
      "span",
      {
        className: "text-orange-950 font-bold text-fs-14 mr-2",
      },
      "NOTE:",
    ),
    props.warningText,
  );
}

var WarningArea = {
  make: HSwitchUtils$WarningArea,
};

function HSwitchUtils$BackgroundImageWrapper(props) {
  var __isBackgroundFullScreen = props.isBackgroundFullScreen;
  var __customPageCss = props.customPageCss;
  var __backgroundImageUrl = props.backgroundImageUrl;
  var children = props.children;
  var backgroundImageUrl =
    __backgroundImageUrl !== undefined
      ? __backgroundImageUrl
      : "/images/hyperswitchImages/PostLoginBackground.svg";
  var customPageCss = __customPageCss !== undefined ? __customPageCss : "";
  var isBackgroundFullScreen =
    __isBackgroundFullScreen !== undefined ? __isBackgroundFullScreen : true;
  var heightWidthCss = isBackgroundFullScreen
    ? "h-screen w-screen"
    : "h-full w-full";
  return React.createElement(RenderIf.make, {
    condition: Core__Option.isSome(children),
    children: React.createElement(
      "div",
      {
        className:
          "bg-no-repeat bg-center bg-hyperswitch_dark_bg bg-fixed " +
          customPageCss +
          " " +
          heightWidthCss,
        style: {
          backgroundImage: "url(" + backgroundImageUrl + ")",
          backgroundSize: "cover",
        },
      },
      Core__Option.getOr(children, null),
    ),
  });
}

var BackgroundImageWrapper = {
  make: HSwitchUtils$BackgroundImageWrapper,
};

function getSearchOptionsForProcessors(processorList, getNameFromString) {
  return processorList.map(function (item) {
    return [
      "Connect " + LogicUtils.capitalizeString(getNameFromString(item)),
      "/new?name=" + getNameFromString(item),
    ];
  });
}

function isValidEmail(value) {
  return !/^(([^<>()[\]\.,;:\s@"]+(\.[^<>()[\]\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(
    value,
  );
}

function setUserDetails(key, value) {
  var localStorageData = HSLocalStorage.getInfoFromLocalStorage("user");
  localStorageData[key] = value;
  LocalStorage.setItem(
    "user",
    Core__Option.getOr(JSON.stringify(localStorageData), ""),
  );
}

function useMerchantDetailsValue() {
  return Recoil.useRecoilValue(HyperswitchAtom.merchantDetailsValueAtom);
}

function getClientCountry(clientTimeZone) {
  return Core__Option.getOr(
    Country.country.find(function (item) {
      return Core__Option.isSome(
        item.timeZones.find(function (i) {
          return i === clientTimeZone;
        }),
      );
    }),
    Country.defaultTimeZone,
  );
}

function getBrowswerDetails() {
  var clientTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  var clientCountry = getClientCountry(clientTimeZone);
  return {
    userAgent: window.navigator.userAgent,
    browserVersion: window.navigator.appVersion,
    platform: window.navigator.platform,
    browserName: window.navigator.appName,
    browserLanguage: window.navigator.language,
    screenHeight: window.screen.height,
    screenWidth: window.screen.width,
    timeZoneOffset: $$Window.timeZoneOffset,
    clientCountry: clientCountry,
  };
}

function getBodyForFeedBack(email, values, modalTypeOpt, param) {
  var modalType = modalTypeOpt !== undefined ? modalTypeOpt : "FeedBackModal";
  var valueDict = LogicUtils.getDictFromJsonObject(values);
  var rating = LogicUtils.getInt(valueDict, "rating", 1);
  var bodyFields = [["email", email]];
  if (modalType === "FeedBackModal") {
    bodyFields.push(
      ["category", LogicUtils.getString(valueDict, "category", "")],
      ["description", LogicUtils.getString(valueDict, "feedbacks", "")],
      ["rating", rating],
    );
  } else {
    bodyFields.push(
      ["category", "request_connector"],
      [
        "description",
        "[" +
          LogicUtils.getString(valueDict, "connector_name", "") +
          "]-[" +
          LogicUtils.getString(valueDict, "description", "") +
          "]",
      ],
    );
  }
  return Object.fromEntries(bodyFields);
}

function getMetaData(newMetadata, metaData) {
  if (newMetadata !== undefined) {
    return Caml_option.valFromOption(newMetadata);
  } else {
    return metaData;
  }
}

function returnIntegrationJson(integrationData) {
  return LogicUtils.getJsonFromArrayOfJson([
    ["is_done", integrationData.is_done],
    ["metadata", integrationData.metadata],
  ]);
}

function constructOnboardingBody(
  dashboardPageState,
  integrationDetails,
  is_done,
  metadata,
  param,
) {
  if (dashboardPageState === "AUTO_CONNECTOR_INTEGRATION") {
    integrationDetails.connector_integration.is_done = is_done;
    integrationDetails.connector_integration.metadata = getMetaData(
      metadata,
      integrationDetails.connector_integration.metadata,
    );
    integrationDetails.pricing_plan.is_done = is_done;
    integrationDetails.pricing_plan.metadata = getMetaData(
      metadata,
      integrationDetails.pricing_plan.metadata,
    );
  } else if (dashboardPageState === "INTEGRATION_DOC") {
    integrationDetails.integration_checklist.is_done = is_done;
    integrationDetails.integration_checklist.metadata = getMetaData(
      metadata,
      integrationDetails.integration_checklist.metadata,
    );
  } else if (dashboardPageState === "HOME") {
    integrationDetails.account_activation.is_done = is_done;
    integrationDetails.account_activation.metadata = getMetaData(
      metadata,
      integrationDetails.account_activation.metadata,
    );
  }
  return LogicUtils.getJsonFromArrayOfJson([
    [
      "integration_checklist",
      returnIntegrationJson(integrationDetails.integration_checklist),
    ],
    [
      "connector_integration",
      returnIntegrationJson(integrationDetails.connector_integration),
    ],
    ["pricing_plan", returnIntegrationJson(integrationDetails.pricing_plan)],
    [
      "account_activation",
      returnIntegrationJson(integrationDetails.account_activation),
    ],
  ]);
}

function getTextClass(variantType) {
  switch (variantType[0]) {
    case "H1":
      if (variantType[1] === "Optional") {
        return "text-fs-28 font-semibold leading-10";
      } else {
        return "";
      }
    case "H2":
      if (variantType[1] === "Optional") {
        return "text-2xl font-semibold leading-8";
      } else {
        return "";
      }
    case "H3":
      switch (variantType[1]) {
        case "Leading_1":
          return "text-xl font-semibold leading-7";
        case "Leading_2":
          return "text-lg font-semibold leading-7";
        default:
          return "";
      }
    case "P1":
      switch (variantType[1]) {
        case "Regular":
          return "text-base font-normal leading-6";
        case "Medium":
          return "text-base font-medium leading-6";
        default:
          return "";
      }
    case "P2":
      switch (variantType[1]) {
        case "Regular":
          return "text-sm font-normal leading-5";
        case "Medium":
          return "text-sm font-medium leading-5";
        default:
          return "";
      }
    case "P3":
      switch (variantType[1]) {
        case "Regular":
          return "text-xs font-normal leading-4";
        case "Medium":
          return "text-xs font-medium leading-4";
        default:
          return "";
      }
  }
}

function checkStripePlusPayPal(enumDetails) {
  if (
    LogicUtils.isNonEmptyString(enumDetails.stripeConnected.processorID) &&
    LogicUtils.isNonEmptyString(enumDetails.paypalConnected.processorID)
  ) {
    return enumDetails.sPTestPayment;
  } else {
    return false;
  }
}

function checkWooCommerce(enumDetails) {
  if (enumDetails.setupWoocomWebhook) {
    return LogicUtils.isNonEmptyString(
      enumDetails.firstProcessorConnected.processorID,
    );
  } else {
    return false;
  }
}

function urlPath(urlPathList) {
  if (GlobalVars.dashboardBasePath !== undefined && urlPathList) {
    return urlPathList.tl;
  } else {
    return urlPathList;
  }
}

function getConnectorIDFromUrl(urlList, defaultValue) {
  if (GlobalVars.dashboardBasePath !== undefined) {
    return Core__Option.getOr(urlList[2], defaultValue);
  } else {
    return Core__Option.getOr(urlList[1], defaultValue);
  }
}

var feedbackModalOpenCountForConnectors = 4;

var errorClass = "text-sm leading-4 font-medium text-start ml-1 mt-2";

var noAccessControlText =
  "You do not have the required permissions to access this module. Please contact your admin.";

var noAccessControlTextForProcessors =
  "You do not have the required permissions to connect this processor. Please contact admin.";

export {
  TextFieldRow,
  WarningArea,
  BackgroundImageWrapper,
  feedbackModalOpenCountForConnectors,
  errorClass,
  getSearchOptionsForProcessors,
  isValidEmail,
  setUserDetails,
  useMerchantDetailsValue,
  getClientCountry,
  getBrowswerDetails,
  getBodyForFeedBack,
  getMetaData,
  returnIntegrationJson,
  constructOnboardingBody,
  getTextClass,
  checkStripePlusPayPal,
  checkWooCommerce,
  noAccessControlText,
  noAccessControlTextForProcessors,
  urlPath,
  getConnectorIDFromUrl,
};
/* react Not a pure module */
