// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as RoutingUtils from "../Routing/RoutingUtils.bs.js";
import * as ThreeDSUtils from "../ThreeDSFlow/ThreeDSUtils.bs.js";
import * as AdvancedRoutingUtils from "../RoutingRevamp/AdvancedRoutingUtils.bs.js";

var defaultSurcharge = {
  surcharge: {
    type: "rate",
    value: {
      percentage: 0.0,
    },
  },
  tax_on_surcharge: {
    percentage: 0.0,
  },
};

var surchargeRules_connectorSelection = {
  surcharge_details: Caml_option.some(defaultSurcharge),
};

var surchargeRules = {
  name: "rule_1",
  connectorSelection: surchargeRules_connectorSelection,
  statements: ThreeDSUtils.statementObject,
};

var buildInitialSurchargeValue_name =
  "Surcharge -" + RoutingUtils.getCurrentUTCTime();

var buildInitialSurchargeValue_description =
  "This is a new Surcharge created at " + RoutingUtils.currentTimeInUTC;

var buildInitialSurchargeValue_algorithm = {
  defaultSelection: {
    surcharge_details: null,
  },
  rules: [surchargeRules],
  metadata: null,
};

var buildInitialSurchargeValue = {
  name: buildInitialSurchargeValue_name,
  description: buildInitialSurchargeValue_description,
  algorithm: buildInitialSurchargeValue_algorithm,
};

function buildSurchargePayloadBody(values) {
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  var algorithmDict = LogicUtils.getDictfromDict(valuesDict, "algorithm");
  var rulesDict = LogicUtils.getArrayFromDict(algorithmDict, "rules", []);
  var modifiedRules = AdvancedRoutingUtils.generateRule(rulesDict);
  return {
    name: LogicUtils.getString(valuesDict, "name", ""),
    algorithm: {
      defaultSelection: LogicUtils.getJsonObjectFromDict(
        algorithmDict,
        "defaultSelection",
      ),
      rules: modifiedRules,
      metadata: {},
    },
    merchant_surcharge_configs: {
      show_surcharge_breakup_screen: true,
    },
  };
}

function getTypedSurchargeConnectorSelection(ruleDict) {
  var connectorsDict = LogicUtils.getDictfromDict(
    ruleDict,
    "connectorSelection",
  );
  return AdvancedRoutingUtils.getDefaultSelection(connectorsDict);
}

function ruleInfoTypeMapper(json) {
  var rulesArray = LogicUtils.getArrayFromDict(json, "rules", []);
  var defaultSelection = LogicUtils.getDictfromDict(json, "defaultSelection");
  var rulesModifiedArray = rulesArray.map(function (rule) {
    var ruleDict = LogicUtils.getDictFromJsonObject(rule);
    var connectorSelection = getTypedSurchargeConnectorSelection(ruleDict);
    var ruleName = LogicUtils.getString(ruleDict, "name", "");
    return {
      name: ruleName,
      connectorSelection: connectorSelection,
      statements: AdvancedRoutingUtils.conditionTypeMapper(
        LogicUtils.getArrayFromDict(ruleDict, "statements", []),
      ),
    };
  });
  return {
    defaultSelection:
      AdvancedRoutingUtils.getDefaultSelection(defaultSelection),
    rules: rulesModifiedArray,
    metadata: LogicUtils.getJsonObjectFromDict(json, "metadata"),
  };
}

function getDefaultSurchargeType(surchargeType) {
  return LogicUtils.getValFromNullableValue(
    Core__Option.getOr(surchargeType, null),
    defaultSurcharge,
  );
}

function validateSurchargeRate(ruleDict) {
  var connectorSelection = getTypedSurchargeConnectorSelection(ruleDict);
  var surchargeType = getDefaultSurchargeType(
    connectorSelection.surcharge_details,
  );
  var surchargeValuePercent = Core__Option.getOr(
    surchargeType.surcharge.value.percentage,
    0.0,
  );
  var surchargeValueAmount = Core__Option.getOr(
    surchargeType.surcharge.value.amount,
    0.0,
  );
  return !(surchargeType.surcharge.type === "rate"
    ? surchargeValuePercent === 0.0 || surchargeValuePercent > 100.0
    : surchargeValueAmount === 0.0);
}

function validateConditionsForSurcharge(dict) {
  var conditionsArray = LogicUtils.getArrayFromDict(dict, "statements", []);
  if (
    conditionsArray.every(function (value) {
      return RoutingUtils.validateConditionJson(value, ["comparison", "lhs"]);
    })
  ) {
    return validateSurchargeRate(dict);
  } else {
    return false;
  }
}

export {
  defaultSurcharge,
  surchargeRules,
  buildInitialSurchargeValue,
  buildSurchargePayloadBody,
  getTypedSurchargeConnectorSelection,
  ruleInfoTypeMapper,
  getDefaultSurchargeType,
  validateSurchargeRate,
  validateConditionsForSurcharge,
};
/* buildInitialSurchargeValue Not a pure module */
