// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as Modal from "../../utils/Modal.bs.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as Accordion from "../../components/Accordion.bs.js";
import * as TextInput from "../../components/form/TextInput.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CheckBoxIcon from "../../components/custom-icons/CheckBoxIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as FormValuesSpy from "../../components/form/FormValuesSpy.bs.js";
import * as CommonAuthHooks from "../../entryPoints/AuthModule/Common/CommonAuthHooks.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as SwitchMerchantListHook from "../SwitchMerchant/SwitchMerchantListHook.bs.js";
import * as SbxOnboardingSurveyUtils from "./SbxOnboardingSurveyUtils.bs.js";
import * as MerchantAccountDetailsMapper from "../../utils/Mappers/MerchantAccountDetailsMapper.bs.js";

function SbxOnboardingSurvey$OtherfieldRender(props) {
  var field_name = props.field_name;
  var valueField = ReactFinalForm.useField(field_name).input;
  var textField = ReactFinalForm.useField(field_name + "_otherstring").input;
  var textInput_name = field_name + "_otherstring";
  var textInput_onBlur = function (_ev) {
    var textFieldValue = LogicUtils.getStringFromJson(textField.value, "");
    var valueFieldValue = LogicUtils.getStrArrayFromJsonArray(
      LogicUtils.getArrayFromJson(valueField.value, []),
    );
    if (LogicUtils.isNonEmptyString(textFieldValue)) {
      valueFieldValue.push(textFieldValue);
    }
    valueField.onChange(valueFieldValue);
  };
  var textInput_onChange = function (ev) {
    var target = ev.target;
    var value = target.value;
    textField.onChange(value);
  };
  var textInput_onFocus = function (_ev) {};
  var textInput_value = textField.value;
  var textInput = {
    name: textInput_name,
    onBlur: textInput_onBlur,
    onChange: textInput_onChange,
    onFocus: textInput_onFocus,
    value: textInput_value,
    checked: false,
  };
  return React.createElement(
    "div",
    {
      className: "flex gap-2 items-center",
    },
    JsxPPXReactSupportU.createElementWithKey(
      field_name + "_otherstring",
      CheckBoxIcon.make,
      {
        isSelected: LogicUtils.isNonEmptyString(
          LogicUtils.getStringFromJson(textField.value, ""),
        ),
      },
    ),
    React.createElement(TextInput.make, {
      input: textInput,
      placeholder: "Others",
    }),
  );
}

var OtherfieldRender = {
  make: SbxOnboardingSurvey$OtherfieldRender,
};

function SbxOnboardingSurvey(props) {
  var setShowModal = props.setShowModal;
  var getURL = APIUtils.useGetURL();
  var showToast = ToastState.useShowToast();
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var match = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  var merchantId = match.merchant_id;
  var match$1 = Recoil.useRecoilState(HyperswitchAtom.merchantDetailsValueAtom);
  var setMerchantDetailsValue = match$1[1];
  var merchantDetailsTypedValue = match$1[0];
  var fetchSwitchMerchantList =
    SwitchMerchantListHook.useFetchSwitchMerchantList();
  var getMerchantNameFromJson = function (values) {
    return LogicUtils.getString(
      LogicUtils.getDictFromJsonObject(values),
      "merchant_name",
      "",
    );
  };
  var udpateMerchantDetails = async function (values) {
    try {
      var accountUrl = getURL(
        "MERCHANT_ACCOUNT",
        "Post",
        Caml_option.some(merchantId),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["merchant_id", merchantId],
        ["merchant_name", getMerchantNameFromJson(values)],
      ]);
      var merchantDetails = await updateDetails(
        accountUrl,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      fetchSwitchMerchantList();
      return setMerchantDetailsValue(function (param) {
        return MerchantAccountDetailsMapper.getMerchantDetails(merchantDetails);
      });
    } catch (exn) {
      showToast(
        "Failed to update onboarding survey",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setShowModal(function (param) {
        return true;
      });
    }
  };
  var onSubmit = async function (values, param) {
    try {
      udpateMerchantDetails(values);
      showToast(
        "Successfully updated onboarding survey",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setShowModal(function (param) {
        return false;
      });
    } catch (exn) {
      showToast(
        "Please try again!",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setShowModal(function (param) {
        return true;
      });
    }
    return null;
  };
  var validateForm = function (values) {
    var errors = {};
    var valueDict = LogicUtils.getDictFromJsonObject(values);
    if (
      LogicUtils.isEmptyString(
        LogicUtils.getString(valueDict, "merchant_name", ""),
      )
    ) {
      errors["Required"] = "Business name required";
    }
    return errors;
  };
  React.useEffect(
    function () {
      if (Core__Option.isNone(merchantDetailsTypedValue.merchant_name)) {
        setShowModal(function (param) {
          return true;
        });
      } else {
        setShowModal(function (param) {
          return false;
        });
      }
    },
    [merchantDetailsTypedValue.merchant_name],
  );
  return React.createElement(Modal.make, {
    showModal: props.showModal,
    setShowModal: setShowModal,
    children: JsxPPXReactSupportU.createElementWithKey(
      "merchant_name-validation",
      Form.make,
      {
        children: React.createElement(
          "div",
          {
            className: "flex flex-col gap-4 h-full w-full ",
          },
          React.createElement(
            "div",
            {
              className:
                "!max-h-96 !overflow-y-scroll flex flex-col gap-4 h-full",
            },
            React.createElement(Accordion.make, {
              accordion: [
                {
                  title: "Business details ",
                  renderContent: function () {
                    return React.createElement(
                      "div",
                      undefined,
                      React.createElement(FormRenderer.FieldRenderer.make, {
                        field: SbxOnboardingSurveyUtils.businessName,
                        fieldWrapperClass: "w-full",
                        labelClass: "!text-black font-medium !-ml-[0.5px]",
                      }),
                    );
                  },
                  renderContentOnTop: undefined,
                },
              ],
              accordianTopContainerCss: "rounded-md",
              contentExpandCss: "p-4",
              initialExpandedArray: [0],
              gapClass: "flex flex-col gap-4",
              titleStyle: "font-semibold text-bold text-md",
            }),
          ),
          React.createElement(
            "div",
            {
              className: "flex justify-end w-full pr-5 pb-3",
            },
            React.createElement(FormRenderer.SubmitButton.make, {
              text: "Start Exploring",
              buttonSize: "Small",
            }),
          ),
          React.createElement(FormValuesSpy.make, {}),
        ),
        onSubmit: onSubmit,
        initialValues: {},
        validate: validateForm,
      },
    ),
    modalHeading: "Welcome aboard! Let's get started",
    modalClass:
      "!w-1/3 !min-w-1/3 !bg-white m-auto dark:!bg-jp-gray-lightgray_background",
    paddingClass: "",
    modalHeadingDescription: match.email,
    showCloseIcon: false,
  });
}

var make = SbxOnboardingSurvey;

export { OtherfieldRender, make };
/* Form Not a pure module */
