// Generated by ReScript, PLEASE EDIT WITH CARE

import * as SelectBox from "../../components/SelectBox.bs.js";
import * as Core__Dict from "@rescript/core/src/Core__Dict.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";

var keysToValidateForHyperswitch = [
  "designation",
  "business_website",
  "about_business",
  "major_markets",
  "business_size",
  "hyperswitch_req",
  "required_features",
  "required_processors",
  "planned_live_date",
  "miscellaneous",
];

var businessName = FormRenderer.makeFieldInfo(
  "Business name",
  undefined,
  "merchant_name",
  InputFields.textInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  "Eg: HyperSwitch Pvt Ltd",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var userName = FormRenderer.makeFieldInfo(
  "User name",
  undefined,
  "user_name",
  InputFields.textInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var designation = FormRenderer.makeFieldInfo(
  "Designation",
  undefined,
  "hyperswitch.designation",
  InputFields.textInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var majorMarkets = FormRenderer.makeFieldInfo(
  "Major markets",
  undefined,
  "hyperswitch.major_markets",
  InputFields.checkboxInput(
    undefined,
    SelectBox.makeOptions([
      "North America",
      "Europe",
      "LATAM",
      "APAC",
      "Africa",
    ]),
    undefined,
    undefined,
    undefined,
    "Major markets",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var businessSize = FormRenderer.makeFieldInfo(
  "Business size",
  undefined,
  "hyperswitch.business_size",
  InputFields.radioInput(
    SelectBox.makeOptions([
      "Yet to start processing payments",
      "< 30k transaction per month",
      "30k - 100k transactions per month",
      "100k - 1Mn transactions per month",
      "1Mn - 5Mn transactions per month",
      "5Mn+ transactions per month",
    ]),
    "Business Size",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var businessWebsite = FormRenderer.makeFieldInfo(
  "Business website",
  undefined,
  "hyperswitch.business_website",
  InputFields.textInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var aboutBusiness = FormRenderer.makeFieldInfo(
  "About Business - Few words about your business and how you collect payments currently",
  undefined,
  "hyperswitch.about_business",
  InputFields.textInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var hyperswitchUsage = FormRenderer.makeFieldInfo(
  "How are you planning to use Hyperswitch?",
  undefined,
  "hyperswitch.hyperswitch_req",
  InputFields.radioInput(
    SelectBox.makeOptions([
      "Looking to use Hyperswitch SaaS/Cloud hosted solution for payments",
      "Looking to self-host Hyperswitch's open-source version for payments",
      "Looking to resell Hyperswitch's open-source solution",
    ]),
    "Business Size",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var hyperswitchFeatures = FormRenderer.makeFieldInfo(
  "Hyperswitch features required",
  undefined,
  "hyperswitch.required_features",
  InputFields.checkboxInput(
    undefined,
    SelectBox.makeOptions([
      "Pay-ins",
      "Payouts",
      "FRM",
      "Subscriptions",
      "Recon",
      "Disputes/Chargebacks",
    ]),
    undefined,
    undefined,
    undefined,
    "Business Size",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var processorRequired = FormRenderer.makeFieldInfo(
  "Payment Processors Required",
  undefined,
  "hyperswitch.required_processors",
  InputFields.checkboxInput(
    undefined,
    SelectBox.makeOptions([
      "Stripe",
      "Adyen",
      "Cybersource",
      "Authorize.net",
      "Checkout",
      "Braintree",
      "Worldpay",
      "Fiserv",
      "NMI",
    ]),
    undefined,
    undefined,
    undefined,
    "Business Size",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var plannedGoLiveDate = FormRenderer.makeFieldInfo(
  "Planned go-live date with Hyperswitch",
  undefined,
  "hyperswitch.planned_live_date",
  InputFields.textInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var miscellaneousTextField = FormRenderer.makeFieldInfo(
  "Anything else that you would like us to know",
  undefined,
  "hyperswitch.miscellaneous",
  InputFields.textInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

function constructOnboardingSurveyBody(values) {
  var dictFromJson = LogicUtils.getDictFromJsonObject(values);
  var hyperswitchValue = LogicUtils.getDictfromDict(
    dictFromJson,
    "hyperswitch",
  );
  var filterOutOtherKeys = Object.keys(hyperswitchValue).filter(
    function (value) {
      return value.includes("otherstring");
    },
  );
  filterOutOtherKeys.forEach(function (otherKey) {
    Core__Dict.$$delete(hyperswitchValue, otherKey);
  });
  return hyperswitchValue;
}

function constructUserUpdateBody(values) {
  var dictFromJson = LogicUtils.getDictFromJsonObject(values);
  return LogicUtils.getJsonFromArrayOfJson([
    ["name", LogicUtils.getString(dictFromJson, "user_name", "")],
  ]);
}

export {
  keysToValidateForHyperswitch,
  businessName,
  userName,
  designation,
  majorMarkets,
  businessSize,
  businessWebsite,
  aboutBusiness,
  hyperswitchUsage,
  hyperswitchFeatures,
  processorRequired,
  plannedGoLiveDate,
  miscellaneousTextField,
  constructOnboardingSurveyBody,
  constructUserUpdateBody,
};
/* businessName Not a pure module */
