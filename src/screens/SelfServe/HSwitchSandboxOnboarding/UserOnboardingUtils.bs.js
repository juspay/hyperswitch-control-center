// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as CodeSnippets from "./CodeSnippets.bs.js";

var migrateStripfrontEndLang = ["ReactJs", "HTML"];

var migrateStripBackEndLang = [
  "Node",
  "Python",
  "Go",
  "Ruby",
  "Java",
  "Net",
  "Php",
];

var integrateFromScratchfrontEndLang = ["ReactJs", "HTML"];

var integrateFromScratchBackEndlang = [
  "Node",
  "Python",
  "Go",
  "Ruby",
  "Java",
  "Net",
  "Php",
];

var platforms = ["Web", "IOS", "Android", "BigCommerce", "ReactNative"];

var requestOnlyPlatforms = ["BigCommerce", "IOS", "Android", "ReactNative"];

function getContentBasedOnIndex(currentRoute, tabIndex) {
  switch (currentRoute) {
    case "MigrateFromStripe":
      switch (tabIndex) {
        case 0:
          return "Start by downloading your Test API Key and keeping it handy.";
        case 1:
          return "Install Hyperswitch's SDK and server side dependencies from npm.This is to add Hyperswitch dependencies to your application, along with your existing Stripe dependencies.";
        case 2:
          return "Replace the Stripe API key with Hyperswitch API key on the server side and modify the endpoint for the payment intent API.So, the Payment Intent API call previously being made to Stripe server will now be routed to Hyperswitch server.";
        case 3:
          return "Reconfigure checkout form to import from Hyperswitch.This will import the Hyperswitch Unified checkout dependencies.";
        case 4:
          return "Call loadHyper() with you Hyperswitch publishable key to configure the SDK library, from your website.This will load and invoke the Hyperswitch Checkout experience instead of the Stripe UI Elements.";
        default:
          return "";
      }
    case "IntegrateFromScratch":
      switch (tabIndex) {
        case 0:
          return "Start by downloading your Test API Key and keeping it handy.";
        case 1:
          return "Once your customer is ready to pay, create a payment from your server to establish the intent of the customer to start payment.";
        case 2:
          return "Open the Hyperswitch checkout for your user inside an iFrame to display the payment methods.";
        case 3:
          return "Handle the response and display the thank you page to the user.";
        default:
          return "";
      }
    case "WooCommercePlugin":
      switch (tabIndex) {
        case 0:
          return "Start by downloading the Hyperswitch Checkout Plugin, and installing it on your WordPress Admin Dashboard. Activate the Plugin post installation.";
        case 1:
          return 'Step 1. Navigate to Woocommerce > Settings section in the dashboard. Click on the "Payments" tab and you should be able to find Hyperswitch listed in the Payment Methods table. Click on "Hyperswitch" to land on the Hyperswitch Plugin Settings page.';
        case 2:
          return "Step 2. Generate an API Key and paste it in your WooCommerce Plugin Settings.";
        case 3:
          return "Step 3. Copy your Publishable Key and paste it in your WooCommerce Plugin Settings.";
        case 4:
          return "Step 4. Copy your Payment Response Hash Key and paste it in your WooCommerce Plugin Settings.";
        case 5:
          return 'Step 5. Configure your Webhook URL. You can find the Webhook URL on your Plugin Settings page under "Enable Webhook" Section.';
        case 6:
          return "Step 6. Save the changes";
        case 7:
          return "Step 1. Configure connector(s) and start accepting payments.";
        case 8:
          return "Step 2. Configure a Routing Configuration to route payments to optimise your payment traffic across the various configured processors (only if you want to support multiple processors)";
        case 9:
          return "Step 3. View and Manage your WooCommerce Order Payments on the Hyperswitch Dashboard.";
        default:
          return "";
      }
    case "OnboardingDefault":
    case "SampleProjects":
      return "";
  }
}

function getLangauge(str) {
  var match = str.toLowerCase();
  switch (match) {
    case "go":
      return "Go";
    case "html":
      return "HTML";
    case "java":
      return "Java";
    case "net":
      return "Net";
    case "next":
      return "Next";
    case "node":
      return "Node";
    case "php":
      return "Php";
    case "python":
      return "Python";
    case "reactjs":
      return "ReactJs";
    case "ruby":
      return "Ruby";
    case "rust":
      return "Rust";
    case "shell":
      return "Shell";
    default:
      return "ChooseLanguage";
  }
}

function getPlatform(str) {
  var match = str.toLowerCase();
  switch (match) {
    case "android":
      return "Android";
    case "bigcommerce":
      return "BigCommerce";
    case "ios":
      return "IOS";
    case "reactnative":
      return "ReactNative";
    default:
      return "Web";
  }
}

function getMigrateFromStripeDX(frontendlang, backendlang) {
  if (frontendlang === "ReactJs") {
    if (backendlang === "Node") {
      return CodeSnippets.nodeMigrateFromStripeDXForReact;
    } else {
      return "";
    }
  } else if (frontendlang === "HTML" && backendlang === "Node") {
    return CodeSnippets.nodeMigrateFromStripeDXForHTML;
  } else {
    return "";
  }
}

function getInstallDependencies(lang) {
  if (lang === "ReactJs") {
    return CodeSnippets.reactInstallDependencies;
  } else if (lang === "Node") {
    return CodeSnippets.nodeInstallDependencies;
  } else {
    return "";
  }
}

function getImports(lang) {
  if (lang === "ReactJs") {
    return CodeSnippets.reactImports;
  } else {
    return "";
  }
}

function getLoad(lang) {
  if (lang === "ReactJs") {
    return CodeSnippets.reactLoad;
  } else if (lang === "HTML") {
    return CodeSnippets.htmlLoad;
  } else {
    return "";
  }
}

function getInitialize(lang) {
  if (lang === "ReactJs") {
    return CodeSnippets.reactInitialize;
  } else if (lang === "HTML") {
    return CodeSnippets.htmlInitialize;
  } else {
    return "";
  }
}

function getCheckoutFormForDisplayCheckoutPage(lang) {
  if (lang === "ReactJs") {
    return CodeSnippets.reactCheckoutFormDisplayCheckoutPage;
  } else {
    return "";
  }
}

function getHandleEvents(lang) {
  if (lang === "ReactJs") {
    return CodeSnippets.reactHandleEvent;
  } else if (lang === "HTML") {
    return CodeSnippets.htmlHandleEvents;
  } else {
    return "";
  }
}

function getDisplayConformation(lang) {
  if (lang === "ReactJs") {
    return CodeSnippets.reactDisplayConfirmation;
  } else if (lang === "HTML") {
    return CodeSnippets.htmlDisplayConfirmation;
  } else {
    return "";
  }
}

function getReplaceAPIkeys(lang) {
  if (lang === "Node") {
    return CodeSnippets.nodeReplaceApiKey;
  } else {
    return {
      from: "",
      to: "",
    };
  }
}

function getCheckoutForm(lang) {
  if (lang === "ReactJs") {
    return CodeSnippets.reactCheckoutForm;
  } else if (lang === "HTML") {
    return CodeSnippets.htmlCheckoutForm;
  } else {
    return {
      from: "",
      to: "",
    };
  }
}

function getHyperswitchCheckout(lang) {
  if (lang === "ReactJs") {
    return CodeSnippets.reactHyperSwitchCheckout;
  } else if (lang === "HTML") {
    return CodeSnippets.htmlHyperSwitchCheckout;
  } else {
    return {
      from: "",
      to: "",
    };
  }
}

function getCreateAPayment(lang) {
  if (lang === "Python") {
    return CodeSnippets.pythonRequestPayment;
  } else if (lang === "Go") {
    return CodeSnippets.goRequestPayment;
  } else if (lang === "Net") {
    return CodeSnippets.netRequestPayment;
  } else if (lang === "Php") {
    return CodeSnippets.phpRequestPayment;
  } else if (lang === "Shell") {
    return CodeSnippets.shellRequestPayment;
  } else if (lang === "Java") {
    return CodeSnippets.javaRequestPayment;
  } else if (lang === "Node") {
    return CodeSnippets.nodeCreateAPayment;
  } else if (lang === "Ruby") {
    return CodeSnippets.rubyRequestPayment;
  } else if (lang === "Rust") {
    return CodeSnippets.rustRequestPayment;
  } else {
    return "";
  }
}

function getMainPageText(currentRoute) {
  switch (currentRoute) {
    case "MigrateFromStripe":
      return "Migrate from Stripe";
    case "IntegrateFromScratch":
      return "Let's start integrating from Scratch";
    case "WooCommercePlugin":
      return "Let's start your WooCommerce Integration";
    case "OnboardingDefault":
    case "SampleProjects":
      return "Explore, Build and Integrate";
  }
}

function getLanguages(currentRoute) {
  switch (currentRoute) {
    case "MigrateFromStripe":
      return [migrateStripfrontEndLang, migrateStripBackEndLang];
    case "OnboardingDefault":
    case "WooCommercePlugin":
      return [[], []];
    case "IntegrateFromScratch":
    case "SampleProjects":
      return [
        integrateFromScratchfrontEndLang,
        integrateFromScratchBackEndlang,
      ];
  }
}

function getFilteredList(frontEndLang, backEndLang, githubcodespaces) {
  var felang = frontEndLang.toLowerCase();
  var belang = backEndLang.toLowerCase();
  if (felang === "chooselanguage" && belang === "chooselanguage") {
    return githubcodespaces;
  } else {
    return githubcodespaces.filter(function (value) {
      if (felang === "chooselanguage") {
        return value.backEndLang === belang;
      } else if (belang === "chooselanguage") {
        return Caml_obj.equal(value.frontEndLang, felang);
      } else if (Caml_obj.equal(value.frontEndLang, felang)) {
        return value.backEndLang === belang;
      } else {
        return false;
      }
    });
  }
}

function variantToTextMapperForBuildHS(currentRoute) {
  switch (currentRoute) {
    case "MigrateFromStripe":
      return "migrateFromStripe";
    case "IntegrateFromScratch":
      return "integrateFromScratch";
    case "WooCommercePlugin":
      return "wooCommercePlugin";
    case "OnboardingDefault":
    case "SampleProjects":
      return "onboarding";
  }
}

var githubCodespaces = [
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-html-node",
    frontEndLang: "html",
    backEndLang: "node",
    displayFrontendLang: "HTML",
    displayBackendLang: "Node",
  },
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-html-python",
    frontEndLang: "html",
    backEndLang: "python",
    displayFrontendLang: "HTML",
    displayBackendLang: "Python",
  },
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-html-php",
    frontEndLang: "html",
    backEndLang: "php",
    displayFrontendLang: "HTML",
    displayBackendLang: "PHP",
  },
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-html-go",
    frontEndLang: "html",
    backEndLang: "go",
    displayFrontendLang: "HTML",
    displayBackendLang: "Go",
  },
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-html-java",
    frontEndLang: "html",
    backEndLang: "java",
    displayFrontendLang: "HTML",
    displayBackendLang: "Java",
  },
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-html-ruby",
    frontEndLang: "html",
    backEndLang: "ruby",
    displayFrontendLang: "HTML",
    displayBackendLang: "Ruby",
  },
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-html-dotnet",
    frontEndLang: "html",
    backEndLang: "net",
    displayFrontendLang: "HTML",
    displayBackendLang: ".Net",
  },
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-react-node",
    frontEndLang: "reactjs",
    backEndLang: "node",
    displayFrontendLang: "React-Js",
    displayBackendLang: "Node",
  },
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-next-node",
    frontEndLang: "next",
    backEndLang: "node",
    displayFrontendLang: "Next-React-Ts",
    displayBackendLang: "Node",
  },
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-react-dotnet",
    frontEndLang: "reactjs",
    backEndLang: "net",
    displayFrontendLang: "React-Js",
    displayBackendLang: ".Net",
  },
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-react-ruby",
    frontEndLang: "reactjs",
    backEndLang: "ruby",
    displayFrontendLang: "React-Js",
    displayBackendLang: "Ruby",
  },
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-react-java",
    frontEndLang: "reactjs",
    backEndLang: "java",
    displayFrontendLang: "React-Js",
    displayBackendLang: "Java",
  },
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-react-python",
    frontEndLang: "reactjs",
    backEndLang: "python",
    displayFrontendLang: "React-Js",
    displayBackendLang: "Python",
  },
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-react-php",
    frontEndLang: "reactjs",
    backEndLang: "php",
    displayFrontendLang: "React-Js",
    displayBackendLang: "PHP",
  },
  {
    headerIcon: "github",
    buttonText: "View Docs",
    customIconCss: "",
    url: "https://github.com/juspay/hyperswitch-react-go",
    frontEndLang: "reactjs",
    backEndLang: "go",
    displayFrontendLang: "React-Js",
    displayBackendLang: "Go",
  },
];

export {
  migrateStripfrontEndLang,
  migrateStripBackEndLang,
  integrateFromScratchfrontEndLang,
  integrateFromScratchBackEndlang,
  platforms,
  requestOnlyPlatforms,
  getContentBasedOnIndex,
  getLangauge,
  getPlatform,
  getMigrateFromStripeDX,
  getInstallDependencies,
  getImports,
  getLoad,
  getInitialize,
  getCheckoutFormForDisplayCheckoutPage,
  getHandleEvents,
  getDisplayConformation,
  getReplaceAPIkeys,
  getCheckoutForm,
  getHyperswitchCheckout,
  getCreateAPayment,
  getMainPageText,
  getLanguages,
  getFilteredList,
  variantToTextMapperForBuildHS,
  githubCodespaces,
};
/* No side effect */
