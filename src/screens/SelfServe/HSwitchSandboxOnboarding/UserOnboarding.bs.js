// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../../HSwitchUtils.bs.js";
import * as GlobalProvider from "../../../entryPoints/Provider/GlobalProvider.bs.js";
import * as ProviderHelper from "../../../entryPoints/Provider/ProviderHelper.bs.js";
import * as IntegrationDocs from "./IntegrationDocs.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as UserOnboardingUtils from "./UserOnboardingUtils.bs.js";
import * as UserOnboardingUIUtils from "./UserOnboardingUIUtils.bs.js";

var buildHyperswitch = [
  {
    headerIcon: "migrate-from-stripe",
    headerText: "Migrate from Stripe",
    buttonText: "Start Integration",
    customIconCss: "!w-96",
    url: "migrate-from-stripe",
    isIconImg: true,
    imagePath: "/assets/MigrateFromStripe.svg",
    subTextCustomValues: [
      "Low Code",
      "Blazing Fast Go-Live",
      "Stripe Compatible",
    ],
  },
  {
    headerIcon: "woocommerce-plugin",
    headerText: "WooCommerce Integration",
    buttonText: "Start Integration",
    customIconCss: "!w-96",
    url: "woocommerce-plugin",
    isIconImg: true,
    imagePath: "/assets/WooCommercePlugin.svg",
    subTextCustomValues: [
      "No Code, Blazing Fast Go-Live",
      "A Seamless Checkout Experience",
      "Orders Management",
    ],
    rightIcon: Caml_option.some(
      React.createElement(Icon.make, {
        name: "new-setup",
        size: 25,
        className: "w-20",
      }),
    ),
  },
];

var integrateHyperswitch = [
  {
    headerIcon: "github",
    headerText: "Clone a sample project",
    buttonText: "Start Integration",
    customIconCss: "!w-15",
    url: "sample-projects",
    subTextCustomValues: [
      "Supports 20+ languages",
      "Minimal integration steps",
      "Fastest!",
    ],
    buttonType: "Primary",
    rightIcon: Caml_option.some(
      React.createElement(Icon.make, {
        name: "quickSetup",
        size: 25,
        className: "w-28",
      }),
    ),
  },
  {
    headerIcon: "integrate-from-scratch",
    headerText: "Standard Integration",
    buttonText: "Start Integration",
    customIconCss: "!w-20",
    url: "integrate-from-scratch",
    subTextCustomValues: [
      "40+ Payment Processors",
      "60+ Payment Methods",
      "Unlimited Customizations",
    ],
  },
];

function UserOnboarding$DefaultDocsPage(props) {
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-12 p-8",
    },
    React.createElement(UserOnboardingUIUtils.Section.make, {
      sectionHeaderText: "Integrate Hyperswitch",
      sectionSubText: "Start by cloning a project or Integrating from scratch",
      subSectionArray: integrateHyperswitch,
    }),
    React.createElement("div", {
      className: "border-1 bg-grey-700 opacity-50 w-full",
    }),
    React.createElement(UserOnboardingUIUtils.Section.make, {
      sectionHeaderText: "Other Integration",
      sectionSubText: "",
      subSectionArray: buildHyperswitch,
    }),
  );
}

var DefaultDocsPage = {
  make: UserOnboarding$DefaultDocsPage,
};

function UserOnboarding(props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var searchParams = url.search;
  var filtersFromUrl = Core__Option.getOr(
    LogicUtils.getDictFromUrlSearchParams(searchParams)["type"],
    "",
  );
  var match = React.useState(function () {
    return "OnboardingDefault";
  });
  var setCurrentRoute = match[1];
  var currentRoute = match[0];
  var match$1 = React.useContext(GlobalProvider.defaultContext);
  var setIntegrationDetails = match$1.setIntegrationDetails;
  var integrationDetails = match$1.integrationDetails;
  var setDashboardPageState = match$1.setDashboardPageState;
  var dashboardPageState = match$1.dashboardPageState;
  React.useEffect(
    function () {
      if (dashboardPageState !== "HOME") {
        RescriptReactRouter.push(GlobalVars.appendDashboardPath("/onboarding"));
      }
    },
    [dashboardPageState],
  );
  React.useEffect(
    function () {
      var routeType;
      switch (filtersFromUrl) {
        case "integrate-from-scratch":
          routeType = "IntegrateFromScratch";
          break;
        case "migrate-from-stripe":
          routeType = "MigrateFromStripe";
          break;
        case "sample-projects":
          routeType = "SampleProjects";
          break;
        case "woocommerce-plugin":
          routeType = "WooCommercePlugin";
          break;
        default:
          routeType = "OnboardingDefault";
      }
      setCurrentRoute(function (param) {
        return routeType;
      });
      setDashboardPageState(function (param) {
        return "INTEGRATION_DOC";
      });
    },
    [url.search],
  );
  var getURL = APIUtils.useGetURL();
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var skipAndContinue = async function () {
    try {
      var url = getURL(
        "INTEGRATION_DETAILS",
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var metaDataDict = Object.fromEntries([["is_skip", true]]);
      var body = HSwitchUtils.constructOnboardingBody(
        dashboardPageState,
        integrationDetails,
        false,
        metaDataDict,
        undefined,
      );
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setIntegrationDetails(function (param) {
        return ProviderHelper.getIntegrationDetails(body);
      });
    } catch (exn) {}
    return setDashboardPageState(function (param) {
      return "HOME";
    });
  };
  var markAsDone = async function () {
    try {
      var url = getURL(
        "INTEGRATION_DETAILS",
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = HSwitchUtils.constructOnboardingBody(
        dashboardPageState,
        integrationDetails,
        true,
        LogicUtils.getJsonFromArrayOfJson([
          ["is_skip", false],
          [
            "integrationType",
            UserOnboardingUtils.variantToTextMapperForBuildHS(currentRoute),
          ],
        ]),
        undefined,
      );
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setIntegrationDetails(function (param) {
        return ProviderHelper.getIntegrationDetails(body);
      });
      return setDashboardPageState(function (param) {
        return "HOME";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Something went wrong"),
        );
      }
      throw e;
    }
  };
  var tmp;
  switch (currentRoute) {
    case "OnboardingDefault":
      tmp = React.createElement(UserOnboarding$DefaultDocsPage, {});
      break;
    case "WooCommercePlugin":
      tmp = React.createElement(IntegrationDocs.make, {
        currentRoute: currentRoute,
        markAsDone: markAsDone,
        languageSelection: false,
      });
      break;
    default:
      tmp = React.createElement(IntegrationDocs.make, {
        currentRoute: currentRoute,
        markAsDone: markAsDone,
      });
  }
  return React.createElement(
    "div",
    {
      className: "h-screen w-full bg-no-repeat bg-cover ",
      style: {
        backgroundImage:
          "url(/images/hyperswitchImages/PostLoginBackground.svg)",
      },
    },
    React.createElement(
      "div",
      {
        className:
          "h-screen w-screen  md:w-pageWidth11 md:mx-auto overflow-hidden grid grid-cols-1 md:grid-cols-[12rem,1fr,18rem] md:grid-rows-[4rem,1fr] py-10 px-4 gap-x-2 gap-y-8 grid-flow-row md:grid-flow-row",
      },
      React.createElement(
        "div",
        {
          className: "justify-self-center md:justify-self-start row-span-1",
        },
        React.createElement(Icon.make, {
          name: "hyperswitch-text-icon",
          size: 28,
          className: "cursor-pointer w-40 ",
        }),
      ),
      React.createElement(
        "div",
        {
          className:
            "row-span-1 col-span-1 flex justify-center items-start w-full text-lg font-semibold",
        },
        UserOnboardingUtils.getMainPageText(currentRoute),
      ),
      React.createElement(Button.make, {
        text: "Skip & Explore Dashboard",
        buttonType: "PrimaryOutline",
        onClick: function (param) {
          skipAndContinue();
        },
        customButtonStyle:
          "row-span-1 col-span-1 justify-self-center md:justify-self-end !rounded-md",
      }),
      React.createElement(
        "div",
        {
          className:
            "h-75-vh md:h-full w-full col-span-1 md:col-span-3 border rounded-md bg-white overflow-scroll",
        },
        tmp,
      ),
    ),
  );
}

var make = UserOnboarding;

export { buildHyperswitch, integrateHyperswitch, DefaultDocsPage, make };
/* buildHyperswitch Not a pure module */
