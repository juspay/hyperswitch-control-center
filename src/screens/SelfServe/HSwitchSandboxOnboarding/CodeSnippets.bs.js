// Generated by ReScript, PLEASE EDIT WITH CARE

var reactImports =
  'import React, { useState, useEffect } from "react";\nimport { loadHyper } from "@juspay-tech/hyper-js";\nimport { HyperElements } from "@juspay-tech/react-hyper-js";';

var htmlHandleEvents =
  'async function handleSubmit(e) {\n  e.preventDefault();\n  setLoading(true);\n\n  const { error } = await hyper.confirmPayment({\n    widgets,\n    confirmParams: {\n      // Make sure to change this to your payment completion page\n      return_url: "https://example.com/complete",\n    },\n  });\n\n  // This point will only be reached if there is an immediate error occurring while confirming the payment. Otherwise, your customer will be redirected to your "return_url".\n\n  // For some payment flows such as Sofort, iDEAL, your customer will be redirected to an intermediate page to complete authorization of the payment, and then redirected to the "return_url".\n\n  if (error.type === "validation_error") {\n    showMessage(error.message);\n  } else {\n    showMessage("An unexpected error occurred.");\n  }\n  setLoading(false);\n}';

var reactHandleEvent =
  "const handleSubmit = async (e) => {\n  e.preventDefault();\n\n  if (!hyper || !widgets) {\n    // hyper-js has not yet loaded.\n    // Make sure to disable form submission until hyper-js has loaded.\n    return;\n  }\n\n  setIsLoading(true);\n\n  const { error, status } = await hyper.confirmPayment({\n    widgets,\n    confirmParams: {\n      // Make sure to change this to your payment completion page\n      return_url: `https://example.com/complete`,\n    },\n  });\n\n  // This point will only be reached if there is an immediate error occurring while confirming the payment. Otherwise, your customer will be redirected to your `return_url`\n\n  // For some payment flows such as Sofort, iDEAL, your customer will be redirected to an intermediate page to complete authorization of the payment, and then redirected to the `return_url`.\n  if (error) {\n    if (error.type === `validation_error`) {\n      setMessage(error.message);\n    } else {\n      setMessage(`An unexpected error occurred.`);\n    }\n  } else {\n    setMessage(`Your payment is ${status}`)\n  }\n  setIsLoading(false);\n};";

var htmlDisplayConfirmation =
  '// Fetches the payment status after payment submission\nasync function checkStatus() {\n  const clientSecret = new URLSearchParams(window.location.search).get(\n    "payment_intent_client_secret"\n  );\n\n  if (!clientSecret) {\n    return;\n  }\n\n  const { payment } = await hyper.retrievePayment(clientSecret);\n\n  switch (payment.status) {\n    case "succeeded":\n      showMessage("Payment succeeded!");\n      break;\n    case "processing":\n      showMessage("Your payment is processing.");\n      break;\n    case "requires_payment_method":\n      showMessage("Your payment was not successful, please try again.");\n      break;\n    default:\n      showMessage("Something went wrong.");\n      break;\n  }\n}';

var reactDisplayConfirmation =
  '\n//Look for a parameter called "payment_intent_client_secre" in the url which gives a payment ID, which is then used to retrieve the status of the payment\n\nconst paymentID = new URLSearchParams(window.location.search).get(\n  "payment_intent_client_secret"\n);\n\nif (!paymentID) {\n  return;\n}\n\nhyper.retrievePaymentIntent(paymentID).then(({ paymentIntent }) => {\n  switch (paymentIntent.status) {\n    case "succeeded":\n      setMessage("Payment succeeded!");\n      break;\n    case "processing":\n      setMessage("Your payment is processing.");\n      break;\n    case "requires_payment_method":\n      setMessage("Your payment was not successful, please try again.");\n      break;\n    default:\n      setMessage("Something went wrong.");\n      break;\n  }\n});';

var htmlLoad =
  '<script src="https://beta.hyperswitch.io/v1/HyperLoader.js"></script>\n\n<form id="payment-form">\n  <div id="unified-checkout">\n   <!--HyperLoader injects the Unified Checkout-->\n  </div>\n  <button id="submit">\n    <div class="spinner hidden" id="spinner"></div>\n    <span id="button-text">Pay now</span>\n  </button>\n  <div id="payment-message" class="hidden"></div>\n</form>';

var reactLoad =
  'const hyperPromise = loadHyper("YOUR_PUBLISHABLE_KEY");\nconst [clientSecret, setClientSecret] = useState("");';

var htmlInitialize =
  'async function initialize() {\n  const response = await fetch("/create-payment", {\n    method: "POST",\n    headers: { "Content-Type": "application/json" },\n    body: JSON.stringify({ items: [{ id: "xl-tshirt" }], country: "US" }),\n  });\n  const { clientSecret } = await response.json();\n\n  const appearance = {\n    theme: "midnight",\n  };\n\n  const hyper = Hyper(YOUR_PUBLISHABLE_KEY);\n\n  widgets = hyper.widgets({ appearance, clientSecret });\n\n  var unifiedCheckoutOptions = {\n      wallets: {\n          walletReturnUrl: \'https://example.com/complete\',\n          //Mandatory parameter for Wallet Flows such as Googlepay, Paypal and Applepay\n      },\n  };\n\n  const unifiedCheckout = widgets.create("payment", unifiedCheckoutOptions);\n  unifiedCheckout.mount("#unified-checkout");\n}';

var reactInitialize =
  "\n useEffect(() => {\n    fetch(`/create-payment-intent`, {\n      method: `POST`,\n      body: JSON.stringify({ items: [{ id: `xl-tshirt` }], country: `US` }),\n    }).then(async (result) => {\n      var { clientSecret } = await result.json();\n      setClientSecret(clientSecret);\n    });\n  }, []);\n\n<>\n  {clientSecret && (\n    <HyperElements options={{ clientSecret }} hyper={hyperPromise}>\n      <CheckoutForm return_url={`${window.location.origin}/completion}` />\n    </HyperElements>\n  )}\n</> ";

var reactCheckoutFormDisplayCheckoutPage =
  "import { UnifiedCheckout, useHyper, useWidgets } from '@juspay-tech/react-hyper-js';\n\n// store a reference to hyper\nconst hyper = useHyper();\n\nvar unifiedCheckoutOptions = {\n      wallets: {\n          walletReturnUrl: 'https://example.com/complete',\n          //Mandatory parameter for Wallet Flows such as Googlepay, Paypal and Applepay\n      },\n};\n\n<form id='payment-form' onSubmit={handleSubmit}>\n  <UnifiedCheckout id='unified-checkout' options={unifiedCheckoutOptions} />\n    <button id='submit'>\n      <span id='button-text'>\n          {isLoading ? <div className='spinner' id='spinner'></div> : 'Pay Now'}\n      </span>\n    </button>\n    {/* Show any error or success messages */}\n    {message && <div id='payment-message'>{message}</div>}\n</form>";

var nodeInstallDependencies = "npm install @juspay-tech/hyperswitch-node";

var reactInstallDependencies =
  "npm install @juspay-tech/hyper-js\nnpm install @juspay-tech/react-hyper-js";

var rubyRequestPayment =
  "require 'net/http'\nrequire 'sinatra'\nrequire 'json'\nrequire 'uri'\n\nhyper_switch_api_key = 'HYPERSWITCH_API_KEY'\nhyper_switch_api_base_url = 'https://sandbox.hyperswitch.io/payments'\n\nset :static, true\nset :port, 4242\n\n# Securely calculate the order amount\ndef calculate_order_amount(_items)\n  # Replace this constant with a calculation of the order's amount\n  # Calculate the order total on the server to prevent\n  # people from directly manipulating the amount on the client\n  1400\nend\n\n# An endpoint to start the payment process\npost '/create-payment' do\n\n  data = JSON.parse(request.body.read)\n\n  # If you have two or more “business_country” + “business_label” pairs configured in your Hyperswitch dashboard,\n  # please pass the fields business_country and business_label in this request body.\n  # For accessing more features, you can check out the request body schema for payments-create API here :\n  # https://api-reference.hyperswitch.io/docs/hyperswitch-api-reference/60bae82472db8-payments-create\n          \n  payload = { amount: calculate_order_amount(data['items']), currency: 'USD' }.to_json\n  uri = URI.parse(hyper_switch_api_base_url)\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true\n  request = Net::HTTP::Post.new(uri.path,\n                                'Content-Type' => 'application/json',\n                                'Accept' => 'application/json',\n                                'api-key' => hyper_switch_api_key)\n  request.body = payload\n  response = http.request(request)\n  response_data = JSON.parse(response.body)\n  {\n    clientSecret: response_data['client_secret']\n  }.to_json\n\nend";

var javaRequestPayment =
  'package com.hyperswitch.sample;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\n\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nimport java.nio.file.Paths;\n\nimport static spark.Spark.post;\nimport static spark.Spark.staticFiles;\nimport static spark.Spark.port;\n\nimport org.json.JSONObject;\n\npublic class server {\n\n  public static void main(String[] args) {\n\n    port(4242);\n\n    staticFiles.externalLocation(Paths.get("public").toAbsolutePath().toString());\n\n    post("/create-payment", (request, response) -> {\n\n      response.type("application/json");\n\n      /*\n        If you have two or more “business_country” + “business_label” pairs configured in your Hyperswitch dashboard,\n        please pass the fields business_country and business_label in this request body.\n        For accessing more features, you can check out the request body schema for payments-create API here :\n        https://api-reference.hyperswitch.io/docs/hyperswitch-api-reference/60bae82472db8-payments-create\n      */\n\n      String payload = "{ "amount": 100, "currency": "USD" }";\n\n      String response_string = createPayment(payload);\n      JSONObject response_json = new JSONObject(response_string);\n\n      String client_secret = response_json.getString("client_secret");\n\n      JSONObject final_response = new JSONObject();\n      final_response.put("clientSecret", client_secret);\n\n      return final_response;\n\n    });\n\n  }\n\n  private static String createPayment(String payload) {\n\n    try {\n\n      String HYPER_SWITCH_API_KEY = "HYPERSWITCH_API_KEY";\n      String HYPER_SWITCH_API_BASE_URL = "https://sandbox.hyperswitch.io/payments";\n\n      URL url = new URL(HYPER_SWITCH_API_BASE_URL);\n      HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n\n      conn.setRequestMethod("POST");\n      conn.setRequestProperty("Content-Type", "application/json");\n      conn.setRequestProperty("Accept", "application/json");\n      conn.setRequestProperty("api-key", HYPER_SWITCH_API_KEY);\n      conn.setDoOutput(true);\n\n      try (OutputStream os = conn.getOutputStream()) {\n        byte[] input = payload.getBytes("utf-8");\n        os.write(input, 0, input.length);\n      }\n\n      int responseCode = conn.getResponseCode();\n\n      if (responseCode == HttpURLConnection.HTTP_OK) {\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"))) {\n          StringBuilder response = new StringBuilder();\n          String responseLine;\n          while ((responseLine = br.readLine()) != null) {\n            response.append(responseLine.trim());\n          }\n          return response.toString();\n        }\n      } else {\n        return "HTTP request failed with response code: " + responseCode;\n      }\n    } catch (IOException e) {\n      return e.getMessage();\n    }\n\n  }\n\n}';

var pythonRequestPayment =
  '#! /usr/bin/env python3.6\n"""\nPython 3.6 or newer required.\n"""\nimport http.client\nimport json\nimport os\nfrom flask import Flask, render_template, jsonify, request\n\napp = Flask(__name__,\n            static_folder=\'public\',\n            static_url_path=\'\',\n            template_folder=\'public\')\n\ndef calculate_order_amount(items):\n  # Replace this constant with a calculation of the order\'s amount\n  # Calculate the order total on the server to prevent\n  # people from directly manipulating the amount on the client\n  return 1400\n\n@app.route(\'/create-payment\', methods=[\'POST\'])\ndef create_payment():\n  try:\n    conn = http.client.HTTPSConnection("sandbox.hyperswitch.io")\n\n    # If you have two or more “business_country” + “business_label” pairs configured in your Hyperswitch dashboard,\n    # please pass the fields business_country and business_label in this request body.\n    # For accessing more features, you can check out the request body schema for payments-create API here :\n    # https://api-reference.hyperswitch.io/docs/hyperswitch-api-reference/60bae82472db8-payments-create\n              \n    payload = "{\n "amount": 100,\n "currency": "USD"\n}"\n    headers = {\n      \'Content-Type\': "application/json",\n      \'Accept\': "application/json",\n      \'api-key\': "HYPERSWITCH_API_KEY",\n    }\n    conn.request("POST", "/payments", payload, headers)\n    res = conn.getresponse()\n    data = json.loads(res.read())\n    return jsonify({\'clientSecret\': data[\'client_secret\']})\n  except Exception as e:\n    return jsonify(error=str(e)), 403\n\nif __name__ == \'__main__\':\n  app.run(port=4242)';

var netRequestPayment =
  'using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Newtonsoft.Json;\n\nnamespace HyperswitchExample\n{\n  public class Program\n  {\n    public static void Main(string[] args)\n    {\n      WebHost.CreateDefaultBuilder(args)\n        .UseUrls("http://0.0.0.0:4242")\n        .UseWebRoot("public")\n        .UseStartup<Startup>()\n        .Build()\n        .Run();\n    }\n  }\n\n  public class Startup\n  {\n    public void ConfigureServices(IServiceCollection services)\n    {\n      services.AddMvc().AddNewtonsoftJson();\n    }\n\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n      if (env.IsDevelopment()) app.UseDeveloperExceptionPage();\n      app.UseRouting();\n      app.UseStaticFiles();\n      app.UseEndpoints(endpoints => endpoints.MapControllers());\n    }\n\n  }\n\n  [Route("create-payment")]\n  [ApiController]\n  public class PaymentIntentApiController : Controller\n  {\n\n    [HttpPost]\n    public async Task<ActionResult> CreateAsync(PaymentIntentCreateRequest request)\n    {\n        string HYPER_SWITCH_API_KEY = "HYPERSWITCH_API_KEY";\n        string HYPER_SWITCH_API_BASE_URL = "https://sandbox.hyperswitch.io/payments";\n\n        /*\n          If you have two or more “business_country” + “business_label” pairs configured in your Hyperswitch dashboard,\n          please pass the fields business_country and business_label in this request body.\n          For accessing more features, you can check out the request body schema for payments-create API here :\n          https://api-reference.hyperswitch.io/docs/hyperswitch-api-reference/60bae82472db8-payments-create\n        */\n\n        var payload = new { amount = CalculateOrderAmount(request.Items), currency = "USD" };\n\n        using (var httpClient = new System.Net.Http.HttpClient())\n        {\n            httpClient.DefaultRequestHeaders.Add("api-key", HYPER_SWITCH_API_KEY);\n\n            var jsonPayload = JsonConvert.SerializeObject(payload);\n\n            var content = new System.Net.Http.StringContent(jsonPayload, System.Text.Encoding.UTF8, "application/json");\n\n            var response = await httpClient.PostAsync(HYPER_SWITCH_API_BASE_URL, content);\n            var responseContent = await response.Content.ReadAsStringAsync();\n\n            if (response.IsSuccessStatusCode)\n            {\n                dynamic responseData = JsonConvert.DeserializeObject(responseContent);\n                return Json(new {clientSecret = responseData.client_secret});\n            }\n            else\n            {\n                return Json(new {error = "Request failed"});\n            }\n        }\n    }\n\n    private int CalculateOrderAmount(Item[] items)\n    {\n      return 1400;\n    }\n\n    public class Item\n    {\n      [JsonProperty("id")]\n      public string Id { get; set; }\n    }\n\n    public class PaymentIntentCreateRequest\n    {\n      [JsonProperty("items")]\n      public Item[] Items { get; set; }\n    }\n  }\n}';

var rustRequestPayment =
  'extern crate reqwest;\nuse reqwest::header;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let mut headers = header::HeaderMap::new();\n    headers.insert("Content-Type", "application/json".parse().unwrap());\n    headers.insert("Accept", "application/json".parse().unwrap());\n    headers.insert("api-key", "YOUR_API_KEY".parse().unwrap());\n\n    let client = reqwest::blocking::Client::new();\n    let res = client.post("https://sandbox.hyperswitch.io/payments")\n        .headers(headers)\n        .body(r#"\n{\n "amount": 100,\n "currency": "USD"\n}\n"#\n        )\n        .send()?\n        .text()?;\n    println!("{}", res);\n\n    Ok(())\n}';

var shellRequestPayment =
  "curl --location --request POST 'https://sandbox.hyperswitch.io/payments' \
--header 'Content-Type: application/json' \
--header 'Accept: application/json' \
--header 'api-key: YOUR_API_KEY' \
--data-raw '{\n \"amount\": 100,\n \"currency\": \"USD\"\n}'";

var phpRequestPayment =
  "<?php\n\nrequire_once '../vendor/autoload.php';\nrequire_once '../secrets.php';\n\n$HYPER_SWITCH_API_KEY = $hyperswitch_secret_key;\n$HYPER_SWITCH_API_BASE_URL = \"https://sandbox.hyperswitch.io/payments\";\n\nfunction calculateOrderAmount(array $items): int {\n    // Replace this constant with a calculation of the order's amount\n    // Calculate the order total on the server to prevent\n    // people from directly manipulating the amount on the client\n    return 1400;\n}\n\ntry {\n\n    $jsonStr = file_get_contents('php://input');\n    $jsonObj = json_decode($jsonStr);\n\n    /*\n        If you have two or more “business_country” + “business_label” pairs configured in your Hyperswitch dashboard,\n        please pass the fields business_country and business_label in this request body.\n        For accessing more features, you can check out the request body schema for payments-create API here :\n        https://api-reference.hyperswitch.io/docs/hyperswitch-api-reference/60bae82472db8-payments-create\n    */\n    \n    $payload = json_encode(array(\n        \"amount\" => calculateOrderAmount($jsonObj->items),\n        \"currency\" => \"USD\"\n    ));\n\n    $ch = curl_init($HYPER_SWITCH_API_BASE_URL);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'Content-Type: application/json',\n        'Accept: application/json',\n        'api-key: ' . $HYPER_SWITCH_API_KEY\n    ));\n\n    $responseFromAPI = curl_exec($ch);\n    if ($responseFromAPI === false) {\n         $output = json_encode(array(\"error\" => curl_error($ch)), 403);\n    }\n\n    curl_close($ch);\n\n    $decoded_response = json_decode($responseFromAPI, true);\n\n    $output=array(\"clientSecret\" => $decoded_response['client_secret']);\n\n    echo json_encode($output);\n\n} catch (Exception $e) {\n\n    echo json_encode(array(\"error\" => $e->getMessage()), 403);\n    \n}";

var goRequestPayment =
  'package main\n\nimport (\n	"encoding/json"\n  	"log"\n	"fmt"\n	"net/http"\n  	"bytes"\n)\n\nconst HYPER_SWITCH_API_KEY = "HYPERSWITCH_API_KEY"\nconst HYPER_SWITCH_API_BASE_URL = "https://sandbox.hyperswitch.io"\n\nfunc createPaymentHandler(w http.ResponseWriter, r *http.Request) {\n	\n	/*\n		If you have two or more “business_country” + “business_label” pairs configured in your Hyperswitch dashboard,\n		please pass the fields business_country and business_label in this request body.\n		For accessing more features, you can check out the request body schema for payments-create API here :\n		https://api-reference.hyperswitch.io/docs/hyperswitch-api-reference/60bae82472db8-payments-create\n	*/\n	\n	payload := []byte("{"amount": 100, "currency": "USD"}")\n	client := &http.Client{}\n	req, err := http.NewRequest("POST", HYPER_SWITCH_API_BASE_URL+"/payments", bytes.NewBuffer(payload))\n	if err != nil {\n		http.Error(w, err.Error(), http.StatusInternalServerError)\n		return\n	}\n\n	req.Header.Set("Content-Type", "application/json")\n	req.Header.Set("Accept", "application/json")\n	req.Header.Set("api-key", HYPER_SWITCH_API_KEY)\n\n	resp, err := client.Do(req)\n	if err != nil {\n		http.Error(w, err.Error(), http.StatusInternalServerError)\n		return\n	}\n	defer resp.Body.Close()\n\n	if resp.StatusCode != http.StatusOK {\n		http.Error(w, fmt.Sprintf("API request failed with status code: %d", resp.StatusCode), http.StatusInternalServerError)\n		return\n	}\n\n	var data map[string]interface{}\n	err = json.NewDecoder(resp.Body).Decode(&data)\n	if err != nil {\n		http.Error(w, err.Error(), http.StatusInternalServerError)\n		return\n	}\n\n	json.NewEncoder(w).Encode(map[string]interface{}{"clientSecret": data["client_secret"]})\n}\n\nfunc main() {\n	fs := http.FileServer(http.Dir("public"))\n  http.Handle("/", fs)\n  http.HandleFunc("/create-payment", createPaymentHandler)\n\n  addr := "localhost:4242"\n  log.Printf("Listening on %s ...", addr)\n  log.Fatal(http.ListenAndServe(addr, nil))\n}';

var nodeReplaceApiKey = {
  from: '// FROM\n  const stripe = require("stripe")("your_stripe_api_key");\n  const paymentIntent = await stripe.paymentIntents.create({...})',
  to: '//TO \n  const hyper = require("@juspay-tech/hyperswitch-node")("your_hyperswitch_api_key");\n  const paymentIntent = await stripe.paymentIntents.create({...})',
};

var reactCheckoutForm = {
  from: '// FROM\n  import { PaymentElement,  useStripe, useElements,} from "@stripe/react-stripe-js";',
  to: '//TO\n  import {   UnifiedCheckout, useStripe,  useElements,} from "@juspay-tech/react-hyper-js";',
};

var htmlCheckoutForm = {
  from: '// FROM\n  <script src="https://js.stripe.com/v3/"></script>',
  to: '//TO\n  <script src="https://beta.hyperswitch.io/v1/HyperLoader.js"></script>',
};

var reactHyperSwitchCheckout = {
  from: '// FROM\n  const stripePromise = loadStripe("your_stripe_publishable_key");',
  to: '//TO \n  const hyperPromise = loadHyper("your_hyperswitch_publishable_key");\n  ',
};

var htmlHyperSwitchCheckout = {
  from: '// FROM \n  const stripe = Stripe("your_stripe_publishable_key");',
  to: '// To\n  const hyper = Hyper("your_hyperswitch_publishable_key"); ',
};

var nodeMigrateFromStripeDXForReact =
  "npm install @juspay-tech/react-hyper-js\nnpm install @juspay-tech/hyper-js\nnpm install @juspay-tech/hyperswitch-node\n";

var nodeMigrateFromStripeDXForHTML =
  "npm install @juspay-tech/hyperswitch-node";

var nodeCreateAPayment =
  'const express = require("express");\nconst app = express();\n\nconst hyperswitch = require("@juspay-tech/hyperswitch-node")(\'HYPERSWITCH_API_KEY\');\n\napp.use(express.static("public"));\napp.use(express.json());\n\nconst calculateOrderAmount = (items) => {\n  return 1345;\n};\n\napp.post("/create-payment", async (req, res) => {\n\n  const { items } = req.body;\n\n  /*\n     If you have two or more "business_country" + "business_label" pairs configured in your Hyperswitch dashboard,\n     please pass the fields business_country and business_label in this request body.\n     For accessing more features, you can check out the request body schema for payments-create API here :\n     https://api-reference.hyperswitch.io/docs/hyperswitch-api-reference/60bae82472db8-payments-create\n  */\n\n  const paymentIntent = await hyperswitch.paymentIntents.create({\n    amount: calculateOrderAmount(items),\n    currency: "USD",\n  });\n\n  res.send({\n    clientSecret: paymentIntent.client_secret,\n  });\n});\n\napp.listen(4242, () => console.log("Node server listening on port 4242!"));';

export {
  reactImports,
  htmlHandleEvents,
  reactHandleEvent,
  htmlDisplayConfirmation,
  reactDisplayConfirmation,
  htmlLoad,
  reactLoad,
  htmlInitialize,
  reactInitialize,
  reactCheckoutFormDisplayCheckoutPage,
  nodeInstallDependencies,
  reactInstallDependencies,
  rubyRequestPayment,
  javaRequestPayment,
  pythonRequestPayment,
  netRequestPayment,
  rustRequestPayment,
  shellRequestPayment,
  phpRequestPayment,
  goRequestPayment,
  nodeReplaceApiKey,
  reactCheckoutForm,
  htmlCheckoutForm,
  reactHyperSwitchCheckout,
  htmlHyperSwitchCheckout,
  nodeMigrateFromStripeDXForReact,
  nodeMigrateFromStripeDXForHTML,
  nodeCreateAPayment,
};
/* No side effect */
