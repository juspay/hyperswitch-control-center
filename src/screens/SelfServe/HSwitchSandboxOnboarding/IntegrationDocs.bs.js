// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as Tabs from "../../../components/Tabs.bs.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../../HSwitchUtils.bs.js";
import * as ThemeProvider from "../../../context/ThemeProvider.bs.js";
import * as CommonAuthHooks from "../../../entryPoints/AuthModule/Common/CommonAuthHooks.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as UserOnboardingUtils from "./UserOnboardingUtils.bs.js";
import * as UserOnboardingUIUtils from "./UserOnboardingUIUtils.bs.js";

function IntegrationDocs$RequestPage(props) {
  var currentRoute = props.currentRoute;
  var match = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  var email = match.email;
  var getURL = APIUtils.useGetURL();
  var requestedValue = LogicUtils.capitalizeString(
    Core__Option.getOr(props.requestedPlatform, ""),
  );
  var match$1 = React.useState(function () {
    return true;
  });
  var setIsSubmitButtonEnabled = match$1[1];
  var showToast = ToastState.useShowToast();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var handleSubmitRequest = async function () {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "USER_DATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var values = LogicUtils.getJsonFromArrayOfJson([
        ["rating", 5.0],
        ["category", "Platform Request"],
        ["feedbacks", "Request for " + requestedValue],
      ]);
      var requestedBody = HSwitchUtils.getBodyForFeedBack(
        email,
        values,
        undefined,
        undefined,
      );
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["Feedback", requestedBody],
      ]);
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      showToast(
        "Request submitted successfully!",
        "ToastSuccess",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setIsSubmitButtonEnabled(function (param) {
        return false;
      });
    } catch (exn) {
      return;
    }
  };
  React.useEffect(
    function () {
      setIsSubmitButtonEnabled(function (param) {
        return true;
      });
    },
    [requestedValue],
  );
  var handleButtonClick = function () {
    if (currentRoute === "MigrateFromStripe") {
      var match = UserOnboardingUtils.getPlatform(requestedValue);
      if (match === "ReactNative") {
        window.open(
          "https://hyperswitch.io/docs/migrateFromStripe/migrateFromStripeRN",
        );
      } else if (match === "Android") {
        window.open(
          "https://hyperswitch.io/docs/migrateFromStripe/migrateFromStripeAndroid",
        );
      } else if (match === "IOS") {
        window.open(
          "https://hyperswitch.io/docs/migrateFromStripe/migrateFromStripeIos",
        );
      } else {
        handleSubmitRequest();
      }
      return;
    }
    handleSubmitRequest();
  };
  var buttonText = function () {
    if (currentRoute !== "MigrateFromStripe") {
      return "I'm Interested";
    }
    var match = UserOnboardingUtils.getPlatform(requestedValue);
    if (match === "IOS" || match === "Android" || match === "ReactNative") {
      return "Go to Developers Docs";
    } else {
      return "I'm Interested";
    }
  };
  var subText = function () {
    if (currentRoute !== "MigrateFromStripe") {
      return "Our team is currently working to make this available for you soon.Please reach out to us on our Slack for any queries.";
    }
    var match = UserOnboardingUtils.getPlatform(requestedValue);
    if (match === "IOS" || match === "Android" || match === "ReactNative") {
      return (
        "You can access the Integration docs for " +
        requestedValue +
        " plugin on our Developer docs, we will be updating it here shortly."
      );
    } else {
      return "Our team is currently working to make this available for you soon.Please reach out to us on our Slack for any queries.";
    }
  };
  return React.createElement(
    "div",
    {
      className:
        "border bg-jp-gray-light_gray_bg h-full rounded-md p-6 overflow-scroll flex flex-col justify-center items-center gap-6",
    },
    React.createElement(Icon.make, {
      name: requestedValue.toLowerCase(),
      size: 180,
      className: "!scale-200",
    }),
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-2 items-center justify-center",
      },
      React.createElement(
        "p",
        {
          className: "text-2xl font-semibold text-grey-700",
        },
        requestedValue + " (Coming Soon)",
      ),
      React.createElement(
        "p",
        {
          className:
            "text-base font-semibold text-grey-700 opacity-50 w-1/2 text-center",
        },
        subText(),
      ),
    ),
    React.createElement(Button.make, {
      buttonState: match$1[0] ? "Normal" : "Disabled",
      text: buttonText(),
      buttonType: "Primary",
      onClick: function (param) {
        handleButtonClick();
      },
      customButtonStyle: "!rounded-md",
    }),
  );
}

var RequestPage = {
  make: IntegrationDocs$RequestPage,
};

function IntegrationDocs(props) {
  var __languageSelection = props.languageSelection;
  var markAsDone = props.markAsDone;
  var __isFromOnboardingChecklist = props.isFromOnboardingChecklist;
  var currentRoute = props.currentRoute;
  var isFromOnboardingChecklist =
    __isFromOnboardingChecklist !== undefined
      ? __isFromOnboardingChecklist
      : false;
  var languageSelection =
    __languageSelection !== undefined ? __languageSelection : true;
  var match = React.useContext(ThemeProvider.themeContext);
  var textColor = match.globalUIConfig.font.textColor;
  var match$1 = React.useState(function () {
    return 0;
  });
  var setTabIndex = match$1[1];
  var tabIndex = match$1[0];
  var match$2 = React.useState(function () {
    if (currentRoute === "SampleProjects") {
      return "ChooseLanguage";
    } else {
      return "ReactJs";
    }
  });
  var frontEndLang = match$2[0];
  var match$3 = React.useState(function () {
    if (currentRoute === "SampleProjects") {
      return "ChooseLanguage";
    } else {
      return "Node";
    }
  });
  var backEndLang = match$3[0];
  var match$4 = React.useState(function () {
    return "Web";
  });
  var platform = match$4[0];
  var merchantDetails = Recoil.useRecoilValue(
    HyperswitchAtom.merchantDetailsValueAtom,
  );
  var publishablekeyMerchant = merchantDetails.publishable_key;
  var match$5 = ThemeProvider.useTheme();
  var theme;
  theme = match$5 === "Light" ? "light" : "vs-dark";
  var tabs = UserOnboardingUIUtils.getTabsForIntegration(
    currentRoute,
    tabIndex,
    frontEndLang,
    theme,
    backEndLang,
    publishablekeyMerchant,
  );
  var handleMarkAsDone = function () {
    if (markAsDone !== undefined) {
      markAsDone();
      return;
    }
  };
  var handleDeveloperDocs = function () {
    switch (currentRoute) {
      case "MigrateFromStripe":
        window.open("https://hyperswitch.io/docs/migrateFromStripe");
        return;
      case "IntegrateFromScratch":
        window.open("https://hyperswitch.io/docs/quickstart");
        return;
      case "WooCommercePlugin":
        window.open(
          "https://hyperswitch.io/docs/sdkIntegrations/wooCommercePlugin/wooCommercePluginSetup",
        );
        return;
      case "OnboardingDefault":
      case "SampleProjects":
        window.open("https://hyperswitch.io/docs/");
        return;
    }
  };
  var getRequestedPlatforms = function () {
    if (UserOnboardingUtils.requestOnlyPlatforms.includes(platform)) {
      return platform;
    } else if (
      !["Node"].includes(backEndLang) &&
      currentRoute === "MigrateFromStripe"
    ) {
      return backEndLang;
    } else {
      return;
    }
  };
  var buttonStyle =
    tabIndex === ((tabs.length - 1) | 0)
      ? "!border !rounded-md bg-white !" + textColor.primaryNormal
      : "!rounded-md";
  var requestedPlatform = getRequestedPlatforms();
  return React.createElement(
    "div",
    {
      className: "w-full h-full flex flex-col bg-white",
    },
    React.createElement(UserOnboardingUIUtils.ProgressBar.make, {
      tabs: tabs,
      tabIndex: tabIndex,
    }),
    React.createElement(
      "div",
      {
        className: "flex flex-col w-full h-full p-6 gap-4 ",
      },
      React.createElement(
        "div",
        {
          className:
            "flex " +
            (languageSelection ? "justify-between" : "justify-end") +
            " flex-wrap gap-2",
        },
        React.createElement(RenderIf.make, {
          condition: languageSelection,
          children: React.createElement(
            UserOnboardingUIUtils.BackendFrontendPlatformLangDropDown.make,
            {
              frontEndLang: frontEndLang,
              setFrontEndLang: match$2[1],
              backEndLang: backEndLang,
              setBackEndLang: match$3[1],
              currentRoute: currentRoute,
              platform: platform,
              setPlatform: match$4[1],
            },
          ),
        }),
        React.createElement(RenderIf.make, {
          condition: !isFromOnboardingChecklist,
          children: React.createElement(Button.make, {
            buttonState:
              tabIndex === ((tabs.length - 1) | 0) ? "Normal" : "Disabled",
            text: "Mark as done",
            buttonType: "Secondary",
            buttonSize: "Small",
            onClick: function (param) {
              handleMarkAsDone();
            },
            customButtonStyle: buttonStyle,
          }),
        }),
      ),
      Core__Option.isSome(requestedPlatform)
        ? React.createElement(IntegrationDocs$RequestPage, {
            requestedPlatform: requestedPlatform,
            currentRoute: currentRoute,
          })
        : React.createElement(
            "div",
            {
              className: "flex flex-col my-4",
            },
            React.createElement(Tabs.make, {
              tabs: tabs,
              initialIndex: tabIndex,
              onTitleClick: function (indx) {
                setTabIndex(function (param) {
                  return indx;
                });
              },
              lightThemeColor: "black",
              defaultClasses:
                "w-max flex flex-auto flex-row items-center justify-center px-6  font-semibold text-body",
              showBorder: false,
              renderedTabClassName: "!h-full",
              includeMargin: false,
              gapBetweenTabs: "gap-0",
              borderSelectionStyle:
                "border-l-1 border-r-1 border-t-1 !p-4 !border-grey-600 !w-full",
              borderDefaultStyle: "border-b-1 !p-4 !border-grey-600 ",
              showBottomBorder: false,
            }),
            React.createElement(RenderIf.make, {
              condition: tabIndex !== ((tabs.length - 1) | 0),
              children: React.createElement(
                "div",
                {
                  className: "flex my-4 w-full justify-end",
                },
                React.createElement(Button.make, {
                  text: "Next Step",
                  buttonType: "Secondary",
                  buttonSize: "Small",
                  rightIcon: {
                    TAG: "CustomIcon",
                    _0: React.createElement(Icon.make, {
                      name: "arrow-right",
                      size: 15,
                      className:
                        "mr-1 jp-gray-900 fill-opacity-50 dark:jp-gray-text_darktheme",
                    }),
                  },
                  onClick: function (param) {
                    setTabIndex(function (indx) {
                      return (indx + 1) | 0;
                    });
                  },
                  customButtonStyle: buttonStyle,
                }),
              ),
            }),
            React.createElement(
              "div",
              {
                className: "flex gap-1 flex-wrap pb-5 justify-between ",
              },
              React.createElement(
                "div",
                {
                  className: "flex gap-2",
                },
                React.createElement(
                  "p",
                  {
                    className: "text-base font-normal text-grey-700",
                  },
                  "Explore our detailed developer documentation on our",
                ),
                React.createElement(
                  "p",
                  {
                    className:
                      "text-base font-semibold " +
                      textColor.primaryNormal +
                      " cursor-pointer underline",
                    onClick: function (param) {
                      handleDeveloperDocs();
                    },
                  },
                  "Developer Docs",
                ),
              ),
            ),
          ),
    ),
  );
}

var make = IntegrationDocs;

export { RequestPage, make };
/* Icon Not a pure module */
