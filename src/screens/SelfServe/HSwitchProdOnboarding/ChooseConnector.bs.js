// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as GatewayIcon from "../../../components/custom-icons/GatewayIcon.bs.js";
import * as ThemeProvider from "../../../context/ThemeProvider.bs.js";
import * as ConnectorUtils from "../../Connectors/ConnectorUtils.bs.js";
import * as AddDataAttributes from "../../../components/AddDataAttributes.bs.js";
import * as ProdOnboardingUtils from "./ProdOnboardingUtils.bs.js";

var headerTextStyle = "text-xl font-semibold text-grey-700";

var connectorNameStyle = "text-md font-semibold text-grey-700";

var subTextStyle = "text-base font-normal text-grey-700 opacity-50";

function ChooseConnector(props) {
  var setPageView = props.setPageView;
  var pageView = props.pageView;
  var setSelectedConnector = props.setSelectedConnector;
  var selectedConnector = props.selectedConnector;
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = match.globalUIConfig;
  var borderColor = match$1.border.borderColor;
  var backgroundColor = match$1.backgroundColor;
  var textColor = match$1.font.textColor;
  var getBlockColor = function (connector) {
    if (
      selectedConnector.TAG === "Processors" &&
      connector.TAG === "Processors" &&
      selectedConnector._0 === connector._0
    ) {
      return (
        "border " +
        borderColor.primaryNormal +
        " " +
        backgroundColor +
        " bg-opacity-10 "
      );
    } else {
      return "border";
    }
  };
  var selectedIconColor = function (connector) {
    if (
      selectedConnector.TAG === "Processors" &&
      connector.TAG === "Processors" &&
      selectedConnector._0 === connector._0
    ) {
      return "selected";
    } else {
      return "nonselected";
    }
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-16 w-full p-10",
    },
    React.createElement(
      "div",
      {
        className: "flex justify-between items-center flex-wrap gap-4",
      },
      React.createElement(
        "div",
        undefined,
        React.createElement(
          "p",
          {
            className: headerTextStyle,
          },
          "Select a processor to continue",
        ),
        React.createElement(
          "p",
          {
            className: subTextStyle,
          },
          "Additional processors can be added under Home > Processors",
        ),
      ),
      React.createElement(Button.make, {
        text: "Proceed",
        buttonType: "Primary",
        buttonSize: "Small",
        onClick: function (param) {
          setPageView(function (param) {
            return ProdOnboardingUtils.getPageView(pageView);
          });
        },
        customButtonStyle: "!rounded-md",
      }),
    ),
    React.createElement(
      "div",
      {
        className: "grid grid-cols-1 gap-4 md:grid-cols-3 md:gap-8",
      },
      ConnectorUtils.connectorListForLive.map(function (connector, index) {
        var connectorInfo = ConnectorUtils.getConnectorInfo(connector);
        var connectorName = ConnectorUtils.getConnectorNameString(connector);
        return React.createElement(AddDataAttributes.make, {
          attributes: [["data-testid", connectorName]],
          children: React.createElement(
            "div",
            {
              key: index.toString(),
              className:
                "py-4 px-6 flex flex-col gap-4 rounded-md cursor-pointer " +
                getBlockColor(connector),
              onClick: function (param) {
                setSelectedConnector(function (param) {
                  return connector;
                });
              },
            },
            React.createElement(
              "div",
              {
                className: "flex flex-col justify-between items-start gap-4",
              },
              React.createElement(
                "div",
                {
                  className: "flex w-full flex-col gap-2",
                },
                React.createElement(
                  "div",
                  {
                    className: "flex w-full justify-between",
                  },
                  React.createElement(GatewayIcon.make, {
                    gateway:
                      ConnectorUtils.getConnectorNameString(
                        connector,
                      ).toUpperCase(),
                    className: "w-10 h-10",
                  }),
                  React.createElement(Icon.make, {
                    name: selectedIconColor(connector),
                    size: 20,
                    className: "cursor-pointer !" + textColor.primaryNormal,
                  }),
                ),
                React.createElement(
                  "p",
                  {
                    className: connectorNameStyle,
                  },
                  ConnectorUtils.getDisplayNameForConnector(
                    undefined,
                    connectorName,
                  ),
                ),
              ),
              React.createElement(
                "p",
                {
                  className: subTextStyle,
                },
                connectorInfo.description,
              ),
            ),
          ),
        });
      }),
    ),
  );
}

var subheaderText = "text-base font-semibold text-grey-700";

var make = ChooseConnector;

export {
  headerTextStyle,
  connectorNameStyle,
  subTextStyle,
  subheaderText,
  make,
};
/* Icon Not a pure module */
