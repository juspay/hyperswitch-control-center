// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Loader from "../../../components/Loader.bs.js";
import * as ToolTip from "../../../components/tooltip/ToolTip.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as AuthHooks from "../../../hooks/AuthHooks.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CheckBoxIcon from "../../../components/custom-icons/CheckBoxIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../../HSwitchUtils.bs.js";
import * as TimeZoneHook from "../../../hooks/TimeZoneHook.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as DownloadUtils from "../../../utils/DownloadUtils.bs.js";
import * as GlobalProvider from "../../../entryPoints/Provider/GlobalProvider.bs.js";
import * as SwitchMerchant from "../../SwitchMerchant/SwitchMerchant.bs.js";
import * as CommonAuthHooks from "../../../entryPoints/AuthModule/Common/CommonAuthHooks.bs.js";
import * as DefaultLandingPage from "../../Helpers/DefaultLandingPage.bs.js";
import * as ProdOnboardingUtils from "./ProdOnboardingUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as ReactSuspenseWrapper from "../../../context/ReactSuspenseWrapper.bs.js";
import * as ReactPDFViewerSinglePageLazy from "../../../libraries/PDFViewer/ReactPDFViewerSinglePageLazy.bs.js";

function HSwitchAgreementScreen(props) {
  var getURL = APIUtils.useGetURL();
  var showToast = ToastState.useShowToast();
  var fetchApi = AuthHooks.useApiFetcher();
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var match = React.useContext(GlobalProvider.defaultContext);
  var setDashboardPageState = match.setDashboardPageState;
  var match$1 = React.useState(function () {
    return false;
  });
  var setIsAgreeEnable = match$1[1];
  var match$2 = React.useState(function () {
    return false;
  });
  var setIsSelected = match$2[1];
  var isSelected = match$2[0];
  var match$3 = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  React.useEffect(
    function () {
      RescriptReactRouter.push(
        GlobalVars.appendDashboardPath("/agreement-signature"),
      );
    },
    [match.dashboardPageState],
  );
  var agreementSignature = async function () {
    try {
      var agreementUrl = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "MERCHANT_DATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = ProdOnboardingUtils.getProdApiBody(
        "ProductionAgreement",
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        agreementUrl,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setDashboardPageState(function (param) {
        return "PROD_ONBOARDING";
      });
    } catch (exn) {
      return showToast(
        "Oops, something went wrong. Please try again.",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
  };
  var downloadURL = Core__Option.getOr(window._env_.agreementUrl, "");
  var downloadPDF = function () {
    var currentDate = TimeZoneHook.formattedISOString(
      new Date(Date.now()).toISOString(),
      "YYYY-MM-DD HH:mm:ss",
    );
    if (LogicUtils.isNonEmptyString(downloadURL)) {
      Core__Promise.$$catch(
        fetchApi(
          downloadURL,
          undefined,
          undefined,
          undefined,
          "Get",
          undefined,
          undefined,
          undefined,
        )
          .then(function (resp) {
            return resp.blob();
          })
          .then(function (content) {
            DownloadUtils.download(
              "HyperswitchTermsAndConditions-" + currentDate + ".pdf",
              content,
              "application/pdf",
            );
            showToast(
              "Agreement download complete",
              "ToastSuccess",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            agreementSignature();
            return Promise.resolve();
          }),
        function (param) {
          showToast(
            "Oops, something went wrong with the download. Please try again.",
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          return Promise.resolve();
        },
      );
      return;
    } else {
      showToast(
        "Oops, something went wrong with the download - localhost",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setDashboardPageState(function (param) {
        return "PROD_ONBOARDING";
      });
    }
  };
  var errorState = React.createElement(DefaultLandingPage.make, {
    width: "100%",
    height: "75vh",
    title: "Oops, we hit a little bump on the road!",
    subtitle:
      "We apologize for the inconvenience, but it seems like we encountered a hiccup while processing your request.",
    customStyle: "py-16 !m-0",
    isButton: true,
    buttonText: "Refresh",
    onClickHandler: function () {
      window.location.reload();
    },
    overriddingStylesTitle: "text-2xl font-semibold",
    overriddingStylesSubtitle: "!text-sm text-grey-700 opacity-50 !w-3/4",
  });
  var loadingState = React.createElement(
    "div",
    {
      className: "h-screen w-screen flex flex-col justify-center items-center",
    },
    React.createElement(Loader.make, {}),
  );
  var buttonState =
    GlobalVars.isLocalhost || (isSelected && match$1[0])
      ? "Normal"
      : "Disabled";
  return React.createElement(HSwitchUtils.BackgroundImageWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "w-full h-[90%] md:w-pageWidth11 mx-auto py-10",
        },
        React.createElement(
          "div",
          {
            className:
              "flex items-center justify-between px-20 bg-white pb-5 pt-10",
          },
          React.createElement("img", {
            alt: "logo-icon-with-text",
            src: "assets/Dark/hyperswitchLogoIconWithText.svg",
          }),
          React.createElement(SwitchMerchant.make, {
            userRole: match$3.user_role,
          }),
        ),
        React.createElement(
          "div",
          {
            className:
              "flex flex-col gap-5 bg-white px-20 pb-10 w-full h-full overflow-hidden",
          },
          React.createElement(
            "div",
            {
              className: "flex justify-between items-center flex-wrap gap-2",
            },
            React.createElement(
              "div",
              {
                className: "font-semibold text-xl",
              },
              "Hyperswitch Service Agreement",
            ),
            React.createElement(ToolTip.make, {
              description:
                "Please read to the bottom of this Service Agreement before you can continue",
              toolTipFor: Caml_option.some(
                React.createElement(Button.make, {
                  buttonState: buttonState,
                  text: "Accept & Proceed",
                  buttonType: "Primary",
                  buttonSize: "Small",
                  onClick: function (param) {
                    if (GlobalVars.isLocalhost) {
                      return setDashboardPageState(function (param) {
                        return "PROD_ONBOARDING";
                      });
                    } else {
                      return downloadPDF();
                    }
                  },
                  customButtonStyle: "!px-2 rounded-lg",
                }),
              ),
              tooltipWidthClass: "w-auto",
              toolTipPosition: "Top",
            }),
          ),
          React.createElement(
            "div",
            {
              className:
                "h-full w-full overflow-auto show-scrollbar bg-pdf_background p-5 md:p-10",
              onScroll: function (ev) {
                var reachedBottom =
                  ((ev.target.scrollHeight - 250) | 0) <
                  ((ev.target.clientHeight + ev.target.scrollTop) | 0);
                if (reachedBottom) {
                  return setIsAgreeEnable(function (param) {
                    return true;
                  });
                }
              },
            },
            React.createElement(ReactSuspenseWrapper.make, {
              children: React.createElement(ReactPDFViewerSinglePageLazy.make, {
                url: downloadURL,
                loading: Caml_option.some(loadingState),
                error: Caml_option.some(errorState),
              }),
            }),
          ),
          React.createElement(
            "div",
            {
              className: "flex items-center gap-2",
            },
            React.createElement(CheckBoxIcon.make, {
              isSelected: isSelected,
              setIsSelected: function (param) {
                setIsSelected(function (prev) {
                  return !prev;
                });
              },
            }),
            React.createElement(
              "p",
              undefined,
              "I have read and agree to Hyperswitch's Services Agreement.",
            ),
          ),
        ),
      ),
    ),
  });
}

var make = HSwitchAgreementScreen;

export { make };
/* react Not a pure module */
