// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ThemeProvider from "../../../context/ThemeProvider.bs.js";
import * as ConnectorUtils from "../../Connectors/ConnectorUtils.bs.js";

var defaultValueOfCheckList_itemsVariants = [
  "SELECT_PROCESSOR",
  "SETUP_CREDS",
  "SETUP_WEBHOOK_PROCESSOR",
];

var defaultValueOfCheckList = {
  headerText: "Setup Your First Processor",
  headerVariant: "SetupProcessor",
  itemsVariants: defaultValueOfCheckList_itemsVariants,
};

var checkList = [
  {
    headerText: "Configure Live Endpoints",
    headerVariant: "ConfigureEndpoint",
    itemsVariants: ["REPLACE_API_KEYS", "SETUP_WEBHOOK_USER"],
  },
  {
    headerText: "Complete Setup",
    headerVariant: "SetupComplete",
    itemsVariants: ["SETUP_COMPLETED"],
  },
];

var updatedCheckList = [defaultValueOfCheckList].concat(checkList);

function getPageView(index) {
  switch (index) {
    case "SELECT_PROCESSOR":
      return "SETUP_CREDS";
    case "SETUP_CREDS":
      return "SETUP_WEBHOOK_PROCESSOR";
    case "SETUP_WEBHOOK_PROCESSOR":
      return "REPLACE_API_KEYS";
    case "REPLACE_API_KEYS":
      return "SETUP_WEBHOOK_USER";
    case "SETUP_WEBHOOK_USER":
    case "TEST_LIVE_PAYMENT":
    case "SETUP_COMPLETED":
      return "SETUP_COMPLETED";
  }
}

function getBackPageView(index) {
  switch (index) {
    case "SETUP_CREDS":
      return "SELECT_PROCESSOR";
    case "SETUP_WEBHOOK_PROCESSOR":
      return "SETUP_CREDS";
    case "REPLACE_API_KEYS":
      return "SETUP_WEBHOOK_PROCESSOR";
    case "SETUP_WEBHOOK_USER":
      return "REPLACE_API_KEYS";
    default:
      return "SETUP_COMPLETED";
  }
}

function getIndexFromVariant(index) {
  switch (index) {
    case "SETUP_CREDS":
      return 1;
    case "SETUP_WEBHOOK_PROCESSOR":
      return 2;
    case "REPLACE_API_KEYS":
      return 3;
    case "SETUP_WEBHOOK_USER":
      return 4;
    case "SELECT_PROCESSOR":
    case "TEST_LIVE_PAYMENT":
      return 0;
    case "SETUP_COMPLETED":
      return 5;
  }
}

function sidebarTextFromVariant(pageView) {
  switch (pageView) {
    case "SELECT_PROCESSOR":
      return "Select a Processor";
    case "SETUP_CREDS":
      return "Setup Credentials";
    case "SETUP_WEBHOOK_PROCESSOR":
      return "Configure Processor Webhooks";
    case "REPLACE_API_KEYS":
      return "Replace API keys & Live Endpoints";
    case "SETUP_WEBHOOK_USER":
      return "Configure Hyperswitch Webhooks";
    case "TEST_LIVE_PAYMENT":
      return "";
    case "SETUP_COMPLETED":
      return "Setup Completed";
  }
}

function getCheckboxText(connectorName) {
  if (connectorName.TAG !== "Processors") {
    return "";
  }
  switch (connectorName._0) {
    case "ADYEN":
      return "I have submitted Hyperswitch's PCI Certificates to Adyen";
    case "CHECKOUT":
    case "STRIPE":
      break;
    case "BLUESNAP":
      return "I have uploaded PCI DSS Certificate";
    default:
      return "";
  }
  return (
    "I have enabled raw cards on " +
    LogicUtils.capitalizeString(
      ConnectorUtils.getConnectorNameString(connectorName),
    )
  );
}

var subTextStyle = "text-base font-normal text-grey-700 opacity-50";

function useGetWarningBlockForConnector(connectorName) {
  var match = React.useContext(ThemeProvider.themeContext);
  var hightlightedText =
    "text-base font-normal " +
    match.globalUIConfig.font.textColor.primaryNormal +
    " underline";
  if (connectorName.TAG !== "Processors") {
    return;
  }
  switch (connectorName._0) {
    case "ADYEN":
      return Caml_option.some(
        React.createElement(
          React.Fragment,
          {},
          React.createElement(
            "p",
            {
              className: hightlightedText,
            },
            "Download",
          ),
          React.createElement(
            "p",
            {
              className: subTextStyle + " !opacity-100",
            },
            "and submit our PCI Certificates to Adyen's support team to enable raw cards",
          ),
        ),
      );
    case "CHECKOUT":
      return Caml_option.some(
        React.createElement(
          React.Fragment,
          {},
          React.createElement(
            "p",
            {
              className: subTextStyle + " !opacity-100",
            },
            "Enable Raw Cards: To enable full card processing on your account, drop an email to",
          ),
          React.createElement(
            "p",
            {
              className: hightlightedText,
            },
            "support@checkout.com",
          ),
        ),
      );
    case "STRIPE":
      return Caml_option.some(
        React.createElement(
          "span",
          undefined,
          React.createElement(
            "span",
            {
              className: subTextStyle + " !opacity-100",
            },
            "Enable Raw Cards: Navigate to Settings > Integrations in your Stripe dashboard; click on advanced options and toggle 'Handle card information directly' or raise a support ticket",
          ),
          React.createElement(
            "span",
            {
              className: "ml-2",
            },
            React.createElement(
              "a",
              {
                className: hightlightedText + " cursor-pointer",
                href: "https://support.stripe.com/contact/email?body=I+would+like+to+request+that+Stripe+enable+raw+card+data+APIs+for+my+account&question=other&subject=Request+to+enable+raw+card+data+APIs&topic=other",
                target: "_blank",
              },
              "here",
            ),
          ),
        ),
      );
    case "BLUESNAP":
      return Caml_option.some(
        React.createElement(
          React.Fragment,
          {},
          React.createElement(
            "p",
            {
              className: hightlightedText,
            },
            "Download",
          ),
          React.createElement(
            "p",
            {
              className: subTextStyle + " !opacity-100",
            },
            "and upload the PCI DSS Certificates",
          ),
          React.createElement(
            "a",
            {
              className: hightlightedText,
              href: "https://www.securitymetrics.com/pcidss/bluesnap",
              target: "_blank",
            },
            "here",
          ),
        ),
      );
    default:
      return;
  }
}

function getProdApiBody(parentVariant, connectorIdOpt, _paymentIdOpt, param) {
  var connectorId = connectorIdOpt !== undefined ? connectorIdOpt : "";
  if (parentVariant === "SetupProcessor") {
    return LogicUtils.getJsonFromArrayOfJson([
      [parentVariant, Object.fromEntries([["connector_id", connectorId]])],
    ]);
  }
  if (parentVariant !== "ProductionAgreement") {
    return parentVariant;
  }
  var agreementVersion = Core__Option.getOr(window._env_.agreementVersion, "");
  return LogicUtils.getJsonFromArrayOfJson([
    [
      parentVariant,
      LogicUtils.getJsonFromArrayOfJson([["version", agreementVersion]]),
    ],
  ]);
}

function getProdOnboardingUrl($$enum, getURL) {
  return getURL(
    "USERS",
    "Get",
    undefined,
    undefined,
    "USER_DATA",
    undefined,
    undefined,
    Caml_option.some("keys=" + $$enum),
    undefined,
  );
}

var prodOnboardingEnumIntialArray = [
  "ProductionAgreement",
  "SetupProcessor",
  "ConfigureEndpoint",
  "SetupComplete",
];

function getSetupProcessorType(value) {
  return {
    connector_id: LogicUtils.getString(value, "connector_id", ""),
  };
}

function stringToVariantMapperForUserData(str) {
  switch (str) {
    case "ConfigureEndpoint":
      return "ConfigureEndpoint";
    case "SetupComplete":
      return "SetupComplete";
    case "SetupProcessor":
      return "SetupProcessor";
    default:
      return "ProductionAgreement";
  }
}

function getStringFromVariant(variant) {
  return variant;
}

function getTypedValue(dict) {
  return {
    configureEndpoint: LogicUtils.getBool(dict, "ConfigureEndpoint", false),
    productionAgreement: LogicUtils.getBool(dict, "ProductionAgreement", false),
    setupComplete: LogicUtils.getBool(dict, "SetupComplete", false),
    setupProcessor: getSetupProcessorType(
      LogicUtils.getDictfromDict(dict, "SetupProcessor"),
    ),
  };
}

function getPreviewState(headerVariant) {
  if (headerVariant === "SetupProcessor") {
    return "SELECT_PROCESSOR_PREVIEW";
  } else if (headerVariant === "SetupComplete") {
    return "COMPLETE_SETUP_PREVIEW";
  } else if (headerVariant === "ConfigureEndpoint") {
    return "LIVE_ENDPOINTS_PREVIEW";
  } else {
    return "SELECT_PROCESSOR_PREVIEW";
  }
}

export {
  defaultValueOfCheckList,
  checkList,
  updatedCheckList,
  getPageView,
  getBackPageView,
  getIndexFromVariant,
  sidebarTextFromVariant,
  getCheckboxText,
  subTextStyle,
  useGetWarningBlockForConnector,
  getProdApiBody,
  getProdOnboardingUrl,
  prodOnboardingEnumIntialArray,
  getSetupProcessorType,
  stringToVariantMapperForUserData,
  getStringFromVariant,
  getTypedValue,
  getPreviewState,
};
/* updatedCheckList Not a pure module */
