// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../../components/Table.bs.js";
import * as React from "react";
import * as EntityType from "../../entities/EntityType.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as PermissionUtils from "../UserManagement/PermissionUtils.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";

var defaultColumns = [
  "Name",
  "ProfileId",
  "ProfileName",
  "ConnectorLabel",
  "Status",
  "Disabled",
  "TestMode",
  "Actions",
  "PaymentMethods",
];

function getConnectorObjectFromListViaId(connectorList, mca_id) {
  return Core__Option.getOr(
    connectorList.find(function (ele) {
      return ele.merchant_connector_id === mca_id;
    }),
    ConnectorListMapper.getProcessorPayloadType({}),
  );
}

function getAllPaymentMethods(paymentMethodsArray) {
  return Core__Array.reduce(paymentMethodsArray, [], function (acc, item) {
    return acc.concat([LogicUtils.capitalizeString(item.payment_method)]);
  });
}

function getHeading(colType) {
  switch (colType) {
    case "Name":
      return Table.makeHeaderInfo(
        "connector_name",
        "Processor",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "TestMode":
      return Table.makeHeaderInfo(
        "test_mode",
        "Test Mode",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Status":
      return Table.makeHeaderInfo(
        "status",
        "Integration status",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Disabled":
      return Table.makeHeaderInfo(
        "disabled",
        "Disabled",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Actions":
      return Table.makeHeaderInfo(
        "actions",
        "",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ProfileId":
      return Table.makeHeaderInfo(
        "profile_id",
        "Profile Id",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ProfileName":
      return Table.makeHeaderInfo(
        "profile_name",
        "Profile Name",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ConnectorLabel":
      return Table.makeHeaderInfo(
        "connector_label",
        "Connector Label",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentMethods":
      return Table.makeHeaderInfo(
        "payment_methods",
        "Payment Methods",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function connectorStatusStyle(connectorStatus) {
  var match = connectorStatus.toLowerCase();
  if (match === "active") {
    return "text-green-700";
  } else {
    return "text-grey-800 opacity-50";
  }
}

function getTableCell(connectorTypeOpt, param) {
  var connectorType =
    connectorTypeOpt !== undefined ? connectorTypeOpt : "Processor";
  return function (connector, colType) {
    switch (colType) {
      case "Name":
        return {
          TAG: "CustomCell",
          _0: React.createElement(HelperComponents.ConnectorCustomCell.make, {
            connectorName: connector.connector_name,
            connectorType: connectorType,
          }),
          _1: "",
        };
      case "TestMode":
        return {
          TAG: "Text",
          _0: connector.test_mode ? "True" : "False",
        };
      case "Status":
        return {
          TAG: "CustomCell",
          _0: React.createElement(
            "div",
            {
              className:
                "font-semibold " + connectorStatusStyle(connector.status),
            },
            connector.status.toUpperCase(),
          ),
          _1: "",
        };
      case "Disabled":
        return {
          TAG: "Label",
          _0: {
            title: connector.disabled ? "DISABLED" : "ENABLED",
            color: connector.disabled ? "LabelRed" : "LabelGreen",
          },
        };
      case "Actions":
        return {
          TAG: "CustomCell",
          _0: React.createElement("div", undefined),
          _1: "",
        };
      case "ProfileId":
        return {
          TAG: "DisplayCopyCell",
          _0: connector.profile_id,
        };
      case "ProfileName":
        return {
          TAG: "CustomCell",
          _0: React.createElement(
            HelperComponents.BusinessProfileComponent.make,
            {
              profile_id: connector.profile_id,
            },
          ),
          _1: "",
        };
      case "ConnectorLabel":
        return {
          TAG: "Text",
          _0: connector.connector_label,
        };
      case "PaymentMethods":
        return {
          TAG: "CustomCell",
          _0: React.createElement(
            "div",
            undefined,
            getAllPaymentMethods(connector.payment_methods_enabled).join(", "),
          ),
          _1: "",
        };
    }
  };
}

function comparatorFunction(connector1, connector2) {
  return connector1.connector_name.localeCompare(connector2.connector_name);
}

function sortPreviouslyConnectedList(arr) {
  return arr.toSorted(comparatorFunction);
}

function getPreviouslyConnectedList(json) {
  return LogicUtils.getArrayDataFromJson(
    json,
    ConnectorListMapper.getProcessorPayloadType,
  );
}

function connectorEntity(path, permission) {
  return EntityType.makeEntity(
    "",
    getPreviouslyConnectedList,
    defaultColumns,
    undefined,
    getHeading,
    getTableCell("Processor", undefined),
    "",
    undefined,
    undefined,
    undefined,
    undefined,
    function (connec) {
      return PermissionUtils.linkForGetShowLinkViaAccess(
        permission,
        GlobalVars.appendDashboardPath(
          "/" +
            path +
            "/" +
            connec.merchant_connector_id +
            "?name=" +
            connec.connector_name,
        ),
      );
    },
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
}

export {
  defaultColumns,
  getConnectorObjectFromListViaId,
  getAllPaymentMethods,
  getHeading,
  connectorStatusStyle,
  getTableCell,
  comparatorFunction,
  sortPreviouslyConnectedList,
  getPreviouslyConnectedList,
  connectorEntity,
};
/* Table Not a pure module */
