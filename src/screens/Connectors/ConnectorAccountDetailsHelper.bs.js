// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Tabs from "../../components/Tabs.bs.js";
import * as Modal from "../../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as TextInput from "../../components/form/TextInput.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as GatewayIcon from "../../components/custom-icons/GatewayIcon.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as CheckBoxIcon from "../../components/custom-icons/CheckBoxIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../HSwitchUtils.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as ConnectorUtils from "./ConnectorUtils.bs.js";
import * as GlobalProvider from "../../entryPoints/Provider/GlobalProvider.bs.js";
import * as ReactFinalForm from "../../libraries/ReactFinalForm.bs.js";
import * as BusinessProfile from "../Settings/BusinessMapping/BusinessProfile.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as AddDataAttributes from "../../components/AddDataAttributes.bs.js";
import * as ConnectorMetaData from "./ConnectorMetaData/ConnectorMetaData.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";

var connectorsWithIntegrationSteps = [
  {
    TAG: "Processors",
    _0: "ADYEN",
  },
  {
    TAG: "Processors",
    _0: "CHECKOUT",
  },
  {
    TAG: "Processors",
    _0: "STRIPE",
  },
  {
    TAG: "Processors",
    _0: "PAYPAL",
  },
];

function ConnectorAccountDetailsHelper$MultiConfigInp(props) {
  var fieldsArray = props.fieldsArray;
  var enabledList = Core__Option.getOr(
    fieldsArray[0],
    ReactFinalForm.fakeFieldRenderProps,
  ).input;
  var valueField = Core__Option.getOr(
    fieldsArray[1],
    ReactFinalForm.fakeFieldRenderProps,
  ).input;
  var input_onBlur = function (_ev) {};
  var input_onChange = function (ev) {
    valueField.onChange(ev);
    enabledList.onChange(ev);
  };
  var input_onFocus = function (_ev) {};
  var input_value = enabledList.value;
  var input = {
    name: "string",
    onBlur: input_onBlur,
    onChange: input_onChange,
    onFocus: input_onFocus,
    value: input_value,
    checked: true,
  };
  return React.createElement(TextInput.make, {
    input: input,
    placeholder: "Enter " + LogicUtils.snakeToTitle(props.label),
  });
}

var MultiConfigInp = {
  make: ConnectorAccountDetailsHelper$MultiConfigInp,
};

function renderValueInp(label) {
  return function (fieldsArray) {
    return React.createElement(ConnectorAccountDetailsHelper$MultiConfigInp, {
      label: label,
      fieldsArray: fieldsArray,
    });
  };
}

function multiValueInput(label, fieldName1, fieldName2) {
  return FormRenderer.makeMultiInputFieldInfoOld(
    label,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    renderValueInp(label),
    [
      FormRenderer.makeInputFieldInfo(
        undefined,
        fieldName1,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        fieldName2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    ],
    undefined,
  );
}

function inputField(
  name,
  field,
  label,
  connector,
  getPlaceholder,
  checkRequiredFields,
  disabled,
  description,
  toolTipPositionOpt,
  param,
) {
  var toolTipPosition =
    toolTipPositionOpt !== undefined ? toolTipPositionOpt : "Right";
  return FormRenderer.makeFieldInfo(
    label,
    undefined,
    name,
    InputFields.textInput(
      undefined,
      disabled,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    ),
    description,
    toolTipPosition,
    undefined,
    undefined,
    getPlaceholder !== undefined
      ? getPlaceholder(label)
      : "Enter " + LogicUtils.snakeToTitle(label),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    checkRequiredFields !== undefined
      ? checkRequiredFields(connector, field)
      : true,
    undefined,
    undefined,
    undefined,
  );
}

function ConnectorAccountDetailsHelper$ErrorValidation(props) {
  var fieldName = props.fieldName;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var appPrefix = LogicUtils.useUrlPrefix();
  var errorDict = LogicUtils.getDictFromJsonObject(
    props.validate(formState.values),
  );
  var match = ReactFinalForm$1.useField(fieldName).meta;
  var err = match.touched ? errorDict[fieldName] : undefined;
  return React.createElement(RenderIf.make, {
    condition: Core__Option.isSome(err),
    children: React.createElement(
      "div",
      {
        className:
          "flex flex-row items-center text-orange-950 dark:text-orange-400 pt-2 text-base font-medium text-start ml-1",
      },
      React.createElement(
        "div",
        {
          className: "flex mr-2",
        },
        React.createElement("img", {
          className: "w-4 h-4 my-auto border-gray-100",
          alt: "warning",
          src: appPrefix + "/icons/warning.svg",
        }),
      ),
      LogicUtils.getStringFromJson(Core__Option.getOr(err, ""), ""),
    ),
  });
}

var ErrorValidation = {
  make: ConnectorAccountDetailsHelper$ErrorValidation,
};

function ConnectorAccountDetailsHelper$RenderConnectorInputFields(props) {
  var __description = props.description;
  var __disabled = props.disabled;
  var __isLabelNested = props.isLabelNested;
  var getPlaceholder = props.getPlaceholder;
  var checkRequiredFields = props.checkRequiredFields;
  var __keysToIgnore = props.keysToIgnore;
  var name = props.name;
  var details = props.details;
  var selectedConnector = props.selectedConnector;
  var connector = props.connector;
  var keysToIgnore = __keysToIgnore !== undefined ? __keysToIgnore : [];
  var isLabelNested = __isLabelNested !== undefined ? __isLabelNested : true;
  var disabled = __disabled !== undefined ? __disabled : false;
  var description = __description !== undefined ? __description : "";
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var keys = Object.keys(details).filter(function (ele) {
    return !keysToIgnore.includes(ele);
  });
  return keys.map(function (field, i) {
    var label = LogicUtils.getString(details, field, "");
    var formName = isLabelNested ? name + "." + field : name;
    var tmp;
    var exit = 0;
    if (
      connector.TAG === "Processors" &&
      connector._0 === "PAYPAL" &&
      field === "key1"
    ) {
      tmp = multiValueInput(
        label,
        "connector_account_details.key1",
        "metadata.paypal_sdk.client_id",
      );
    } else {
      exit = 1;
    }
    if (exit === 1) {
      tmp = inputField(
        formName,
        field,
        label,
        connector,
        getPlaceholder,
        checkRequiredFields,
        disabled,
        description,
        undefined,
        undefined,
      );
    }
    return JsxPPXReactSupportU.createElementWithKey(
      i.toString(),
      RenderIf.make,
      {
        condition: LogicUtils.isNonEmptyString(label),
        children: React.createElement(AddDataAttributes.make, {
          attributes: [
            ["data-testid", LogicUtils.titleToSnake(label).toLowerCase()],
          ],
          children: React.createElement(
            "div",
            {
              key: label,
            },
            React.createElement(FormRenderer.FieldRenderer.make, {
              field: tmp,
              labelClass: "font-semibold !text-hyperswitch_black",
            }),
            React.createElement(ConnectorAccountDetailsHelper$ErrorValidation, {
              fieldName: formName,
              validate: ConnectorUtils.validate(
                selectedConnector,
                details,
                formName,
                featureFlagDetails.isLiveMode,
              ),
            }),
          ),
        }),
      },
    );
  });
}

var RenderConnectorInputFields = {
  make: ConnectorAccountDetailsHelper$RenderConnectorInputFields,
};

function ConnectorAccountDetailsHelper$CashToCodeSelectBox(props) {
  var selectedCashToCodeMthd = props.selectedCashToCodeMthd;
  var dict = props.dict;
  var match = React.useContext(ThemeProvider.themeContext);
  var p2RegularTextStyle =
    HSwitchUtils.getTextClass(["P2", "Medium"]) + " text-grey-700 opacity-50";
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowWalletConfigurationModal = match$1[1];
  var showWalletConfigurationModal = match$1[0];
  var match$2 = React.useState(function () {
    return "";
  });
  var setSelectedCountry = match$2[1];
  var country = match$2[0];
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var isSelected = function (country) {
    var formValues = LogicUtils.getDictfromDict(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictfromDict(
          LogicUtils.getDictFromJsonObject(formState.values),
          "connector_account_details",
        ),
        "auth_key_map",
      ),
      country,
    );
    var wasmValues = Object.keys(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictfromDict(dict, country),
        selectedCashToCodeMthd.toLowerCase(),
      ),
    );
    return Core__Option.isNone(
      wasmValues.find(function (ele) {
        return LogicUtils.getString(formValues, ele, "").length <= 0;
      }),
    );
  };
  return React.createElement(
    "div",
    undefined,
    props.opts.map(function (country, index) {
      return React.createElement(
        "div",
        {
          key: index.toString(),
          className: "flex items-center gap-2 break-words p-2",
        },
        React.createElement(
          "div",
          {
            onClick: function (_e) {
              setShowWalletConfigurationModal(function (param) {
                return !showWalletConfigurationModal;
              });
              setSelectedCountry(function (param) {
                return country;
              });
            },
          },
          React.createElement(CheckBoxIcon.make, {
            isSelected: isSelected(country),
          }),
        ),
        React.createElement(
          "p",
          {
            className: p2RegularTextStyle,
          },
          LogicUtils.snakeToTitle(country),
        ),
      );
    }),
    React.createElement(Modal.make, {
      showModal: showWalletConfigurationModal,
      setShowModal: setShowWalletConfigurationModal,
      children: React.createElement(
        "div",
        undefined,
        React.createElement(
          ConnectorAccountDetailsHelper$RenderConnectorInputFields,
          {
            connector: props.connector,
            selectedConnector: props.selectedConnector,
            details: LogicUtils.getDictfromDict(
              LogicUtils.getDictfromDict(dict, country),
              selectedCashToCodeMthd.toLowerCase(),
            ),
            name: "connector_account_details.auth_key_map." + country,
          },
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-col justify-center mt-4",
          },
          React.createElement(Button.make, {
            text: "Proceed",
            buttonType: "Primary",
            onClick: function (param) {
              setShowWalletConfigurationModal(function (param) {
                return false;
              });
            },
          }),
        ),
      ),
      modalHeading: "Additional Details to enable",
      modalClass:
        "w-full p-4 md:w-1/3 !h-full overflow-y-scroll !overflow-x-hidden rounded-none text-jp-gray-900",
      childClass: "",
      paddingClass: "",
      headerTextClass:
        match.globalUIConfig.font.textColor.primaryNormal +
        " font-bold text-xl",
      revealFrom: "Right",
    }),
  );
}

var CashToCodeSelectBox = {
  make: ConnectorAccountDetailsHelper$CashToCodeSelectBox,
};

function ConnectorAccountDetailsHelper$CashToCodeMethods(props) {
  var connector = props.connector;
  var selectedConnector = props.selectedConnector;
  var dict = ConnectorUtils.getAuthKeyMapFromConnectorAccountFields(
    props.connectorAccountFields,
  );
  var match = React.useState(function () {
    return "Classic";
  });
  var setCashToCodeMthd = match[1];
  var selectedCashToCodeMthd = match[0];
  var tabs = ["Classic", "Evoucher"];
  var tabList = tabs.map(function (tab) {
    return {
      title: tab,
      renderContent: function () {
        return React.createElement(
          ConnectorAccountDetailsHelper$CashToCodeSelectBox,
          {
            opts: Object.keys(dict),
            dict: dict,
            selectedCashToCodeMthd: selectedCashToCodeMthd,
            connector: connector,
            selectedConnector: selectedConnector,
          },
        );
      },
    };
  });
  return React.createElement(Tabs.make, {
    tabs: tabList,
    onTitleClick: function (tabIndex) {
      setCashToCodeMthd(function (param) {
        return LogicUtils.getValueFromArray(tabs, tabIndex, "Classic");
      });
    },
    disableIndicationArrow: true,
    lightThemeColor: "black",
    defaultClasses:
      "font-ibm-plex w-max flex flex-auto flex-row items-center justify-center px-6 font-semibold text-body",
    showBorder: false,
    includeMargin: false,
  });
}

var CashToCodeMethods = {
  make: ConnectorAccountDetailsHelper$CashToCodeMethods,
};

function ConnectorAccountDetailsHelper$ConnectorConfigurationFields(props) {
  var selectedConnector = props.selectedConnector;
  var connector = props.connector;
  var connectorAccountFields = props.connectorAccountFields;
  var tmp;
  var exit = 0;
  if (connector.TAG === "Processors" && connector._0 === "CASHTOCODE") {
    tmp = React.createElement(ConnectorAccountDetailsHelper$CashToCodeMethods, {
      connectorAccountFields: connectorAccountFields,
      selectedConnector: selectedConnector,
      connector: connector,
    });
  } else {
    exit = 1;
  }
  if (exit === 1) {
    tmp = React.createElement(
      ConnectorAccountDetailsHelper$RenderConnectorInputFields,
      {
        connector: connector,
        selectedConnector: selectedConnector,
        details: connectorAccountFields,
        name: "connector_account_details",
        getPlaceholder: ConnectorUtils.getPlaceHolder,
      },
    );
  }
  return React.createElement(
    "div",
    {
      className: "flex flex-col",
    },
    tmp,
    React.createElement(
      ConnectorAccountDetailsHelper$RenderConnectorInputFields,
      {
        connector: connector,
        selectedConnector: selectedConnector,
        details: props.connectorLabelDetailField,
        name: "connector_label",
        isLabelNested: false,
        description:
          "This is an unique label you can generate and pass in order to identify this connector account on your Hyperswitch dashboard and reports. Eg: if your profile label is 'default', connector label can be 'stripe_default'",
      },
    ),
    React.createElement(ConnectorMetaData.make, {
      connectorMetaDataFields: props.connectorMetaDataFields,
    }),
    React.createElement(
      ConnectorAccountDetailsHelper$RenderConnectorInputFields,
      {
        connector: connector,
        selectedConnector: selectedConnector,
        details: props.connectorWebHookDetails,
        name: "connector_webhook_details",
        checkRequiredFields: ConnectorUtils.getWebHookRequiredFields,
      },
    ),
  );
}

var ConnectorConfigurationFields = {
  make: ConnectorAccountDetailsHelper$ConnectorConfigurationFields,
};

function ConnectorAccountDetailsHelper$BusinessProfileRender(props) {
  var selectedConnector = props.selectedConnector;
  var isUpdateFlow = props.isUpdateFlow;
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = React.useContext(GlobalProvider.defaultContext);
  var setDashboardPageState = match$1.setDashboardPageState;
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var defaultBusinessProfile =
    MerchantAccountUtils.getValueFromBusinessProfile(businessProfiles);
  var connectorLabelOnChange =
    ReactFinalForm$1.useField("connector_label").input.onChange;
  var match$2 = React.useState(function () {
    return false;
  });
  var hereTextStyle = isUpdateFlow
    ? "text-grey-700 opacity-50 cursor-not-allowed"
    : match.globalUIConfig.font.textColor.primaryNormal + "  cursor-pointer";
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(FormRenderer.FieldRenderer.make, {
      field: FormRenderer.makeFieldInfo(
        "Profile",
        undefined,
        "profile_id",
        function (input, param) {
          return InputFields.selectInput(
            MerchantAccountUtils.businessProfileNameDropDownOption(
              businessProfiles,
            ),
            "Select Profile",
            true,
            undefined,
            isUpdateFlow,
            undefined,
            undefined,
            undefined,
            undefined,
            "max-h-48",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          )(
            {
              name: input.name,
              onBlur: input.onBlur,
              onChange: function (ev) {
                var profileName = Core__Option.getOr(
                  businessProfiles.find(function (ele) {
                    return ele.profile_id === ev;
                  }),
                  defaultBusinessProfile,
                ).profile_name;
                connectorLabelOnChange(selectedConnector + "_" + profileName);
                input.onChange(ev);
              },
              onFocus: input.onFocus,
              value: input.value,
              checked: input.checked,
            },
            "",
          );
        },
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        true,
        undefined,
        undefined,
        undefined,
      ),
      labelClass: "font-semibold !text-black",
    }),
    React.createElement(RenderIf.make, {
      condition: !isUpdateFlow,
      children: React.createElement(
        "div",
        {
          className: "text-gray-400 text-sm mt-3",
        },
        React.createElement("span", undefined, "Manage your list of profiles."),
        React.createElement(
          "span",
          {
            className: "ml-1 " + hereTextStyle,
            onClick: function (param) {
              setDashboardPageState(function (param) {
                return "HOME";
              });
              RescriptReactRouter.push(
                GlobalVars.appendDashboardPath("/business-profiles"),
              );
            },
          },
          "here.",
        ),
      ),
    }),
    React.createElement(BusinessProfile.make, {
      isFromSettings: false,
      showModalFromOtherScreen: match$2[0],
      setShowModalFromOtherScreen: match$2[1],
    }),
  );
}

var BusinessProfileRender = {
  make: ConnectorAccountDetailsHelper$BusinessProfileRender,
};

function ConnectorAccountDetailsHelper$VerifyConnectorModal(props) {
  var setVerifyDone = props.setVerifyDone;
  var setShowVerifyModal = props.setShowVerifyModal;
  return React.createElement(Modal.make, {
    showModal: props.showVerifyModal,
    setShowModal: setShowVerifyModal,
    children: React.createElement(
      "div",
      undefined,
      React.createElement(
        "div",
        {
          className: "flex flex-col mb-2 p-2 m-2",
        },
        React.createElement(
          "div",
          {
            className: "flex p-3",
          },
          React.createElement("img", {
            className: "h-12 my-auto border-gray-100 w-fit mt-0",
            alt: "warning",
            src: "/icons/warning.svg",
          }),
          React.createElement(
            "div",
            {
              className: "text-jp-gray-900",
            },
            React.createElement(
              "div",
              {
                className:
                  "font-semibold ml-4 text-xl px-2 dark:text-jp-gray-text_darktheme dark:text-opacity-75",
              },
              "Are you sure you want to proceed?",
            ),
            React.createElement(
              "div",
              {
                className:
                  "whitespace-pre-line break-all flex flex-col gap-1  p-2 ml-4 text-base dark:text-jp-gray-text_darktheme dark:text-opacity-50 font-medium leading-7 opacity-50",
              },
              "Received the following error from " +
                LogicUtils.snakeToTitle(props.connector) +
                ":",
            ),
            React.createElement(
              "div",
              {
                className:
                  "whitespace-pre-line break-all flex flex-col gap-1 p-4 ml-6 text-base dark:text-jp-gray-text_darktheme dark:text-opacity-50 bg-red-100 rounded-md font-semibold",
              },
              Core__Option.getOr(props.verifyErrorMessage, ""),
            ),
            React.createElement(RenderIf.make, {
              condition: props.suggestedActionExists,
              children: props.suggestedAction,
            }),
          ),
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-row justify-end gap-5 mt-4 mb-2 p-3",
          },
          React.createElement(FormRenderer.SubmitButton.make, {
            text: "Proceed Anyway",
            buttonType: "Secondary",
            loadingText: "Processing...",
          }),
          React.createElement(Button.make, {
            text: "Cancel",
            buttonType: "Primary",
            buttonSize: "Small",
            onClick: function (param) {
              setVerifyDone(function (param) {
                return "NoAttempt";
              });
              setShowVerifyModal(function (param) {
                return false;
              });
            },
          }),
        ),
      ),
    ),
    modalHeading: " ",
    modalClass: "w-full md:w-5/12 mx-auto top-1/3 relative",
    childClass: "p-0 m-0 -mt-8",
    headingClass: "h-2 bg-orange-960 rounded-t-xl",
    showCloseIcon: false,
    onCloseClickCustomFun: function () {
      setVerifyDone(function (param) {
        return "NoAttempt";
      });
      setShowVerifyModal(function (param) {
        return false;
      });
    },
    customHeight: "border-0 h-fit",
  });
}

var VerifyConnectorModal = {
  make: ConnectorAccountDetailsHelper$VerifyConnectorModal,
};

function ConnectorAccountDetailsHelper$ConnectorHeaderWrapper(props) {
  var __connectorType = props.connectorType;
  var __conditionForIntegrationSteps = props.conditionForIntegrationSteps;
  var handleShowModal = props.handleShowModal;
  var connector = props.connector;
  var conditionForIntegrationSteps =
    __conditionForIntegrationSteps !== undefined
      ? __conditionForIntegrationSteps
      : true;
  var connectorType =
    __connectorType !== undefined ? __connectorType : "Processor";
  var match = React.useContext(ThemeProvider.themeContext);
  var connectorNameFromType = ConnectorUtils.getConnectorNameTypeFromString(
    connector,
    undefined,
    undefined,
  );
  var setShowModalFunction =
    handleShowModal !== undefined ? handleShowModal : function () {};
  var tmp;
  tmp =
    connectorNameFromType.TAG === "Processors" &&
    connectorNameFromType._0 === "BRAINTREE"
      ? true
      : false;
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(
      "div",
      {
        className:
          "flex items-center justify-between border-b p-2 md:px-10 md:py-6",
      },
      React.createElement(
        "div",
        {
          className: "flex gap-2 items-center",
        },
        React.createElement(GatewayIcon.make, {
          gateway: connector.toUpperCase(),
        }),
        React.createElement(
          "h2",
          {
            className: "text-xl font-semibold",
          },
          ConnectorUtils.getDisplayNameForConnector(connectorType, connector),
        ),
      ),
      React.createElement(
        "div",
        {
          className: "flex flex-row mt-6 md:mt-0 md:justify-self-end h-min",
        },
        React.createElement(RenderIf.make, {
          condition:
            connectorsWithIntegrationSteps.includes(connectorNameFromType) &&
            conditionForIntegrationSteps,
          children: React.createElement(
            "a",
            {
              className:
                "cursor-pointer px-4 py-3 flex text-sm " +
                match.globalUIConfig.font.textColor.primaryNormal +
                " items-center mx-4",
              target: "_blank",
              onClick: function (param) {
                setShowModalFunction();
              },
            },
            "View integration steps",
            React.createElement(Icon.make, {
              name: "external-link-alt",
              size: 14,
              className: "ml-2",
            }),
          ),
        }),
        props.headerButton,
      ),
    ),
    React.createElement(RenderIf.make, {
      condition: tmp,
      children: React.createElement(
        "div",
        {
          className: "flex flex-col gap-2 p-2 md:p-10",
        },
        React.createElement(
          "h1",
          {
            className:
              "flex items-center mx-12 leading-6 text-orange-950 bg-orange-100 border w-fit p-2 rounded-md ",
          },
          React.createElement(
            "div",
            {
              className:
                "flex items-center text-orange-950 font-bold text-fs-14 mx-2",
            },
            React.createElement(Icon.make, {
              name: "hswitch-warning",
              size: 18,
              className: "mr-2",
            }),
            "Disclaimer:",
          ),
          React.createElement(
            "div",
            undefined,
            "Please ensure the payment currency matches the Braintree-configured currency for the given Merchant Account ID.",
          ),
        ),
      ),
    }),
    props.children,
  );
}

var ConnectorHeaderWrapper = {
  make: ConnectorAccountDetailsHelper$ConnectorHeaderWrapper,
};

export {
  connectorsWithIntegrationSteps,
  MultiConfigInp,
  renderValueInp,
  multiValueInput,
  inputField,
  ErrorValidation,
  RenderConnectorInputFields,
  CashToCodeSelectBox,
  CashToCodeMethods,
  ConnectorConfigurationFields,
  BusinessProfileRender,
  VerifyConnectorModal,
  ConnectorHeaderWrapper,
};
/* Icon Not a pure module */
