// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../components/custom-icons/GatewayIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as MixpanelHook from "../MixpanelHook.bs.js";
import * as FormValuesSpy from "../../components/form/FormValuesSpy.bs.js";
import * as PaymentMethod from "./ConnectorUIUtils/PaymentMethod.bs.js";
import * as ConnectorUtils from "./ConnectorUtils.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function ConnectorPaymentMethod(props) {
  var isPayoutFlow = props.isPayoutFlow;
  var isUpdateFlow = props.isUpdateFlow;
  var initialValues = props.initialValues;
  var setInitialValues = props.setInitialValues;
  var connector = props.connector;
  var setCurrentStep = props.setCurrentStep;
  var getURL = APIUtils.useGetURL();
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var match = React.useState(function () {
    return ConnectorUtils.getPaymentMethodEnabled({});
  });
  var setPaymentMethods = match[1];
  var paymentMethodsEnabled = match[0];
  var match$1 = React.useState(function () {
    return {};
  });
  var setMetaData = match$1[1];
  var metaData = match$1[0];
  var showToast = ToastState.useShowToast();
  var connectorID = LogicUtils.getOptionString(
    LogicUtils.getDictFromJsonObject(initialValues),
    "merchant_connector_id",
  );
  var match$2 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$2[1];
  var updateAPIHook = APIUtils.useUpdateMethod(false, undefined);
  var updateDetails = function (value) {
    setPaymentMethods(function (param) {
      return value.slice();
    });
  };
  var setPaymentMethodDetails = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      ConnectorUtils.getConnectorPaymentMethodDetails(
        initialValues,
        setPaymentMethods,
        setMetaData,
        isUpdateFlow,
        isPayoutFlow,
        connector,
        updateDetails,
      );
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Something went wrong");
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  React.useEffect(
    function () {
      setPaymentMethodDetails();
    },
    [connector],
  );
  var mixpanelEventName = isUpdateFlow
    ? "processor_step2_onUpdate"
    : "processor_step2";
  var onSubmit = async function () {
    mixpanelEvent(
      mixpanelEventName,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var obj = {
        payment_methods_enabled: paymentMethodsEnabled,
        connector: connector,
        metadata: metaData,
      };
      var body = ConnectorUtils.ignoreFields(
        ConnectorUtils.constructConnectorRequestBody(obj, initialValues),
        Core__Option.getOr(connectorID, ""),
        ConnectorUtils.connectorIgnoredField,
      );
      var metaData$1 = LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(body),
        "metadata",
      );
      ConnectorUtils.updateMetaData(metaData$1);
      var connectorUrl = getURL(
        "CONNECTOR",
        "Post",
        Caml_option.some(connectorID),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await updateAPIHook(
        connectorUrl,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setInitialValues(function (param) {
        return response;
      });
      setScreenState(function (param) {
        return "Success";
      });
      setCurrentStep(function (param) {
        return "SummaryAndTest";
      });
      return showToast(
        isUpdateFlow ? "Details Updated!" : "Connector Created Successfully!",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Something went wrong");
        var errorCode = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "code",
          "",
        );
        var errorMessage = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "message",
          "",
        );
        if (errorCode === "HE_01") {
          showToast(
            "Connector label already exist!",
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          return setCurrentStep(function (param) {
            return "IntegFields";
          });
        } else {
          showToast(
            errorMessage,
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          return setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: err,
            };
          });
        }
      }
      throw e;
    }
  };
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        Form.make,
        {
          children: null,
          initialValues: initialValues,
        },
        React.createElement(
          "div",
          {
            className: "flex flex-col",
          },
          React.createElement(
            "div",
            {
              className: "flex justify-between border-b p-2 md:px-10 md:py-6",
            },
            React.createElement(
              "div",
              {
                className: "flex gap-2 items-center",
              },
              React.createElement(GatewayIcon.make, {
                gateway: connector.toUpperCase(),
              }),
              React.createElement(
                "h2",
                {
                  className: "text-xl font-semibold",
                },
                ConnectorUtils.getDisplayNameForConnector(undefined, connector),
              ),
            ),
            React.createElement(
              "div",
              {
                className: "self-center",
              },
              React.createElement(Button.make, {
                text: "Proceed",
                buttonType: "Primary",
                onClick: function (param) {
                  onSubmit();
                },
              }),
            ),
          ),
          React.createElement(
            "div",
            {
              className: "grid grid-cols-4 flex-1 p-2 md:p-10",
            },
            React.createElement(
              "div",
              {
                className: "flex flex-col gap-6 col-span-3",
              },
              React.createElement(
                "h1",
                {
                  className:
                    "text-orange-950 bg-orange-100 border w-full p-2 rounded-md ",
                },
                React.createElement(
                  "span",
                  {
                    className: "text-orange-950 font-bold text-fs-14 mx-2",
                  },
                  "NOTE:",
                ),
                "Please verify if the payment methods are turned on at the processor end as well.",
              ),
              React.createElement(PaymentMethod.PaymentMethodsRender.make, {
                _showAdvancedConfiguration: false,
                connector: connector,
                paymentMethodsEnabled: paymentMethodsEnabled,
                updateDetails: updateDetails,
                setMetaData: setMetaData,
                isPayoutFlow: isPayoutFlow,
              }),
            ),
          ),
        ),
        React.createElement(FormValuesSpy.make, {}),
      ),
    ),
    screenState: match$2[0],
  });
}

var make = ConnectorPaymentMethod;

export { make };
/* Form Not a pure module */
