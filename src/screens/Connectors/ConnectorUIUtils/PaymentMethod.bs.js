// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as Modal from "../../../utils/Modal.bs.js";
import * as React from "react";
import * as Wallet from "../Wallets/Wallet.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as BoolInput from "../../../components/form/BoolInput.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as CheckBoxIcon from "../../../components/custom-icons/CheckBoxIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../../HSwitchUtils.bs.js";
import * as ThemeProvider from "../../../context/ThemeProvider.bs.js";
import * as ConnectorUtils from "../ConnectorUtils.bs.js";
import * as ReactFinalForm from "../../../libraries/ReactFinalForm.bs.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as AddDataAttributes from "../../../components/AddDataAttributes.bs.js";

function isSelectedAll(
  selectedPaymentMethod,
  allPaymentMethods,
  paymentMethod,
) {
  var paymentMethodObj = ConnectorUtils.getSelectedPaymentObj(
    selectedPaymentMethod,
    paymentMethod,
  );
  var match = ConnectorUtils.getPaymentMethodFromString(paymentMethod);
  if (typeof match !== "object" && match === "Card") {
    return (
      Core__Option.getOr(paymentMethodObj.card_provider, []).length ===
      allPaymentMethods.length
    );
  }
  return (
    Core__Option.getOr(paymentMethodObj.provider, []).length ===
    allPaymentMethods.length
  );
}

function PaymentMethod$CardRenderer(props) {
  var connector = props.connector;
  var provider = props.provider;
  var paymentMethod = props.paymentMethod;
  var paymentMethodsEnabled = props.paymentMethodsEnabled;
  var updateDetails = props.updateDetails;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var form = ReactFinalForm$1.useForm();
  var initalFormValue = React.useMemo(function () {
    return LogicUtils.getDictfromDict(
      LogicUtils.getDictFromJsonObject(formState.values),
      "metadata",
    );
  }, []);
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowWalletConfigurationModal = match$1[1];
  var showWalletConfigurationModal = match$1[0];
  var match$2 = React.useState(function () {
    return ConnectorUtils.itemProviderMapper({});
  });
  var setSelectedWallet = match$2[1];
  var selectedWallet = match$2[0];
  var selectedAll = isSelectedAll(
    paymentMethodsEnabled,
    provider,
    paymentMethod,
  );
  var paymentObj = ConnectorUtils.getSelectedPaymentObj(
    paymentMethodsEnabled,
    paymentMethod,
  );
  var standardProviders = Core__Option.getOr(
    paymentObj.provider,
    ConnectorUtils.getPaymentMethodMapper([]),
  );
  var cardProviders = Core__Option.getOr(
    paymentObj.card_provider,
    ConnectorUtils.getPaymentMethodMapper([]),
  );
  var checkPaymentMethodType = function (obj, selectedMethod) {
    return obj.payment_method_type === selectedMethod.payment_method_type;
  };
  var checkPaymentMethodTypeAndExperience = function (obj, selectedMethod) {
    if (obj.payment_method_type === selectedMethod.payment_method_type) {
      return Caml_obj.equal(
        obj.payment_experience,
        selectedMethod.payment_experience,
      );
    } else {
      return false;
    }
  };
  var removeOrAddMethods = function (method) {
    var match = ConnectorUtils.getPaymentMethodTypeFromString(
      method.payment_method_type,
    );
    var match$1 = ConnectorUtils.getPaymentMethodFromString(paymentMethod);
    var match$2 = ConnectorUtils.getConnectorNameTypeFromString(
      connector,
      undefined,
      undefined,
    );
    var exit = 0;
    if (typeof match !== "object" && match === "PayPal") {
      if (typeof match$1 !== "object") {
        switch (match$1) {
          case "Card":
            exit = 2;
            break;
          case "Wallet":
            if (match$2.TAG === "Processors" && match$2._0 === "PAYPAL") {
              if (
                standardProviders.some(function (obj) {
                  return checkPaymentMethodTypeAndExperience(obj, method);
                })
              ) {
                return updateDetails(
                  ConnectorUtils.removeMethod(
                    paymentMethodsEnabled,
                    paymentMethod,
                    method,
                    connector,
                  ),
                );
              } else {
                return updateDetails(
                  ConnectorUtils.addMethod(
                    paymentMethodsEnabled,
                    paymentMethod,
                    method,
                  ),
                );
              }
            }
            break;
          default:
        }
      }
    } else {
      exit = 2;
    }
    if (exit === 2 && typeof match$1 !== "object" && match$1 === "Card") {
      if (
        cardProviders.some(function (obj) {
          return checkPaymentMethodType(obj, method);
        })
      ) {
        return updateDetails(
          ConnectorUtils.removeMethod(
            paymentMethodsEnabled,
            paymentMethod,
            method,
            connector,
          ),
        );
      } else {
        return updateDetails(
          ConnectorUtils.addMethod(
            paymentMethodsEnabled,
            paymentMethod,
            method,
          ),
        );
      }
    }
    if (
      standardProviders.some(function (obj) {
        return checkPaymentMethodType(obj, method);
      })
    ) {
      return updateDetails(
        ConnectorUtils.removeMethod(
          paymentMethodsEnabled,
          paymentMethod,
          method,
          connector,
        ),
      );
    }
    var methodVariant = ConnectorUtils.getPaymentMethodTypeFromString(
      method.payment_method_type,
    );
    var tmp = false;
    if (methodVariant === "GooglePay" || methodVariant === "ApplePay") {
      var match$3 = ConnectorUtils.getConnectorNameTypeFromString(
        connector,
        undefined,
        undefined,
      );
      var tmp$1;
      if (match$3.TAG === "Processors") {
        switch (match$3._0) {
          case "AIRWALLEX":
          case "TRUSTPAY":
          case "STRIPE_TEST":
            tmp$1 = false;
            break;
          default:
            tmp$1 = true;
        }
      } else {
        tmp$1 = true;
      }
      tmp = tmp$1;
    }
    if (tmp) {
      setShowWalletConfigurationModal(function (param) {
        return !showWalletConfigurationModal;
      });
      return setSelectedWallet(function (param) {
        return method;
      });
    } else {
      return updateDetails(
        ConnectorUtils.addMethod(paymentMethodsEnabled, paymentMethod, method),
      );
    }
  };
  var isSelected = function (selectedMethod) {
    var match = ConnectorUtils.getPaymentMethodFromString(paymentMethod);
    var match$1 = ConnectorUtils.getConnectorNameTypeFromString(
      connector,
      undefined,
      undefined,
    );
    if (
      typeof match !== "object" &&
      match === "Wallet" &&
      match$1.TAG === "Processors" &&
      match$1._0 === "PAYPAL"
    ) {
      return standardProviders.some(function (obj) {
        return checkPaymentMethodTypeAndExperience(obj, selectedMethod);
      });
    }
    if (
      standardProviders.some(function (obj) {
        return checkPaymentMethodType(obj, selectedMethod);
      })
    ) {
      return true;
    } else {
      return cardProviders.some(function (obj) {
        return checkPaymentMethodType(obj, selectedMethod);
      });
    }
  };
  var isNotVerifiablePaymentMethod = function (paymentMethodVariant) {
    if (typeof paymentMethodVariant !== "object") {
      return true;
    } else {
      return paymentMethodVariant._0 !== "is_verifiable";
    }
  };
  var p2RegularTextStyle =
    HSwitchUtils.getTextClass(["P2", "Medium"]) + " text-grey-700 opacity-50";
  var removeSelectedWallet = function () {
    form.change("metadata", initalFormValue);
    setSelectedWallet(function (param) {
      return ConnectorUtils.itemProviderMapper({});
    });
  };
  var tmp = false;
  if (ConnectorUtils.getPaymentMethodFromString(paymentMethod) === "Wallet") {
    var match$3 = ConnectorUtils.getConnectorNameTypeFromString(
      connector,
      undefined,
      undefined,
    );
    var tmp$1;
    tmp$1 = match$3.TAG === "Processors" && match$3._0 === "ZEN" ? true : false;
    tmp = tmp$1;
  }
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-4 border rounded-md p-6",
    },
    React.createElement(
      "div",
      undefined,
      React.createElement(RenderIf.make, {
        condition: isNotVerifiablePaymentMethod(
          ConnectorUtils.getPaymentMethodFromString(paymentMethod),
        ),
        children: React.createElement(
          "div",
          {
            className:
              "flex items-center border-b gap-2 py-2 break-all justify-between",
          },
          React.createElement(
            "p",
            {
              className: "font-semibold text-bold text-lg",
            },
            LogicUtils.snakeToTitle(paymentMethod),
          ),
          React.createElement(RenderIf.make, {
            condition:
              ConnectorUtils.getPaymentMethodFromString(paymentMethod) !==
              "Wallet",
            children: React.createElement(AddDataAttributes.make, {
              attributes: [
                ["data-testid", paymentMethod.concat("_").concat("select_all")],
              ],
              children: React.createElement(
                "div",
                {
                  className: "flex gap-2 items-center",
                },
                React.createElement(BoolInput.BaseComponent.make, {
                  isSelected: selectedAll,
                  setIsSelected: function (param) {
                    var arr = selectedAll ? [] : provider;
                    paymentMethodsEnabled.forEach(function (val) {
                      if (val.payment_method_type !== paymentMethod) {
                        return;
                      }
                      var match =
                        ConnectorUtils.getPaymentMethodTypeFromString(
                          paymentMethod,
                        );
                      var exit = 0;
                      if (typeof match !== "object") {
                        switch (match) {
                          case "Credit":
                          case "Debit":
                            exit = 2;
                            break;
                          default:
                            exit = 1;
                        }
                      } else {
                        exit = 1;
                      }
                      switch (exit) {
                        case 1:
                          var length = Core__Option.getOr(
                            val.provider,
                            [],
                          ).length;
                          Caml_splice_call.spliceObjApply(
                            Core__Option.getOr(val.provider, []),
                            "splice",
                            [0, length, arr],
                          );
                          return;
                        case 2:
                          var length$1 = Core__Option.getOr(
                            val.card_provider,
                            [],
                          ).length;
                          Caml_splice_call.spliceObjApply(
                            Core__Option.getOr(val.card_provider, []),
                            "splice",
                            [0, length$1, arr],
                          );
                          return;
                      }
                    });
                    updateDetails(paymentMethodsEnabled);
                  },
                  isDisabled: false,
                  boolCustomClass: "rounded-lg",
                }),
                React.createElement(
                  "p",
                  {
                    className: p2RegularTextStyle,
                  },
                  "Select all",
                ),
              ),
            }),
          }),
        ),
      }),
    ),
    React.createElement(RenderIf.make, {
      condition: tmp,
      children: React.createElement(
        "div",
        {
          className: "border rounded p-2 bg-jp-gray-100 flex gap-4",
        },
        React.createElement(Icon.make, {
          name: "outage_icon",
          size: 15,
        }),
        "Zen doesn't support Googlepay and Applepay in sandbox.",
      ),
    }),
    React.createElement(
      "div",
      {
        className:
          "grid " +
          (props._showAdvancedConfiguration ? "grid-cols-2" : "grid-cols-4") +
          " gap-4",
      },
      provider.map(function (value, i) {
        var match = ConnectorUtils.getPaymentMethodTypeFromString(
          value.payment_method_type,
        );
        var match$1 = ConnectorUtils.getPaymentMethodFromString(paymentMethod);
        var match$2 = ConnectorUtils.getConnectorNameTypeFromString(
          connector,
          undefined,
          undefined,
        );
        var tmp;
        var exit = 0;
        if (
          typeof match !== "object" &&
          match === "PayPal" &&
          typeof match$1 !== "object" &&
          match$1 === "Wallet" &&
          match$2.TAG === "Processors" &&
          match$2._0 === "PAYPAL"
        ) {
          tmp = React.createElement(
            "p",
            {
              className: p2RegularTextStyle + " cursor-pointer",
              onClick: function (param) {
                removeOrAddMethods(value);
              },
            },
            Core__Option.getOr(value.payment_experience, "") ===
              "redirect_to_url"
              ? "PayPal Redirect"
              : "PayPal SDK",
          );
        } else {
          exit = 1;
        }
        if (exit === 1) {
          tmp = React.createElement(
            "p",
            {
              className: p2RegularTextStyle + " cursor-pointer",
              onClick: function (param) {
                removeOrAddMethods(value);
              },
            },
            LogicUtils.snakeToTitle(value.payment_method_type),
          );
        }
        return React.createElement(
          "div",
          {
            key: i.toString(),
          },
          React.createElement(
            "div",
            {
              className: "flex",
            },
            React.createElement(AddDataAttributes.make, {
              attributes: [
                [
                  "data-testid",
                  paymentMethod
                    .concat("_")
                    .concat(value.payment_method_type)
                    .toLowerCase(),
                ],
              ],
              children: React.createElement(
                "div",
                {
                  className: "flex items-center gap-2",
                },
                React.createElement(
                  "div",
                  {
                    className: "cursor-pointer",
                    onClick: function (param) {
                      removeOrAddMethods(value);
                    },
                  },
                  React.createElement(CheckBoxIcon.make, {
                    isSelected: isSelected(value),
                  }),
                ),
                tmp,
              ),
            }),
          ),
        );
      }),
      React.createElement(RenderIf.make, {
        condition:
          ConnectorUtils.getPaymentMethodTypeFromString(
            selectedWallet.payment_method_type,
          ) === "ApplePay" ||
          ConnectorUtils.getPaymentMethodTypeFromString(
            selectedWallet.payment_method_type,
          ) === "GooglePay",
        children: React.createElement(Modal.make, {
          showModal: showWalletConfigurationModal,
          setShowModal: setShowWalletConfigurationModal,
          children: React.createElement(Wallet.Wallets.make, {
            method: selectedWallet,
            setMetaData: props.setMetaData,
            setShowWalletConfigurationModal: setShowWalletConfigurationModal,
            updateDetails: updateDetails,
            paymentMethodsEnabled: paymentMethodsEnabled,
            paymentMethod: paymentMethod,
            onCloseClickCustomFun: removeSelectedWallet,
          }),
          modalHeading:
            "Additional Details to enable " +
            LogicUtils.snakeToTitle(selectedWallet.payment_method_type),
          modalClass:
            "w-full md:w-1/3 !h-full overflow-y-scroll !overflow-x-hidden rounded-none text-jp-gray-900",
          childClass: "",
          paddingClass: "",
          headerTextClass:
            match.globalUIConfig.font.textColor.primaryNormal +
            " font-bold text-xl",
          headBgClass: "sticky top-0 z-30 bg-white",
          revealFrom: "Right",
          onCloseClickCustomFun: removeSelectedWallet,
        }),
      }),
    ),
  );
}

var CardRenderer = {
  make: PaymentMethod$CardRenderer,
};

function PaymentMethod$PaymentMethodsRender(props) {
  var isPayoutFlow = props.isPayoutFlow;
  var setMetaData = props.setMetaData;
  var updateDetails = props.updateDetails;
  var paymentMethodsEnabled = props.paymentMethodsEnabled;
  var connector = props.connector;
  var pmts = React.useMemo(
    function () {
      return LogicUtils.getDictFromJsonObject(
        isPayoutFlow
          ? window.getPayoutConnectorConfig(connector)
          : window.getConnectorConfig(connector),
      );
    },
    [connector],
  );
  var keys = Object.keys(pmts).filter(function (val) {
    return !ConnectorUtils.configKeysToIgnore.includes(val);
  });
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-12",
    },
    keys.map(function (value, i) {
      var provider = ConnectorUtils.getPaymentMethodMapper(
        LogicUtils.getArrayFromDict(pmts, value, []),
      );
      var match = ConnectorUtils.getPaymentMethodTypeFromString(value);
      var exit = 0;
      if (typeof match !== "object") {
        switch (match) {
          case "Credit":
          case "Debit":
            exit = 2;
            break;
          default:
            exit = 1;
        }
      } else {
        exit = 1;
      }
      switch (exit) {
        case 1:
        case 2:
          return React.createElement(
            "div",
            {
              key: i.toString(),
            },
            React.createElement(PaymentMethod$CardRenderer, {
              updateDetails: updateDetails,
              paymentMethodsEnabled: paymentMethodsEnabled,
              paymentMethod: value,
              provider: provider,
              _showAdvancedConfiguration: false,
              setMetaData: setMetaData,
              connector: connector,
            }),
          );
      }
    }),
  );
}

var PaymentMethodsRender = {
  make: PaymentMethod$PaymentMethodsRender,
};

export { isSelectedAll, CardRenderer, PaymentMethodsRender };
/* Icon Not a pure module */
