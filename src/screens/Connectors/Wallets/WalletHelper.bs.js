// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as React from "react";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as RadioIcon from "../../../components/custom-icons/RadioIcon.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ThemeProvider from "../../../context/ThemeProvider.bs.js";

function WalletHelper$Heading(props) {
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(
      "div",
      {
        className: "flex gap-3 p-2 m-2",
      },
      React.createElement(Icon.make, {
        name: "applepay",
        size: 56,
      }),
      React.createElement(
        "div",
        undefined,
        React.createElement(
          "div",
          {
            className: "flex items-center gap-4",
          },
          React.createElement(
            "div",
            {
              className: "leading-tight   font-semibold text-fs-18",
            },
            "Apple Pay",
          ),
          React.createElement(
            "div",
            {
              className:
                "flex items-center gap-1 text-sm text-grey-700 font-semibold border  rounded-full px-2 py-1 bg-orange-600/80 border-orange-500",
            },
            React.createElement(
              "div",
              undefined,
              React.createElement(Icon.make, {
                name: "ellipse-black",
                size: 4,
              }),
            ),
            React.createElement("div", undefined, "Test Mode"),
          ),
        ),
        React.createElement(
          "div",
          {
            className:
              " mt-2 text-sm text-hyperswitch_black opacity-50  font-normal",
          },
          "Choose Configuration Method",
        ),
      ),
    ),
    React.createElement("hr", {
      className: "w-full mt-4",
    }),
  );
}

var Heading = {
  make: WalletHelper$Heading,
};

function WalletHelper$CustomTag(props) {
  var __tagCustomStyle = props.tagCustomStyle;
  var __tagLeftIcon = props.tagLeftIcon;
  var __tagSize = props.tagSize;
  var __tagText = props.tagText;
  var tagText = __tagText !== undefined ? __tagText : "";
  var tagSize = __tagSize !== undefined ? __tagSize : 5;
  var tagLeftIcon =
    __tagLeftIcon !== undefined
      ? Caml_option.valFromOption(__tagLeftIcon)
      : undefined;
  var tagCustomStyle = __tagCustomStyle !== undefined ? __tagCustomStyle : "";
  return React.createElement(
    "div",
    {
      className:
        "flex items-center gap-1  shadow-connectorTagShadow border rounded-full px-2 py-1 " +
        tagCustomStyle,
    },
    tagLeftIcon !== undefined
      ? React.createElement(
          "div",
          undefined,
          React.createElement(Icon.make, {
            name: tagLeftIcon,
            size: tagSize,
          }),
        )
      : null,
    React.createElement(
      "div",
      {
        className: "text-hyperswitch_black text-sm font-medium text-green-960",
      },
      tagText,
    ),
  );
}

var CustomTag = {
  make: WalletHelper$CustomTag,
};

function WalletHelper$InfoCard(props) {
  var __customInfoStyle = props.customInfoStyle;
  var customInfoStyle =
    __customInfoStyle !== undefined ? __customInfoStyle : "";
  return React.createElement(
    "div",
    {
      className:
        "rounded border bg-blue-800 border-blue-700 dark:border-blue-700 relative flex w-full p-6 ",
    },
    React.createElement(Icon.make, {
      name: "info-circle-unfilled",
      size: 16,
      className: customInfoStyle,
    }),
    React.createElement("div", undefined, props.children),
  );
}

var InfoCard = {
  make: WalletHelper$InfoCard,
};

function WalletHelper$Card(props) {
  var __isSelected = props.isSelected;
  var __heading = props.heading;
  var heading = __heading !== undefined ? __heading : "";
  var isSelected = __isSelected !== undefined ? __isSelected : false;
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = match.globalUIConfig;
  var borderColor = match$1.border.borderColor;
  var textColor = match$1.font.textColor;
  return React.createElement(React.Fragment, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className:
            "relative w-full p-6 rounded flex flex-col justify-between  " +
            (isSelected
              ? "bg-light_blue_bg " +
                borderColor.primaryNormal +
                " dark: " +
                borderColor.primaryNormal
              : ""),
        },
        React.createElement(
          "div",
          {
            className: "flex justify-between",
          },
          React.createElement(
            "div",
            {
              className:
                "leading-tight font-semibold text-fs-18 " +
                (isSelected
                  ? textColor.primaryNormal
                  : "text-hyperswitch_black") +
                " ",
            },
            heading,
          ),
          React.createElement(
            "div",
            undefined,
            React.createElement(RadioIcon.make, {
              isSelected: isSelected,
              fill: textColor.primaryNormal,
            }),
          ),
        ),
        props.children,
      ),
    ),
  });
}

var Card = {
  make: WalletHelper$Card,
};

function WalletHelper$CustomSubText(props) {
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(
      "p",
      undefined,
      "Enable Apple Pay for iOS app with the following details:",
    ),
    React.createElement(
      "ol",
      {
        className: "list-decimal list-inside mt-1",
      },
      React.createElement(
        "li",
        undefined,
        "Payment Processing Certificate from the processor",
      ),
      React.createElement("li", undefined, " Apple Pay Merchant ID"),
      React.createElement("li", undefined, "Merchant Private Key"),
    ),
  );
}

var CustomSubText = {
  make: WalletHelper$CustomSubText,
};

function WalletHelper$SimplifiedHelper(props) {
  var __subText = props.subText;
  var __stepNumber = props.stepNumber;
  var __heading = props.heading;
  var customElement = props.customElement;
  var heading = __heading !== undefined ? __heading : "";
  var stepNumber = __stepNumber !== undefined ? __stepNumber : "1";
  var subText =
    __subText !== undefined ? Caml_option.valFromOption(__subText) : undefined;
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = match.globalUIConfig;
  var stepColor = match$1.backgroundColor + " text-white py-px px-2";
  return React.createElement(
    "div",
    {
      className: "flex flex-col py-8 px-6 gap-3 bg-white cursor-pointer",
    },
    React.createElement(
      "div",
      {
        className: "flex justify-between ",
      },
      React.createElement(
        "div",
        {
          className: "flex gap-4",
        },
        React.createElement(
          "div",
          undefined,
          React.createElement(
            "p",
            {
              className: stepColor + " font-medium",
            },
            stepNumber,
          ),
        ),
        React.createElement(
          "div",
          undefined,
          React.createElement(
            "p",
            {
              className:
                "font-medium text-base " + match$1.font.textColor.primaryNormal,
            },
            heading,
          ),
          React.createElement(RenderIf.make, {
            condition: Core__Option.isSome(subText),
            children: React.createElement(
              "p",
              {
                className:
                  "mt-2 text-base text-hyperswitch_black opacity-50 font-normal",
              },
              Core__Option.getOr(subText, ""),
            ),
          }),
          customElement !== undefined
            ? Caml_option.valFromOption(customElement)
            : null,
        ),
      ),
    ),
  );
}

var SimplifiedHelper = {
  make: WalletHelper$SimplifiedHelper,
};

export { Heading, CustomTag, InfoCard, Card, CustomSubText, SimplifiedHelper };
/* Icon Not a pure module */
