// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as UrlUtils from "../../utils/UrlUtils.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../HSwitchUtils.bs.js";
import * as MixpanelHook from "../MixpanelHook.bs.js";
import * as FormValuesSpy from "../../components/form/FormValuesSpy.bs.js";
import * as ConnectorUtils from "./ConnectorUtils.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as IntegrationHelp from "./ConnectorUIUtils/IntegrationHelp.bs.js";
import * as JsonFlattenUtils from "../../utils/JsonFlattenUtils.bs.js";
import * as AddDataAttributes from "../../components/AddDataAttributes.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";
import * as ConnectorAccountDetailsHelper from "./ConnectorAccountDetailsHelper.bs.js";

function ConnectorAccountDetails(props) {
  var isPayoutFlow = props.isPayoutFlow;
  var isUpdateFlow = props.isUpdateFlow;
  var initialValues = props.initialValues;
  var setInitialValues = props.setInitialValues;
  var setCurrentStep = props.setCurrentStep;
  var getURL = APIUtils.useGetURL();
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var showToast = ToastState.useShowToast();
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var connector = LogicUtils.getString(
    UrlUtils.useGetFilterDictFromUrl(""),
    "name",
    "",
  );
  var connectorID = HSwitchUtils.getConnectorIDFromUrl(
    Core__List.toArray(url.path),
    "",
  );
  var match = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match[1];
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var match$1 = React.useState(function () {
    return "NoAttempt";
  });
  var setVerifyDone = match$1[1];
  var verifyDone = match$1[0];
  var match$2 = React.useState(function () {
    return false;
  });
  var setShowVerifyModal = match$2[1];
  var match$3 = React.useState(function () {});
  var setVerifyErrorMessage = match$3[1];
  var verifyErrorMessage = match$3[0];
  var connectorTypeFromName = ConnectorUtils.getConnectorNameTypeFromString(
    connector,
    undefined,
    undefined,
  );
  var selectedConnector = React.useMemo(
    function () {
      return ConnectorUtils.getConnectorInfo(connectorTypeFromName);
    },
    [connector],
  );
  var defaultBusinessProfile = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var activeBusinessProfile = MerchantAccountUtils.getValueFromBusinessProfile(
    defaultBusinessProfile,
  );
  var connectorDetails = React.useMemo(
    function () {
      try {
        if (!LogicUtils.isNonEmptyString(connector)) {
          return {};
        }
        var dict = isPayoutFlow
          ? window.getPayoutConnectorConfig(connector)
          : window.getConnectorConfig(connector);
        setScreenState(function (param) {
          return "Success";
        });
        return dict;
      } catch (raw_e) {
        var e = Caml_js_exceptions.internalToOCamlException(raw_e);
        if (e.RE_EXN_ID === Js_exn.$$Error) {
          var e$1 = e._1;
          console.log("FAILED TO LOAD CONNECTOR CONFIG", e$1);
          var err = Core__Option.getOr(e$1.message, "Something went wrong");
          setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: err,
            };
          });
          return {};
        }
        throw e;
      }
    },
    [connector],
  );
  var match$4 = ConnectorUtils.getConnectorFields(connectorDetails);
  var connectorLabelDetailField = match$4[5];
  var connectorWebHookDetails = match$4[4];
  var isVerifyConnector = match$4[3];
  var connectorMetaDataFields = match$4[2];
  var connectorAccountFields = match$4[1];
  var bodyType = match$4[0];
  var match$5 = React.useState(function () {
    return false;
  });
  var setShowModal = match$5[1];
  var updatedInitialVal = React.useMemo(
    function () {
      var initialValuesToDict = LogicUtils.getDictFromJsonObject(initialValues);
      if (!isUpdateFlow) {
        var tmp;
        tmp =
          connectorTypeFromName.TAG === "Processors" &&
          connectorTypeFromName._0 === "PAYPAL"
            ? true
            : false;
        if (tmp && featureFlagDetails.paypalAutomaticFlow) {
          initialValuesToDict["connector_label"] = LogicUtils.getString(
            LogicUtils.getDictFromJsonObject(initialValues),
            "connector_label",
            "",
          );
          initialValuesToDict["profile_id"] = LogicUtils.getString(
            initialValuesToDict,
            "profile_id",
            "",
          );
        } else if (LogicUtils.isNonEmptyString(connector)) {
          initialValuesToDict["connector_label"] =
            connector + "_" + activeBusinessProfile.profile_name;
          initialValuesToDict["profile_id"] = activeBusinessProfile.profile_id;
        }
      }
      if (
        !(
          ConnectorUtils.checkIsDummyConnector(
            connectorTypeFromName,
            featureFlagDetails.testProcessors,
          ) && !isUpdateFlow
        )
      ) {
        return initialValues;
      }
      var apiKeyDict = Object.fromEntries([["api_key", "test_key"]]);
      initialValuesToDict["connector_account_details"] = apiKeyDict;
      return initialValuesToDict;
    },
    [connector, activeBusinessProfile.profile_id],
  );
  var onSubmitMain = async function (values) {
    try {
      var body = ConnectorUtils.generateInitialValuesDict(
        values,
        connector,
        bodyType,
        isPayoutFlow,
        featureFlagDetails.isLiveMode,
        undefined,
        undefined,
      );
      setScreenState(function (param) {
        return "Loading";
      });
      setCurrentStep(function (param) {
        return "PaymentMethods";
      });
      setScreenState(function (param) {
        return "Success";
      });
      return setInitialValues(function (param) {
        return body;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        setShowVerifyModal(function (param) {
          return false;
        });
        setVerifyDone(function (param) {
          return "NoAttempt";
        });
        var message = e._1.message;
        if (message === undefined) {
          return setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: "Failed to Fetch!",
            };
          });
        }
        var errMsg = JSON.parse(message);
        if (Core__Option.getOr(errMsg.code, "").includes("HE_01")) {
          showToast(
            "This configuration already exists for the connector. Please try with a different country or label under advanced settings.",
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          setCurrentStep(function (param) {
            return "IntegFields";
          });
          return setScreenState(function (param) {
            return "Success";
          });
        } else {
          showToast(
            "Failed to Save the Configuration!",
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          return setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: message,
            };
          });
        }
      }
      throw e;
    }
  };
  var onSubmitVerify = async function (values) {
    try {
      var body = ConnectorUtils.ignoreFields(
        ConnectorUtils.generateInitialValuesDict(
          values,
          connector,
          bodyType,
          isPayoutFlow,
          featureFlagDetails.isLiveMode,
          undefined,
          undefined,
        ),
        connectorID,
        ConnectorUtils.verifyConnectorIgnoreField,
      );
      var url = getURL(
        "CONNECTOR",
        "Post",
        undefined,
        Caml_option.some(connector),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setShowVerifyModal(function (param) {
        return false;
      });
      onSubmitMain(values);
      return;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var message = e._1.message;
        if (message === undefined) {
          return setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: "Failed to Fetch!",
            };
          });
        }
        var errorMessage = JSON.parse(message);
        setVerifyErrorMessage(function (param) {
          return errorMessage.message;
        });
        setShowVerifyModal(function (param) {
          return true;
        });
        return setVerifyDone(function (param) {
          return "Failure";
        });
      }
      throw e;
    }
  };
  var validateMandatoryField = function (values) {
    var errors = {};
    var valuesFlattenJson = JsonFlattenUtils.flattenObject(values, true);
    var profileId = LogicUtils.getString(valuesFlattenJson, "profile_id", "");
    if (profileId.length === 0) {
      errors["Profile Id"] = "Please select your business profile";
    }
    return ConnectorUtils.validateConnectorRequiredFields(
      connectorTypeFromName,
      valuesFlattenJson,
      connectorAccountFields,
      connectorMetaDataFields,
      connectorWebHookDetails,
      connectorLabelDetailField,
      errors,
    );
  };
  var buttonText;
  switch (verifyDone) {
    case "Failure":
      buttonText = "Try Again";
      break;
    case "NoAttempt":
      buttonText = isUpdateFlow ? "Proceed" : "Connect and Proceed";
      break;
    case "Success":
    case "Loading":
      buttonText = "Loading...";
      break;
  }
  var match$6 = ConnectorUtils.getSuggestedAction(
    verifyErrorMessage,
    connector,
  );
  var handleShowModal = function () {
    setShowModal(function (param) {
      return true;
    });
  };
  var mixpanelEventName = isUpdateFlow
    ? "processor_step1_onUpdate"
    : "processor_step1";
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        Form.make,
        {
          children: null,
          onSubmit: function (values, param) {
            mixpanelEvent(
              mixpanelEventName,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            return ConnectorUtils.onSubmit(
              values,
              onSubmitVerify,
              onSubmitMain,
              setVerifyDone,
              verifyDone,
              isVerifyConnector,
            );
          },
          initialValues: updatedInitialVal,
          validate: validateMandatoryField,
          formClass: "flex flex-col ",
        },
        React.createElement(
          ConnectorAccountDetailsHelper.ConnectorHeaderWrapper.make,
          {
            children: null,
            headerButton: React.createElement(AddDataAttributes.make, {
              attributes: [["data-testid", "connector-submit-button"]],
              children: React.createElement(FormRenderer.SubmitButton.make, {
                text: buttonText,
                loadingText: "Processing...",
              }),
            }),
            connector: connector,
            handleShowModal: handleShowModal,
          },
          React.createElement(
            "div",
            {
              className: "flex flex-col gap-2 p-2 md:px-10",
            },
            React.createElement(
              ConnectorAccountDetailsHelper.BusinessProfileRender.make,
              {
                isUpdateFlow: isUpdateFlow,
                selectedConnector: connector,
              },
            ),
          ),
          React.createElement(
            "div",
            {
              className: "flex flex-col gap-2 p-2 md:px-10",
            },
            React.createElement(
              "div",
              {
                className: "grid grid-cols-2 flex-1",
              },
              React.createElement(
                ConnectorAccountDetailsHelper.ConnectorConfigurationFields.make,
                {
                  connectorAccountFields: connectorAccountFields,
                  connector: connectorTypeFromName,
                  selectedConnector: selectedConnector,
                  connectorMetaDataFields: connectorMetaDataFields,
                  connectorWebHookDetails: connectorWebHookDetails,
                  connectorLabelDetailField: connectorLabelDetailField,
                },
              ),
            ),
            React.createElement(IntegrationHelp.Render.make, {
              connector: connector,
              showModal: match$5[0],
              setShowModal: setShowModal,
            }),
          ),
          React.createElement(FormValuesSpy.make, {}),
        ),
        React.createElement(
          ConnectorAccountDetailsHelper.VerifyConnectorModal.make,
          {
            showVerifyModal: match$2[0],
            setShowVerifyModal: setShowVerifyModal,
            connector: connector,
            verifyErrorMessage: verifyErrorMessage,
            suggestedActionExists: match$6[1],
            suggestedAction: match$6[0],
            setVerifyDone: setVerifyDone,
          },
        ),
      ),
    ),
    screenState: match[0],
  });
}

var make = ConnectorAccountDetails;

export { make };
/* Form Not a pure module */
