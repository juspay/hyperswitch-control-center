// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConnectorUtils from "../ConnectorUtils.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var listChoices = [
  {
    displayText: "No, I don't",
    choiceDescription:
      "Don't worry, easily create & activate your PayPal account in minutes.",
    variantType: "Automatic",
  },
  {
    displayText: "Yes, I have",
    choiceDescription:
      "Simply login to your PayPal account and leave the rest to us. Or enter credentials manually.",
    variantType: "Manual",
  },
];

function getPageDetailsForAutomatic(setupAccountStatus) {
  switch (setupAccountStatus) {
    case "Account_not_found":
      return {
        headerText: "No account found for this email",
        subText: "No account found for this email.",
      };
    case "Payments_not_receivable":
      return {
        headerText:
          "You currently cannot receive payments due to restriction on your PayPal account",
        subText:
          "An email has been sent to you explaining the issue. Please reach out to PayPal Customer Support for more information.",
      };
    case "Ppcp_custom_denied":
      return {
        headerText: "Your application has been denied by PayPal",
        subText:
          "PayPal denied your application to use Advanced Credit and Debit Card Payments.",
      };
    case "More_permissions_needed":
      return {
        headerText: "PayPal requires you to grant all permissions",
        subText:
          "You need to grant all the permissions to create and receive payments. Please click on the Signup to PayPal button and grant the permissions.",
        buttonText: "Complete Signing up",
      };
    case "Email_not_verified":
      return {
        headerText: "Your email is yet to be confirmed!",
        subText:
          "Please confirm your email address on https://www.paypal.com/businessprofile/settings in order to receive payments.",
      };
    default:
      return {
        headerText: "",
        subText: "",
      };
  }
}

function stringToVariantMapper(strValue) {
  switch (strValue) {
    case "connector_integrated":
      return "Connector_integrated";
    case "email_not_verified":
      return "Email_not_verified";
    case "more_permissions_needed":
      return "More_permissions_needed";
    case "payments_not_receivable":
      return "Payments_not_receivable";
    case "ppcp_custom_denied":
      return "Ppcp_custom_denied";
    default:
      return "Account_not_found";
  }
}

function handleObjectResponse(
  dict,
  setInitialValues,
  connector,
  handleStateToNextPage,
) {
  var values = LogicUtils.getJsonObjectFromDict(dict, "connector_integrated");
  var bodyTypeValue = LogicUtils.getString(
    LogicUtils.getDictfromDict(
      LogicUtils.getDictFromJsonObject(values),
      "connector_account_details",
    ),
    "auth_type",
    "",
  );
  var body = ConnectorUtils.generateInitialValuesDict(
    values,
    connector,
    bodyTypeValue,
    false,
    undefined,
    undefined,
    undefined,
  );
  setInitialValues(function (param) {
    return body;
  });
  return handleStateToNextPage();
}

function getBodyType(isUpdateFlow, configuartionType) {
  if (!isUpdateFlow) {
    return "TemporaryAuth";
  }
  switch (configuartionType) {
    case "Manual":
      return "BodyKey";
    case "Automatic":
    case "NotSelected":
      return "SignatureKey";
  }
}

function generateConnectorPayloadPayPal(
  profileId,
  connectorId,
  connector,
  bodyType,
  connectorLabel,
  disabled,
  status,
) {
  var initialValues = LogicUtils.getJsonFromArrayOfJson([
    ["profile_id", profileId],
    ["connector_name", connector.toLowerCase()],
    ["connector_type", "payment_processor"],
    ["disabled", disabled],
    ["test_mode", true],
    ["status", status],
    ["connector_label", connectorLabel],
  ]);
  return ConnectorUtils.ignoreFields(
    ConnectorUtils.generateInitialValuesDict(
      initialValues,
      connector,
      bodyType,
      false,
      undefined,
      undefined,
      undefined,
    ),
    connectorId,
    ConnectorUtils.connectorIgnoredField,
  );
}

function generatePayPalBody(returnUrlOpt, connectorId, profileIdOpt, param) {
  var returnUrl =
    returnUrlOpt !== undefined
      ? Caml_option.valFromOption(returnUrlOpt)
      : undefined;
  var profileId =
    profileIdOpt !== undefined
      ? Caml_option.valFromOption(profileIdOpt)
      : undefined;
  if (returnUrl !== undefined) {
    return LogicUtils.getJsonFromArrayOfJson([
      ["connector", "paypal"],
      ["return_url", returnUrl],
      ["connector_id", connectorId],
    ]);
  } else {
    return LogicUtils.getJsonFromArrayOfJson([
      ["connector", "paypal"],
      ["connector_id", connectorId],
      ["profile_id", Core__Option.getOr(profileId, "")],
    ]);
  }
}

var conditionForIntegrationSteps = [
  "Account_not_found",
  "Redirecting_to_paypal",
];

function useDeleteTrackingDetails() {
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var getURL = APIUtils.useGetURL();
  return async function (connectorId, connector) {
    try {
      var url = getURL(
        "RESET_TRACKING_ID",
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["connector_id", connectorId],
        ["connector", connector],
      ]);
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to update!"),
        );
      }
      throw e;
    }
  };
}

function useDeleteConnectorAccountDetails() {
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var getURL = APIUtils.useGetURL();
  return async function (
    initialValues,
    connectorId,
    connector,
    isUpdateFlow,
    disabled,
    status,
  ) {
    try {
      var dictOfJson = LogicUtils.getDictFromJsonObject(initialValues);
      var profileIdValue = LogicUtils.getString(dictOfJson, "profile_id", "");
      var body = generateConnectorPayloadPayPal(
        profileIdValue,
        connectorId,
        connector,
        "TemporaryAuth",
        LogicUtils.getString(dictOfJson, "connector_label", ""),
        disabled,
        status,
      );
      var url = getURL(
        "CONNECTOR",
        "Post",
        Caml_option.some(isUpdateFlow ? connectorId : undefined),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to Fetch!"),
        );
      }
      throw e;
    }
  };
}

function getAuthTypeFromConnectorDetails(json) {
  return ConnectorUtils.mapAuthType(
    LogicUtils.getString(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(json),
        "connector_account_details",
      ),
      "auth_type",
      "",
    ).toLowerCase(),
  );
}

async function payPalPageState(
  setScreenState,
  url,
  setSetupAccountStatus,
  getPayPalStatus,
  setCurrentStep,
  isUpdateFlow,
) {
  try {
    var isSimplifiedPayPalFlow = LogicUtils.getBoolFromString(
      Core__Option.getOr(
        LogicUtils.getDictFromUrlSearchParams(url.search)[
          "is_simplified_paypal"
        ],
        "false",
      ),
      false,
    );
    var isRedirectedFromPaypalModal = LogicUtils.getBoolFromString(
      Core__Option.getOr(
        LogicUtils.getDictFromUrlSearchParams(url.search)["is_back"],
        "false",
      ),
      false,
    );
    setSetupAccountStatus(function (param) {
      return "Connect_paypal_landing";
    });
    if (isRedirectedFromPaypalModal) {
      return await getPayPalStatus();
    } else if (
      isUpdateFlow &&
      !(isSimplifiedPayPalFlow && isRedirectedFromPaypalModal)
    ) {
      setCurrentStep(function (param) {
        return "Preview";
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } else {
      setCurrentStep(function (param) {
        return "AutomaticFlow";
      });
      return setScreenState(function (param) {
        return "Success";
      });
    }
  } catch (raw_e) {
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e.RE_EXN_ID !== Js_exn.$$Error) {
      return setScreenState(function (param) {
        return {
          TAG: "Error",
          _0: "Something went wrong",
        };
      });
    }
    var err = Core__Option.getOr(e._1.message, "Something went wrong");
    return setScreenState(function (param) {
      return {
        TAG: "Error",
        _0: err,
      };
    });
  }
}

export {
  listChoices,
  getPageDetailsForAutomatic,
  stringToVariantMapper,
  handleObjectResponse,
  getBodyType,
  generateConnectorPayloadPayPal,
  generatePayPalBody,
  conditionForIntegrationSteps,
  useDeleteTrackingDetails,
  useDeleteConnectorAccountDetails,
  getAuthTypeFromConnectorDetails,
  payPalPageState,
};
/* APIUtils Not a pure module */
