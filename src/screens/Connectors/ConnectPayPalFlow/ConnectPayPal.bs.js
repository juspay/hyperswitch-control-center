// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../../utils/Form.bs.js";
import * as Icon from "../../../components/Icon.bs.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../../hooks/PopUpState.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../../HSwitchUtils.bs.js";
import * as FormValuesSpy from "../../../components/form/FormValuesSpy.bs.js";
import * as ThemeProvider from "../../../context/ThemeProvider.bs.js";
import * as ConnectorUtils from "../ConnectorUtils.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as PayPalFlowUtils from "./PayPalFlowUtils.bs.js";
import * as JsonFlattenUtils from "../../../utils/JsonFlattenUtils.bs.js";
import * as AddDataAttributes from "../../../components/AddDataAttributes.bs.js";
import * as PageLoaderWrapper from "../../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as MerchantAccountUtils from "../../Settings/MerchantAccountUtils.bs.js";
import * as ConnectorAccountDetailsHelper from "../ConnectorAccountDetailsHelper.bs.js";

var h3Leading2TextClass =
  HSwitchUtils.getTextClass(["H3", "Leading_2"]) + " text-grey-700";

var p1RegularTextClass =
  HSwitchUtils.getTextClass(["P1", "Regular"]) + " text-grey-700 opacity-50";

var p1MediumTextClass =
  HSwitchUtils.getTextClass(["P1", "Medium"]) + " text-grey-700";

var p2RedularTextClass =
  HSwitchUtils.getTextClass(["P2", "Regular"]) + " text-grey-700 opacity-50";

var preRequisiteList = [
  "You need to grant all the permissions to create and receive payments",
  "Confirm your email id once PayPal sends you the mail",
];

function ConnectPayPal$PayPalCreateNewAccountModal(props) {
  var setScreenState = props.setScreenState;
  var match = React.useContext(ThemeProvider.themeContext);
  var initializePayPalWindow = function () {
    try {
      window.payPalCreateAccountWindow();
      return;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var message = e._1.message;
        if (message !== undefined) {
          return setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: message,
            };
          });
        } else {
          return setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: "Failed to load paypal window!",
            };
          });
        }
      }
      throw e;
    }
  };
  React.useEffect(function () {
    initializePayPalWindow();
  }, []);
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-paypal-button", "true"]],
    children: React.createElement(
      "a",
      {
        className:
          "!w-fit rounded-md " +
          match.globalUIConfig.backgroundColor +
          " text-white px-4  h-fit border py-3 flex items-center justify-center gap-2",
        href: props.actionUrl + "&displayMode=minibrowser",
        target: "PPFrame",
      },
      props.butttonDisplayText,
      React.createElement(Icon.make, {
        name: "thin-right-arrow",
        size: 20,
      }),
    ),
  });
}

var PayPalCreateNewAccountModal = {
  make: ConnectPayPal$PayPalCreateNewAccountModal,
};

function ConnectPayPal$ManualSetupScreen(props) {
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-8",
    },
    React.createElement(
      ConnectorAccountDetailsHelper.ConnectorConfigurationFields.make,
      {
        connectorAccountFields: props.connectorAccountFields,
        connector: ConnectorUtils.getConnectorNameTypeFromString(
          props.connector,
          undefined,
          undefined,
        ),
        selectedConnector: props.selectedConnector,
        connectorMetaDataFields: props.connectorMetaDataFields,
        connectorWebHookDetails: props.connectorWebHookDetails,
        connectorLabelDetailField: props.connectorLabelDetailField,
      },
    ),
  );
}

var ManualSetupScreen = {
  make: ConnectPayPal$ManualSetupScreen,
};

function ConnectPayPal$LandingScreen(props) {
  var setConfigurationType = props.setConfigurationType;
  var configuartionType = props.configuartionType;
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = match.globalUIConfig;
  var borderColor = match$1.border.borderColor;
  var backgroundColor = match$1.backgroundColor;
  var textColor = match$1.font.textColor;
  var getBlockColor = function (value) {
    if (configuartionType === value) {
      return (
        borderColor.primaryNormal + " " + backgroundColor + " bg-opacity-10 "
      );
    } else {
      return "border";
    }
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-10",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-4",
      },
      React.createElement(
        "p",
        {
          className: h3Leading2TextClass,
        },
        "Do you have a PayPal business account?",
      ),
      React.createElement(
        "div",
        {
          className: "grid grid-cols-1 gap-4 md:grid-cols-2 md:gap-8",
        },
        PayPalFlowUtils.listChoices.map(function (items, index) {
          return React.createElement(
            "div",
            {
              key: index.toString(),
              className:
                "p-6 flex flex-col gap-4 rounded-md cursor-pointer " +
                getBlockColor(items.variantType) +
                " rounded-md",
              onClick: function (param) {
                setConfigurationType(function (param) {
                  return items.variantType;
                });
              },
            },
            React.createElement(
              "div",
              {
                className: "flex justify-between items-center",
              },
              React.createElement(
                "div",
                {
                  className: "flex gap-2 items-center ",
                },
                React.createElement(
                  "p",
                  {
                    className: p1MediumTextClass,
                  },
                  items.displayText,
                ),
              ),
              React.createElement(Icon.make, {
                name:
                  configuartionType === items.variantType
                    ? "selected"
                    : "nonselected",
                size: 20,
                className: "cursor-pointer !" + textColor.primaryNormal,
              }),
            ),
            React.createElement(
              "div",
              {
                className: "flex gap-2 items-center ",
              },
              React.createElement(
                "p",
                {
                  className: p1RegularTextClass,
                },
                items.choiceDescription,
              ),
            ),
          );
        }),
      ),
    ),
  );
}

var LandingScreen = {
  make: ConnectPayPal$LandingScreen,
};

function ConnectPayPal$ErrorPage(props) {
  var setScreenState = props.setScreenState;
  var getPayPalStatus = props.getPayPalStatus;
  var actionUrl = props.actionUrl;
  var errorPageDetails = PayPalFlowUtils.getPageDetailsForAutomatic(
    props.setupAccountStatus,
  );
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-6",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-6 p-8 bg-jp-gray-light_gray_bg",
      },
      React.createElement(Icon.make, {
        name: "error-icon",
        size: 24,
      }),
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-2",
        },
        React.createElement(RenderIf.make, {
          condition: LogicUtils.isNonEmptyString(errorPageDetails.headerText),
          children: React.createElement(
            "p",
            {
              className: p1RegularTextClass + " !opacity-100",
            },
            errorPageDetails.headerText,
          ),
        }),
        React.createElement(RenderIf.make, {
          condition: LogicUtils.isNonEmptyString(errorPageDetails.subText),
          children: React.createElement(
            "p",
            {
              className: p1RegularTextClass,
            },
            errorPageDetails.subText,
          ),
        }),
      ),
      React.createElement(
        "div",
        {
          className: "flex gap-4 items-center",
        },
        React.createElement(ConnectPayPal$PayPalCreateNewAccountModal, {
          butttonDisplayText: "Sign in / Sign up on PayPal",
          actionUrl: actionUrl,
          setScreenState: setScreenState,
        }),
        React.createElement(Button.make, {
          text: "Refresh status",
          buttonType: "Secondary",
          buttonSize: "Small",
          onClick: function (param) {
            getPayPalStatus();
          },
        }),
      ),
      React.createElement(RenderIf.make, {
        condition: Core__Option.isSome(errorPageDetails.buttonText),
        children: React.createElement(
          ConnectPayPal$PayPalCreateNewAccountModal,
          {
            butttonDisplayText: Core__Option.getOr(
              errorPageDetails.buttonText,
              "",
            ),
            actionUrl: actionUrl,
            setScreenState: setScreenState,
          },
        ),
      }),
    ),
  );
}

var ErrorPage = {
  make: ConnectPayPal$ErrorPage,
};

function ConnectPayPal$RedirectionToPayPalFlow(props) {
  var profileId = props.profileId;
  var getPayPalStatus = props.getPayPalStatus;
  var getURL = APIUtils.useGetURL();
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var path = Core__List.toArray(url.path).join("/");
  var connectorId = HSwitchUtils.getConnectorIDFromUrl(
    Core__List.toArray(url.path),
    "",
  );
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var match = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return "";
  });
  var setActionUrl = match$1[1];
  var actionUrl = match$1[0];
  var getRedirectPaypalWindowUrl = async function (param) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var returnURL =
        GlobalVars.getHostUrl +
        "/" +
        path +
        "?name=paypal&is_back=true&is_simplified_paypal=true&profile_id=" +
        profileId;
      var body = PayPalFlowUtils.generatePayPalBody(
        Caml_option.some(returnURL),
        connectorId,
        undefined,
        undefined,
      );
      var url = getURL(
        "ACTION_URL",
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var actionURL = LogicUtils.getString(
        LogicUtils.getDictfromDict(
          LogicUtils.getDictFromJsonObject(response),
          "paypal",
        ),
        "action_url",
        "",
      );
      setActionUrl(function (param) {
        return actionURL;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      return setScreenState(function (param) {
        return {
          TAG: "Error",
          _0: "",
        };
      });
    }
  };
  var setupAccountStatus = Recoil.useRecoilValue(
    HyperswitchAtom.paypalAccountStatusAtom,
  );
  React.useEffect(function () {
    getRedirectPaypalWindowUrl();
  }, []);
  var tmp;
  tmp =
    setupAccountStatus === "Redirecting_to_paypal"
      ? React.createElement(
          "div",
          {
            className: "flex flex-col gap-6",
          },
          React.createElement(
            "p",
            {
              className: h3Leading2TextClass,
            },
            "Sign in / Sign up to auto-configure your credentials & webhooks",
          ),
          React.createElement(
            "div",
            {
              className: "flex flex-col gap-2",
            },
            React.createElement(
              "p",
              {
                className: p1RegularTextClass + " !opacity-100",
              },
              "Things to keep in mind while signing up",
            ),
            preRequisiteList.map(function (item, index) {
              return React.createElement(
                "p",
                {
                  className: p1RegularTextClass,
                },
                ((index + 1) | 0).toString() + ". " + item,
              );
            }),
          ),
          React.createElement(
            "div",
            {
              className: "flex gap-4 items-center",
            },
            React.createElement(ConnectPayPal$PayPalCreateNewAccountModal, {
              butttonDisplayText: "Sign in / Sign up on PayPal",
              actionUrl: actionUrl,
              setScreenState: setScreenState,
            }),
            React.createElement(Button.make, {
              text: "Refresh status ",
              buttonType: "Secondary",
              buttonSize: "Small",
              onClick: function (param) {
                getPayPalStatus();
              },
            }),
          ),
        )
      : React.createElement(ConnectPayPal$ErrorPage, {
          setupAccountStatus: setupAccountStatus,
          actionUrl: actionUrl,
          getPayPalStatus: getPayPalStatus,
          setScreenState: setScreenState,
        });
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(tmp),
    screenState: match[0],
  });
}

var RedirectionToPayPalFlow = {
  make: ConnectPayPal$RedirectionToPayPalFlow,
};

function ConnectPayPal(props) {
  var setCurrentStep = props.setCurrentStep;
  var initialValues = props.initialValues;
  var setInitialValues = props.setInitialValues;
  var isUpdateFlow = props.isUpdateFlow;
  var connector = props.connector;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var showToast = ToastState.useShowToast();
  var showPopUp = PopUpState.useShowPopUp();
  var updateConnectorAccountDetails =
    PayPalFlowUtils.useDeleteConnectorAccountDetails();
  var deleteTrackingDetails = PayPalFlowUtils.useDeleteTrackingDetails();
  var match = Recoil.useRecoilState(HyperswitchAtom.paypalAccountStatusAtom);
  var setSetupAccountStatus = match[1];
  var setupAccountStatus = match[0];
  var connectorValue = isUpdateFlow
    ? HSwitchUtils.getConnectorIDFromUrl(Core__List.toArray(url.path), "")
    : Core__Option.getOr(
        LogicUtils.getDictFromUrlSearchParams(url.search)["connectorId"],
        "",
      );
  var match$1 = React.useState(function () {
    return connectorValue;
  });
  var setConnectorId = match$1[1];
  var connectorId = match$1[0];
  var match$2 = React.useState(function () {
    return "Success";
  });
  var setScreenState = match$2[1];
  var match$3 = React.useState(function () {
    return "NotSelected";
  });
  var configuartionType = match$3[0];
  var selectedConnector = ConnectorUtils.getConnectorInfo(
    ConnectorUtils.getConnectorNameTypeFromString(
      connector,
      undefined,
      undefined,
    ),
  );
  var defaultBusinessProfile = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var activeBusinessProfile = MerchantAccountUtils.getValueFromBusinessProfile(
    defaultBusinessProfile,
  );
  var updatedInitialVal = React.useMemo(
    function () {
      var initialValuesToDict = LogicUtils.getDictFromJsonObject(initialValues);
      if (isUpdateFlow) {
        return initialValues;
      } else {
        initialValuesToDict["connector_label"] = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(initialValues),
          "connector_label",
          "paypal_default",
        );
        initialValuesToDict["profile_id"] = activeBusinessProfile.profile_id;
        setInitialValues(function (param) {
          return initialValuesToDict;
        });
        return initialValuesToDict;
      }
    },
    [initialValues],
  );
  var setConnectorAsActive = function (values) {
    var dictOfInitialValues = LogicUtils.getDictFromJsonObject(values);
    dictOfInitialValues["disabled"] = false;
    dictOfInitialValues["status"] = "active";
    setInitialValues(function (param) {
      return dictOfInitialValues;
    });
  };
  var updateConnectorDetails = async function (values) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var res = await updateConnectorAccountDetails(
        values,
        connectorId,
        connector,
        isUpdateFlow,
        true,
        "inactive",
      );
      if (configuartionType === "Manual") {
        setConnectorAsActive(res);
      } else {
        setInitialValues(function (param) {
          return res;
        });
      }
      var connectorId$1 = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(res),
        "merchant_connector_id",
        "",
      );
      setConnectorId(function (param) {
        return connectorId$1;
      });
      setScreenState(function (param) {
        return "Success";
      });
      return RescriptReactRouter.replace(
        GlobalVars.appendDashboardPath(
          "/connectors/" + connectorId$1 + "?name=paypal",
        ),
      );
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var message = e._1.message;
        if (message !== undefined) {
          return Js_exn.raiseError(message);
        } else {
          return Js_exn.raiseError("");
        }
      }
      throw e;
    }
  };
  var validateMandatoryFieldForPaypal = function (values) {
    var errors = {};
    var valuesFlattenJson = JsonFlattenUtils.flattenObject(values, true);
    var profileId = LogicUtils.getString(valuesFlattenJson, "profile_id", "");
    if (profileId.length === 0) {
      errors["Profile Id"] = "Please select your business profile";
    }
    return errors;
  };
  var handleChangeAuthType = async function (values) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      await deleteTrackingDetails(connectorId, connector);
      await updateConnectorDetails(values);
      var exit = 0;
      switch (configuartionType) {
        case "Automatic":
          setSetupAccountStatus(function (param) {
            return "Redirecting_to_paypal";
          });
          break;
        case "Manual":
        case "NotSelected":
          exit = 1;
          break;
      }
      if (exit === 1) {
        setCurrentStep(function (param) {
          return "IntegFields";
        });
      }
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_exn) {
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === Js_exn.$$Error) {
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: "Unable to change the configuartion",
          };
        });
      }
      throw exn;
    }
  };
  var handleOnSubmit = async function (values, param) {
    try {
      var authType =
        PayPalFlowUtils.getAuthTypeFromConnectorDetails(initialValues);
      if (isUpdateFlow) {
        if (
          authType !==
          ConnectorUtils.mapAuthType(
            PayPalFlowUtils.getBodyType(
              isUpdateFlow,
              configuartionType,
            ).toLowerCase(),
          )
        ) {
          showPopUp({
            heading: "Warning changing configuration",
            description:
              "Modifying the configuration will result in the loss of existing details associated with this connector. Are you certain you want to continue?",
            popUpType: ["Warning", "WithIcon"],
            handleCancel: {
              text: "Cancel",
            },
            handleConfirm: {
              text: "Proceed",
              onClick: function (param) {
                handleChangeAuthType(values);
              },
            },
          });
        } else {
          var exit = 0;
          switch (configuartionType) {
            case "Automatic":
              setCurrentStep(function (param) {
                return "PaymentMethods";
              });
              break;
            case "Manual":
            case "NotSelected":
              exit = 1;
              break;
          }
          if (exit === 1) {
            setConnectorAsActive(values);
            setCurrentStep(function (param) {
              return "IntegFields";
            });
          }
        }
      } else {
        var exit$1 = 0;
        switch (configuartionType) {
          case "Automatic":
            await updateConnectorDetails(values);
            setSetupAccountStatus(function (param) {
              return "Redirecting_to_paypal";
            });
            break;
          case "Manual":
          case "NotSelected":
            exit$1 = 1;
            break;
        }
        if (exit$1 === 1) {
          setConnectorAsActive(values);
          setCurrentStep(function (param) {
            return "IntegFields";
          });
        }
      }
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var message = e._1.message;
        if (message !== undefined) {
          var errMsg = JSON.parse(message);
          if (Core__Option.getOr(errMsg.code, "").includes("HE_01")) {
            showToast(
              "This configuration already exists for the connector. Please try with a different country or label under advanced settings.",
              "ToastError",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            setCurrentStep(function (param) {
              return "AutomaticFlow";
            });
            setSetupAccountStatus(function (param) {
              return "Connect_paypal_landing";
            });
            setScreenState(function (param) {
              return "Success";
            });
          } else {
            showToast(
              "Failed to Save the Configuration!",
              "ToastError",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            setScreenState(function (param) {
              return {
                TAG: "Error",
                _0: message,
              };
            });
          }
        } else {
          setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: "Failed to Fetch!",
            };
          });
        }
      } else {
        throw e;
      }
    }
    return null;
  };
  var proceedButton;
  var exit = 0;
  switch (setupAccountStatus) {
    case "Connect_paypal_landing":
    case "Manual_setup_flow":
    case "Connector_integrated":
      exit = 1;
      break;
    default:
      proceedButton = React.createElement(Button.make, {
        text: "Change configuration",
        buttonType: "Primary",
        onClick: function (param) {
          setSetupAccountStatus(function (param) {
            return "Connect_paypal_landing";
          });
        },
      });
  }
  if (exit === 1) {
    proceedButton = React.createElement(FormRenderer.SubmitButton.make, {
      text: "Proceed",
      disabledParamter: configuartionType === "NotSelected",
      loadingText: "Processing...",
    });
  }
  var tmp;
  switch (setupAccountStatus) {
    case "Connect_paypal_landing":
      tmp = React.createElement(
        "div",
        {
          className: "flex flex-col gap-2",
        },
        React.createElement(
          "div",
          {
            className: "w-1/3",
          },
          React.createElement(
            ConnectorAccountDetailsHelper.RenderConnectorInputFields.make,
            {
              connector: ConnectorUtils.getConnectorNameTypeFromString(
                connector,
                undefined,
                undefined,
              ),
              selectedConnector: selectedConnector,
              details: ConnectorUtils.connectorLabelDetailField,
              name: "connector_label",
              isLabelNested: false,
              disabled: isUpdateFlow ? true : false,
              description:
                "This is an unique label you can generate and pass in order to identify this connector account on your Hyperswitch dashboard and reports. Eg: if your profile label is 'default', connector label can be 'stripe_default'",
            },
          ),
        ),
        React.createElement(
          ConnectorAccountDetailsHelper.BusinessProfileRender.make,
          {
            isUpdateFlow: isUpdateFlow,
            selectedConnector: connector,
          },
        ),
        React.createElement(ConnectPayPal$LandingScreen, {
          configuartionType: configuartionType,
          setConfigurationType: match$3[1],
        }),
      );
      break;
    case "Manual_setup_flow":
    case "Connector_integrated":
      tmp = null;
      break;
    default:
      tmp = React.createElement(ConnectPayPal$RedirectionToPayPalFlow, {
        getPayPalStatus: props.getPayPalStatus,
        profileId: LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(initialValues),
          "profile_id",
          "",
        ),
      });
  }
  return React.createElement(
    "div",
    {
      className: "w-full h-full flex flex-col justify-between",
    },
    React.createElement(
      PageLoaderWrapper.make,
      {
        children: Caml_option.some(null),
        screenState: match$2[0],
      },
      React.createElement(Form.make, {
        children: React.createElement(
          "div",
          undefined,
          React.createElement(
            ConnectorAccountDetailsHelper.ConnectorHeaderWrapper.make,
            {
              children: null,
              headerButton: proceedButton,
              connector: connector,
              conditionForIntegrationSteps:
                !PayPalFlowUtils.conditionForIntegrationSteps.includes(
                  setupAccountStatus,
                ),
            },
            React.createElement(
              "div",
              {
                className: "flex flex-col gap-2 p-2 md:p-10",
              },
              tmp,
            ),
            React.createElement(FormValuesSpy.make, {}),
          ),
        ),
        onSubmit: handleOnSubmit,
        initialValues: updatedInitialVal,
        validate: validateMandatoryFieldForPaypal,
      }),
      React.createElement(
        "div",
        {
          className: "bg-jp-gray-light_gray_bg flex py-4 px-10 gap-2",
        },
        React.createElement("img", {
          alt: "paypal",
          src: "/assets/PayPalFullLogo.svg",
        }),
        React.createElement(
          "p",
          {
            className: p2RedularTextClass,
          },
          "| Hyperswitch is PayPal's trusted partner, your credentials are secure & never stored with us.",
        ),
      ),
    ),
  );
}

var make = ConnectPayPal;

export {
  h3Leading2TextClass,
  p1RegularTextClass,
  p1MediumTextClass,
  p2RedularTextClass,
  preRequisiteList,
  PayPalCreateNewAccountModal,
  ManualSetupScreen,
  LandingScreen,
  ErrorPage,
  RedirectionToPayPalFlow,
  make,
};
/* h3Leading2TextClass Not a pure module */
