// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Navbar from "../../../components/Navbar.bs.js";
import * as Recoil from "recoil";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as PopUpState from "../../../hooks/PopUpState.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConnectorUtils from "../ConnectorUtils.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as PayPalFlowUtils from "./PayPalFlowUtils.bs.js";
import * as React$1 from "@headlessui/react";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as ConnectorListMapper from "../../../utils/Mappers/ConnectorListMapper.bs.js";

function MenuOptionForPayPal(props) {
  var setInitialValues = props.setInitialValues;
  var isUpdateFlow = props.isUpdateFlow;
  var setScreenState = props.setScreenState;
  var connectorInfoDict = props.connectorInfoDict;
  var isConnectorDisabled = props.isConnectorDisabled;
  var disableConnector = props.disableConnector;
  var setCurrentStep = props.setCurrentStep;
  var __updateStepValue = props.updateStepValue;
  var updateStepValue =
    __updateStepValue !== undefined ? __updateStepValue : "IntegFields";
  var showPopUp = PopUpState.useShowPopUp();
  var showToast = ToastState.useShowToast();
  var deleteTrackingDetails = PayPalFlowUtils.useDeleteTrackingDetails();
  var updateConnectorAccountDetails =
    PayPalFlowUtils.useDeleteConnectorAccountDetails();
  var setSetupAccountStatus = Recoil.useSetRecoilState(
    HyperswitchAtom.paypalAccountStatusAtom,
  );
  var connectorInfo =
    ConnectorListMapper.getProcessorPayloadType(connectorInfoDict);
  var connectorStatusAvailableToSwitch = isConnectorDisabled
    ? "Enable"
    : "Disable";
  var updateConnectorAuthType = async function (values) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var res = await updateConnectorAccountDetails(
        values,
        connectorInfo.merchant_connector_id,
        connectorInfo.connector_name,
        isUpdateFlow,
        true,
        "inactive",
      );
      setInitialValues(function (param) {
        return res;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Something went wrong!"),
        );
      }
      throw e;
    }
  };
  var handleNewPayPalAccount = async function () {
    try {
      await deleteTrackingDetails(
        connectorInfo.merchant_connector_id,
        connectorInfo.connector_name,
      );
      await updateConnectorAuthType(connectorInfoDict);
      setCurrentStep(function (param) {
        return "AutomaticFlow";
      });
      return setSetupAccountStatus(function (param) {
        return "Redirecting_to_paypal";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Something went wrong!");
        return showToast(
          err,
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      }
      throw e;
    }
  };
  var popupForNewPayPalAccount = function (param) {
    showPopUp({
      heading: "Confirm Action ?",
      description: "By changing this the old account details will be lost ",
      popUpType: ["Warning", "WithIcon"],
      handleCancel: {
        text: "Cancel",
      },
      handleConfirm: {
        text: "Confirm",
        onClick: function (param) {
          handleNewPayPalAccount();
        },
      },
    });
  };
  return React.createElement(React$1.Popover, {
    as: "div",
    className: "relative inline-block text-left",
    children: function (_popoverProps) {
      return React.createElement(
        React.Fragment,
        {},
        React.createElement(React$1.Popover.Button, {
          children: function (_buttonProps) {
            return React.createElement(Icon.make, {
              name: "menu-option",
              size: 28,
            });
          },
        }),
        React.createElement(React$1.Popover.Panel, {
          className: "absolute z-20 right-0 top-10",
          children: function (panelProps) {
            return React.createElement(
              "div",
              {
                className:
                  "relative flex flex-col bg-white py-3 overflow-hidden rounded ring-1 ring-black ring-opacity-5 w-max",
                id: "neglectTopbarTheme",
              },
              React.createElement(
                React.Fragment,
                {},
                React.createElement(RenderIf.make, {
                  condition:
                    ConnectorUtils.mapAuthType(
                      connectorInfo.connector_account_details.auth_type,
                    ) === "SignatureKey",
                  children: React.createElement(Navbar.MenuOption.make, {
                    text: "Create new PayPal account",
                    onClick: function (param) {
                      popupForNewPayPalAccount();
                      panelProps.close();
                    },
                  }),
                }),
                React.createElement(Navbar.MenuOption.make, {
                  text: "Change configurations",
                  onClick: function (param) {
                    setCurrentStep(function (param) {
                      return "AutomaticFlow";
                    });
                    setSetupAccountStatus(function (param) {
                      return "Connect_paypal_landing";
                    });
                  },
                }),
                React.createElement(RenderIf.make, {
                  condition:
                    ConnectorUtils.mapAuthType(
                      connectorInfo.connector_account_details.auth_type,
                    ) === "BodyKey",
                  children: React.createElement(Navbar.MenuOption.make, {
                    text: "Update",
                    onClick: function (param) {
                      setCurrentStep(function (param) {
                        return "IntegFields";
                      });
                      setSetupAccountStatus(function (param) {
                        return "Manual_setup_flow";
                      });
                    },
                  }),
                }),
                React.createElement(RenderIf.make, {
                  condition:
                    ConnectorUtils.mapAuthType(
                      connectorInfo.connector_account_details.auth_type,
                    ) === "SignatureKey",
                  children: React.createElement(Navbar.MenuOption.make, {
                    text: "Update Payment Methods",
                    onClick: function (param) {
                      setCurrentStep(function (param) {
                        return updateStepValue;
                      });
                    },
                  }),
                }),
                React.createElement(Navbar.MenuOption.make, {
                  text: connectorStatusAvailableToSwitch,
                  onClick: function (param) {
                    panelProps.close();
                    showPopUp({
                      heading: "Confirm Action ? ",
                      description:
                        "You are about to " +
                        (isConnectorDisabled
                          ? "Enable"
                          : "Disable".toLowerCase()) +
                        " this connector. This might impact your desired routing configurations. Please confirm to proceed.",
                      popUpType: ["Warning", "WithIcon"],
                      handleCancel: {
                        text: "Cancel",
                      },
                      handleConfirm: {
                        text: "Confirm",
                        onClick: function (param) {
                          disableConnector(isConnectorDisabled);
                        },
                      },
                    });
                  },
                }),
              ),
            );
          },
        }),
      );
    },
  });
}

var make = MenuOptionForPayPal;

export { make };
/* Icon Not a pure module */
