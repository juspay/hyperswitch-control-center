// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../../components/Icon.bs.js";
import * as Link from "../../../../components/router/Link.bs.js";
import * as React from "react";
import * as RenderIf from "../../../../utils/RenderIf.bs.js";
import * as Clipboard from "../../../../libraries/Clipboard.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ThemeProvider from "../../../../context/ThemeProvider.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as CommonMetaDataHelper from "../Common/CommonMetaDataHelper.bs.js";
import * as ApplePayIntegrationUtils from "./ApplePayIntegrationUtils.bs.js";

function ApplePayIntegrationHelper$SimplifiedHelper(props) {
  var __subText = props.subText;
  var __stepNumber = props.stepNumber;
  var __heading = props.heading;
  var customElement = props.customElement;
  var heading = __heading !== undefined ? __heading : "";
  var stepNumber = __stepNumber !== undefined ? __stepNumber : "1";
  var subText =
    __subText !== undefined ? Caml_option.valFromOption(__subText) : undefined;
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = match.globalUIConfig;
  var stepColor = match$1.backgroundColor + " text-white py-px px-2";
  return React.createElement(
    "div",
    {
      className: "flex flex-col py-8 px-6 gap-3 bg-white cursor-pointer",
    },
    React.createElement(
      "div",
      {
        className: "flex justify-between ",
      },
      React.createElement(
        "div",
        {
          className: "flex gap-4",
        },
        React.createElement(
          "div",
          undefined,
          React.createElement(
            "p",
            {
              className: stepColor + " font-medium",
            },
            stepNumber,
          ),
        ),
        React.createElement(
          "div",
          undefined,
          React.createElement(
            "p",
            {
              className:
                "font-medium text-base " + match$1.font.textColor.primaryNormal,
            },
            heading,
          ),
          React.createElement(RenderIf.make, {
            condition: Core__Option.isSome(subText),
            children: React.createElement(
              "p",
              {
                className:
                  "mt-2 text-base text-hyperswitch_black opacity-50 font-normal",
              },
              Core__Option.getOr(subText, ""),
            ),
          }),
          customElement !== undefined
            ? Caml_option.valFromOption(customElement)
            : null,
        ),
      ),
    ),
  );
}

var SimplifiedHelper = {
  make: ApplePayIntegrationHelper$SimplifiedHelper,
};

function ApplePayIntegrationHelper$HostURL(props) {
  var __prefix = props.prefix;
  var prefix = __prefix !== undefined ? __prefix : "";
  var fieldInputVal = ReactFinalForm.useField(prefix).input;
  var val = Core__JSON.Decode.string(fieldInputVal.value);
  var fieldInput =
    val !== undefined && LogicUtils.isNonEmptyString(val) ? val : "domain_name";
  return React.createElement(
    "p",
    {
      className: "mt-2",
    },
    fieldInput + "/.well-known/apple-developer-merchantid-domain-association",
  );
}

var HostURL = {
  make: ApplePayIntegrationHelper$HostURL,
};

function ApplePayIntegrationHelper$SampleEmail(props) {
  var showToast = ToastState.useShowToast();
  var match = React.useState(function () {
    return false;
  });
  var setIsTextVisible = match[1];
  var isTextVisible = match[0];
  var businessDescription =
    "<One sentence about your business>. The business operates across <XX> countries and has customers across the world.";
  var featureReqText =
    "We are using Hyperswitch, a Level 1 PCI DSS 3.2.1 compliant Payments Orchestrator, to manage payments on our website. In addition to Stripe, since we are using other processors as well to process payments across multiple geographies, we wanted to use Hyperswitch's Payment Processing certificate to decrypt Apple pay tokens and send the decrypted Apple pay tokens to Stripe. So, please enable processing decrypted Apple pay token feature on our Stripe account. We've attached Hyperswitch's PCI DSS AoC for reference.";
  var emailContent =
    "Stripe Account id: <Enter your account id>\n\n    A detailed business description: \n    " +
    businessDescription +
    "\n\n    Feature Request:\n    " +
    featureReqText;
  var truncatedText = isTextVisible
    ? featureReqText
    : featureReqText.slice(0, 50);
  var truncatedTextElement = React.createElement(
    "p",
    {
      className: "flex gap-2",
    },
    truncatedText,
    React.createElement(
      "p",
      {
        className: "cursor-pointer text-blue-400 text-xl",
        onClick: function (param) {
          setIsTextVisible(function (param) {
            return true;
          });
        },
      },
      "...",
    ),
  );
  return React.createElement(
    "div",
    {
      className: "flex flex-col",
    },
    React.createElement(
      "span",
      {
        className: "mt-2 text-base  font-normal",
      },
      React.createElement(
        "span",
        {
          className: "text-hyperswitch_black opacity-50",
        },
        "Since the Apple Pay Web Domain flow involves decryption at Hyperswitch, you would need to write to Stripe support (support@stripe.com) to get this feature enabled for your Stripe account. You can use the following text in the email, attach our",
      ),
      React.createElement(Link.make, {
        to_: "/compliance",
        children: "PCI DSS AoC certificate",
        openInNewTab: false,
        className:
          "text-blue-600 underline underline-offset-2 px-2 !opacity-100",
      }),
      React.createElement(
        "span",
        {
          className: "text-hyperswitch_black opacity-50",
        },
        "and copy our Support team (biz@hyperswitch.io):",
      ),
    ),
    React.createElement(
      "div",
      {
        className:
          "border border-gray-400 rounded-md flex flex-row gap-8 p-4 mt-4 bg-gray-200",
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-4 ",
        },
        React.createElement(
          "span",
          undefined,
          "Stripe Account id: <Enter your account id:you can find it ",
          React.createElement(
            "a",
            {
              className: "underline text-blue-400 underline-offset-1",
              href: "https://dashboard.stripe.com/settings/user",
            },
            "here",
          ),
          React.createElement("span", undefined, ">"),
        ),
        React.createElement(
          "span",
          undefined,
          React.createElement(
            "p",
            undefined,
            "A detailed business description:",
          ),
          businessDescription,
        ),
        React.createElement(
          "span",
          undefined,
          React.createElement("p", undefined, "Feature Request:"),
          isTextVisible ? truncatedText : truncatedTextElement,
        ),
      ),
      React.createElement("img", {
        className: "cursor-pointer h-fit w-fit",
        src: "/assets/CopyToClipboard.svg",
        onClick: function (param) {
          Clipboard.writeText(emailContent);
          showToast(
            "Copied to Clipboard!",
            "ToastSuccess",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
        },
      }),
    ),
  );
}

var SampleEmail = {
  make: ApplePayIntegrationHelper$SampleEmail,
};

function ApplePayIntegrationHelper$CustomTag(props) {
  var __tagCustomStyle = props.tagCustomStyle;
  var __tagLeftIcon = props.tagLeftIcon;
  var __tagSize = props.tagSize;
  var __tagText = props.tagText;
  var tagText = __tagText !== undefined ? __tagText : "";
  var tagSize = __tagSize !== undefined ? __tagSize : 5;
  var tagLeftIcon =
    __tagLeftIcon !== undefined
      ? Caml_option.valFromOption(__tagLeftIcon)
      : undefined;
  var tagCustomStyle = __tagCustomStyle !== undefined ? __tagCustomStyle : "";
  return React.createElement(
    "div",
    {
      className:
        "flex items-center gap-1  shadow-connectorTagShadow border rounded-full px-2 py-1 " +
        tagCustomStyle,
    },
    tagLeftIcon !== undefined
      ? React.createElement(
          "div",
          undefined,
          React.createElement(Icon.make, {
            name: tagLeftIcon,
            size: tagSize,
          }),
        )
      : null,
    React.createElement(
      "div",
      {
        className: "text-hyperswitch_black text-sm font-medium text-green-960",
      },
      tagText,
    ),
  );
}

var CustomTag = {
  make: ApplePayIntegrationHelper$CustomTag,
};

function ApplePayIntegrationHelper$InfoCard(props) {
  var __customInfoStyle = props.customInfoStyle;
  var customInfoStyle =
    __customInfoStyle !== undefined ? __customInfoStyle : "";
  return React.createElement(
    "div",
    {
      className:
        "rounded border bg-blue-800 border-blue-700 dark:border-blue-700 relative flex w-full p-6 ",
    },
    React.createElement(Icon.make, {
      name: "info-circle-unfilled",
      size: 16,
      className: customInfoStyle,
    }),
    React.createElement("div", undefined, props.children),
  );
}

var InfoCard = {
  make: ApplePayIntegrationHelper$InfoCard,
};

function applePayValueInput(applePayField, integrationTypeOpt, param) {
  var integrationType =
    integrationTypeOpt !== undefined
      ? Caml_option.valFromOption(integrationTypeOpt)
      : undefined;
  var formName = ApplePayIntegrationUtils.applePayNameMapper(
    applePayField.name,
    integrationType,
  );
  switch (applePayField.type) {
    case "Text":
    case "Toggle":
    case "Radio":
      return CommonMetaDataHelper.textInput(applePayField, formName);
    case "Select":
      return CommonMetaDataHelper.selectInput(
        applePayField,
        formName,
        undefined,
        undefined,
        undefined,
      );
    case "MultiSelect":
      return CommonMetaDataHelper.multiSelectInput(applePayField, formName);
  }
}

export {
  SimplifiedHelper,
  HostURL,
  SampleEmail,
  CustomTag,
  InfoCard,
  applePayValueInput,
};
/* Icon Not a pure module */
