// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../../../components/Button.bs.js";
import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InputFields from "../../../../components/InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../../../components/form/FormRenderer.bs.js";
import * as FormValuesSpy from "../../../../components/form/FormValuesSpy.bs.js";
import * as ThemeProvider from "../../../../context/ThemeProvider.bs.js";
import * as ReactFinalForm from "../../../../libraries/ReactFinalForm.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as CommonMetaDataUtils from "../Common/CommonMetaDataUtils.bs.js";
import * as CommonMetaDataHelper from "../Common/CommonMetaDataHelper.bs.js";
import * as ApplePayIntegrationUtils from "./ApplePayIntegrationUtils.bs.js";
import * as ApplePayIntegrationHelper from "./ApplePayIntegrationHelper.bs.js";

function ApplePayManualFlow$PaymentProcessingDetailsAt(props) {
  var applePayField = props.applePayField;
  var form = ReactFinalForm$1.useForm();
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var initalFormValue = ApplePayIntegrationUtils.manual(
    LogicUtils.getDictfromDict(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(formState.values),
        "metadata",
      ),
      "apple_pay_combined",
    ),
  );
  var initalProcessingAt = ApplePayIntegrationUtils.paymentProcessingMapper(
    Core__Option.getOr(
      initalFormValue.session_token_data.payment_processing_details_at,
      "Connector",
    ),
  );
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = React.useState(function () {
    return initalProcessingAt;
  });
  var setProcessingAt = match$1[1];
  var onChangeItem = function ($$event) {
    var value = ApplePayIntegrationUtils.paymentProcessingMapper($$event);
    setProcessingAt(function (param) {
      return value;
    });
    if (value === "Connector") {
      form.change(
        ApplePayIntegrationUtils.applePayNameMapper(
          "payment_processing_certificate",
          "manual",
        ),
        null,
      );
      return form.change(
        ApplePayIntegrationUtils.applePayNameMapper(
          "payment_processing_certificate_key",
          "manual",
        ),
        null,
      );
    }
  };
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(FormRenderer.FieldRenderer.make, {
      field: CommonMetaDataHelper.radioInput(
        applePayField,
        ApplePayIntegrationUtils.applePayNameMapper(
          applePayField.name,
          "manual",
        ),
        onChangeItem,
        match.globalUIConfig.font.textColor.primaryNormal,
        undefined,
      ),
      labelClass: "font-semibold !text-hyperswitch_black",
    }),
    match$1[0] === "Hyperswitch"
      ? React.createElement(
          "div",
          undefined,
          React.createElement(FormRenderer.FieldRenderer.make, {
            field: FormRenderer.makeFieldInfo(
              "Payment Processing Certificate",
              undefined,
              ApplePayIntegrationUtils.applePayNameMapper(
                "payment_processing_certificate",
                "manual",
              ),
              InputFields.textInput(
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
              ),
              undefined,
              undefined,
              undefined,
              undefined,
              "Enter Processing Certificate",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              true,
              undefined,
              undefined,
              undefined,
            ),
            labelClass: "font-semibold !text-hyperswitch_black",
          }),
          React.createElement(FormRenderer.FieldRenderer.make, {
            field: FormRenderer.makeFieldInfo(
              "Payment Processing Key",
              undefined,
              ApplePayIntegrationUtils.applePayNameMapper(
                "payment_processing_certificate_key",
                "manual",
              ),
              InputFields.multiLineTextInput(
                false,
                10,
                100,
                "",
                Caml_option.some(null),
                10000,
                undefined,
              ),
              undefined,
              undefined,
              undefined,
              undefined,
              "Enter Processing Key",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              true,
              undefined,
              undefined,
              undefined,
            ),
            labelClass: "font-semibold !text-hyperswitch_black",
          }),
        )
      : null,
  );
}

var PaymentProcessingDetailsAt = {
  make: ApplePayManualFlow$PaymentProcessingDetailsAt,
};

function ApplePayManualFlow$Initiative(props) {
  var applePayField = props.applePayField;
  var form = ReactFinalForm$1.useForm();
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var initalFormValue = ApplePayIntegrationUtils.manual(
    LogicUtils.getDictfromDict(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(formState.values),
        "metadata",
      ),
      "apple_pay_combined",
    ),
  );
  var initalInitiative = ApplePayIntegrationUtils.initiativeMapper(
    Core__Option.getOr(initalFormValue.session_token_data.initiative, "ios"),
  );
  var match = React.useState(function () {
    return initalInitiative;
  });
  var setInitiative = match[1];
  var onChangeItem = function ($$event) {
    var value = ApplePayIntegrationUtils.initiativeMapper($$event);
    setInitiative(function (param) {
      return value;
    });
    if (value === "ios") {
      return form.change(
        ApplePayIntegrationUtils.applePayNameMapper(
          "initiative_context",
          "manual",
        ),
        null,
      );
    }
  };
  var domainValues = [
    Object.fromEntries([
      ["label", "IOS/WEB"],
      ["value", "web"],
    ]),
    Object.fromEntries([
      ["label", "IOS"],
      ["value", "ios"],
    ]),
  ];
  var initiativeOptions = domainValues.map(function (item) {
    var dict = LogicUtils.getDictFromJsonObject(item);
    return {
      label: LogicUtils.getString(dict, "label", ""),
      value: LogicUtils.getString(dict, "value", ""),
    };
  });
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(FormRenderer.FieldRenderer.make, {
      field: CommonMetaDataHelper.selectInput(
        applePayField,
        ApplePayIntegrationUtils.applePayNameMapper("initiative", "manual"),
        Caml_option.some(initiativeOptions),
        onChangeItem,
        undefined,
      ),
      labelClass: "font-semibold !text-hyperswitch_black",
    }),
    match[0] === "web"
      ? React.createElement(FormRenderer.FieldRenderer.make, {
          field: CommonMetaDataHelper.textInput(
            applePayField,
            ApplePayIntegrationUtils.applePayNameMapper(
              "initiative_context",
              "manual",
            ),
          ),
          labelClass: "font-semibold !text-hyperswitch_black",
        })
      : null,
  );
}

var Initiative = {
  make: ApplePayManualFlow$Initiative,
};

function ApplePayManualFlow(props) {
  var setVefifiedDomainList = props.setVefifiedDomainList;
  var setApplePayIntegrationSteps = props.setApplePayIntegrationSteps;
  var merchantBusinessCountry = props.merchantBusinessCountry;
  var form = ReactFinalForm$1.useForm();
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var initalFormValue = LogicUtils.getDictfromDict(
    LogicUtils.getDictfromDict(
      LogicUtils.getDictFromJsonObject(formState.values),
      "metadata",
    ),
    "apple_pay_combined",
  );
  var setFormData = function () {
    var value = ApplePayIntegrationUtils.applePayCombined(
      initalFormValue,
      "manual",
    );
    form.change("metadata.apple_pay_combined", value);
  };
  React.useEffect(function () {
    setFormData();
  }, []);
  var onSubmit = function () {
    var data = ApplePayIntegrationUtils.manual(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictfromDict(
          LogicUtils.getDictFromJsonObject(formState.values),
          "metadata",
        ),
        "apple_pay_combined",
      ),
    );
    var domainName = Core__Option.getOr(
      data.session_token_data.initiative_context,
      "",
    );
    setVefifiedDomainList(function (param) {
      return [domainName];
    });
    setApplePayIntegrationSteps(function (param) {
      return "Verify";
    });
    return Promise.resolve(null);
  };
  var applePayManualFields = props.applePayFields.map(function (field, index) {
    var applePayField = CommonMetaDataUtils.inputFieldMapper(
      LogicUtils.convertMapObjectToDict(field),
    );
    var tmp;
    switch (applePayField.name) {
      case "initiative":
        tmp = React.createElement(ApplePayManualFlow$Initiative, {
          applePayField: applePayField,
        });
        break;
      case "initiative_context":
        tmp = null;
        break;
      case "merchant_business_country":
        tmp = React.createElement(FormRenderer.FieldRenderer.make, {
          field: CommonMetaDataHelper.selectInput(
            applePayField,
            ApplePayIntegrationUtils.applePayNameMapper(
              "merchant_business_country",
              "manual",
            ),
            Caml_option.some(merchantBusinessCountry),
            undefined,
            undefined,
          ),
          labelClass: "font-semibold !text-hyperswitch_black",
        });
        break;
      case "payment_processing_details_at":
        tmp = React.createElement(
          ApplePayManualFlow$PaymentProcessingDetailsAt,
          {
            applePayField: applePayField,
          },
        );
        break;
      default:
        tmp = React.createElement(FormRenderer.FieldRenderer.make, {
          field: ApplePayIntegrationHelper.applePayValueInput(
            applePayField,
            "manual",
            undefined,
          ),
          labelClass: "font-semibold !text-hyperswitch_black",
        });
    }
    return React.createElement(
      "div",
      {
        key: index.toString(),
      },
      tmp,
    );
  });
  return React.createElement(
    React.Fragment,
    {},
    applePayManualFields,
    React.createElement(
      "div",
      {
        className: "w-full flex gap-2 justify-end p-6",
      },
      React.createElement(Button.make, {
        text: "Go Back",
        buttonType: "Secondary",
        onClick: function (_ev) {
          setApplePayIntegrationSteps(function (param) {
            return "Landing";
          });
        },
      }),
      React.createElement(Button.make, {
        buttonState: ApplePayIntegrationUtils.validateManualFlow(
          formState.values,
        ),
        text: "Verify & Enable",
        buttonType: "Primary",
        onClick: function (_ev) {
          onSubmit();
        },
      }),
    ),
    React.createElement(FormValuesSpy.make, {}),
  );
}

var make = ApplePayManualFlow;

export { PaymentProcessingDetailsAt, Initiative, make };
/* react Not a pure module */
