// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../../components/Icon.bs.js";
import * as React from "react";
import * as Button from "../../../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../../../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as ApplePayZen from "./ApplePayZen.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as WalletHelper from "../../Wallets/WalletHelper.bs.js";
import * as FormValuesSpy from "../../../../components/form/FormValuesSpy.bs.js";
import * as ConnectorUtils from "../../ConnectorUtils.bs.js";
import * as ReactFinalForm from "../../../../libraries/ReactFinalForm.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as PageLoaderWrapper from "../../../Helpers/PageLoaderWrapper.bs.js";
import * as ApplePayManualFlow from "./ApplePayManualFlow.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as ApplePaySimplifiedFlow from "./ApplePaySimplifiedFlow.bs.js";
import * as ApplePayIntegrationUtils from "./ApplePayIntegrationUtils.bs.js";
import * as ApplePayIntegrationHelper from "./ApplePayIntegrationHelper.bs.js";

function ApplePayIntegration$Verified(props) {
  var update = props.update;
  var setShowWalletConfigurationModal = props.setShowWalletConfigurationModal;
  var setApplePayIntegrationSteps = props.setApplePayIntegrationSteps;
  var appleIntegrationType = props.appleIntegrationType;
  var setApplePayIntegrationType = props.setApplePayIntegrationType;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var form = ReactFinalForm$1.useForm();
  var onSubmit = function () {
    var data = LogicUtils.getDictfromDict(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(formState.values),
        "metadata",
      ),
      "apple_pay_combined",
    );
    var applePayData = ApplePayIntegrationUtils.applePay(
      data,
      undefined,
      Caml_option.some(appleIntegrationType),
      undefined,
    );
    if (applePayData.TAG === "ApplePayCombined") {
      form.change(
        "metadata.apple_pay_combined",
        applePayData._0.apple_pay_combined,
      );
    }
    var metadata = LogicUtils.getDictfromDict(
      LogicUtils.getDictFromJsonObject(formState.values),
      "metadata",
    );
    update(metadata);
    setShowWalletConfigurationModal(function (param) {
      return false;
    });
  };
  return React.createElement(React.Fragment, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "p-6 m-2 cursor-pointer",
        },
        React.createElement(
          "p",
          {
            className: "text-xs	font-medium	mt-4",
          },
          " Web Domains",
        ),
        props.verifiedDomainList.map(function (domainUrl, index) {
          return React.createElement(
            "div",
            {
              key: index.toString(),
              className: "mt-4 cursor-pointer",
              onClick: function (_e) {
                setApplePayIntegrationType(function (param) {
                  return "manual";
                });
              },
            },
            React.createElement(
              "div",
              {
                className:
                  "relative w-full  p-6 rounded flex flex-col justify-between border ",
              },
              React.createElement(
                "div",
                {
                  className: "flex justify-between",
                },
                React.createElement(
                  "div",
                  {
                    className: "font-medium text-base text-hyperswitch_black ",
                  },
                  domainUrl.length > 0 ? domainUrl : "Default",
                ),
                React.createElement(
                  "div",
                  undefined,
                  appleIntegrationType === "manual"
                    ? React.createElement(Icon.make, {
                        name: "arrow-right",
                        size: 15,
                        onClick: function (_ev) {
                          setApplePayIntegrationSteps(function (param) {
                            return "Configure";
                          });
                        },
                      })
                    : React.createElement(
                        ApplePayIntegrationHelper.CustomTag.make,
                        {
                          tagText: "Verified",
                          tagSize: 4,
                          tagLeftIcon: "ellipse-green",
                          tagCustomStyle: "bg-hyperswitch_green_trans",
                        },
                      ),
                ),
              ),
            ),
          );
        }),
        React.createElement(
          "div",
          {
            className: "flex gap-2 justify-end mt-4",
          },
          React.createElement(Button.make, {
            text: "Reconfigure",
            buttonType: "Secondary",
            onClick: function (_ev) {
              setApplePayIntegrationSteps(function (param) {
                return "Landing";
              });
            },
          }),
          React.createElement(Button.make, {
            text: "Proceed",
            buttonType: "Primary",
            onClick: function (_ev) {
              onSubmit();
            },
          }),
        ),
      ),
    ),
  });
}

var Verified = {
  make: ApplePayIntegration$Verified,
};

function ApplePayIntegration$Landing(props) {
  var setApplePayIntegrationType = props.setApplePayIntegrationType;
  var setApplePayIntegrationSteps = props.setApplePayIntegrationSteps;
  var closeModal = props.closeModal;
  var appleIntegrationType = props.appleIntegrationType;
  var match = ConnectorUtils.getConnectorNameTypeFromString(
    props.connector,
    undefined,
    undefined,
  );
  var tmp;
  var exit = 0;
  if (match.TAG === "Processors") {
    switch (match._0) {
      case "BANKOFAMERICA":
      case "STRIPE":
      case "CYBERSOURCE":
        exit = 1;
        break;
      default:
        tmp = null;
    }
  } else {
    tmp = null;
  }
  if (exit === 1) {
    tmp = React.createElement(
      "div",
      {
        className: "p-6 m-2 cursor-pointer",
        onClick: function (_e) {
          setApplePayIntegrationType(function (param) {
            return "simplified";
          });
        },
      },
      React.createElement(
        WalletHelper.Card.make,
        {
          heading: "Web Domain",
          isSelected: appleIntegrationType === "simplified",
          children: null,
        },
        React.createElement(
          "div",
          {
            className:
              " mt-2 text-base text-hyperswitch_black opacity-50 font-normal",
          },
          "Get Apple Pay enabled on your web domains by hosting a verification file, thatâ€™s it.",
        ),
        React.createElement(
          "div",
          {
            className: "flex gap-2 mt-4",
          },
          React.createElement(WalletHelper.CustomTag.make, {
            tagText: "Faster Configuration",
            tagSize: 4,
            tagLeftIcon: "ellipse-green",
          }),
          React.createElement(WalletHelper.CustomTag.make, {
            tagText: "Recommended",
            tagSize: 4,
            tagLeftIcon: "ellipse-green",
          }),
        ),
      ),
    );
  }
  return React.createElement(
    React.Fragment,
    {},
    tmp,
    React.createElement(
      "div",
      {
        className: "p-6 m-2 cursor-pointer",
        onClick: function (_e) {
          setApplePayIntegrationType(function (param) {
            return "manual";
          });
        },
      },
      React.createElement(
        WalletHelper.Card.make,
        {
          heading: "iOS Certificate",
          isSelected: appleIntegrationType === "manual",
          children: null,
        },
        React.createElement(
          "div",
          {
            className:
              " mt-2 text-base text-hyperswitch_black opacity-50 font-normal",
          },
          React.createElement(WalletHelper.CustomSubText.make, {}),
        ),
        React.createElement(
          "div",
          {
            className: "flex gap-2 mt-4",
          },
          React.createElement(WalletHelper.CustomTag.make, {
            tagText: "For Web & Mobile",
            tagSize: 4,
            tagLeftIcon: "ellipse-green",
          }),
          React.createElement(WalletHelper.CustomTag.make, {
            tagText: "Additional Details Required",
            tagSize: 4,
            tagLeftIcon: "ellipse-green",
          }),
        ),
      ),
    ),
    React.createElement(
      "div",
      {
        className: "flex gap-2 justify-end m-2 p-6",
      },
      React.createElement(Button.make, {
        text: "Cancel",
        buttonType: "Secondary",
        onClick: function (_ev) {
          closeModal();
        },
      }),
      React.createElement(Button.make, {
        text: "Continue",
        buttonType: "Primary",
        onClick: function (_ev) {
          setApplePayIntegrationSteps(function (param) {
            return "Configure";
          });
        },
      }),
    ),
  );
}

var Landing = {
  make: ApplePayIntegration$Landing,
};

function ApplePayIntegration(props) {
  var onCloseClickCustomFun = props.onCloseClickCustomFun;
  var update = props.update;
  var setShowWalletConfigurationModal = props.setShowWalletConfigurationModal;
  var connector = props.connector;
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match = React.useState(function () {
    return "manual";
  });
  var setApplePayIntegrationType = match[1];
  var appleIntegrationType = match[0];
  var match$1 = React.useState(function () {
    return "Landing";
  });
  var setApplePayIntegrationSteps = match$1[1];
  var match$2 = React.useState(function () {
    return [];
  });
  var setMerchantBusinessCountry = match$2[1];
  var merchantBusinessCountry = match$2[0];
  var match$3 = React.useState(function () {
    return "Success";
  });
  var setScreenState = match$3[1];
  var match$4 = React.useState(function () {
    return [];
  });
  var setVefifiedDomainList = match$4[1];
  var applePayFields = React.useMemo(
    function () {
      try {
        if (LogicUtils.isNonEmptyString(connector)) {
          return LogicUtils.getArrayFromDict(
            LogicUtils.getDictfromDict(
              LogicUtils.getDictFromJsonObject(
                window.getConnectorConfig(connector),
              ),
              "metadata",
            ),
            "apple_pay",
            [],
          );
        } else {
          return [];
        }
      } catch (raw_e) {
        var e = Caml_js_exceptions.internalToOCamlException(raw_e);
        if (e.RE_EXN_ID === Js_exn.$$Error) {
          console.log("FAILED TO LOAD CONNECTOR CONFIG", e._1);
          return [];
        }
        throw e;
      }
    },
    [connector],
  );
  var getProcessorDetails = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var paymentMethoConfigUrl = getURL(
        "PAYMENT_METHOD_CONFIG",
        "Get",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await fetchDetails(
        paymentMethoConfigUrl +
          "?connector=" +
          connector +
          "&paymentMethodType=apple_pay",
      );
      var countries = LogicUtils.getArrayFromDict(
        LogicUtils.getDictFromJsonObject(res),
        "countries",
        [],
      ).map(function (item) {
        var dict = LogicUtils.getDictFromJsonObject(item);
        return {
          label: LogicUtils.getString(dict, "name", ""),
          value: LogicUtils.getString(dict, "code", ""),
        };
      });
      setMerchantBusinessCountry(function (param) {
        return countries;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      return setScreenState(function (param) {
        return "Success";
      });
    }
  };
  var closeModal = function () {
    onCloseClickCustomFun();
    setShowWalletConfigurationModal(function (param) {
      return false;
    });
  };
  React.useEffect(
    function () {
      if (connector.length > 0) {
        var match = ConnectorUtils.getConnectorNameTypeFromString(
          connector,
          undefined,
          undefined,
        );
        var exit = 0;
        if (match.TAG === "Processors") {
          switch (match._0) {
            case "BANKOFAMERICA":
            case "STRIPE":
            case "CYBERSOURCE":
              exit = 2;
              break;
            default:
              exit = 1;
          }
        } else {
          exit = 1;
        }
        switch (exit) {
          case 1:
            setApplePayIntegrationType(function (param) {
              return "manual";
            });
            break;
          case 2:
            setApplePayIntegrationType(function (param) {
              return "simplified";
            });
            break;
        }
        getProcessorDetails();
      }
    },
    [connector],
  );
  var match$5 = ConnectorUtils.getConnectorNameTypeFromString(
    connector,
    undefined,
    undefined,
  );
  var tmp;
  var exit = 0;
  if (match$5.TAG === "Processors" && match$5._0 === "ZEN") {
    tmp = React.createElement(ApplePayZen.make, {
      applePayFields: applePayFields,
      update: update,
      closeModal: closeModal,
      setShowWalletConfigurationModal: setShowWalletConfigurationModal,
    });
  } else {
    exit = 1;
  }
  if (exit === 1) {
    switch (match$1[0]) {
      case "Landing":
        tmp = React.createElement(ApplePayIntegration$Landing, {
          connector: connector,
          appleIntegrationType: appleIntegrationType,
          closeModal: closeModal,
          setApplePayIntegrationSteps: setApplePayIntegrationSteps,
          setApplePayIntegrationType: setApplePayIntegrationType,
        });
        break;
      case "Configure":
        tmp =
          appleIntegrationType === "manual"
            ? React.createElement(ApplePayManualFlow.make, {
                applePayFields: applePayFields,
                merchantBusinessCountry: merchantBusinessCountry,
                setApplePayIntegrationSteps: setApplePayIntegrationSteps,
                setVefifiedDomainList: setVefifiedDomainList,
              })
            : React.createElement(ApplePaySimplifiedFlow.make, {
                applePayFields: applePayFields,
                merchantBusinessCountry: merchantBusinessCountry,
                setApplePayIntegrationSteps: setApplePayIntegrationSteps,
                setVefifiedDomainList: setVefifiedDomainList,
              });
        break;
      case "Verify":
        tmp = React.createElement(ApplePayIntegration$Verified, {
          verifiedDomainList: match$4[0],
          setApplePayIntegrationType: setApplePayIntegrationType,
          appleIntegrationType: appleIntegrationType,
          setApplePayIntegrationSteps: setApplePayIntegrationSteps,
          setShowWalletConfigurationModal: setShowWalletConfigurationModal,
          update: update,
        });
        break;
    }
  }
  return React.createElement(
    PageLoaderWrapper.make,
    {
      children: Caml_option.some(null),
      screenState: match$3[0],
      sectionHeight: "!h-screen",
      customLoader: Caml_option.some(
        React.createElement(
          "div",
          {
            className:
              "mt-60 w-scrren flex flex-col justify-center items-center",
          },
          React.createElement(
            "div",
            {
              className: "animate-spin mb-1",
            },
            React.createElement(Icon.make, {
              name: "spinner",
              size: 20,
            }),
          ),
        ),
      ),
    },
    React.createElement(
      "div",
      undefined,
      React.createElement(WalletHelper.Heading.make, {}),
      tmp,
    ),
    React.createElement(FormValuesSpy.make, {}),
  );
}

var make = ApplePayIntegration;

export { Verified, Landing, make };
/* Icon Not a pure module */
