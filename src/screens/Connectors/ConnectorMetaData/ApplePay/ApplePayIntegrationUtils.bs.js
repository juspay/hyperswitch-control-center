// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConnectorUtils from "../../ConnectorUtils.bs.js";

function paymentRequest(dict, integrationType) {
  var paymentRequestDict = LogicUtils.getDictfromDict(
    LogicUtils.getDictfromDict(dict, integrationType),
    "payment_request_data",
  );
  var sessionTokenDict = LogicUtils.getDictfromDict(
    LogicUtils.getDictfromDict(dict, integrationType),
    "session_token_data",
  );
  return {
    label: LogicUtils.getString(sessionTokenDict, "display_name", "apple"),
    supported_networks: LogicUtils.getStrArrayFromDict(
      paymentRequestDict,
      "supported_networks",
      ["visa", "masterCard", "amex", "discover"],
    ),
    merchant_capabilities: LogicUtils.getStrArrayFromDict(
      paymentRequestDict,
      "merchant_capabilities",
      ["supports3DS"],
    ),
  };
}

function sessionToken(dict) {
  var sessionTokenDict = LogicUtils.getDictfromDict(
    LogicUtils.getDictfromDict(dict, "manual"),
    "session_token_data",
  );
  return {
    initiative: LogicUtils.getOptionString(sessionTokenDict, "initiative"),
    certificate: LogicUtils.getOptionString(sessionTokenDict, "certificate"),
    display_name: LogicUtils.getOptionString(sessionTokenDict, "display_name"),
    certificate_keys: LogicUtils.getOptionString(
      sessionTokenDict,
      "certificate_keys",
    ),
    initiative_context: LogicUtils.getOptionString(
      sessionTokenDict,
      "initiative_context",
    ),
    merchant_identifier: LogicUtils.getOptionString(
      sessionTokenDict,
      "merchant_identifier",
    ),
    merchant_business_country: LogicUtils.getOptionString(
      sessionTokenDict,
      "merchant_business_country",
    ),
    payment_processing_details_at: LogicUtils.getOptionString(
      sessionTokenDict,
      "payment_processing_details_at",
    ),
    payment_processing_certificate: LogicUtils.getOptionString(
      sessionTokenDict,
      "payment_processing_certificate",
    ),
    payment_processing_certificate_key: LogicUtils.getOptionString(
      sessionTokenDict,
      "payment_processing_certificate_key",
    ),
  };
}

function sessionTokenSimplified(dict) {
  var sessionTokenDict = LogicUtils.getDictfromDict(
    LogicUtils.getDictfromDict(dict, "simplified"),
    "session_token_data",
  );
  return {
    initiative_context: LogicUtils.getOptionString(
      sessionTokenDict,
      "initiative_context",
    ),
    merchant_business_country: LogicUtils.getOptionString(
      sessionTokenDict,
      "merchant_business_country",
    ),
  };
}

function manual(dict) {
  return {
    session_token_data: sessionToken(dict),
    payment_request_data: paymentRequest(dict, "manual"),
  };
}

function simplified(dict) {
  return {
    session_token_data: sessionTokenSimplified(dict),
    payment_request_data: paymentRequest(dict, "simplified"),
  };
}

function zenApplePayConfig(dict) {
  return {
    terminal_uuid: LogicUtils.getOptionString(dict, "terminal_uuid"),
    pay_wall_secret: LogicUtils.getOptionString(dict, "pay_wall_secret"),
  };
}

function applePayCombined(dict, applePayIntegrationType) {
  var data =
    applePayIntegrationType === "manual"
      ? {
          NAME: "manual",
          VAL: manual(dict),
        }
      : {
          NAME: "simplified",
          VAL: simplified(dict),
        };
  var dict$1 = {};
  if (data.NAME === "manual") {
    dict$1["manual"] = data.VAL;
  } else {
    dict$1["simplified"] = data.VAL;
  }
  return dict$1;
}

function applePay(dict, connectorOpt, applePayIntegrationTypeOpt, param) {
  var connector = connectorOpt !== undefined ? connectorOpt : "";
  var applePayIntegrationType =
    applePayIntegrationTypeOpt !== undefined
      ? Caml_option.valFromOption(applePayIntegrationTypeOpt)
      : undefined;
  var match = ConnectorUtils.getConnectorNameTypeFromString(
    connector,
    undefined,
    undefined,
  );
  if (match.TAG === "Processors" && match._0 === "ZEN") {
    return {
      TAG: "Zen",
      _0: zenApplePayConfig(dict),
    };
  }
  var integrationType = Core__Option.getOr(applePayIntegrationType, "manual");
  var data = {
    apple_pay_combined: applePayCombined(dict, integrationType),
  };
  return {
    TAG: "ApplePayCombined",
    _0: data,
  };
}

function applePayNameMapper(name, integrationType) {
  switch (name) {
    case "pay_wall_secret":
    case "terminal_uuid":
      return "metadata.apple_pay." + name;
    default:
      return (
        "metadata.apple_pay_combined." +
        Core__Option.getOr(integrationType, "manual") +
        ".session_token_data." +
        name
      );
  }
}

function paymentProcessingMapper(state) {
  var match = state.toLowerCase();
  switch (match) {
    case "hyperswitch":
      return "Hyperswitch";
    default:
      return "Connector";
  }
}

function initiativeMapper(state) {
  var match = state.toLowerCase();
  switch (match) {
    case "ios":
      return "ios";
    default:
      return "web";
  }
}

function applePayIntegrationTypeMapper(state) {
  var match = state.toLowerCase();
  switch (match) {
    case "simplified":
      return "simplified";
    default:
      return "manual";
  }
}

var ignoreFieldsonSimplified = [
  "certificate",
  "certificate_keys",
  "merchant_identifier",
  "display_name",
  "initiative",
  "payment_processing_details_at",
];

function validateZenFlow(values) {
  var data = zenApplePayConfig(
    LogicUtils.getDictfromDict(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(values),
        "metadata",
      ),
      "apple_pay",
    ),
  );
  if (
    Core__Option.isSome(data.terminal_uuid) &&
    Core__Option.isSome(data.pay_wall_secret)
  ) {
    return "Normal";
  } else {
    return "Disabled";
  }
}

function validateInitiative(data) {
  var value = data.initiative;
  if (value !== undefined) {
    if (initiativeMapper(value) === "web") {
      return Core__Option.isSome(data.initiative_context);
    } else {
      return true;
    }
  } else {
    return false;
  }
}

function validatePaymentProcessingDetailsAt(data) {
  var value = data.payment_processing_details_at;
  if (value !== undefined) {
    if (paymentProcessingMapper(value) === "Hyperswitch") {
      if (Core__Option.isSome(data.payment_processing_certificate)) {
        return Core__Option.isSome(data.payment_processing_certificate_key);
      } else {
        return false;
      }
    } else {
      return true;
    }
  } else {
    return false;
  }
}

function validateManualFlow(values) {
  var data = sessionToken(
    LogicUtils.getDictfromDict(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(values),
        "metadata",
      ),
      "apple_pay_combined",
    ),
  );
  if (
    validateInitiative(data) &&
    Core__Option.isSome(data.certificate) &&
    Core__Option.isSome(data.display_name) &&
    Core__Option.isSome(data.merchant_identifier) &&
    validatePaymentProcessingDetailsAt(data)
  ) {
    return "Normal";
  } else {
    return "Disabled";
  }
}

function validateSimplifedFlow(values) {
  var data = sessionTokenSimplified(
    LogicUtils.getDictfromDict(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(values),
        "metadata",
      ),
      "apple_pay_combined",
    ),
  );
  if (
    Core__Option.isSome(data.initiative_context) &&
    Core__Option.isSome(data.merchant_business_country)
  ) {
    return "Normal";
  } else {
    return "Disabled";
  }
}

function constructVerifyApplePayReq(values, connectorID) {
  var context = sessionTokenSimplified(
    LogicUtils.getDictfromDict(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(values),
        "metadata",
      ),
      "apple_pay_combined",
    ),
  );
  var domainName = Core__Option.getOr(context.initiative_context, "");
  var data = JSON.stringify({
    domain_names: [domainName],
    merchant_connector_account_id: connectorID,
  });
  if (data !== undefined) {
    return LogicUtils.safeParse(data);
  } else {
    return {};
  }
}

export {
  paymentRequest,
  sessionToken,
  sessionTokenSimplified,
  manual,
  simplified,
  zenApplePayConfig,
  applePayCombined,
  applePay,
  applePayNameMapper,
  paymentProcessingMapper,
  initiativeMapper,
  applePayIntegrationTypeMapper,
  ignoreFieldsonSimplified,
  validateZenFlow,
  validateInitiative,
  validatePaymentProcessingDetailsAt,
  validateManualFlow,
  validateSimplifedFlow,
  constructVerifyApplePayReq,
};
/* LogicUtils Not a pure module */
