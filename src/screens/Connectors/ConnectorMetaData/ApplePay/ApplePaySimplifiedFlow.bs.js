// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../../../utils/RenderIf.bs.js";
import * as AuthHooks from "../../../../hooks/AuthHooks.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../../../HSwitchUtils.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as DownloadUtils from "../../../../utils/DownloadUtils.bs.js";
import * as FormValuesSpy from "../../../../components/form/FormValuesSpy.bs.js";
import * as ReactFinalForm from "../../../../libraries/ReactFinalForm.bs.js";
import * as HyperswitchAtom from "../../../../Recoils/HyperswitchAtom.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as CommonMetaDataUtils from "../Common/CommonMetaDataUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as CommonMetaDataHelper from "../Common/CommonMetaDataHelper.bs.js";
import * as ApplePayIntegrationUtils from "./ApplePayIntegrationUtils.bs.js";
import * as ApplePayIntegrationHelper from "./ApplePayIntegrationHelper.bs.js";

function ApplePaySimplifiedFlow(props) {
  var setVefifiedDomainList = props.setVefifiedDomainList;
  var setApplePayIntegrationSteps = props.setApplePayIntegrationSteps;
  var merchantBusinessCountry = props.merchantBusinessCountry;
  var getURL = APIUtils.useGetURL();
  var updateAPIHook = APIUtils.useUpdateMethod(false, undefined);
  var fetchApi = AuthHooks.useApiFetcher();
  var showToast = ToastState.useShowToast();
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var form = ReactFinalForm$1.useForm();
  var connectorID = HSwitchUtils.getConnectorIDFromUrl(
    Core__List.toArray(url.path),
    "",
  );
  var merchantDetailsValue = HSwitchUtils.useMerchantDetailsValue();
  var merchantId = merchantDetailsValue.merchant_id;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var initalFormValue = LogicUtils.getDictfromDict(
    LogicUtils.getDictfromDict(
      LogicUtils.getDictFromJsonObject(formState.values),
      "metadata",
    ),
    "apple_pay_combined",
  );
  var setFormData = function () {
    var value = ApplePayIntegrationUtils.applePayCombined(
      initalFormValue,
      "simplified",
    );
    form.change("metadata.apple_pay_combined", value);
  };
  React.useEffect(function () {
    setFormData();
  }, []);
  var onSubmit = async function () {
    try {
      var body = ApplePayIntegrationUtils.constructVerifyApplePayReq(
        formState.values,
        connectorID,
      );
      var verifyAppleUrl = getURL(
        "VERIFY_APPLE_PAY",
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateAPIHook(
        verifyAppleUrl + "/" + merchantId,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var data = ApplePayIntegrationUtils.simplified(
        LogicUtils.getDictfromDict(
          LogicUtils.getDictfromDict(
            LogicUtils.getDictFromJsonObject(formState.values),
            "metadata",
          ),
          "apple_pay_combined",
        ),
      );
      var domainName = Core__Option.getOr(
        data.session_token_data.initiative_context,
        "",
      );
      setVefifiedDomainList(function (param) {
        return [domainName];
      });
      setApplePayIntegrationSteps(function (param) {
        return "Verify";
      });
    } catch (exn) {
      showToast(
        "Failed to Verify",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return null;
  };
  var downloadApplePayCert = function () {
    var downloadURL = Core__Option.getOr(
      window._env_.applePayCertificateUrl,
      "",
    );
    Core__Promise.$$catch(
      fetchApi(
        downloadURL,
        undefined,
        undefined,
        undefined,
        "Get",
        undefined,
        undefined,
        undefined,
      )
        .then(function (prim) {
          return prim.blob();
        })
        .then(function (content) {
          DownloadUtils.download(
            "apple-developer-merchantid-domain-association",
            content,
            "text/plain",
          );
          showToast(
            "File download complete",
            "ToastSuccess",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          return Promise.resolve();
        }),
      function (param) {
        showToast(
          "Oops, something went wrong with the download. Please try again.",
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
        return Promise.resolve();
      },
    );
  };
  var downloadAPIKey = React.createElement(
    "div",
    {
      className: "mt-4",
    },
    React.createElement(Button.make, {
      buttonState: "Normal",
      text: "Download File",
      buttonType: "Primary",
      buttonSize: "Small",
      onClick: function (param) {
        downloadApplePayCert();
      },
      customButtonStyle: "!px-2 rounded-lg",
    }),
  );
  var applePaySimplifiedFields = props.applePayFields
    .filter(function (field) {
      var typedData = CommonMetaDataUtils.inputFieldMapper(
        LogicUtils.convertMapObjectToDict(field),
      );
      return !ApplePayIntegrationUtils.ignoreFieldsonSimplified.includes(
        typedData.name,
      );
    })
    .map(function (field, index) {
      var applePayField = CommonMetaDataUtils.inputFieldMapper(
        LogicUtils.convertMapObjectToDict(field),
      );
      var match = applePayField.name;
      var tmp =
        match === "merchant_business_country"
          ? React.createElement(FormRenderer.FieldRenderer.make, {
              field: CommonMetaDataHelper.selectInput(
                applePayField,
                ApplePayIntegrationUtils.applePayNameMapper(
                  "merchant_business_country",
                  "simplified",
                ),
                Caml_option.some(merchantBusinessCountry),
                undefined,
                undefined,
              ),
              labelClass: "font-semibold !text-hyperswitch_black",
            })
          : React.createElement(FormRenderer.FieldRenderer.make, {
              field: ApplePayIntegrationHelper.applePayValueInput(
                applePayField,
                "simplified",
                undefined,
              ),
              labelClass: "font-semibold !text-hyperswitch_black",
            });
      return React.createElement(
        "div",
        {
          key: index.toString(),
        },
        tmp,
      );
    });
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(ApplePayIntegrationHelper.SimplifiedHelper.make, {
      customElement: Caml_option.some(applePaySimplifiedFields),
      heading:
        "Provide your sandbox domain where the verification file will be hosted",
      stepNumber: "1",
      subText:
        "Input the top-level domain (example.com) or sub-domain (checkout.example.com) where you wish to enable Apple Pay",
    }),
    React.createElement("hr", {
      className: "w-full",
    }),
    React.createElement(ApplePayIntegrationHelper.SimplifiedHelper.make, {
      customElement: Caml_option.some(downloadAPIKey),
      heading: "Download domain verification file",
      stepNumber: "2",
    }),
    React.createElement("hr", {
      className: "w-full",
    }),
    React.createElement(ApplePayIntegrationHelper.SimplifiedHelper.make, {
      customElement: Caml_option.some(
        React.createElement(ApplePayIntegrationHelper.HostURL.make, {
          prefix: ApplePayIntegrationUtils.applePayNameMapper(
            "initiative_context",
            "simplified",
          ),
        }),
      ),
      heading: "Host sandbox domain association file",
      stepNumber: "3",
      subText:
        "Host the downloaded verification file at your sandbox domain in the following location :-",
    }),
    React.createElement(
      RenderIf.make,
      {
        condition:
          featureFlagDetails.isLiveMode &&
          featureFlagDetails.complianceCertificate,
        children: null,
      },
      React.createElement("hr", {
        className: "w-full",
      }),
      React.createElement(ApplePayIntegrationHelper.SimplifiedHelper.make, {
        customElement: Caml_option.some(
          React.createElement(ApplePayIntegrationHelper.SampleEmail.make, {}),
        ),
        heading: "Get feature enabled from stripe",
        stepNumber: "4",
        subText: Caml_option.some(undefined),
      }),
    ),
    React.createElement(
      "div",
      {
        className: "w-full flex gap-2 justify-end p-6",
      },
      React.createElement(Button.make, {
        text: "Go Back",
        buttonType: "Secondary",
        onClick: function (_ev) {
          setApplePayIntegrationSteps(function (param) {
            return "Landing";
          });
        },
      }),
      React.createElement(Button.make, {
        buttonState: ApplePayIntegrationUtils.validateSimplifedFlow(
          formState.values,
        ),
        text: "Verify & Enable",
        buttonType: "Primary",
        onClick: function (_ev) {
          onSubmit();
        },
      }),
    ),
    React.createElement(FormValuesSpy.make, {}),
  );
}

var make = ApplePaySimplifiedFlow;

export { make };
/* react Not a pure module */
