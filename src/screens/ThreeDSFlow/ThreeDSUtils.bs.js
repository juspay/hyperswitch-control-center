// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as RoutingUtils from "../Routing/RoutingUtils.bs.js";
import * as AdvancedRoutingUtils from "../RoutingRevamp/AdvancedRoutingUtils.bs.js";

var statementObject = [
  {
    lhs: "amount",
    comparison: "EQUAL TO",
    value: {
      type: "number",
      value: "",
    },
  },
  {
    lhs: "currency",
    comparison: "IS",
    value: {
      type: "number",
      value: "",
    },
    logical: "AND",
  },
];

var rules_connectorSelection = {
  override_3ds: "three_ds",
};

var rules = {
  name: "rule_1",
  connectorSelection: rules_connectorSelection,
  statements: statementObject,
};

var buildInitial3DSValue_name = "3DS Rule-" + RoutingUtils.getCurrentUTCTime();

var buildInitial3DSValue_description =
  "This is a Three-Ds Rule created at " + RoutingUtils.currentTimeInUTC;

var buildInitial3DSValue_algorithm = {
  defaultSelection: {
    override_3ds: "",
  },
  rules: [rules],
  metadata: null,
};

var buildInitial3DSValue = {
  name: buildInitial3DSValue_name,
  description: buildInitial3DSValue_description,
  algorithm: buildInitial3DSValue_algorithm,
};

function pageStateMapper(pageType) {
  if (pageType === "new") {
    return "NEW";
  } else {
    return "LANDING";
  }
}

function buildThreeDsPayloadBody(values) {
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  var dataDict = LogicUtils.getDictfromDict(valuesDict, "algorithm");
  var rulesDict = LogicUtils.getArrayFromDict(dataDict, "rules", []);
  var modifiedRules = AdvancedRoutingUtils.generateRule(rulesDict);
  return {
    name: LogicUtils.getString(valuesDict, "name", ""),
    algorithm: {
      defaultSelection: {
        override_3ds: null,
      },
      rules: modifiedRules,
      metadata: {},
    },
  };
}

export {
  statementObject,
  rules,
  buildInitial3DSValue,
  pageStateMapper,
  buildThreeDsPayloadBody,
};
/* buildInitial3DSValue Not a pure module */
