// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as ToolTip from "../../components/tooltip/ToolTip.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as ACLButton from "../../components/ACLButton.bs.js";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as SelectBox from "../../components/SelectBox.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as MixpanelHook from "../MixpanelHook.bs.js";
import * as RoutingUtils from "../Routing/RoutingUtils.bs.js";
import * as ThreeDSUtils from "./ThreeDSUtils.bs.js";
import * as FormValuesSpy from "../../components/form/FormValuesSpy.bs.js";
import * as RulePreviewer from "../RoutingRevamp/Previewers/RulePreviewer.bs.js";
import * as AdvancedRouting from "../RoutingRevamp/AdvancedRouting.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as BasicDetailsForm from "../RoutingRevamp/BasicDetailsForm.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as DragDropComponent from "../../components/DragDropComponent.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as AdvancedRoutingUtils from "../RoutingRevamp/AdvancedRoutingUtils.bs.js";

function HSwitchThreeDS$ActiveRulePreview(props) {
  var setInitialRule = props.setInitialRule;
  var getURL = APIUtils.useGetURL();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showPopUp = PopUpState.useShowPopUp();
  var showToast = ToastState.useShowToast();
  var ruleInfo = Core__Option.getOr(props.initialRule, {});
  var name = LogicUtils.getString(ruleInfo, "name", "");
  var description = LogicUtils.getString(ruleInfo, "description", "");
  var ruleInfo$1 = AdvancedRoutingUtils.ruleInfoTypeMapper(
    LogicUtils.getDictFromJsonObject(
      LogicUtils.getJsonObjectFromDict(ruleInfo, "algorithm"),
    ),
  );
  var deleteCurrentThreedsRule = async function () {
    try {
      var url = getURL(
        "THREE_DS",
        "Delete",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        url,
        {},
        "Delete",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      showToast(
        "Successfully deleted current active 3ds rule",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setInitialRule(function (param) {});
    } catch (exn) {
      return showToast(
        "Failed to delete current active 3ds rule.",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
  };
  var handleDeletePopup = function () {
    showPopUp({
      heading: "Confirm delete?",
      description:
        "Are you sure you want to delete currently active 3DS rule? Deleting the rule will remove its associated settings and configurations, potentially affecting functionality.",
      popUpType: ["Warning", "WithIcon"],
      handleConfirm: {
        text: "Confirm",
        onClick: function (param) {
          deleteCurrentThreedsRule();
        },
      },
    });
  };
  return React.createElement(
    "div",
    {
      className:
        "relative flex flex-col gap-6 w-full border p-6 bg-white rounded-md",
    },
    React.createElement(
      "div",
      {
        className:
          "absolute top-0 right-0 bg-green-700 text-white py-2 px-4 rounded-bl font-semibold",
      },
      "ACTIVE",
    ),
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-2 ",
      },
      React.createElement(
        "div",
        {
          className: "flex gap-4 items-center ",
        },
        React.createElement(
          "p",
          {
            className: "text-xl font-semibold text-grey-700",
          },
          LogicUtils.capitalizeString(name),
        ),
        React.createElement(ToolTip.make, {
          description: "Delete existing 3ds rule",
          toolTipFor: Caml_option.some(
            React.createElement(Icon.make, {
              name: "delete",
              size: 20,
              className:
                "text-jp-gray-700 hover:text-jp-gray-900 dark:hover:text-white cursor-pointer",
              onClick: function (param) {
                handleDeletePopup();
              },
            }),
          ),
          toolTipPosition: "Top",
        }),
      ),
      React.createElement(
        "p",
        {
          className: "text-base font-normal text-grey-700 opacity-50",
        },
        description,
      ),
    ),
    React.createElement(RulePreviewer.make, {
      ruleInfo: ruleInfo$1,
      isFrom3ds: true,
    }),
  );
}

var ActiveRulePreview = {
  make: HSwitchThreeDS$ActiveRulePreview,
};

function HSwitchThreeDS$Configure3DSRule(props) {
  var wasm = props.wasm;
  var ruleInput = ReactFinalForm.useField("algorithm.rules").input;
  var match = React.useState(function () {
    return LogicUtils.getArrayFromJson(ruleInput.value, []);
  });
  var setRules = match[1];
  var rules = match[0];
  React.useEffect(
    function () {
      ruleInput.onChange(rules);
    },
    [rules],
  );
  var addRule = function (index, _copy) {
    var existingRules = LogicUtils.getArrayFromJson(ruleInput.value, []);
    var newRule = Core__Option.getOr(existingRules[index], null);
    var newRules = existingRules.concat([newRule]);
    ruleInput.onChange(newRules);
  };
  var notFirstRule =
    LogicUtils.getArrayFromJson(ruleInput.value, []).length > 1;
  var rule = Core__Option.getOr(Core__JSON.Decode.array(ruleInput.value), []);
  var keyExtractor = function (index, _rule, isDragging) {
    var id = "algorithm.rules[" + index.toString() + "]";
    return JsxPPXReactSupportU.createElementWithKey(
      index.toString(),
      AdvancedRouting.Wrapper.make,
      {
        id: id,
        heading: "Rule " + ((index + 1) | 0).toString(),
        onClickAdd: function (param) {
          addRule(index, false);
        },
        onClickCopy: function (param) {
          addRule(index, true);
        },
        onClickRemove: function (param) {
          var existingRules = LogicUtils.getArrayFromJson(ruleInput.value, []);
          var newRules = existingRules.filter(function (param, i) {
            return i !== index;
          });
          ruleInput.onChange(newRules);
        },
        gatewayOptions: SelectBox.makeOptions([]),
        notFirstRule: notFirstRule,
        isDragging: isDragging,
        wasm: wasm,
        isFrom3ds: true,
      },
    );
  };
  return React.createElement(
    "div",
    undefined,
    notFirstRule
      ? React.createElement(DragDropComponent.make, {
          isHorizontal: false,
          listItems: rule,
          setListItems: function (v) {
            setRules(function (param) {
              return v;
            });
          },
          keyExtractor: keyExtractor,
        })
      : rule.map(function (rule, index) {
          return keyExtractor(index, rule, false);
        }),
  );
}

var Configure3DSRule = {
  make: HSwitchThreeDS$Configure3DSRule,
};

function HSwitchThreeDS(props) {
  var getURL = APIUtils.useGetURL();
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var fetchDetails = APIUtils.useGetMethod(false, undefined);
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var match = React.useState(function () {});
  var setWasm = match[1];
  var match$1 = React.useState(function () {
    return ThreeDSUtils.buildInitial3DSValue;
  });
  var match$2 = React.useState(function () {});
  var setInitialRule = match$2[1];
  var initialRule = match$2[0];
  var match$3 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$3[1];
  var match$4 = React.useState(function () {
    return "NEW";
  });
  var setPageView = match$4[1];
  var showPopUp = PopUpState.useShowPopUp();
  var match$5 = React.useState(function () {
    return true;
  });
  var setShowWarning = match$5[1];
  var showWarning = match$5[0];
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var getWasm = async function () {
    try {
      var wasmResult = await window.init();
      var fetchedWasm = LogicUtils.getObj(
        LogicUtils.getDictFromJsonObject(wasmResult),
        "wasm",
        {},
      );
      return setWasm(function (param) {
        return fetchedWasm;
      });
    } catch (exn) {
      return;
    }
  };
  var activeRoutingDetails = async function () {
    try {
      var threeDsUrl = getURL(
        "THREE_DS",
        "Get",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var threeDsRuleDetail = await fetchDetails(threeDsUrl);
      var responseDict = LogicUtils.getDictFromJsonObject(threeDsRuleDetail);
      var programValue = LogicUtils.getObj(responseDict, "program", {});
      var intitialValue = Object.fromEntries([
        ["name", LogicUtils.getString(responseDict, "name", "")],
        ["description", LogicUtils.getString(responseDict, "description", "")],
        ["algorithm", programValue],
      ]);
      return setInitialRule(function (param) {
        return intitialValue;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Something went wrong"),
        );
      }
      throw e;
    }
  };
  var fetchDetails$1 = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      await getWasm();
      await activeRoutingDetails();
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Something went wrong");
        if (err.includes("HE_02")) {
          setShowWarning(function (param) {
            return false;
          });
          setPageView(function (param) {
            return "LANDING";
          });
          return setScreenState(function (param) {
            return "Success";
          });
        } else {
          return setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: err,
            };
          });
        }
      }
      throw e;
    }
  };
  React.useEffect(function () {
    fetchDetails$1();
  }, []);
  React.useEffect(
    function () {
      var searchParams = url.search;
      var filtersFromUrl = Core__Option.getOr(
        LogicUtils.getDictFromUrlSearchParams(searchParams)["type"],
        "",
      );
      setPageView(function (param) {
        return ThreeDSUtils.pageStateMapper(filtersFromUrl);
      });
    },
    [url.search],
  );
  var onSubmit = async function (values, param) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var threeDsPayload = ThreeDSUtils.buildThreeDsPayloadBody(values);
      var getActivateUrl = getURL(
        "THREE_DS",
        "Put",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        getActivateUrl,
        threeDsPayload,
        "Put",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      fetchDetails$1();
      setShowWarning(function (param) {
        return true;
      });
      RescriptReactRouter.replace(GlobalVars.appendDashboardPath("/3ds"));
      setPageView(function (param) {
        return "LANDING";
      });
      setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      } else {
        throw e;
      }
    }
    return null;
  };
  var validate = function (values) {
    var dict = LogicUtils.getDictFromJsonObject(values);
    var errors = {};
    AdvancedRoutingUtils.validateNameAndDescription(dict, errors);
    var jsonDict = Core__Option.flatMap(dict["algorithm"], function (obj) {
      return Core__JSON.Decode.object(obj);
    });
    if (jsonDict !== undefined) {
      var rules = LogicUtils.getArrayFromDict(jsonDict, "rules", []);
      if (true && rules.length === 0) {
        errors["Rules"] = "Minimum 1 rule needed";
      } else {
        rules.forEach(function (rule, i) {
          var ruleDict = LogicUtils.getDictFromJsonObject(rule);
          if (!RoutingUtils.validateConditionsFor3ds(ruleDict)) {
            errors["Rule " + ((i + 1) | 0).toString() + " - Condition"] =
              "Invalid";
            return;
          }
        });
      }
    }
    return errors;
  };
  var redirectToNewRule = function () {
    setPageView(function (param) {
      return "NEW";
    });
    RescriptReactRouter.replace(
      GlobalVars.appendDashboardPath("/3ds?type=new"),
    );
  };
  var handleCreateNew = function () {
    mixpanelEvent(
      "create_new_3ds_rule",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    if (showWarning) {
      return showPopUp({
        heading: "Heads up!",
        description:
          "This will override the existing 3DS configuration. Please confirm to proceed",
        popUpType: ["Warning", "WithIcon"],
        handleCancel: {
          text: "Cancel",
        },
        handleConfirm: {
          text: "Confirm",
          onClick: function (param) {
            redirectToNewRule();
          },
        },
      });
    } else {
      return redirectToNewRule();
    }
  };
  var tmp;
  tmp =
    match$4[0] === "NEW"
      ? React.createElement(
          "div",
          {
            className: "w-full border p-8 bg-white rounded-md ",
          },
          React.createElement(
            Form.make,
            {
              children: null,
              onSubmit: onSubmit,
              initialValues: match$1[0],
              validate: validate,
              formClass: "flex flex-col gap-6 justify-between",
            },
            React.createElement(BasicDetailsForm.make, {
              isThreeDs: true,
            }),
            React.createElement(
              "div",
              undefined,
              React.createElement(
                "div",
                {
                  className:
                    "flex flex-wrap items-center justify-between p-4 py-8 bg-white dark:bg-jp-gray-lightgray_background rounded-md border border-jp-gray-600 dark:border-jp-gray-850",
                },
                React.createElement(
                  "div",
                  undefined,
                  React.createElement(
                    "div",
                    {
                      className: "font-bold",
                    },
                    "Rule Based Configuration",
                  ),
                  React.createElement(
                    "div",
                    {
                      className: "flex flex-col gap-4",
                    },
                    React.createElement(
                      "span",
                      {
                        className:
                          "w-full text-jp-gray-700 dark:text-jp-gray-700 text-justify",
                      },
                      "Rule-Based Configuration allows for detailed smart routing logic based on multiple dimensions of a payment. You can create any number of conditions using various dimensions and logical operators.",
                    ),
                    React.createElement(
                      "span",
                      {
                        className: "flex flex-col text-jp-gray-700",
                      },
                      "For example:",
                      React.createElement(
                        "p",
                        {
                          className: "flex gap-2 items-center",
                        },
                        React.createElement("div", {
                          className:
                            "p-1 h-fit rounded-full bg-jp-gray-700 ml-2",
                        }),
                        "If amount is > 100 and currency is USD, enforce 3DS authentication .",
                      ),
                    ),
                    React.createElement(
                      "span",
                      {
                        className: "text-jp-gray-700 text-sm",
                      },
                      React.createElement(
                        "i",
                        undefined,
                        "Ensure to enter the payment amount in the smallest currency unit (e.g., cents for USD, yen for JPY). \n            For instance, pass 100 to charge $1.00 (USD) and ¥100 (JPY) since ¥ is a zero-decimal currency.",
                      ),
                    ),
                  ),
                ),
              ),
              React.createElement(HSwitchThreeDS$Configure3DSRule, {
                wasm: match[0],
              }),
            ),
            React.createElement(FormValuesSpy.make, {}),
            React.createElement(
              "div",
              {
                className: "flex gap-4",
              },
              React.createElement(Button.make, {
                text: "Cancel",
                buttonType: "Secondary",
                onClick: function (param) {
                  setPageView(function (param) {
                    return "LANDING";
                  });
                  RescriptReactRouter.replace(
                    GlobalVars.appendDashboardPath("/3ds"),
                  );
                },
              }),
              React.createElement(FormRenderer.SubmitButton.make, {
                text: "Save ",
                buttonType: "Primary",
                buttonSize: "Small",
              }),
            ),
          ),
        )
      : React.createElement(
          "div",
          {
            className: "flex flex-col gap-6",
          },
          React.createElement(RenderIf.make, {
            condition: Core__Option.isSome(initialRule),
            children: React.createElement(HSwitchThreeDS$ActiveRulePreview, {
              initialRule: initialRule,
              setInitialRule: setInitialRule,
            }),
          }),
          React.createElement(
            "div",
            {
              className:
                "w-full border p-6 flex flex-col gap-6 bg-white rounded-md",
            },
            React.createElement(
              "p",
              {
                className: "text-base font-semibold text-grey-700",
              },
              "Configure 3DS Rule",
            ),
            React.createElement(
              "p",
              {
                className: "text-base font-normal text-grey-700 opacity-50",
              },
              "Create advanced rules using various payment parameters like amount, currency,payment method etc to enforce 3DS authentication for specific payments to reduce fraudulent transactions",
            ),
            React.createElement(ACLButton.make, {
              text: "Create New",
              buttonType: "Primary",
              onClick: function (param) {
                handleCreateNew();
              },
              customButtonStyle: "!w-1/6",
              access: userPermissionJson.workflowsManage,
            }),
          ),
        );
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "flex flex-col overflow-scroll gap-6",
        },
        React.createElement(PageUtils.PageHeading.make, {
          title: "3DS Decision Manager",
          subTitle:
            "Make your payments more secure by enforcing 3DS authentication through custom rules defined on payment parameters",
        }),
        tmp,
      ),
    ),
    screenState: match$3[0],
  });
}

var make = HSwitchThreeDS;

export { ActiveRulePreview, Configure3DSRule, make };
/* Form Not a pure module */
