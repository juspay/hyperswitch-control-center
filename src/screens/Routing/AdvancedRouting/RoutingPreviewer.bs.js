// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as ThemeProvider from "../../../context/ThemeProvider.bs.js";
import * as ConnectorTableUtils from "../../Connectors/ConnectorTableUtils.bs.js";

function RoutingPreviewer$SimplePreview(props) {
  var gateways = props.gateways;
  var match = React.useContext(ThemeProvider.themeContext);
  var backgroundColor = match.globalUIConfig.backgroundColor;
  return React.createElement(RenderIf.make, {
    condition: gateways.length > 0,
    children: React.createElement(
      "div",
      {
        className:
          "w-full mb-6 p-4 px-6 bg-white dark:bg-jp-gray-lightgray_background rounded-md border border-jp-gray-600 dark:border-jp-gray-850",
      },
      React.createElement(
        "div",
        {
          className:
            "flex flex-col mt-6 mb-4 rounded-md  border border-jp-gray-500 dark:border-jp-gray-960 divide-y divide-jp-gray-500 dark:divide-jp-gray-960",
        },
        gateways.map(function (item, i) {
          return React.createElement(
            "div",
            {
              className:
                "h-12 flex flex-row items-center gap-4\n             text-jp-gray-900 dark:text-jp-gray-text_darktheme px-3 ",
            },
            React.createElement(
              "div",
              {
                className:
                  "px-1.5 rounded-full " +
                  backgroundColor +
                  " text-white font-semibold text-sm",
              },
              ((i + 1) | 0).toString(),
            ),
            React.createElement("div", undefined, item),
          );
        }),
      ),
    ),
  });
}

var SimplePreview = {
  make: RoutingPreviewer$SimplePreview,
};

function RoutingPreviewer$GatewayView(props) {
  var connectorList = props.connectorList;
  var match = React.useContext(ThemeProvider.themeContext);
  var textColor = match.globalUIConfig.font.textColor;
  var getGatewayName = function (name) {
    if (connectorList !== undefined) {
      return ConnectorTableUtils.getConnectorObjectFromListViaId(
        connectorList,
        name,
      ).connector_label;
    } else {
      return name;
    }
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-wrap gap-4 items-center",
    },
    props.gateways.map(function (ruleGateway, index) {
      return React.createElement(
        "div",
        {
          key: index.toString(),
          className:
            "my-2 h-6 md:h-8 flex items-center rounded-md border border-jp-gray-500 dark:border-jp-gray-960 font-medium " +
            textColor.primaryNormal +
            " hover:" +
            textColor.primaryNormal +
            " bg-gradient-to-b from-jp-gray-250 to-jp-gray-200 dark:from-jp-gray-950 dark:to-jp-gray-950 focus:outline-none px-2 gap-1",
        },
        getGatewayName(ruleGateway.gateway_name),
        ruleGateway.distribution !== 100
          ? React.createElement(
              "span",
              {
                className: "text-jp-gray-700 dark:text-jp-gray-600 ml-1",
              },
              ruleGateway.distribution.toString() + "%",
            )
          : null,
      );
    }),
  );
}

var GatewayView = {
  make: RoutingPreviewer$GatewayView,
};

export { SimplePreview, GatewayView };
/* react Not a pure module */
