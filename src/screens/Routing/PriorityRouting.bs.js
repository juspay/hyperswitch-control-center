// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as SelectBox from "../../components/SelectBox.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as SelectModal from "../../components/SelectModal.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as RoutingUtils from "./RoutingUtils.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as RoutingPreviewer from "./AdvancedRouting/RoutingPreviewer.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as DragDropComponent from "../../components/DragDropComponent.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function PriorityRouting$SimpleRoutingView(props) {
  var baseUrlForRedirection = props.baseUrlForRedirection;
  var setFormState = props.setFormState;
  var setPageState = props.setPageState;
  var pageState = props.pageState;
  var routingId = props.routingId;
  var setScreenState = props.setScreenState;
  var setGateways = props.setGateways;
  var gateways = props.gateways;
  var setShowModal = props.setShowModal;
  var getURL = APIUtils.useGetURL();
  var match = React.useContext(ThemeProvider.themeContext);
  var backgroundColor = match.globalUIConfig.backgroundColor;
  var nameFromForm = ReactFinalForm.useField("name").input.value;
  var descriptionFromForm = ReactFinalForm.useField("description").input.value;
  var modalObj = RoutingUtils.getModalObj("PRIORITY", "priority");
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showPopUp = PopUpState.useShowPopUp();
  var showToast = ToastState.useShowToast();
  var onSubmit = function (values) {
    setGateways(function (param) {
      return values;
    });
    setShowModal(function (param) {
      return false;
    });
  };
  var saveConfiguration = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var data = gateways.map(function (str) {
        return str;
      });
      var activateRuleURL = getURL(
        "ROUTING",
        "Post",
        Caml_option.some(undefined),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        activateRuleURL,
        RoutingUtils.getRoutingPayload(
          data,
          "priority",
          LogicUtils.getStringFromJson(nameFromForm, ""),
          LogicUtils.getStringFromJson(descriptionFromForm, ""),
          "",
        ),
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      showToast(
        "Successfully Created a new Configuraion !",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      RescriptReactRouter.replace(
        GlobalVars.appendDashboardPath(baseUrlForRedirection),
      );
      setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      } else {
        throw e;
      }
    }
  };
  var handleActivateConfiguration = async function (param) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var activateRuleURL = getURL(
        "ROUTING",
        "Post",
        Caml_option.some(routingId),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        activateRuleURL,
        {},
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      showToast(
        "Successfully Activated Selected Configuration !",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      RescriptReactRouter.replace(
        GlobalVars.appendDashboardPath(baseUrlForRedirection),
      );
      setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var message = e._1.message;
        if (message !== undefined) {
          if (message.includes("IR_16")) {
            setScreenState(function (param) {
              return "Success";
            });
          } else {
            setScreenState(function (param) {
              return {
                TAG: "Error",
                _0: message,
              };
            });
          }
        } else {
          setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: "Failed to Fetch!",
            };
          });
        }
      } else {
        throw e;
      }
    }
    return null;
  };
  var openConfirmPopUp = function () {
    showPopUp({
      heading: modalObj.conType,
      description: modalObj.conText,
      popUpType: ["Warning", "WithIcon"],
      handleCancel: {
        text: "No, don't save",
      },
      handleConfirm: {
        text: "Yes, Save it",
        onClick: function (param) {
          saveConfiguration();
        },
      },
    });
  };
  var tmp;
  switch (pageState) {
    case "Preview":
      tmp = React.createElement(RoutingPreviewer.SimplePreview.make, {
        gateways: gateways,
      });
      break;
    case "Create":
      var keyExtractor = function (index, gateway, isDragging) {
        var style = isDragging
          ? "border rounded-md bg-jp-gray-100 dark:bg-jp-gray-950"
          : "";
        return React.createElement(
          "div",
          {
            className:
              "h-14 px-3 flex flex-row items-center justify-between text-jp-gray-900 dark:text-jp-gray-600 border-jp-gray-500 dark:border-jp-gray-960\n            " +
              (index !== 0 ? "border-t" : "") +
              " " +
              style,
          },
          React.createElement(
            "div",
            {
              className: "flex flex-row items-center gap-4 ml-2",
            },
            React.createElement(Icon.make, {
              name: "grip-vertical",
              size: 14,
              className: "cursor-pointer",
            }),
            React.createElement(
              "div",
              {
                className:
                  "px-1.5 rounded-full " +
                  backgroundColor +
                  " text-white font-semibold text-sm",
              },
              ((index + 1) | 0).toString(),
            ),
            React.createElement("div", undefined, gateway),
          ),
        );
      };
      tmp = React.createElement(
        "div",
        {
          className:
            "flex border border-jp-gray-500 dark:border-jp-gray-960 rounded-md ",
        },
        React.createElement(DragDropComponent.make, {
          isHorizontal: false,
          listItems: gateways,
          setListItems: function (v) {
            setGateways(function (param) {
              return v;
            });
          },
          keyExtractor: keyExtractor,
        }),
      );
      break;
    case "Edit":
      tmp = null;
      break;
  }
  var tmp$1;
  switch (pageState) {
    case "Preview":
      tmp$1 = React.createElement(
        React.Fragment,
        {},
        React.createElement(Button.make, {
          text: "Duplicate & Edit Configuration",
          buttonType: "Primary",
          onClick: function (param) {
            setFormState(function (param) {
              return "EditConfig";
            });
            setPageState(function (param) {
              return "Create";
            });
          },
          customButtonStyle: "w-1/5 rounded-sm",
        }),
        React.createElement(Button.make, {
          buttonState: props.isActive ? "Disabled" : "Normal",
          text: "Activate Configuration",
          buttonType: "Secondary",
          onClick: function (param) {
            handleActivateConfiguration();
          },
          customButtonStyle: "w-1/5 rounded-sm",
        }),
      );
      break;
    case "Create":
      tmp$1 = React.createElement(Button.make, {
        loadingText: "Activating...",
        buttonState: gateways.length > 0 ? "Normal" : "Disabled",
        text: "Save Rule",
        buttonType: "Primary",
        buttonSize: "Small",
        leftIcon: {
          TAG: "FontAwesome",
          _0: "check",
        },
        onClick: function (param) {
          openConfirmPopUp();
        },
        customButtonStyle: "rounded-sm w-1/5",
      });
      break;
    case "Edit":
      tmp$1 = null;
      break;
  }
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(
      "div",
      {
        className:
          "flex flex-col gap-4 p-6 my-6 bg-white dark:bg-jp-gray-lightgray_background rounded-md border border-jp-gray-600 dark:border-jp-gray-850",
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col lg:flex-row ",
        },
        React.createElement(
          "div",
          undefined,
          React.createElement(
            "div",
            {
              className: "font-bold mb-1",
            },
            "Simple Configuration",
          ),
          React.createElement(
            "div",
            {
              className:
                "text-jp-gray-800 dark:text-jp-gray-700 text-sm flex flex-col",
            },
            React.createElement(
              "p",
              undefined,
              "Simple Routing is helpful when you wish to define a simple pecking order of priority among the configured connectors. You may add the gateway and do a simple drag and drop.",
            ),
            React.createElement(
              "p",
              undefined,
              "For example: 1. Stripe, 2. Adyen, 3.Braintree",
            ),
          ),
        ),
        React.createElement(Button.make, {
          buttonState: pageState !== "Preview" ? "Normal" : "Disabled",
          text: "Add Processors",
          buttonType: "SecondaryFilled",
          leftIcon: {
            TAG: "FontAwesome",
            _0: "plus",
          },
          rightIcon: {
            TAG: "FontAwesome",
            _0: "angle-right",
          },
          onClick: function (param) {
            setShowModal(function (param) {
              return true;
            });
          },
          textStyle: "text-base text-left",
          textWeight: "font-bold",
          fullLength: true,
          customButtonStyle: "w-48 lg:w-1/5 h-10 mt-4 lg:mt-0 lg:h-12 lg:ml-8",
        }),
        React.createElement(SelectModal.make, {
          modalHeading: "Select Gateways",
          showModal: props.showModal,
          setShowModal: setShowModal,
          onSubmit: onSubmit,
          initialValues: gateways,
          options: SelectBox.makeOptions(props.connectors),
          title: "Gateways",
          showDeSelectAll: true,
        }),
      ),
      tmp,
    ),
    React.createElement(
      "div",
      {
        className: "flex gap-4",
      },
      tmp$1,
    ),
  );
}

var SimpleRoutingView = {
  make: PriorityRouting$SimpleRoutingView,
};

function PriorityRouting(props) {
  var connectorList = props.connectorList;
  var routingRuleId = props.routingRuleId;
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match = React.useState(function () {
    return "CreateConfig";
  });
  var setFormState = match[1];
  var match$1 = React.useState(function () {
    return "Create";
  });
  var setPageState = match$1[1];
  var match$2 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$2[1];
  var match$3 = React.useState(function () {
    return [];
  });
  var setGateways = match$3[1];
  var match$4 = React.useState(function () {
    return false;
  });
  var match$5 = React.useState(function () {
    return {};
  });
  var setInitialValues = match$5[1];
  var match$6 = React.useState(function () {
    return [];
  });
  var setConnectors = match$6[1];
  var activeRoutingDetails = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var routingUrl = getURL(
        "ROUTING",
        "Get",
        Caml_option.some(routingRuleId),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var routingJson = await fetchDetails(routingUrl);
      var connectorsOrder = LogicUtils.getStrArrayFromJsonArray(
        LogicUtils.getArrayFromDict(
          LogicUtils.getObj(
            LogicUtils.getDictFromJsonObject(routingJson),
            "algorithm",
            {},
          ),
          "data",
          [],
        ),
      );
      var initialValueDict = Object.fromEntries([
        [
          "name",
          LogicUtils.getString(
            LogicUtils.getDictFromJsonObject(routingJson),
            "name",
            "This is a default text",
          ),
        ],
        [
          "description",
          LogicUtils.getString(
            LogicUtils.getDictFromJsonObject(routingJson),
            "description",
            "This is a default text",
          ),
        ],
      ]);
      setFormState(function (param) {
        return "ViewConfig";
      });
      setInitialValues(function (param) {
        return initialValueDict;
      });
      setGateways(function (param) {
        return connectorsOrder;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  var getConnectorsList = function () {
    var arr = LogicUtils.getUniqueArray(
      connectorList.map(function (connectorDict) {
        return connectorDict.connector_name;
      }),
    );
    setConnectors(function (param) {
      return arr;
    });
    setScreenState(function (param) {
      return "Success";
    });
  };
  React.useEffect(
    function () {
      if (routingRuleId !== undefined) {
        activeRoutingDetails();
        setPageState(function (param) {
          return "Preview";
        });
      } else {
        setPageState(function (param) {
          return "Create";
        });
      }
      getConnectorsList();
    },
    [routingRuleId],
  );
  return React.createElement(
    "div",
    undefined,
    React.createElement(PageLoaderWrapper.make, {
      children: Caml_option.some(
        React.createElement(Form.make, {
          children: React.createElement(
            "div",
            {
              className: "w-full flex flex-row  justify-between",
            },
            React.createElement(
              "div",
              {
                className: "w-full",
              },
              match[0] !== "CreateConfig"
                ? React.createElement(PriorityRouting$SimpleRoutingView, {
                    showModal: match$4[0],
                    setShowModal: match$4[1],
                    gateways: match$3[0],
                    setGateways: setGateways,
                    setScreenState: setScreenState,
                    routingId: routingRuleId,
                    pageState: match$1[0],
                    setPageState: setPageState,
                    connectors: match$6[0],
                    setFormState: setFormState,
                    isActive: props.isActive,
                    baseUrlForRedirection: props.baseUrlForRedirection,
                  })
                : null,
            ),
          ),
          initialValues: match$5[0],
        }),
      ),
      screenState: match$2[0],
    }),
  );
}

var make = PriorityRouting;

export { SimpleRoutingView, make };
/* Form Not a pure module */
