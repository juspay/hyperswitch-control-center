// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as NoDataFound from "../../components/NoDataFound.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as RoutingUtils from "./RoutingUtils.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as BasicDetailsForm from "../RoutingRevamp/BasicDetailsForm.bs.js";
import * as DragDropComponent from "../../components/DragDropComponent.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as ConnectorTableUtils from "../Connectors/ConnectorTableUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";

function DefaultRouting(props) {
  var baseUrlForRedirection = props.baseUrlForRedirection;
  var urlEntityName = props.urlEntityName;
  var getURL = APIUtils.useGetURL();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var showPopUp = PopUpState.useShowPopUp();
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var defaultBusinessProfile =
    MerchantAccountUtils.getValueFromBusinessProfile(businessProfiles);
  var match = React.useState(function () {
    return defaultBusinessProfile.profile_id;
  });
  var profile = match[0];
  var match$1 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$1[1];
  var match$2 = React.useState(function () {
    return [];
  });
  var setGateways = match$2[1];
  var gateways = match$2[0];
  var match$3 = React.useState(function () {
    return [];
  });
  var setDefaultRoutingResponse = match$3[1];
  var defaultRoutingResponse = match$3[0];
  var modalObj = RoutingUtils.getModalObj("DEFAULTFALLBACK", "default");
  var typedConnectorValue = Recoil.useRecoilValue(
    HyperswitchAtom.connectorListAtom,
  );
  var match$4 = React.useContext(ThemeProvider.themeContext);
  var backgroundColor = match$4.globalUIConfig.backgroundColor;
  var settingUpConnectorsState = function (routingRespArray) {
    var profileList = routingRespArray.filter(function (value) {
      return (
        LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(value),
          "profile_id",
          "",
        ) === profile
      );
    });
    var connectorList = LogicUtils.getArrayFromDict(
      LogicUtils.getDictFromJsonObject(
        Core__Option.getOr(profileList[0], null),
      ),
      "connectors",
      [],
    );
    if (connectorList.length > 0) {
      setGateways(function (param) {
        return connectorList;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } else {
      return setScreenState(function (param) {
        return "Custom";
      });
    }
  };
  var getConnectorsList = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var defaultFallbackUrl =
        getURL(
          urlEntityName,
          "Get",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ) + "/profile";
      var response = await fetchDetails(defaultFallbackUrl);
      var routingRespArray = LogicUtils.getArrayFromJson(response, []);
      setDefaultRoutingResponse(function (param) {
        return routingRespArray;
      });
      return settingUpConnectorsState(routingRespArray);
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  React.useEffect(function () {
    getConnectorsList();
  }, []);
  React.useEffect(
    function () {
      if (defaultRoutingResponse.length > 0) {
        settingUpConnectorsState(defaultRoutingResponse);
      }
    },
    [profile],
  );
  var handleChangeOrder = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var defaultFallbackUpdateUrl =
        getURL(
          urlEntityName,
          "Post",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ) +
        "/profile/" +
        profile;
      await updateDetails(
        defaultFallbackUpdateUrl,
        gateways,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      RescriptReactRouter.replace(
        GlobalVars.appendDashboardPath(baseUrlForRedirection + "/default"),
      );
      setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Something went wrong");
        setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      } else {
        throw e;
      }
    }
  };
  var keyExtractor = function (index, gateway, isDragging) {
    var style = isDragging
      ? "border rounded-md bg-jp-gray-100 dark:bg-jp-gray-950"
      : "";
    var connectorName = LogicUtils.getString(
      LogicUtils.getDictFromJsonObject(gateway),
      "connector",
      "",
    );
    var merchantConnectorId = LogicUtils.getString(
      LogicUtils.getDictFromJsonObject(gateway),
      "merchant_connector_id",
      "",
    );
    var connectorLabel = ConnectorTableUtils.getConnectorObjectFromListViaId(
      typedConnectorValue,
      merchantConnectorId,
    ).connector_label;
    return React.createElement(
      "div",
      {
        className:
          "h-14 px-3 flex flex-row items-center justify-between text-jp-gray-900 dark:text-jp-gray-600 border-jp-gray-500 dark:border-jp-gray-960\n            " +
          (index !== 0 ? "border-t" : "") +
          " " +
          style,
      },
      React.createElement(
        "div",
        {
          className: "flex flex-row items-center gap-4 ml-2",
        },
        React.createElement(Icon.make, {
          name: "grip-vertical",
          size: 14,
          className: "cursor-pointer",
        }),
        React.createElement(
          "div",
          {
            className:
              "px-1.5 rounded-full " +
              backgroundColor +
              " text-white font-semibold text-sm",
          },
          ((index + 1) | 0).toString(),
        ),
        React.createElement(
          "div",
          {
            className: "flex gap-1 items-center",
          },
          React.createElement("p", undefined, connectorName),
          React.createElement(
            "p",
            {
              className: "text-sm opacity-50 ",
            },
            "(" + connectorLabel + ")",
          ),
        ),
      ),
    );
  };
  return React.createElement(
    "div",
    undefined,
    React.createElement(Form.make, {
      children: React.createElement(
        "div",
        {
          className: "w-full flex justify-between",
        },
        React.createElement(BasicDetailsForm.BusinessProfileInp.make, {
          setProfile: match[1],
          profile: profile,
          options:
            MerchantAccountUtils.businessProfileNameDropDownOption(
              businessProfiles,
            ),
          label: "Profile",
        }),
      ),
      initialValues: {},
    }),
    React.createElement(
      PageLoaderWrapper.make,
      {
        children: Caml_option.some(null),
        screenState: match$1[0],
        customUI: Caml_option.some(
          React.createElement(NoDataFound.make, {
            message: "Please connect atleast 1 connector",
            renderType: "Painting",
          }),
        ),
      },
      React.createElement(
        "div",
        {
          className:
            "flex flex-col gap-4 p-6 my-6 bg-white dark:bg-jp-gray-lightgray_background rounded-md border border-jp-gray-600 dark:border-jp-gray-850",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-col lg:flex-row ",
          },
          React.createElement(
            "div",
            undefined,
            React.createElement(
              "div",
              {
                className: "font-bold mb-1",
              },
              "Default Fallback",
            ),
            React.createElement(
              "div",
              {
                className:
                  "text-jp-gray-800 dark:text-jp-gray-700 text-sm flex flex-col",
              },
              React.createElement(
                "p",
                undefined,
                "Default Fallback is helpful when you wish to define a simple pecking order of priority among the configured connectors. You may add the gateway and do a simple drag and drop.",
              ),
              React.createElement(
                "p",
                undefined,
                "For example: 1. Stripe, 2. Adyen, 3.Braintree",
              ),
            ),
          ),
        ),
        React.createElement(
          "div",
          {
            className:
              "flex border border-jp-gray-500 dark:border-jp-gray-960 rounded-md ",
          },
          React.createElement(DragDropComponent.make, {
            isHorizontal: false,
            listItems: gateways,
            setListItems: function (v) {
              setGateways(function (param) {
                return v;
              });
            },
            keyExtractor: keyExtractor,
          }),
        ),
      ),
      React.createElement(Button.make, {
        loadingText: "Activating...",
        buttonState: gateways.length > 0 ? "Normal" : "Disabled",
        text: "Save Changes",
        buttonType: "Primary",
        buttonSize: "Small",
        leftIcon: {
          TAG: "FontAwesome",
          _0: "check",
        },
        onClick: function (param) {
          showPopUp({
            heading: modalObj.conType,
            description: modalObj.conText,
            popUpType: ["Warning", "WithIcon"],
            handleCancel: {
              text: "No, don't save",
            },
            handleConfirm: {
              text: "Yes, save it",
              onClick: function (param) {
                handleChangeOrder();
              },
            },
          });
        },
      }),
    ),
  );
}

var make = DefaultRouting;

export { make };
/* Form Not a pure module */
