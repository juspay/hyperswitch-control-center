// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Tabs from "../../components/Tabs.bs.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as $$History from "./History.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as RoutingUtils from "./RoutingUtils.bs.js";
import * as ActiveRouting from "./ActiveRouting.bs.js";
import * as HistoryEntity from "./HistoryEntity.bs.js";
import * as EntityScaffold from "../../components/EntityScaffold.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as DefaultLandingPage from "../Helpers/DefaultLandingPage.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function RoutingStack(props) {
  var __previewOnly = props.previewOnly;
  var previewOnly = __previewOnly !== undefined ? __previewOnly : false;
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var pathVar = Core__List.toArray(url.path).join("/");
  var match = React.useState(function () {
    return [];
  });
  var setRecords = match[1];
  var records = match[0];
  var match$1 = React.useState(function () {
    return [];
  });
  var setActiveRoutingIds = match$1[1];
  var activeRoutingIds = match$1[0];
  var match$2 = React.useState(function () {
    return [];
  });
  var setRoutingType = match$2[1];
  var routingType = match$2[0];
  var match$3 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$3[1];
  var match$4 = React.useState(function () {
    return 0;
  });
  var setTabIndex = match$4[1];
  var tabIndex = match$4[0];
  var setCurrentTabName = Recoil.useSetRecoilState(
    HyperswitchAtom.currentTabNameRecoilAtom,
  );
  var match$5 = React.useMemo(
    function () {
      if (previewOnly) {
        return ["w-full", "mx-auto"];
      } else {
        return ["w-full", "mx-auto "];
      }
    },
    [previewOnly],
  );
  var tabs = React.useMemo(
    function () {
      return [
        {
          title: "Manage rules",
          renderContent: function () {
            if (records.length > 0) {
              return React.createElement($$History.make, {
                records: records,
                activeRoutingIds: activeRoutingIds,
              });
            } else {
              return React.createElement(DefaultLandingPage.make, {
                height: "90%",
                title: "No Routing Rule Configured!",
                customStyle: "py-16",
                overriddingStylesTitle: "text-3xl font-semibold",
              });
            }
          },
        },
        {
          title: "Active configuration",
          renderContent: function () {
            return React.createElement(ActiveRouting.make, {
              routingType: routingType,
            });
          },
        },
      ];
    },
    [routingType],
  );
  var fetchRoutingRecords = async function (activeIds) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var routingUrl =
        getURL(
          "ROUTING",
          "Get",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ) + "?limit=100";
      var routingJson = await fetchDetails(routingUrl);
      var configuredRules = RoutingUtils.getRecordsObject(routingJson);
      var recordsData = Belt_Array.keepMap(
        configuredRules,
        Core__JSON.Decode.object,
      ).map(HistoryEntity.itemToObjMapper);
      var sortedHistoryRecords = recordsData
        .toSorted(function (item1, item2) {
          if (activeIds.includes(item1.id)) {
            return -1;
          } else if (activeIds.includes(item2.id)) {
            return 1;
          } else {
            return 0;
          }
        })
        .map(function (prim) {
          return prim;
        });
      setRecords(function (param) {
        return sortedHistoryRecords;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  var fetchActiveRouting = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var activeRoutingUrl = getURL(
        "ACTIVE_ROUTING",
        "Get",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var routingJson = await fetchDetails(activeRoutingUrl);
      var routingArr = LogicUtils.getArrayFromJson(routingJson, []);
      if (routingArr.length > 0) {
        var currentActiveIds = [];
        routingArr.forEach(function (ele) {
          var id = LogicUtils.getString(
            LogicUtils.getDictFromJsonObject(ele),
            "id",
            "",
          );
          currentActiveIds.push(id);
        });
        await fetchRoutingRecords(currentActiveIds);
        setActiveRoutingIds(function (param) {
          return currentActiveIds;
        });
        return setRoutingType(function (param) {
          return routingArr;
        });
      }
      await fetchRoutingRecords([]);
      var defaultFallback = Object.fromEntries([["kind", "default"]]);
      setRoutingType(function (param) {
        return [defaultFallback];
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  React.useEffect(
    function () {
      fetchActiveRouting();
    },
    [pathVar, url.search],
  );
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: match$5[0] + " " + match$5[1] + " gap-2.5",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-6",
          },
          React.createElement(PageUtils.PageHeading.make, {
            title: "Smart routing configuration",
            subTitle:
              "Smart routing stack helps you to increase success rates and reduce costs by optimising your payment traffic across the various processors in the most customised yet reliable way. Set it up based on the preferred level of control",
          }),
          React.createElement(ActiveRouting.LevelWiseRoutingSection.make, {
            types: ["VOLUME_SPLIT", "ADVANCED", "DEFAULTFALLBACK"],
            onRedirectBaseUrl: "routing",
          }),
        ),
        React.createElement(RenderIf.make, {
          condition: !previewOnly,
          children: React.createElement(
            "div",
            {
              className: "flex flex-col gap-12",
            },
            React.createElement(EntityScaffold.make, {
              entityName: "HyperSwitch Priority Logic",
              remainingPath: props.remainingPath,
              renderList: function () {
                return React.createElement(Tabs.make, {
                  tabs: tabs,
                  initialIndex: tabIndex >= 0 ? tabIndex : 0,
                  onTitleClick: function (indx) {
                    setTabIndex(function (param) {
                      return indx;
                    });
                    setCurrentTabName(function (param) {
                      if (indx === 0) {
                        return "active";
                      } else {
                        return "history";
                      }
                    });
                  },
                  lightThemeColor: "black",
                  defaultClasses:
                    "!w-max flex flex-auto flex-row items-center justify-center px-6 font-semibold text-body",
                  showBorder: false,
                  includeMargin: false,
                });
              },
            }),
          ),
        }),
      ),
    ),
    screenState: match$3[0],
  });
}

var make = RoutingStack;

export { make };
/* Tabs Not a pure module */
