// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as ACLButton from "../../components/ACLButton.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as MixpanelHook from "../MixpanelHook.bs.js";
import * as RoutingUtils from "./RoutingUtils.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function ActiveRouting$TopLeftIcons(props) {
  switch (props.routeType) {
    case "VOLUME_SPLIT":
      return React.createElement(Icon.make, {
        name: "processorLevel",
        size: 25,
        className: "w-14",
      });
    case "ADVANCED":
      return React.createElement(Icon.make, {
        name: "parameterLevel",
        size: 25,
        className: "w-20",
      });
    case "PRIORITY":
    case "DEFAULTFALLBACK":
      break;
    case "NO_ROUTING":
      return null;
  }
  return React.createElement(Icon.make, {
    name: "fallback",
    size: 25,
    className: "w-11",
  });
}

var TopLeftIcons = {
  make: ActiveRouting$TopLeftIcons,
};

function ActiveRouting$TopRightIcons(props) {
  switch (props.routeType) {
    case "PRIORITY":
    case "VOLUME_SPLIT":
      break;
    default:
      return null;
  }
  return React.createElement(Icon.make, {
    name: "quickSetup",
    size: 25,
    className: "w-28",
  });
}

var TopRightIcons = {
  make: ActiveRouting$TopRightIcons,
};

function ActiveRouting$ActionButtons(props) {
  var onRedirectBaseUrl = props.onRedirectBaseUrl;
  var routeType = props.routeType;
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = match.globalUIConfig;
  var borderColor = match$1.border.borderColor;
  var textColor = match$1.font.textColor;
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  switch (routeType) {
    case "DEFAULTFALLBACK":
      return React.createElement(ACLButton.make, {
        text: "Manage",
        buttonType: "Secondary",
        buttonSize: "Small",
        onClick: function (param) {
          RescriptReactRouter.push(
            GlobalVars.appendDashboardPath(
              "/" +
                onRedirectBaseUrl +
                "/" +
                RoutingUtils.routingTypeName(routeType),
            ),
          );
          mixpanelEvent(
            "routing_setup_" + RoutingUtils.routingTypeName(routeType),
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
        },
        customButtonStyle:
          "!" +
          borderColor.primaryNormal +
          " bg-white " +
          textColor.primaryNormal,
        access: userPermissionJson.workflowsManage,
      });
    case "NO_ROUTING":
      return null;
    default:
      return React.createElement(ACLButton.make, {
        text: "Setup",
        buttonType: "Secondary",
        buttonSize: "Small",
        onClick: function (param) {
          RescriptReactRouter.push(
            GlobalVars.appendDashboardPath(
              "/" +
                onRedirectBaseUrl +
                "/" +
                RoutingUtils.routingTypeName(routeType),
            ),
          );
          mixpanelEvent(
            "routing_setup_" + RoutingUtils.routingTypeName(routeType),
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
        },
        customButtonStyle:
          " !" +
          borderColor.primaryNormal +
          " bg-white " +
          textColor.primaryNormal,
        access: userPermissionJson.workflowsManage,
      });
  }
}

var ActionButtons = {
  make: ActiveRouting$ActionButtons,
};

function ActiveRouting$ActiveSection(props) {
  var onRedirectBaseUrl = props.onRedirectBaseUrl;
  var activeRoutingId = props.activeRoutingId;
  var activeRouting = props.activeRouting;
  var activeRoutingType = RoutingUtils.routingTypeMapper(
    LogicUtils.getString(
      LogicUtils.getDictFromJsonObject(activeRouting),
      "kind",
      "",
    ),
  );
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var routingName;
  routingName =
    activeRoutingType === "DEFAULTFALLBACK"
      ? ""
      : LogicUtils.capitalizeString(
          LogicUtils.getString(
            LogicUtils.getDictFromJsonObject(activeRouting),
            "name",
            "",
          ),
        ) + " - ";
  var profileId = LogicUtils.getString(
    LogicUtils.getDictFromJsonObject(activeRouting),
    "profile_id",
    "",
  );
  return React.createElement(
    "div",
    {
      className:
        "relative flex flex-col flex-wrap bg-white border rounded w-full px-6 py-10 gap-12",
    },
    React.createElement(
      "div",
      undefined,
      React.createElement(
        "div",
        {
          className:
            "absolute top-0 left-0 bg-green-700 text-white py-2 px-4 rounded-br font-semibold",
        },
        "ACTIVE",
      ),
      React.createElement(
        "div",
        {
          className: "flex flex-col my-6 pt-4 gap-2",
        },
        React.createElement(
          "div",
          {
            className: " flex gap-4  align-center",
          },
          React.createElement(
            "p",
            {
              className: "text-lightgray_background font-semibold text-base",
            },
            routingName + RoutingUtils.getContent(activeRoutingType).heading,
          ),
          React.createElement(Icon.make, {
            name: "primary-tag",
            size: 25,
            className: "w-20",
          }),
        ),
        React.createElement(RenderIf.make, {
          condition: LogicUtils.isNonEmptyString(profileId),
          children: React.createElement(
            "div",
            {
              className: "flex gap-2",
            },
            React.createElement(
              HelperComponents.BusinessProfileComponent.make,
              {
                profile_id: profileId,
                className: "text-lightgray_background  opacity-50 text-sm",
              },
            ),
            React.createElement(
              "p",
              {
                className: "text-lightgray_background  opacity-50 text-sm",
              },
              ": " + profileId,
            ),
          ),
        }),
      ),
      React.createElement(
        "div",
        {
          className:
            "text-lightgray_background font-medium text-base opacity-50 text-fs-14 ",
        },
        RoutingUtils.getContent(activeRoutingType).heading +
          " : " +
          RoutingUtils.getContent(activeRoutingType).subHeading,
      ),
      React.createElement(
        "div",
        {
          className: "flex gap-5 pt-6 w-1/4",
        },
        React.createElement(ACLButton.make, {
          text: "Manage",
          buttonType: "Secondary",
          buttonSize: "Small",
          onClick: function (param) {
            if (activeRoutingType === "DEFAULTFALLBACK") {
              return RescriptReactRouter.push(
                GlobalVars.appendDashboardPath(
                  "/" +
                    onRedirectBaseUrl +
                    "/" +
                    RoutingUtils.routingTypeName(activeRoutingType),
                ),
              );
            } else {
              return RescriptReactRouter.push(
                GlobalVars.appendDashboardPath(
                  "/" +
                    onRedirectBaseUrl +
                    "/" +
                    RoutingUtils.routingTypeName(activeRoutingType) +
                    "?id=" +
                    activeRoutingId +
                    "&isActive=true",
                ),
              );
            }
          },
          customButtonStyle: "w-2/3",
          access: userPermissionJson.workflowsManage,
        }),
      ),
    ),
  );
}

var ActiveSection = {
  make: ActiveRouting$ActiveSection,
};

function ActiveRouting$LevelWiseRoutingSection(props) {
  var onRedirectBaseUrl = props.onRedirectBaseUrl;
  return React.createElement(
    "div",
    {
      className: "flex flex-col flex-wrap  rounded w-full py-6 gap-5",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-wrap justify-evenly gap-9 items-stretch",
      },
      props.types.map(function (value, index) {
        return React.createElement(
          "div",
          {
            key: index.toString(),
            className:
              "flex flex-1 flex-col  bg-white border rounded px-5 py-5 gap-8",
          },
          React.createElement(
            "div",
            {
              className: "flex flex-1 flex-col gap-7",
            },
            React.createElement(
              "div",
              {
                className:
                  "flex w-full items-center flex-wrap justify-between ",
              },
              React.createElement(ActiveRouting$TopLeftIcons, {
                routeType: value,
              }),
              React.createElement(ActiveRouting$TopRightIcons, {
                routeType: value,
              }),
            ),
            React.createElement(
              "div",
              {
                className: "flex flex-1 flex-col gap-3",
              },
              React.createElement(
                "p",
                {
                  className:
                    "text-base font-semibold text-lightgray_background",
                },
                RoutingUtils.getContent(value).heading,
              ),
              React.createElement(
                "p",
                {
                  className:
                    "text-fs-14 font-medium opacity-50 text-lightgray_background",
                },
                RoutingUtils.getContent(value).subHeading,
              ),
            ),
          ),
          React.createElement(ActiveRouting$ActionButtons, {
            routeType: value,
            onRedirectBaseUrl: onRedirectBaseUrl,
          }),
        );
      }),
    ),
  );
}

var LevelWiseRoutingSection = {
  make: ActiveRouting$LevelWiseRoutingSection,
};

function ActiveRouting(props) {
  return React.createElement(
    "div",
    {
      className: "mt-4 flex flex-col gap-6",
    },
    props.routingType.map(function (ele, i) {
      var id = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(ele),
        "id",
        "",
      );
      return JsxPPXReactSupportU.createElementWithKey(
        i.toString(),
        ActiveRouting$ActiveSection,
        {
          activeRouting: ele,
          activeRoutingId: id,
          onRedirectBaseUrl: "routing",
        },
      );
    }),
  );
}

var make = ActiveRouting;

export {
  TopLeftIcons,
  TopRightIcons,
  ActionButtons,
  ActiveSection,
  LevelWiseRoutingSection,
  make,
};
/* Icon Not a pure module */
