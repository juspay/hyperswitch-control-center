// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Recoil from "recoil";
import * as $$History from "./History.bs.js";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as RoutingUtils from "./RoutingUtils.bs.js";
import * as DefaultRouting from "./DefaultRouting.bs.js";
import * as AdvancedRouting from "../RoutingRevamp/AdvancedRouting.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as PriorityRouting from "./PriorityRouting.bs.js";
import * as VolumeSplitRouting from "./VolumeSplitRouting.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function RoutingConfigure(props) {
  var routingType = props.routingType;
  var baseUrlForRedirection = "/routing";
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useState(function () {
    return "NO_ROUTING";
  });
  var setCurrentRouting = match[1];
  var currentRouting = match[0];
  var match$1 = React.useState(function () {});
  var setId = match$1[1];
  var id = match$1[0];
  var match$2 = React.useState(function () {
    return false;
  });
  var setIsActive = match$2[1];
  var isActive = match$2[0];
  var connectorList = RoutingUtils.filterConnectorList(
    Recoil.useRecoilValue(HyperswitchAtom.connectorListAtom),
    "PaymentConnector",
  );
  React.useEffect(
    function () {
      var searchParams = url.search;
      var filtersFromUrl =
        LogicUtils.getDictFromUrlSearchParams(searchParams)["id"];
      setId(function (param) {
        return filtersFromUrl;
      });
      var match = routingType.toLowerCase();
      switch (match) {
        case "default":
          setCurrentRouting(function (param) {
            return "DEFAULTFALLBACK";
          });
          break;
        case "rank":
          setCurrentRouting(function (param) {
            return "PRIORITY";
          });
          break;
        case "rule":
          setCurrentRouting(function (param) {
            return "ADVANCED";
          });
          break;
        case "volume":
          setCurrentRouting(function (param) {
            return "VOLUME_SPLIT";
          });
          break;
        default:
          setCurrentRouting(function (param) {
            return "NO_ROUTING";
          });
      }
      var isActive = LogicUtils.getBoolFromString(
        Core__Option.getOr(
          LogicUtils.getDictFromUrlSearchParams(searchParams)["isActive"],
          "",
        ),
        false,
      );
      setIsActive(function (param) {
        return isActive;
      });
    },
    [url.search],
  );
  var tmp;
  switch (currentRouting) {
    case "PRIORITY":
      tmp = React.createElement(PriorityRouting.make, {
        routingRuleId: id,
        isActive: isActive,
        connectorList: connectorList,
        baseUrlForRedirection: baseUrlForRedirection,
      });
      break;
    case "VOLUME_SPLIT":
      tmp = React.createElement(VolumeSplitRouting.make, {
        routingRuleId: id,
        isActive: isActive,
        connectorList: connectorList,
        urlEntityName: "ROUTING",
        baseUrlForRedirection: baseUrlForRedirection,
      });
      break;
    case "ADVANCED":
      tmp = React.createElement(AdvancedRouting.make, {
        routingRuleId: id,
        isActive: isActive,
        setCurrentRouting: setCurrentRouting,
        connectorList: connectorList,
        urlEntityName: "ROUTING",
        baseUrlForRedirection: baseUrlForRedirection,
      });
      break;
    case "DEFAULTFALLBACK":
      tmp = React.createElement(DefaultRouting.make, {
        urlEntityName: "DEFAULT_FALLBACK",
        baseUrlForRedirection: baseUrlForRedirection,
      });
      break;
    case "NO_ROUTING":
      tmp = React.createElement(React.Fragment, {});
      break;
  }
  return React.createElement(
    "div",
    {
      className: "flex flex-col overflow-auto gap-2",
    },
    React.createElement(PageUtils.PageHeading.make, {
      title: "Smart routing configuration",
    }),
    React.createElement($$History.BreadCrumbWrapper.make, {
      children: tmp,
      pageTitle: RoutingUtils.getContent(currentRouting).heading,
      baseLink: "/routing",
    }),
  );
}

var make = RoutingConfigure;

export { make };
/* react Not a pure module */
