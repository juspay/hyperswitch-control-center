// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as React from "react";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ThemeProvider from "../../../context/ThemeProvider.bs.js";
import * as SurchargeUtils from "../../Surcharge/SurchargeUtils.bs.js";
import * as AddDataAttributes from "../../../components/AddDataAttributes.bs.js";
import * as AdvancedRoutingUtils from "../AdvancedRoutingUtils.bs.js";
import * as MakeRuleFieldComponent from "../../../components/MakeRuleFieldComponent.bs.js";

function RulePreviewer$GatewayView(props) {
  var match = React.useContext(ThemeProvider.themeContext);
  var textColor = match.globalUIConfig.font.textColor;
  return React.createElement(
    "div",
    {
      className: "flex flex-wrap gap-4 items-center",
    },
    props.gateways.map(function (ruleGateway, index) {
      var match;
      if (ruleGateway.TAG === "VolumeObject") {
        var obj = ruleGateway._0;
        match = [obj.connector.connector, obj.split];
      } else {
        match = [ruleGateway._0.connector, undefined];
      }
      var percent = match[1];
      return React.createElement(
        "div",
        {
          key: index.toString(),
          className:
            "my-2 h-6 md:h-8 flex items-center rounded-md border border-jp-gray-500 dark:border-jp-gray-960 font-medium " +
            textColor.primaryNormal +
            " hover:" +
            textColor.primaryNormal +
            " bg-gradient-to-b from-jp-gray-250 to-jp-gray-200 dark:from-jp-gray-950 dark:to-jp-gray-950 focus:outline-none px-2 gap-1",
        },
        match[0],
        React.createElement(RenderIf.make, {
          condition: Core__Option.isSome(percent),
          children: React.createElement(
            "span",
            {
              className: "text-jp-gray-700 dark:text-jp-gray-600 ml-1",
            },
            Core__Option.getOr(percent, 0).toString() + "%",
          ),
        }),
      );
    }),
  );
}

var GatewayView = {
  make: RulePreviewer$GatewayView,
};

function RulePreviewer$ThreedsTypeView(props) {
  var match = React.useContext(ThemeProvider.themeContext);
  var textColor = match.globalUIConfig.font.textColor;
  return React.createElement(
    "div",
    {
      className:
        "my-2 h-6 md:h-8 flex items-center rounded-md border border-jp-gray-500 font-medium " +
        textColor.primaryNormal +
        " hover:" +
        textColor.primaryNormal +
        " bg-gradient-to-b from-jp-gray-250 to-jp-gray-200  focus:outline-none px-2 gap-1",
    },
    LogicUtils.capitalizeString(props.threeDsType),
  );
}

var ThreedsTypeView = {
  make: RulePreviewer$ThreedsTypeView,
};

function RulePreviewer$SurchargeCompressedView(props) {
  var match = React.useContext(ThemeProvider.themeContext);
  var textColor = match.globalUIConfig.font.textColor;
  return React.createElement(
    "div",
    {
      className:
        "my-2 h-6 md:h-8 flex items-center rounded-md border border-jp-gray-500 font-medium  " +
        textColor.primaryNormal +
        " hover: " +
        textColor.primaryNormal +
        " bg-gradient-to-b from-jp-gray-250 to-jp-gray-200  focus:outline-none px-2 gap-1",
    },
    LogicUtils.capitalizeString(
      props.surchargeType +
        " -> " +
        props.surchargeTypeValue.toString() +
        " | Tax on Surcharge -> " +
        Core__Option.getOr(props.surchargePercentage, 0.0).toString(),
    ),
  );
}

var SurchargeCompressedView = {
  make: RulePreviewer$SurchargeCompressedView,
};

function RulePreviewer(props) {
  var __isFromSurcharge = props.isFromSurcharge;
  var __isFrom3ds = props.isFrom3ds;
  var ruleInfo = props.ruleInfo;
  var isFrom3ds = __isFrom3ds !== undefined ? __isFrom3ds : false;
  var isFromSurcharge =
    __isFromSurcharge !== undefined ? __isFromSurcharge : false;
  var match = React.useContext(ThemeProvider.themeContext);
  var textColor = match.globalUIConfig.font.textColor;
  return React.createElement(
    "div",
    {
      className:
        " bg-white border  flex flex-col divide-y  divide-jp-gray-600  border-jp-gray-600 ",
    },
    React.createElement(AddDataAttributes.make, {
      attributes: [["data-component", "rulePreviewer"]],
      children: React.createElement(
        "div",
        undefined,
        React.createElement(
          "div",
          {
            className:
              "flex flex-col divide-y  divide-jp-gray-600  border-t  border-b",
          },
          ruleInfo.rules.map(function (rule, index) {
            var statementsArr = rule.statements;
            var headingText = "Rule " + ((index + 1) | 0).toString();
            var marginStyle =
              index === ((ruleInfo.rules.length - 1) | 0) ? "mt-2" : "my-2";
            var threeDsType = Core__Option.getOr(
              rule.connectorSelection.override_3ds,
              "",
            );
            var surchargeType = SurchargeUtils.getDefaultSurchargeType(
              rule.connectorSelection.surcharge_details,
            );
            var surchargePercent = Core__Option.getOr(
              surchargeType.surcharge.value.percentage,
              0.0,
            );
            var surchargeAmount = Core__Option.getOr(
              surchargeType.surcharge.value.amount,
              0.0,
            );
            var surchargeTypeValue =
              surchargeAmount > 0.0 ? surchargeAmount : surchargePercent;
            return React.createElement(
              "div",
              {
                key: index.toString(),
                className: "flex flex-col items-center w-full px-4 pb-6",
              },
              React.createElement(
                "div",
                {
                  className:
                    "text-jp-gray-700 dark:text-jp-gray-700 text-base font-semibold p-1 px-3 bg-jp-gray-50 dark:bg-jp-gray-950 rounded-full border border-jp-gray-600 dark:border-jp-gray-850",
                  style: {
                    marginTop: "-1.2rem",
                  },
                },
                headingText,
              ),
              React.createElement(
                "div",
                {
                  className:
                    "w-full flex flex-wrap items-center " + marginStyle,
                },
                React.createElement(
                  "div",
                  {
                    className: "flex flex-wrap gap-2",
                  },
                  statementsArr.map(function (statement, index) {
                    var comparison = statement.comparison;
                    var typeString = statement.value.type;
                    var logical = Core__Option.getOr(statement.logical, "");
                    var operator =
                      AdvancedRoutingUtils.getOperatorFromComparisonType(
                        comparison,
                        typeString,
                      );
                    var field = statement.lhs;
                    var metadataDict = LogicUtils.getDictFromJsonObject(
                      Core__Option.getOr(statement.metadata, {}),
                    );
                    var arr = Core__JSON.Classify.classify(
                      statement.value.value,
                    );
                    var value;
                    if (typeof arr !== "object") {
                      value = "";
                    } else {
                      switch (arr.TAG) {
                        case "Bool":
                          value = "";
                          break;
                        case "String":
                          value = arr._0;
                          break;
                        case "Number":
                          value = arr._0.toString();
                          break;
                        case "Object":
                          value = LogicUtils.getString(arr._0, "value", "");
                          break;
                        case "Array":
                          value = arr._0.join(", ");
                          break;
                      }
                    }
                    var obj = Core__JSON.Classify.classify(
                      statement.value.value,
                    );
                    var metadataKeyValue;
                    metadataKeyValue =
                      typeof obj !== "object" || obj.TAG !== "Object"
                        ? ""
                        : LogicUtils.getString(obj._0, "key", "");
                    var metadataKey = LogicUtils.getOptionString(
                      metadataDict,
                      "key",
                    );
                    return React.createElement(
                      "div",
                      {
                        key: index.toString(),
                        className: "flex flex-wrap items-center gap-2",
                      },
                      React.createElement(RenderIf.make, {
                        condition: index !== 0,
                        children: React.createElement(
                          MakeRuleFieldComponent.TextView.make,
                          {
                            str: logical,
                            fontColor: textColor.primaryNormal,
                            fontWeight: "font-semibold",
                          },
                        ),
                      }),
                      React.createElement(
                        MakeRuleFieldComponent.TextView.make,
                        {
                          str: field,
                        },
                      ),
                      React.createElement(RenderIf.make, {
                        condition: typeString === "metadata_variant",
                        children: React.createElement(
                          MakeRuleFieldComponent.TextView.make,
                          {
                            str: metadataKeyValue,
                          },
                        ),
                      }),
                      React.createElement(RenderIf.make, {
                        condition: Core__Option.isSome(metadataKey),
                        children: React.createElement(
                          MakeRuleFieldComponent.TextView.make,
                          {
                            str: Core__Option.getOr(metadataKey, ""),
                          },
                        ),
                      }),
                      React.createElement(
                        MakeRuleFieldComponent.TextView.make,
                        {
                          str: operator,
                          fontColor: "text-red-500",
                          fontWeight: "font-semibold",
                        },
                      ),
                      React.createElement(
                        MakeRuleFieldComponent.TextView.make,
                        {
                          str: value,
                        },
                      ),
                    );
                  }),
                ),
                React.createElement(RenderIf.make, {
                  condition: rule.statements.length > 0,
                  children: React.createElement(Icon.make, {
                    name: "arrow-right",
                    size: 14,
                    className: "mx-4 text-jp-gray-700",
                  }),
                }),
                React.createElement(RenderIf.make, {
                  condition: isFrom3ds,
                  children: React.createElement(RulePreviewer$ThreedsTypeView, {
                    threeDsType: threeDsType,
                  }),
                }),
                React.createElement(RenderIf.make, {
                  condition: !isFrom3ds,
                  children: React.createElement(RulePreviewer$GatewayView, {
                    gateways: Core__Option.getOr(
                      rule.connectorSelection.data,
                      [],
                    ),
                  }),
                }),
                React.createElement(RenderIf.make, {
                  condition: isFromSurcharge,
                  children: React.createElement(
                    RulePreviewer$SurchargeCompressedView,
                    {
                      surchargeType: surchargeType.surcharge.type,
                      surchargeTypeValue: surchargeTypeValue,
                      surchargePercentage:
                        surchargeType.tax_on_surcharge.percentage,
                    },
                  ),
                }),
              ),
            );
          }),
        ),
      ),
    }),
  );
}

var make = RulePreviewer;

export { GatewayView, ThreedsTypeView, SurchargeCompressedView, make };
/* Icon Not a pure module */
