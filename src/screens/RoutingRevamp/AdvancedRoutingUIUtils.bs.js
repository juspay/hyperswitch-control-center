// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as SelectBox from "../../components/SelectBox.bs.js";
import * as TextInput from "../../components/form/TextInput.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ButtonGroup from "../../components/ButtonGroup.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as RoutingUtils from "../Routing/RoutingUtils.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as ReactFinalForm from "../../libraries/ReactFinalForm.bs.js";
import * as NumericTextInput from "../../components/form/NumericTextInput.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as AdvancedRoutingUtils from "./AdvancedRoutingUtils.bs.js";
import * as MakeRuleFieldComponent from "../../components/MakeRuleFieldComponent.bs.js";

function AdvancedRoutingUIUtils$LogicalOps(props) {
  var match = React.useContext(ThemeProvider.themeContext);
  var textColor = match.globalUIConfig.font.textColor;
  var logicalOpsInput = ReactFinalForm$1.useField(props.id + ".logical").input;
  React.useEffect(function () {
    if (LogicUtils.getStringFromJson(logicalOpsInput.value, "").length === 0) {
      logicalOpsInput.onChange("AND");
    }
  }, []);
  return React.createElement(ButtonGroup.make, {
    children: ["AND", "OR"].map(function (text, i) {
      var active =
        LogicUtils.getStringFromJson(logicalOpsInput.value, "") === text;
      return JsxPPXReactSupportU.createElementWithKey(
        i.toString(),
        Button.make,
        {
          text: text,
          buttonType: active ? "SecondaryFilled" : "Secondary",
          onClick: function (param) {
            logicalOpsInput.onChange(text);
          },
          textStyle: active ? textColor.primaryNormal : "",
          textWeight: active ? "font-semibold" : "font-medium",
          customButtonStyle: active ? "shadow-inner px-0" : "px-0",
        },
      );
    }),
    wrapperClass: "flex flex-row mr-2 ml-1",
  });
}

var LogicalOps = {
  make: AdvancedRoutingUIUtils$LogicalOps,
};

function AdvancedRoutingUIUtils$OperatorInp(props) {
  var keyType = props.keyType;
  var fieldsArray = props.fieldsArray;
  var defaultInput_input = ReactFinalForm.makeInputRecord("", function (_e) {});
  var defaultInput_meta = ReactFinalForm.makeCustomError(undefined);
  var defaultInput = {
    input: defaultInput_input,
    meta: defaultInput_meta,
  };
  var field = Core__Option.getOr(fieldsArray[0], defaultInput).input;
  var operator = Core__Option.getOr(fieldsArray[1], defaultInput).input;
  var valInp = Core__Option.getOr(fieldsArray[2], defaultInput).input;
  var match = React.useState(function () {
    return [];
  });
  var setOpVals = match[1];
  var input_onBlur = function (_ev) {};
  var input_onChange = function (ev) {
    operator.onChange(ev);
  };
  var input_onFocus = function (_ev) {};
  var input_value = operator.value;
  var input = {
    name: "string",
    onBlur: input_onBlur,
    onChange: input_onChange,
    onFocus: input_onFocus,
    value: input_value,
    checked: true,
  };
  React.useEffect(
    function () {
      var match = AdvancedRoutingUtils.variantTypeMapper(keyType);
      var operatorVals;
      if (typeof match !== "object") {
        switch (match) {
          case "Number":
            operatorVals = ["EQUAL TO", "GREATER THAN", "LESS THAN"];
            break;
          case "Enum_variant":
            operatorVals = ["IS", "CONTAINS", "IS_NOT", "NOT_CONTAINS"];
            break;
          case "Metadata_value":
            operatorVals = ["EQUAL TO"];
            break;
          case "String_value":
            operatorVals = ["EQUAL TO", "NOT EQUAL_TO"];
            break;
        }
      } else {
        operatorVals = [];
      }
      setOpVals(function (param) {
        return operatorVals;
      });
      if (Core__Option.isNone(Core__JSON.Decode.string(operator.value))) {
        operator.onChange(operatorVals[0]);
      }
    },
    [field.value, valInp.value],
  );
  var descriptionDict = Object.fromEntries([
    ["IS", "Includes only results that exactly match the filter value(s)."],
    [
      "CONTAINS",
      "Includes only results with any value for the filter property.",
    ],
    ["IS_NOT", "Includes results that does not match the filter value(s)."],
    [
      "NOT_CONTAINS",
      "Includes results except any value for the filter property.",
    ],
  ]);
  var disableSelect =
    Core__Option.getOr(Core__JSON.Decode.string(field.value), "").length === 0;
  var operatorOptions = match[0].map(function (opVal) {
    var obj = {
      label: opVal,
      value: opVal,
    };
    var description = descriptionDict[opVal];
    if (description === undefined) {
      return obj;
    }
    var newrecord = Caml_obj.obj_dup(obj);
    newrecord.description = description;
    return newrecord;
  });
  var textColorStyle = disableSelect
    ? "text-hyperswitch_red opacity-50"
    : "text-hyperswitch_red";
  return React.createElement(SelectBox.BaseDropdown.make, {
    buttonText: "Select Operator",
    allowMultiSelect: false,
    input: input,
    options: operatorOptions,
    hideMultiSelectButtons: true,
    disableSelect: disableSelect,
    textStyle: "text-body " + textColorStyle,
  });
}

var OperatorInp = {
  make: AdvancedRoutingUIUtils$OperatorInp,
};

function AdvancedRoutingUIUtils$ValueInp(props) {
  var keyType = props.keyType;
  var variantValues = props.variantValues;
  var fieldsArray = props.fieldsArray;
  var valueField = Core__Option.getOr(
    fieldsArray[1],
    ReactFinalForm.fakeFieldRenderProps,
  ).input;
  var opField = Core__Option.getOr(
    fieldsArray[2],
    ReactFinalForm.fakeFieldRenderProps,
  ).input;
  var typeField = Core__Option.getOr(
    fieldsArray[3],
    ReactFinalForm.fakeFieldRenderProps,
  ).input;
  React.useEffect(
    function () {
      var tmp;
      if (
        AdvancedRoutingUtils.variantTypeMapper(keyType) === "Metadata_value"
      ) {
        tmp = "metadata_variant";
      } else if (
        AdvancedRoutingUtils.variantTypeMapper(keyType) === "String_value"
      ) {
        tmp = "str_value";
      } else {
        var match = AdvancedRoutingUtils.operatorMapper(
          LogicUtils.getStringFromJson(opField.value, ""),
        );
        if (typeof match !== "object") {
          switch (match) {
            case "IS":
            case "IS_NOT":
              tmp = "enum_variant";
              break;
            case "CONTAINS":
            case "NOT_CONTAINS":
              tmp = "enum_variant_array";
              break;
            default:
              tmp = "number";
          }
        } else {
          tmp = "number";
        }
      }
      typeField.onChange(tmp);
    },
    [valueField.value],
  );
  var input_onBlur = function (_ev) {};
  var input_onChange = function (ev) {
    valueField.onChange(ev);
  };
  var input_onFocus = function (_ev) {};
  var input_value = valueField.value;
  var input = {
    name: "string",
    onBlur: input_onBlur,
    onChange: input_onChange,
    onFocus: input_onFocus,
    value: input_value,
    checked: true,
  };
  var match = AdvancedRoutingUtils.operatorMapper(
    LogicUtils.getStringFromJson(opField.value, ""),
  );
  var exit = 0;
  if (typeof match === "object") {
    return null;
  }
  switch (match) {
    case "IS":
    case "IS_NOT":
      exit = 2;
      break;
    case "GREATER_THAN":
    case "LESS_THAN":
      exit = 3;
      break;
    case "EQUAL_TO":
      var match$1 = AdvancedRoutingUtils.variantTypeMapper(keyType);
      var exit$1 = 0;
      if (typeof match$1 !== "object") {
        switch (match$1) {
          case "Metadata_value":
          case "String_value":
            exit$1 = 5;
            break;
          default:
            exit$1 = 4;
        }
      } else {
        exit$1 = 4;
      }
      switch (exit$1) {
        case 4:
          return React.createElement(NumericTextInput.make, {
            input: input,
            placeholder: "Enter value",
          });
        case 5:
          return React.createElement(TextInput.make, {
            input: input,
            placeholder: "Enter value",
          });
      }
      break;
    case "CONTAINS":
    case "NOT_CONTAINS":
      exit = 1;
      break;
    case "NOT_EQUAL_TO":
      return React.createElement(TextInput.make, {
        input: input,
        placeholder: "Enter value",
      });
  }
  switch (exit) {
    case 1:
      return React.createElement(SelectBox.BaseDropdown.make, {
        buttonText: "Select Value",
        allowMultiSelect: true,
        input: input,
        options: SelectBox.makeOptions(variantValues),
        hideMultiSelectButtons: true,
        showSelectionAsChips: false,
      });
    case 2:
      var val = LogicUtils.getStringFromJson(valueField.value, "");
      return React.createElement(SelectBox.BaseDropdown.make, {
        buttonText: val.length === 0 ? "Select Value" : val,
        allowMultiSelect: false,
        input: input,
        options: SelectBox.makeOptions(variantValues),
        hideMultiSelectButtons: true,
        fixedDropDownDirection: "TopRight",
      });
    case 3:
      return React.createElement(NumericTextInput.make, {
        input: input,
        placeholder: "Enter value",
      });
  }
}

var ValueInp = {
  make: AdvancedRoutingUIUtils$ValueInp,
};

function AdvancedRoutingUIUtils$MetadataInp(props) {
  var valueField = Core__Option.getOr(
    props.fieldsArray[2],
    ReactFinalForm.fakeFieldRenderProps,
  ).input;
  var textInput_onBlur = function (_ev) {
    var value = valueField.value;
    var val = LogicUtils.getStringFromJson(value, "");
    var valSplit = val.split(",");
    var arrStr = valSplit.map(function (item) {
      return item.trim();
    });
    var finalVal = arrStr.join(",");
    valueField.onChange(finalVal);
  };
  var textInput_onChange = function (ev) {
    var target = ev.target;
    var value = target.value;
    valueField.onChange(value);
  };
  var textInput_onFocus = function (_ev) {};
  var textInput_value = valueField.value;
  var textInput = {
    name: "string",
    onBlur: textInput_onBlur,
    onChange: textInput_onChange,
    onFocus: textInput_onFocus,
    value: textInput_value,
    checked: true,
  };
  return React.createElement(RenderIf.make, {
    condition:
      AdvancedRoutingUtils.variantTypeMapper(props.keyType) ===
      "Metadata_value",
    children: React.createElement(TextInput.make, {
      input: textInput,
      placeholder: "Enter Key",
    }),
  });
}

var MetadataInp = {
  make: AdvancedRoutingUIUtils$MetadataInp,
};

function renderOperatorInp(keyType) {
  return function (fieldsArray) {
    return React.createElement(AdvancedRoutingUIUtils$OperatorInp, {
      fieldsArray: fieldsArray,
      keyType: keyType,
    });
  };
}

function renderValueInp(keyType, variantValues) {
  return function (fieldsArray) {
    return React.createElement(AdvancedRoutingUIUtils$ValueInp, {
      fieldsArray: fieldsArray,
      variantValues: variantValues,
      keyType: keyType,
    });
  };
}

function renderMetaInput(keyType) {
  return function (fieldsArray) {
    return React.createElement(AdvancedRoutingUIUtils$MetadataInp, {
      fieldsArray: fieldsArray,
      keyType: keyType,
    });
  };
}

function operatorInput(id, keyType) {
  return FormRenderer.makeMultiInputFieldInfoOld(
    "",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    renderOperatorInp(keyType),
    [
      FormRenderer.makeInputFieldInfo(
        undefined,
        id + ".lhs",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        id + ".comparison",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        id + ".value.value",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    ],
    undefined,
  );
}

function valueInput(id, variantValues, keyType) {
  var valuePath =
    AdvancedRoutingUtils.variantTypeMapper(keyType) === "Metadata_value"
      ? "value.value.value"
      : "value.value";
  return FormRenderer.makeMultiInputFieldInfoOld(
    "",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    renderValueInp(keyType, variantValues),
    [
      FormRenderer.makeInputFieldInfo(
        undefined,
        id + ".lhs",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        id + "." + valuePath,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        id + ".comparison",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        id + ".value.type",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    ],
    undefined,
  );
}

function metaInput(id, keyType) {
  return FormRenderer.makeMultiInputFieldInfoOld(
    "",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    renderMetaInput(keyType),
    [
      FormRenderer.makeInputFieldInfo(
        undefined,
        id + ".value",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        id + ".operator",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        id + ".value.value.key",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    ],
    undefined,
  );
}

function AdvancedRoutingUIUtils$FieldInp(props) {
  var onChangeMethod = props.onChangeMethod;
  var prefix = props.prefix;
  var methodKeys = props.methodKeys;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var field = ReactFinalForm$1.useField(prefix + ".lhs").input;
  var op = ReactFinalForm$1.useField(prefix + ".comparison").input;
  var val = ReactFinalForm$1.useField(prefix + ".value.value").input;
  var convertedValue = React.useMemo(function () {
    var match = RoutingUtils.urlToVariantMapper(url);
    var keyDescriptionMapper;
    keyDescriptionMapper =
      match === "PayoutRouting"
        ? window.getPayoutDescriptionCategory()
        : window.getDescriptionCategory();
    return LogicUtils.convertMapObjectToDict(keyDescriptionMapper);
  }, []);
  var options = React.useMemo(function () {
    return Core__Array.reduce(
      Object.keys(convertedValue),
      [],
      function (acc, ele) {
        LogicUtils.getArrayFromDict(convertedValue, ele, []).forEach(
          function (value) {
            var dictValue = LogicUtils.getDictFromJsonObject(value);
            var kindValue = LogicUtils.getString(dictValue, "kind", "");
            if (!methodKeys.includes(kindValue)) {
              return;
            }
            var generatedSelectBoxOptionType_optGroup = ele;
            var generatedSelectBoxOptionType_description = LogicUtils.getString(
              dictValue,
              "description",
              "",
            );
            var generatedSelectBoxOptionType = {
              label: kindValue,
              value: kindValue,
              optGroup: generatedSelectBoxOptionType_optGroup,
              description: generatedSelectBoxOptionType_description,
            };
            acc.push(generatedSelectBoxOptionType);
          },
        );
        return acc;
      },
    );
  }, []);
  var input_onBlur = function (_ev) {};
  var input_onChange = function (ev) {
    onChangeMethod(ev);
    field.onChange(ev);
    op.onChange("");
    val.onChange("");
  };
  var input_onFocus = function (_ev) {};
  var input_value = field.value;
  var input = {
    name: "string",
    onBlur: input_onBlur,
    onChange: input_onChange,
    onFocus: input_onFocus,
    value: input_value,
    checked: true,
  };
  return React.createElement(SelectBox.BaseDropdown.make, {
    buttonText: "Select Field",
    allowMultiSelect: false,
    input: input,
    options: options,
    hideMultiSelectButtons: true,
  });
}

var FieldInp = {
  make: AdvancedRoutingUIUtils$FieldInp,
};

function AdvancedRoutingUIUtils$RuleFieldBase(props) {
  var isFromSurcharge = props.isFromSurcharge;
  var isFrom3ds = props.isFrom3ds;
  var wasm = props.wasm;
  var id = props.id;
  var isFirst = props.isFirst;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useState(function () {
    return false;
  });
  var setHover = match[1];
  var match$1 = React.useState(function () {
    return "";
  });
  var setKeyType = match$1[1];
  var keyType = match$1[0];
  var match$2 = React.useState(function () {
    return [];
  });
  var setVariantValues = match$2[1];
  var field = ReactFinalForm$1.useField(id + ".lhs").input;
  var setKeyTypeAndVariants = function (wasm, value) {
    var keyType = AdvancedRoutingUtils.getWasmKeyType(wasm, value);
    var keyVariant = AdvancedRoutingUtils.variantTypeMapper(keyType);
    if (keyVariant !== "Number" || keyVariant !== "Metadata_value") {
      var match = RoutingUtils.urlToVariantMapper(url);
      var variantValues;
      variantValues =
        match === "PayoutRouting"
          ? AdvancedRoutingUtils.getWasmPayoutVariantValues(wasm, value)
          : AdvancedRoutingUtils.getWasmVariantValues(wasm, value);
      setVariantValues(function (param) {
        return variantValues;
      });
    }
    setKeyType(function (param) {
      return keyType;
    });
  };
  var onChangeMethod = function (value) {
    setKeyTypeAndVariants(wasm, value);
  };
  var methodKeys = React.useMemo(function () {
    var value = LogicUtils.getStringFromJson(field.value, "");
    if (LogicUtils.isNonEmptyString(value)) {
      setKeyTypeAndVariants(wasm, value);
    }
    if (isFrom3ds) {
      return window.getThreeDsKeys();
    }
    if (isFromSurcharge) {
      return window.getSurchargeKeys();
    }
    var match = RoutingUtils.urlToVariantMapper(url);
    if (match === "PayoutRouting") {
      return window.getAllPayoutKeys();
    } else {
      return window.getAllKeys();
    }
  }, []);
  return React.createElement(RenderIf.make, {
    condition: methodKeys.length > 0,
    children: props.isExpanded
      ? React.createElement(
          "div",
          {
            className:
              "flex flex-wrap items-center px-1 " +
              (match[0] ? "rounded-md bg-white dark:bg-black shadow" : ""),
          },
          React.createElement(RenderIf.make, {
            condition: !isFirst,
            children: React.createElement(AdvancedRoutingUIUtils$LogicalOps, {
              id: id,
            }),
          }),
          React.createElement(
            "div",
            {
              className: "-mt-5 p-1",
            },
            React.createElement(FormRenderer.FieldWrapper.make, {
              label: "",
              children: React.createElement(AdvancedRoutingUIUtils$FieldInp, {
                methodKeys: methodKeys,
                prefix: id,
                onChangeMethod: onChangeMethod,
              }),
            }),
          ),
          React.createElement(
            "div",
            {
              className: "-mt-5",
            },
            React.createElement(FormRenderer.FieldRenderer.make, {
              field: metaInput(id, keyType),
            }),
          ),
          React.createElement(
            "div",
            {
              className: "-mt-5",
            },
            React.createElement(FormRenderer.FieldRenderer.make, {
              field: operatorInput(id, keyType),
            }),
          ),
          React.createElement(
            "div",
            {
              className: "-mt-5",
            },
            React.createElement(FormRenderer.FieldRenderer.make, {
              field: valueInput(id, match$2[0], keyType),
            }),
          ),
          React.createElement(RenderIf.make, {
            condition: !isFirst,
            children: React.createElement(
              "div",
              {
                className:
                  "flex items-center cursor-pointer rounded-full  border border-jp-gray-500 dark:border-jp-gray-960 bg-red-400 hover:shadow focus:outline-none p-2",
                onClick: props.onClick,
                onMouseEnter: function (param) {
                  setHover(function (param) {
                    return true;
                  });
                },
                onMouseLeave: function (param) {
                  setHover(function (param) {
                    return false;
                  });
                },
              },
              React.createElement(Icon.make, {
                name: "close",
                size: 10,
                className: "text-gray-50 font-semibold",
              }),
            ),
          }),
        )
      : React.createElement(MakeRuleFieldComponent.CompressedView.make, {
          id: id,
          isFirst: isFirst,
        }),
  });
}

var RuleFieldBase = {
  make: AdvancedRoutingUIUtils$RuleFieldBase,
};

function AdvancedRoutingUIUtils$MakeRuleField(props) {
  var isFromSurcharge = props.isFromSurcharge;
  var isFrom3ds = props.isFrom3ds;
  var wasm = props.wasm;
  var isExpanded = props.isExpanded;
  var ruleJsonPath = props.id + ".statements";
  var conditionsInput = ReactFinalForm$1.useField(ruleJsonPath).input;
  var fields = Core__Option.getOr(
    Core__JSON.Decode.array(conditionsInput.value),
    [],
  );
  var onPlusClick = function (param) {
    var toAdd = {};
    conditionsInput.onChange(fields.concat([toAdd]));
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-wrap items-center",
    },
    fields.map(function (param, i) {
      return JsxPPXReactSupportU.createElementWithKey(
        i.toString(),
        AdvancedRoutingUIUtils$RuleFieldBase,
        {
          isFirst: i === 0,
          id: ruleJsonPath + "[" + i.toString() + "]",
          isExpanded: isExpanded,
          onClick: function (param) {
            conditionsInput.onChange(
              fields.filter(function (param, i$1) {
                return i !== i$1;
              }),
            );
          },
          wasm: wasm,
          isFrom3ds: isFrom3ds,
          isFromSurcharge: isFromSurcharge,
        },
      );
    }),
    isExpanded
      ? React.createElement(
          "div",
          {
            className:
              "focus:outline-none p-2 ml-8 mt-2 md:mt-0 flex items-center bg-white dark:bg-jp-gray-darkgray_background \n           rounded-full border border-jp-gray-500 dark:border-jp-gray-960 \n           text-jp-gray-900 dark:text-jp-gray-text_darktheme   \n          cursor-pointer text-opacity-75 dark:text-opacity-50 \n                hover:text-opacity-100 dark:hover:text-opacity-75 hover:shadow",
            onClick: onPlusClick,
          },
          React.createElement(Icon.make, {
            name: "plus",
            size: 14,
          }),
        )
      : React.createElement(Icon.make, {
          name: "arrow-right",
          size: 14,
          className: "ml-4",
        }),
  );
}

var MakeRuleField = {
  make: AdvancedRoutingUIUtils$MakeRuleField,
};

var configurationNameInput = FormRenderer.makeFieldInfo(
  "Configuration Name",
  undefined,
  "name",
  InputFields.textInput(
    undefined,
    undefined,
    true,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter Configuration Name",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var descriptionInput = FormRenderer.makeFieldInfo(
  "Description",
  undefined,
  "description",
  InputFields.multiLineTextInput(
    false,
    3,
    undefined,
    "text-sm",
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  "Add a description for your configuration",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

function AdvancedRoutingUIUtils$ConfigureRuleButton(props) {
  var setShowModal = props.setShowModal;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  return React.createElement(Button.make, {
    buttonState:
      !formState.hasValidationErrors && props.isConfigButtonEnabled
        ? "Normal"
        : "Disabled",
    text: "Configure Rule",
    buttonType: "Primary",
    onClick: function (param) {
      setShowModal(function (param) {
        return true;
      });
    },
    customButtonStyle: "w-1/5",
  });
}

var ConfigureRuleButton = {
  make: AdvancedRoutingUIUtils$ConfigureRuleButton,
};

function AdvancedRoutingUIUtils$SaveAndActivateButton(props) {
  var handleActivateConfiguration = props.handleActivateConfiguration;
  var onSubmit = props.onSubmit;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var handleSaveAndActivate = async function (_ev) {
    try {
      var onSubmitResponse = await onSubmit(formState.values, false);
      var currentActivatedFromJson = LogicUtils.getValFromNullableValue(
        onSubmitResponse,
        null,
      );
      var currentActivatedId = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(currentActivatedFromJson),
        "id",
        "",
      );
      await handleActivateConfiguration(currentActivatedId);
      return;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        Core__Option.getOr(
          e._1.message,
          "Failed to save and activate configuration!",
        );
        return;
      }
      throw e;
    }
  };
  return React.createElement(Button.make, {
    text: "Save and Activate Rule",
    buttonType: "Primary",
    buttonSize: "Small",
    onClick: function (param) {
      handleSaveAndActivate();
    },
    customButtonStyle: "w-1/5 rounded-sm",
  });
}

var SaveAndActivateButton = {
  make: AdvancedRoutingUIUtils$SaveAndActivateButton,
};

export {
  LogicalOps,
  OperatorInp,
  ValueInp,
  MetadataInp,
  renderOperatorInp,
  renderValueInp,
  renderMetaInput,
  operatorInput,
  valueInput,
  metaInput,
  FieldInp,
  RuleFieldBase,
  MakeRuleField,
  configurationNameInput,
  descriptionInput,
  ConfigureRuleButton,
  SaveAndActivateButton,
};
/* configurationNameInput Not a pure module */
