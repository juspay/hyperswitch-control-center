// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as MatchMedia from "../../context/MatchMedia.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as CustomModal from "../Routing/CustomModal.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as NoDataFound from "../../components/NoDataFound.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as RoutingUtils from "../Routing/RoutingUtils.bs.js";
import * as FormValuesSpy from "../../components/form/FormValuesSpy.bs.js";
import * as RulePreviewer from "./Previewers/RulePreviewer.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as AddRuleGateway from "./AddRuleGateway.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as BasicDetailsForm from "./BasicDetailsForm.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as DragDropComponent from "../../components/DragDropComponent.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as ConnectorTableUtils from "../Connectors/ConnectorTableUtils.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as AdvancedRoutingUtils from "./AdvancedRoutingUtils.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";
import * as AdvancedRoutingUIUtils from "./AdvancedRoutingUIUtils.bs.js";

function AdvancedRouting$Add3DSCondition(props) {
  var classStyle =
    "flex justify-center relative py-2 h-fit min-w-min hover:bg-jp-2-light-gray-100 focus:outline-none  rounded-md items-center border-2 border-border_gray border-opacity-50 text-jp-2-light-gray-1200 px-4 transition duration-[250ms] ease-out-[cubic-bezier(0.33, 1, 0.68, 1)] overflow-hidden";
  var options = [
    {
      label: "3DS",
      value: "three_ds",
    },
    {
      label: "No 3DS",
      value: "no_three_ds",
    },
  ];
  if (props.isExpanded) {
    return React.createElement(
      "div",
      {
        className: "flex flex-row ml-2",
      },
      React.createElement(RenderIf.make, {
        condition: !props.isFirst,
        children: React.createElement("div", {
          className:
            "w-8 h-10 border-jp-gray-700 ml-10 border-dashed border-b border-l ",
        }),
      }),
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-6 mt-6 mb-4 pt-0.5",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-wrap gap-4 -mt-2",
          },
          React.createElement(
            "div",
            {
              className: classStyle,
            },
            "Auth type",
          ),
          React.createElement(
            "div",
            {
              className: classStyle,
            },
            "= is Equal to",
          ),
          React.createElement(FormRenderer.FieldRenderer.make, {
            field: FormRenderer.makeFieldInfo(
              "",
              undefined,
              props.id + ".connectorSelection.override_3ds",
              InputFields.selectInput(
                options,
                "Select Field",
                true,
                undefined,
                undefined,
                undefined,
                "!-mt-5 " + classStyle + " !rounded-md",
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
              ),
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            ),
          }),
        ),
      ),
    );
  } else {
    return React.createElement(RulePreviewer.ThreedsTypeView.make, {
      threeDsType: props.threeDsType,
    });
  }
}

var Add3DSCondition = {
  make: AdvancedRouting$Add3DSCondition,
};

var classStyle =
  "flex justify-center relative py-2 h-fit min-w-min hover:bg-jp-2-light-gray-100 focus:outline-none  rounded-md items-center border-2 border-border_gray border-opacity-50 text-jp-2-light-gray-1200 px-4 transition duration-[250ms] ease-out-[cubic-bezier(0.33, 1, 0.68, 1)] overflow-hidden";

var options = [
  {
    label: "Rate",
    value: "rate",
  },
  {
    label: "Fixed",
    value: "fixed",
  },
];

function AdvancedRouting$AddSurchargeCondition(props) {
  var id = props.id;
  var match = React.useState(function () {
    return "";
  });
  var setSurchargeValueType = match[1];
  var surchargeTypeInput = ReactFinalForm.useField(
    id + ".connectorSelection.surcharge_details.surcharge.type",
  ).input;
  React.useEffect(
    function () {
      var match = LogicUtils.getStringFromJson(surchargeTypeInput.value, "");
      var valueType;
      switch (match) {
        case "fixed":
          valueType = "amount";
          break;
        default:
          valueType = "percentage";
      }
      setSurchargeValueType(function (param) {
        return valueType;
      });
    },
    [surchargeTypeInput.value],
  );
  if (props.isExpanded) {
    return React.createElement(
      "div",
      {
        className: "flex flex-row ml-2",
      },
      React.createElement(RenderIf.make, {
        condition: !props.isFirst,
        children: React.createElement("div", {
          className:
            "w-8 h-10 border-jp-gray-700 ml-10 border-dashed border-b border-l ",
        }),
      }),
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-6 mt-6 mb-4 pt-0.5",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-wrap gap-4",
          },
          React.createElement(
            "div",
            {
              className: classStyle,
            },
            "Surcharge is",
          ),
          React.createElement(FormRenderer.FieldRenderer.make, {
            field: FormRenderer.makeFieldInfo(
              "",
              undefined,
              id + ".connectorSelection.surcharge_details.surcharge.type",
              InputFields.selectInput(
                options,
                "Select Surcharge Type",
                true,
                undefined,
                undefined,
                undefined,
                "!-mt-5 " + classStyle + " !rounded-md",
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
              ),
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            ),
          }),
          React.createElement(FormRenderer.FieldRenderer.make, {
            field: FormRenderer.makeFieldInfo(
              "",
              undefined,
              id +
                ".connectorSelection.surcharge_details.surcharge.value." +
                match[0],
              InputFields.numericTextInput(
                undefined,
                "!-mt-5",
                undefined,
                2,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
              ),
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            ),
          }),
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-wrap gap-4",
          },
          React.createElement(
            "div",
            {
              className: classStyle,
            },
            "Tax on Surcharge",
          ),
          React.createElement(FormRenderer.FieldRenderer.make, {
            field: FormRenderer.makeFieldInfo(
              "",
              undefined,
              id +
                ".connectorSelection.surcharge_details.tax_on_surcharge.percentage",
              InputFields.numericTextInput(
                undefined,
                "!-mt-5",
                undefined,
                2,
                undefined,
                undefined,
                undefined,
                Caml_option.some(
                  React.createElement(Icon.make, {
                    name: "percent",
                    size: 16,
                  }),
                ),
                undefined,
                "-ml-7 -mt-5",
                undefined,
                undefined,
              ),
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            ),
          }),
        ),
      ),
    );
  } else {
    return React.createElement(RulePreviewer.SurchargeCompressedView.make, {
      surchargeType: props.surchargeType,
      surchargeTypeValue: props.surchargeTypeValue,
      surchargePercentage: props.surchargePercentage,
    });
  }
}

var AddSurchargeCondition = {
  classStyle: classStyle,
  options: options,
  make: AdvancedRouting$AddSurchargeCondition,
};

function AdvancedRouting$Wrapper(props) {
  var __isFromSurcharge = props.isFromSurcharge;
  var __isFrom3ds = props.isFrom3ds;
  var __isDragging = props.isDragging;
  var __notFirstRule = props.notFirstRule;
  var __isFirst = props.isFirst;
  var onClickCopy = props.onClickCopy;
  var heading = props.heading;
  var id = props.id;
  var isFirst = __isFirst !== undefined ? __isFirst : false;
  var notFirstRule = __notFirstRule !== undefined ? __notFirstRule : true;
  var isDragging = __isDragging !== undefined ? __isDragging : false;
  var isFrom3ds = __isFrom3ds !== undefined ? __isFrom3ds : false;
  var isFromSurcharge =
    __isFromSurcharge !== undefined ? __isFromSurcharge : false;
  var match = React.useContext(ThemeProvider.themeContext);
  var borderColor = match.globalUIConfig.border.borderColor;
  var showToast = ToastState.useShowToast();
  var isMobileView = MatchMedia.useMobileChecker();
  var match$1 = React.useState(function () {
    return true;
  });
  var setIsExpanded = match$1[1];
  var isExpanded = match$1[0];
  var match$2 = React.useState(function () {
    return false;
  });
  var setAddBtnHover = match$2[1];
  var addBtnHover = match$2[0];
  var match$3 = React.useState(function () {
    return false;
  });
  var setDragBtnHover = match$3[1];
  var dragBtnHover = match$3[0];
  var match$4 = React.useState(function () {
    return false;
  });
  var setCopyBtnHover = match$4[1];
  var copyBtnHover = match$4[0];
  var match$5 = React.useState(function () {
    return false;
  });
  var setDeleteBtnHover = match$5[1];
  var deleteBtnHover = match$5[0];
  var gateWaysInput = ReactFinalForm.useField(
    id + ".connectorSelection.data",
  ).input;
  var name = ReactFinalForm.useField(id + ".name").input;
  var conditionsInput = ReactFinalForm.useField(id + ".statements").input;
  var threeDsType = LogicUtils.getStringFromJson(
    ReactFinalForm.useField(id + ".connectorSelection.override_3ds").input
      .value,
    "",
  );
  var surchargeType = LogicUtils.getStringFromJson(
    ReactFinalForm.useField(
      id + ".connectorSelection.surcharge_details.surcharge.type",
    ).input.value,
    "",
  );
  var surchargePercentage = LogicUtils.getOptionFloatFromJson(
    ReactFinalForm.useField(
      id + ".connectorSelection.surcharge_details.tax_on_surcharge.percentage",
    ).input.value,
  );
  var surchargeValue = LogicUtils.getDictFromJsonObject(
    ReactFinalForm.useField(
      id + ".connectorSelection.surcharge_details.surcharge.value",
    ).input.value,
  );
  var surchargePercent = LogicUtils.getFloat(surchargeValue, "percentage", 0.0);
  var surchargeAmount = LogicUtils.getFloat(surchargeValue, "amount", 0.0);
  var surchargeTypeValue =
    surchargeAmount > 0.0 ? surchargeAmount : surchargePercent;
  var areValidConditions = LogicUtils.getArrayFromJson(
    conditionsInput.value,
    [],
  ).every(function (ele) {
    return AdvancedRoutingUtils.isStatementMandatoryFieldsPresent(
      AdvancedRoutingUtils.statementTypeMapper(
        LogicUtils.getDictFromJsonObject(ele),
      ),
    );
  });
  var handleClickExpand = function (param) {
    if (isFrom3ds) {
      if (threeDsType.length > 0) {
        return setIsExpanded(function (p) {
          return !p;
        });
      } else {
        return showToast(
          "Auth type not selected",
          "ToastWarning",
          undefined,
          true,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      }
    }
    if (isFromSurcharge) {
      if (surchargeTypeValue > 0.0) {
        return setIsExpanded(function (p) {
          return !p;
        });
      } else {
        return showToast(
          "Invalid condition",
          "ToastWarning",
          undefined,
          true,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      }
    }
    var gatewayArrPresent =
      LogicUtils.getArrayFromJson(gateWaysInput.value, []).length > 0;
    if (gatewayArrPresent && areValidConditions) {
      return setIsExpanded(function (p) {
        return !p;
      });
    } else if (gatewayArrPresent) {
      return showToast(
        "Invalid Conditions",
        "ToastWarning",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } else {
      return showToast(
        "No Gateway Selected",
        "ToastWarning",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
  };
  React.useEffect(function () {
    name.onChange(LogicUtils.titleToSnake(heading.toLowerCase()));
    var gatewayArrPresent =
      LogicUtils.getArrayFromJson(gateWaysInput.value, []).length > 0;
    if (gatewayArrPresent && areValidConditions) {
      setIsExpanded(function (p) {
        return !p;
      });
    }
  }, []);
  var border = isDragging ? "border-dashed" : "border-solid";
  var flex = isExpanded ? "flex-col" : "flex-wrap items-center gap-4";
  var actions = React.createElement(
    "div",
    {
      className:
        "flex flex-row gap-3 md:gap-10 items-center justify-end\n        " +
        (isMobileView ? "" : "w-1/3 mr-6"),
    },
    React.createElement(RenderIf.make, {
      condition: notFirstRule,
      children: React.createElement(
        "div",
        {
          className:
            "flex flex-row gap-2 items-center justify-around p-2 " +
            (dragBtnHover ? "py-1" : "") +
            " bg-gray-100 dark:bg-jp-gray-970 rounded-full border border-jp-gray-600 cursor-pointer",
          onMouseEnter: function (param) {
            setDragBtnHover(function (param) {
              return !isMobileView;
            });
          },
          onMouseLeave: function (param) {
            setDragBtnHover(function (param) {
              return false;
            });
          },
        },
        React.createElement(Icon.make, {
          name: "grip-vertical",
          size: 14,
          className: "text-jp-gray-700",
        }),
        React.createElement(RenderIf.make, {
          condition: dragBtnHover,
          children: React.createElement(
            "div",
            {
              className: "text-sm ",
            },
            "Drag Rule",
          ),
        }),
      ),
    }),
    React.createElement(
      "div",
      {
        className:
          "flex flex-row gap-2 items-center justify-around p-2 " +
          (addBtnHover ? "py-1" : "") +
          " bg-gray-100 dark:bg-jp-gray-970 rounded-full border border-jp-gray-600 cursor-pointer",
        onClick: props.onClickAdd,
        onMouseEnter: function (param) {
          setAddBtnHover(function (param) {
            return !isMobileView;
          });
        },
        onMouseLeave: function (param) {
          setAddBtnHover(function (param) {
            return false;
          });
        },
      },
      React.createElement(Icon.make, {
        name: "plus",
        size: 12,
        className: "text-jp-gray-700",
      }),
      React.createElement(RenderIf.make, {
        condition: addBtnHover,
        children: React.createElement(
          "div",
          {
            className: "text-sm ",
          },
          "Add New Rule",
        ),
      }),
    ),
    onClickCopy !== undefined
      ? React.createElement(
          "div",
          {
            className:
              "flex flex-row gap-2 items-center justify-around p-2 " +
              (copyBtnHover ? "py-1" : "") +
              " bg-gray-100 dark:bg-jp-gray-970 rounded-full border border-jp-gray-600 cursor-pointer",
            onClick: onClickCopy,
            onMouseEnter: function (param) {
              setCopyBtnHover(function (param) {
                return !isMobileView;
              });
            },
            onMouseLeave: function (param) {
              setCopyBtnHover(function (param) {
                return false;
              });
            },
          },
          React.createElement(Icon.make, {
            name: "copy",
            size: 12,
            className: "text-jp-gray-700",
          }),
          React.createElement(RenderIf.make, {
            condition: copyBtnHover,
            children: React.createElement(
              "div",
              {
                className: "text-sm ",
              },
              "Copy Rule",
            ),
          }),
        )
      : null,
    React.createElement(RenderIf.make, {
      condition: notFirstRule,
      children: React.createElement(
        "div",
        {
          className:
            "flex flex-row gap-2 items-center justify-around p-2 " +
            (deleteBtnHover ? "py-1" : "") +
            " bg-gray-100 dark:bg-jp-gray-970 rounded-full border border-jp-gray-600 cursor-pointer",
          onClick: props.onClickRemove,
          onMouseEnter: function (param) {
            setDeleteBtnHover(function (param) {
              return !isMobileView;
            });
          },
          onMouseLeave: function (param) {
            setDeleteBtnHover(function (param) {
              return false;
            });
          },
        },
        React.createElement(Icon.make, {
          name: "trash",
          size: 12,
          className: "text-jp-gray-700",
        }),
        React.createElement(RenderIf.make, {
          condition: deleteBtnHover,
          children: React.createElement(
            "div",
            {
              className: "text-sm ",
            },
            "Delete Rule",
          ),
        }),
      ),
    }),
  );
  return React.createElement(
    "div",
    {
      className: "flex flex-col",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-row tems-center justify-between z-10 -mt-6 mx-2",
      },
      React.createElement(RenderIf.make, {
        condition: !isMobileView,
        children: React.createElement("div", {
          className: "hidden lg:flex w-1/3",
        }),
      }),
      React.createElement(
        "div",
        {
          className:
            "cursor-pointer flex flex-row gap-2 items-center justify-between p-2 bg-blue-100 dark:bg-jp-gray-970 rounded-full border " +
            borderColor.primaryNormal +
            " dark:" +
            borderColor.primaryNormal,
          onClick: handleClickExpand,
        },
        React.createElement(
          "div",
          {
            className: "font-semibold pl-2 text-sm md:text-base",
          },
          heading,
        ),
        React.createElement(Icon.make, {
          name: isExpanded ? "angle-up" : "angle-down",
          size: isMobileView ? 14 : 16,
        }),
      ),
      actions,
    ),
    React.createElement(
      "div",
      {
        className:
          "flex \n        " +
          flex +
          " \n            p-4 py-6 bg-gray-50 dark:bg-jp-gray-lightgray_background rounded-md border \n            " +
          border +
          " \n            " +
          borderColor.primaryNormal,
        style: {
          marginTop: "-17px",
        },
      },
      React.createElement(RenderIf.make, {
        condition: !isFirst,
        children: React.createElement(
          AdvancedRoutingUIUtils.MakeRuleField.make,
          {
            id: id,
            isExpanded: isExpanded,
            wasm: props.wasm,
            isFrom3ds: isFrom3ds,
            isFromSurcharge: isFromSurcharge,
          },
        ),
      }),
      React.createElement(RenderIf.make, {
        condition: !isFrom3ds && !isFromSurcharge,
        children: React.createElement(AddRuleGateway.make, {
          id: id,
          gatewayOptions: props.gatewayOptions,
          isFirst: isFirst,
          isExpanded: isExpanded,
        }),
      }),
      React.createElement(RenderIf.make, {
        condition: isFrom3ds,
        children: React.createElement(AdvancedRouting$Add3DSCondition, {
          isFirst: isFirst,
          id: id,
          isExpanded: isExpanded,
          threeDsType: threeDsType,
        }),
      }),
      React.createElement(RenderIf.make, {
        condition: isFromSurcharge,
        children: React.createElement(AdvancedRouting$AddSurchargeCondition, {
          isFirst: isFirst,
          id: id,
          isExpanded: isExpanded,
          surchargeType: surchargeType,
          surchargeTypeValue: surchargeTypeValue,
          surchargePercentage: surchargePercentage,
        }),
      }),
    ),
  );
}

var Wrapper = {
  make: AdvancedRouting$Wrapper,
};

function AdvancedRouting$RuleBasedUI(props) {
  var baseUrlForRedirection = props.baseUrlForRedirection;
  var setCurrentRouting = props.setCurrentRouting;
  var initialRule = props.initialRule;
  var wasm = props.wasm;
  var gatewayOptions = props.gatewayOptions;
  var match = React.useContext(ThemeProvider.themeContext);
  var rulesJsonPath = "algorithm.data.rules";
  var ruleInput = ReactFinalForm.useField(rulesJsonPath).input;
  var match$1 = React.useState(function () {
    return LogicUtils.getArrayFromJson(ruleInput.value, []);
  });
  var setRules = match$1[1];
  var rules = match$1[0];
  React.useEffect(
    function () {
      ruleInput.onChange(rules);
    },
    [rules],
  );
  var addRule = function (index, copy) {
    var existingRules = LogicUtils.getArrayFromJson(ruleInput.value, []);
    var newRule = copy
      ? Core__Option.getOr(
          existingRules[index],
          AdvancedRoutingUtils.defaultRule,
        )
      : AdvancedRoutingUtils.defaultRule;
    var newRules = existingRules.concat([newRule]);
    ruleInput.onChange(newRules);
  };
  var tmp;
  switch (props.pageState) {
    case "Preview":
      tmp =
        initialRule !== undefined
          ? React.createElement(RulePreviewer.make, {
              ruleInfo: initialRule,
            })
          : null;
      break;
    case "Create":
      var notFirstRule =
        LogicUtils.getArrayFromJson(ruleInput.value, []).length > 1;
      var rule = Core__Option.getOr(
        Core__JSON.Decode.array(ruleInput.value),
        [],
      );
      var keyExtractor = function (index, _rule, isDragging) {
        var id = rulesJsonPath + "[" + index.toString() + "]";
        return JsxPPXReactSupportU.createElementWithKey(
          index.toString(),
          AdvancedRouting$Wrapper,
          {
            id: id,
            heading: "Rule " + ((index + 1) | 0).toString(),
            onClickAdd: function (param) {
              addRule(index, false);
            },
            onClickCopy: function (param) {
              addRule(index, true);
            },
            onClickRemove: function (param) {
              var existingRules = LogicUtils.getArrayFromJson(
                ruleInput.value,
                [],
              );
              var newRules = existingRules.filter(function (param, i) {
                return i !== index;
              });
              ruleInput.onChange(newRules);
            },
            gatewayOptions: gatewayOptions,
            notFirstRule: notFirstRule,
            isDragging: isDragging,
            wasm: wasm,
          },
        );
      };
      tmp = React.createElement(React.Fragment, {
        children: Caml_option.some(
          notFirstRule
            ? React.createElement(DragDropComponent.make, {
                isHorizontal: false,
                listItems: rule,
                setListItems: function (v) {
                  setRules(function (param) {
                    return v;
                  });
                },
                keyExtractor: keyExtractor,
              })
            : rule.map(function (rule, index) {
                return keyExtractor(index, rule, false);
              }),
        ),
      });
      break;
    case "Edit":
      tmp = null;
      break;
  }
  return React.createElement(
    "div",
    {
      className: "flex flex-col my-5",
    },
    React.createElement(
      "div",
      {
        className:
          "flex flex-wrap items-center justify-between p-4 py-8 bg-white dark:bg-jp-gray-lightgray_background rounded-md border border-jp-gray-600 dark:border-jp-gray-850 \n        ",
      },
      React.createElement(
        "div",
        undefined,
        React.createElement(
          "div",
          {
            className: "font-bold",
          },
          "Rule Based Configuration",
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-4",
          },
          React.createElement(
            "span",
            {
              className:
                "w-full text-jp-gray-700 dark:text-jp-gray-700 text-justify",
            },
            "Rule-Based Configuration allows for detailed smart routing logic based on multiple dimensions of a payment. You can create any number of conditions using various dimensions and logical operators.",
          ),
          React.createElement(
            "span",
            {
              className: "flex flex-col text-jp-gray-700",
            },
            "For example:",
            React.createElement(
              "p",
              {
                className: "flex gap-2 items-center",
              },
              React.createElement("div", {
                className: "p-1 h-fit rounded-full bg-jp-gray-700 ml-2",
              }),
              "If card_type = credit && amount > 100, route 60% to Stripe and 40% to Adyen.",
            ),
          ),
          React.createElement(
            "span",
            {
              className: "text-jp-gray-700 text-sm",
            },
            React.createElement(
              "i",
              undefined,
              "Ensure to enter the payment amount in the smallest currency unit (e.g., cents for USD, yen for JPY). \n            For instance, pass 100 to charge $1.00 (USD) and ¥100 (JPY) since ¥ is a zero-decimal currency.",
            ),
          ),
        ),
      ),
    ),
    tmp,
    React.createElement(
      "div",
      {
        className: "bg-white rounded-md flex gap-2 p-4 border-2",
      },
      React.createElement(
        "p",
        {
          className: "text-jp-gray-700 dark:text-jp-gray-700",
        },
        "In case the above rule fails, the routing will follow fallback routing. You can configure it",
      ),
      React.createElement(
        "p",
        {
          className:
            match.globalUIConfig.font.textColor.primaryNormal +
            " cursor-pointer",
          onClick: function (param) {
            setCurrentRouting(function (param) {
              return "DEFAULTFALLBACK";
            });
            RescriptReactRouter.replace(
              GlobalVars.appendDashboardPath(
                baseUrlForRedirection + "/default",
              ),
            );
          },
        },
        "here",
      ),
    ),
  );
}

var RuleBasedUI = {
  make: AdvancedRouting$RuleBasedUI,
};

function AdvancedRouting(props) {
  var baseUrlForRedirection = props.baseUrlForRedirection;
  var urlEntityName = props.urlEntityName;
  var connectorList = props.connectorList;
  var isActive = props.isActive;
  var routingRuleId = props.routingRuleId;
  var getURL = APIUtils.useGetURL();
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var defaultBusinessProfile =
    MerchantAccountUtils.getValueFromBusinessProfile(businessProfiles);
  var match = React.useState(function () {
    return defaultBusinessProfile.profile_id;
  });
  var setProfile = match[1];
  var profile = match[0];
  var match$1 = React.useState(function () {
    return AdvancedRoutingUtils.initialValues;
  });
  var setInitialValues = match$1[1];
  var match$2 = React.useState(function () {});
  var setInitialRule = match$2[1];
  var showToast = ToastState.useShowToast();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var match$3 = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match$3[1];
  var match$4 = React.useState(function () {});
  var setWasm = match$4[1];
  var match$5 = React.useState(function () {
    return "EditReplica";
  });
  var setFormState = match$5[1];
  var match$6 = React.useState(function () {
    return [];
  });
  var setConnectors = match$6[1];
  var connectors = match$6[0];
  var match$7 = React.useState(function () {
    return "Create";
  });
  var setPageState = match$7[1];
  var pageState = match$7[0];
  var match$8 = React.useState(function () {
    return false;
  });
  var setShowModal = match$8[1];
  var currentTabName = Recoil.useRecoilValue(
    HyperswitchAtom.currentTabNameRecoilAtom,
  );
  var getConnectorsList = function () {
    setConnectors(function (param) {
      return connectorList.filter(function (connector) {
        return connector.connector_name !== "applepay";
      });
    });
  };
  var activeRoutingDetails = async function () {
    try {
      var routingUrl = getURL(
        urlEntityName,
        "Get",
        Caml_option.some(routingRuleId),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var routingJson = await fetchDetails(routingUrl);
      var schemaValue = LogicUtils.getDictFromJsonObject(routingJson);
      var rulesValue = LogicUtils.getDictfromDict(
        LogicUtils.getObj(schemaValue, "algorithm", {}),
        "data",
      );
      setInitialValues(function (param) {
        return routingJson;
      });
      setInitialRule(function (param) {
        return AdvancedRoutingUtils.ruleInfoTypeMapper(rulesValue);
      });
      setProfile(function (param) {
        return LogicUtils.getString(
          schemaValue,
          "profile_id",
          defaultBusinessProfile.profile_id,
        );
      });
      return setFormState(function (param) {
        return "ViewConfig";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Something went wrong"),
        );
      }
      throw e;
    }
  };
  var getWasm = async function () {
    try {
      var wasmResult = await window.init();
      var wasm = LogicUtils.getObj(
        LogicUtils.getDictFromJsonObject(wasmResult),
        "wasm",
        {},
      );
      return setWasm(function (param) {
        return wasm;
      });
    } catch (exn) {
      return;
    }
  };
  React.useEffect(
    function () {
      var fetchDetails = async function () {
        try {
          setScreenState(function (param) {
            return "Loading";
          });
          await getWasm();
          getConnectorsList();
          if (routingRuleId !== undefined) {
            await activeRoutingDetails();
            setPageState(function (param) {
              return "Preview";
            });
          } else {
            setPageState(function (param) {
              return "Create";
            });
          }
          return setScreenState(function (param) {
            return "Success";
          });
        } catch (raw_e) {
          var e = Caml_js_exceptions.internalToOCamlException(raw_e);
          if (e.RE_EXN_ID === Js_exn.$$Error) {
            var err = Core__Option.getOr(e._1.message, "Something went wrong");
            return setScreenState(function (param) {
              return {
                TAG: "Error",
                _0: err,
              };
            });
          }
          throw e;
        }
      };
      fetchDetails();
    },
    [routingRuleId],
  );
  var validate = function (values) {
    var dict = LogicUtils.getDictFromJsonObject(values);
    var convertedObject = AdvancedRoutingUtils.getRoutingTypesFromJson(values);
    var errors = {};
    AdvancedRoutingUtils.validateNameAndDescription(dict, errors);
    var validateGateways = function (connectorData) {
      if (connectorData.length === 0) {
        return "Need atleast 1 Gateway";
      }
      var isDistibuted = connectorData.every(function (ele) {
        if (ele.TAG === "VolumeObject") {
          return true;
        } else {
          return false;
        }
      });
      if (!isDistibuted) {
        return;
      }
      var distributionPercentageSum = Core__Array.reduce(
        connectorData,
        0,
        function (sum, value) {
          return (
            (sum +
              AdvancedRoutingUtils.getSplitFromConnectorSelectionData(value)) |
            0
          );
        },
      );
      var hasZero = connectorData.some(function (ele) {
        return (
          AdvancedRoutingUtils.getSplitFromConnectorSelectionData(ele) === 0
        );
      });
      var isDistributeChecked = !connectorData.some(function (ele) {
        return (
          AdvancedRoutingUtils.getSplitFromConnectorSelectionData(ele) === 100
        );
      });
      var isNotValid =
        isDistributeChecked &&
        (distributionPercentageSum > 100 ||
          hasZero ||
          distributionPercentageSum !== 100);
      if (isNotValid) {
        return "Distribution Percent not correct";
      }
    };
    var rulesArray = convertedObject.algorithm.data.rules;
    if (rulesArray.length === 0) {
      errors["Rules"] = "Minimum 1 rule needed";
    } else {
      rulesArray.forEach(function (rule, i) {
        var connectorDetails = Core__Option.getOr(
          rule.connectorSelection.data,
          [],
        );
        var error = validateGateways(connectorDetails);
        if (error !== undefined) {
          errors["Rule " + ((i + 1) | 0).toString() + " - Gateway"] = error;
        }
        if (!AdvancedRoutingUtils.validateStatements(rule.statements)) {
          errors["Rule " + ((i + 1) | 0).toString() + " - Condition"] =
            "Invalid";
          return;
        }
      });
    }
    return errors;
  };
  var handleActivateConfiguration = async function (activatingId) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var activateRuleURL = getURL(
        urlEntityName,
        "Post",
        Caml_option.some(activatingId),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        activateRuleURL,
        {},
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      showToast(
        "Successfully Activated !",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      RescriptReactRouter.replace(
        GlobalVars.appendDashboardPath(baseUrlForRedirection + "?"),
      );
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var message = e._1.message;
        if (message !== undefined) {
          if (message.includes("IR_16")) {
            showToast(
              "Algorithm is activated!",
              "ToastSuccess",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            RescriptReactRouter.replace(
              GlobalVars.appendDashboardPath(baseUrlForRedirection),
            );
            return setScreenState(function (param) {
              return "Success";
            });
          } else {
            showToast(
              "Failed to Activate the Configuration!",
              "ToastError",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            return setScreenState(function (param) {
              return {
                TAG: "Error",
                _0: message,
              };
            });
          }
        } else {
          return setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: "Something went wrong",
            };
          });
        }
      }
      throw e;
    }
  };
  var handleDeactivateConfiguration = async function (param) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var deactivateRoutingURL =
        getURL(
          urlEntityName,
          "Post",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ) + "/deactivate";
      var body = Object.fromEntries([["profile_id", profile]]);
      await updateDetails(
        deactivateRoutingURL,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      showToast(
        "Successfully Deactivated !",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      RescriptReactRouter.replace(
        GlobalVars.appendDashboardPath(baseUrlForRedirection + "?"),
      );
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var message = e._1.message;
        if (message !== undefined) {
          showToast(
            "Failed to Deactivate the Configuration!",
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          return setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: message,
            };
          });
        } else {
          return setScreenState(function (param) {
            return {
              TAG: "Error",
              _0: "Something went wrong",
            };
          });
        }
      }
      throw e;
    }
  };
  var onSubmit = async function (values, isSaveRule) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var valuesDict = LogicUtils.getDictFromJsonObject(values);
      var dataDict = LogicUtils.getDictfromDict(
        LogicUtils.getDictfromDict(valuesDict, "algorithm"),
        "data",
      );
      var rulesDict = LogicUtils.getArrayFromDict(dataDict, "rules", []);
      var modifiedRules = AdvancedRoutingUtils.generateRule(rulesDict);
      var defaultSelection = LogicUtils.getStrArrayFromDict(
        LogicUtils.getDictfromDict(dataDict, "defaultSelection"),
        "data",
        [],
      ).map(function (id) {
        return {
          connector: ConnectorTableUtils.getConnectorObjectFromListViaId(
            connectorList,
            id,
          ).connector_name,
          merchant_connector_id: id,
        };
      });
      var payload = {
        name: LogicUtils.getString(valuesDict, "name", ""),
        description: LogicUtils.getString(valuesDict, "description", ""),
        profile_id: LogicUtils.getString(valuesDict, "profile_id", ""),
        algorithm: {
          type: "advanced",
          data: {
            defaultSelection: {
              type: "priority",
              data: defaultSelection,
            },
            metadata: LogicUtils.getJsonObjectFromDict(dataDict, "metadata"),
            rules: modifiedRules,
          },
        },
      };
      var getActivateUrl = getURL(
        urlEntityName,
        "Post",
        Caml_option.some(undefined),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await updateDetails(
        getActivateUrl,
        payload,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      showToast(
        "Successfully Created a new Configuration !",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setScreenState(function (param) {
        return "Success";
      });
      setShowModal(function (param) {
        return false;
      });
      if (isSaveRule) {
        RescriptReactRouter.replace(
          GlobalVars.appendDashboardPath(baseUrlForRedirection),
        );
      }
      return response;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        showToast(
          "Failed to Save the Configuration!",
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
        setShowModal(function (param) {
          return false;
        });
        setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
        return Js_exn.raiseError(err);
      }
      throw e;
    }
  };
  var match$9 = RoutingUtils.urlToVariantMapper(url);
  var connectorType;
  connectorType =
    match$9 === "PayoutRouting" ? "PayoutConnector" : "PaymentConnector";
  var connectorOptions = React.useMemo(
    function () {
      return RoutingUtils.filterConnectorList(connectors, connectorType)
        .filter(function (item) {
          return item.profile_id === profile;
        })
        .map(function (item) {
          return {
            label: item.connector_label,
            value: item.merchant_connector_id,
          };
        });
    },
    [profile, connectors.length],
  );
  var tmp;
  if (connectors.length > 0) {
    var tmp$1;
    switch (pageState) {
      case "Preview":
        tmp$1 = React.createElement(
          "div",
          {
            className: "flex flex-col md:flex-row gap-4 my-5",
          },
          React.createElement(RenderIf.make, {
            condition: !isActive,
            children: React.createElement(Button.make, {
              buttonState: "Normal",
              text: "Activate Configuration",
              buttonType: "Primary",
              onClick: function (param) {
                handleActivateConfiguration(routingRuleId);
              },
              customButtonStyle: "w-1/5 rounded-sm",
            }),
          }),
          React.createElement(RenderIf.make, {
            condition: isActive,
            children: React.createElement(Button.make, {
              buttonState: "Normal",
              text: "Deactivate Configuration",
              buttonType: "Primary",
              onClick: function (param) {
                handleDeactivateConfiguration();
              },
              customButtonStyle: "w-1/5 rounded-sm",
            }),
          }),
        );
        break;
      case "Create":
        tmp$1 = React.createElement(RoutingUtils.ConfigureRuleButton.make, {
          setShowModal: setShowModal,
        });
        break;
      case "Edit":
        tmp$1 = null;
        break;
    }
    tmp = React.createElement(
      Form.make,
      {
        children: null,
        onSubmit: function (values, param) {
          return onSubmit(values, true);
        },
        initialValues: match$1[0],
        validate: validate,
      },
      React.createElement(
        "div",
        {
          className: "w-full flex flex-row  justify-between",
        },
        React.createElement(
          "div",
          {
            className: "w-full",
          },
          React.createElement(BasicDetailsForm.make, {
            currentTabName: currentTabName,
            formState: pageState === "Preview" ? "ViewConfig" : "CreateConfig",
            profile: profile,
            setProfile: setProfile,
          }),
          React.createElement(RenderIf.make, {
            condition: match$5[0] !== "CreateConfig",
            children: React.createElement(
              "div",
              {
                className: "mb-5",
              },
              React.createElement(AdvancedRouting$RuleBasedUI, {
                gatewayOptions: connectorOptions,
                wasm: match$4[0],
                initialRule: match$2[0],
                pageState: pageState,
                setCurrentRouting: props.setCurrentRouting,
                baseUrlForRedirection: baseUrlForRedirection,
              }),
              tmp$1,
            ),
          }),
          React.createElement(CustomModal.RoutingCustomModal.make, {
            showModal: match$8[0],
            setShowModal: setShowModal,
            cancelButton: React.createElement(FormRenderer.SubmitButton.make, {
              text: "Save Rule",
              customSumbitButtonStyle: "w-1/5 rounded-lg",
              buttonType: "Secondary",
              buttonSize: "Small",
              tooltipWidthClass: "w-48",
            }),
            submitButton: React.createElement(
              AdvancedRoutingUIUtils.SaveAndActivateButton.make,
              {
                onSubmit: onSubmit,
                handleActivateConfiguration: handleActivateConfiguration,
              },
            ),
            headingText: "Activate Current Configuration?",
            subHeadingText:
              "Activating the current configuration will override the current active configuration. Alternatively, save this configuration to access / activate it later from the configuration history. Please confirm.",
            leftIcon: "hswitch-warning",
          }),
        ),
      ),
      React.createElement(FormValuesSpy.make, {}),
    );
  } else {
    tmp = React.createElement(NoDataFound.make, {
      message: "Please configure atleast 1 connector",
      renderType: "InfoBox",
    });
  }
  return React.createElement(
    "div",
    {
      className: "my-6",
    },
    React.createElement(PageLoaderWrapper.make, {
      children: Caml_option.some(tmp),
      screenState: match$3[0],
    }),
  );
}

var make = AdvancedRouting;

export { Add3DSCondition, AddSurchargeCondition, Wrapper, RuleBasedUI, make };
/* Form Not a pure module */
