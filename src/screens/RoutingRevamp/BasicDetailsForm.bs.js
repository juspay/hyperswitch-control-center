// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Recoil from "recoil";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as AddDataAttributes from "../../components/AddDataAttributes.bs.js";
import * as AdvancedRoutingUtils from "./AdvancedRoutingUtils.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";

var configurationNameInput = FormRenderer.makeFieldInfo(
  "Configuration Name",
  undefined,
  "name",
  InputFields.textInput(
    undefined,
    undefined,
    true,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter Configuration Name",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var descriptionInput = FormRenderer.makeFieldInfo(
  "Description",
  undefined,
  "description",
  InputFields.multiLineTextInput(
    false,
    3,
    undefined,
    "text-sm",
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  "Add a description for your configuration",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

function BasicDetailsForm$BusinessProfileInp(props) {
  var __routingType = props.routingType;
  var __label = props.label;
  var options = props.options;
  var profile = props.profile;
  var setProfile = props.setProfile;
  var label = __label !== undefined ? __label : "";
  var routingType = __routingType !== undefined ? __routingType : "ADVANCED";
  var selectedConnectorsInput = ReactFinalForm.useField("algorithm.data").input;
  return React.createElement(FormRenderer.FieldRenderer.make, {
    field: FormRenderer.makeFieldInfo(
      label,
      undefined,
      "profile_id",
      function (input, param) {
        return InputFields.selectInput(
          options,
          "",
          true,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        )(
          {
            name: input.name,
            onBlur: input.onBlur,
            onChange: function (ev) {
              setProfile(function (param) {
                return ev;
              });
              input.onChange(ev);
              var defaultAlgorithm =
                routingType === "VOLUME_SPLIT"
                  ? []
                  : AdvancedRoutingUtils.defaultAlgorithmData;
              selectedConnectorsInput.onChange(defaultAlgorithm);
            },
            onFocus: input.onFocus,
            value: profile,
            checked: input.checked,
          },
          "",
        );
      },
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      true,
      undefined,
      undefined,
      undefined,
    ),
  });
}

var BusinessProfileInp = {
  make: BasicDetailsForm$BusinessProfileInp,
};

function BasicDetailsForm(props) {
  var __routingType = props.routingType;
  var profile = props.profile;
  var __isThreeDs = props.isThreeDs;
  var __formState = props.formState;
  var formState = __formState !== undefined ? __formState : "CreateConfig";
  var isThreeDs = __isThreeDs !== undefined ? __isThreeDs : false;
  var routingType = __routingType !== undefined ? __routingType : "ADVANCED";
  var ip1 = ReactFinalForm.useField("name").input;
  var ip2 = ReactFinalForm.useField("description").input;
  var ip3 = ReactFinalForm.useField("profile_id").input;
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var defaultBusinessProfile =
    MerchantAccountUtils.getValueFromBusinessProfile(businessProfiles);
  var form = ReactFinalForm.useForm();
  React.useEffect(function () {
    form.change(
      "profile_id",
      Core__Option.getOr(profile, defaultBusinessProfile.profile_id),
    );
  }, []);
  return React.createElement(
    "div",
    {
      className:
        " mb-6 p-4 bg-white dark:bg-jp-gray-lightgray_background rounded-md border border-jp-gray-600 dark:border-jp-gray-850",
    },
    formState === "ViewConfig"
      ? React.createElement(
          "div",
          undefined,
          React.createElement(
            "div",
            {
              className: "flex flex-row justify-between gap-4",
            },
            React.createElement(
              "div",
              {
                className: "flex flex-row gap-40",
              },
              React.createElement(AddDataAttributes.make, {
                attributes: [["data-field", "Configuration Name"]],
                children: React.createElement(
                  "div",
                  {
                    className:
                      "flex flex-col gap-2 items-start justify-between py-2",
                  },
                  React.createElement(
                    "span",
                    {
                      className: "text-gray-500 dark:text-gray-400",
                    },
                    "Configuration Name",
                  ),
                  React.createElement(AddDataAttributes.make, {
                    attributes: [
                      [
                        "data-text",
                        LogicUtils.getStringFromJson(ip1.value, ""),
                      ],
                    ],
                    children: React.createElement(
                      "span",
                      {
                        className: "font-semibold",
                      },
                      LogicUtils.getStringFromJson(ip1.value, ""),
                    ),
                  }),
                ),
              }),
              React.createElement(AddDataAttributes.make, {
                attributes: [["data-field", "Description"]],
                children: React.createElement(
                  "div",
                  {
                    className:
                      "flex flex-col gap-2 items-start justify-between py-2",
                  },
                  React.createElement(
                    "span",
                    {
                      className: "text-gray-500 dark:text-gray-400",
                    },
                    "Description",
                  ),
                  React.createElement(AddDataAttributes.make, {
                    attributes: [
                      [
                        "data-text",
                        LogicUtils.getStringFromJson(ip2.value, ""),
                      ],
                    ],
                    children: React.createElement(
                      "span",
                      {
                        className: "font-semibold",
                      },
                      LogicUtils.getStringFromJson(ip2.value, ""),
                    ),
                  }),
                ),
              }),
            ),
          ),
          React.createElement(
            "div",
            {
              className: "flex flex-row justify-between gap-4",
            },
            React.createElement(
              "div",
              {
                className: "flex flex-row gap-48",
              },
              React.createElement(AddDataAttributes.make, {
                attributes: [["data-field", "Profile Id"]],
                children: React.createElement(
                  "div",
                  {
                    className:
                      "flex flex-col gap-2 items-start justify-between py-2",
                  },
                  React.createElement(
                    "span",
                    {
                      className: "text-gray-500 dark:text-gray-400",
                    },
                    "Profile",
                  ),
                  React.createElement(AddDataAttributes.make, {
                    attributes: [
                      [
                        "data-text",
                        LogicUtils.getStringFromJson(ip3.value, ""),
                      ],
                    ],
                    children: React.createElement(
                      "span",
                      {
                        className: "font-semibold",
                      },
                      React.createElement(
                        HelperComponents.BusinessProfileComponent.make,
                        {
                          profile_id: Core__Option.getOr(
                            profile,
                            defaultBusinessProfile.profile_id,
                          ),
                        },
                      ),
                    ),
                  }),
                ),
              }),
            ),
          ),
        )
      : React.createElement(React.Fragment, {
          children: Caml_option.some(
            React.createElement(
              "div",
              {
                className: "flex",
              },
              React.createElement(
                "div",
                {
                  className: "w-full md:w-1/2 lg:w-1/3",
                },
                React.createElement(RenderIf.make, {
                  condition: !isThreeDs,
                  children: React.createElement(
                    BasicDetailsForm$BusinessProfileInp,
                    {
                      setProfile: Core__Option.getOr(
                        props.setProfile,
                        function (param) {},
                      ),
                      profile: Core__Option.getOr(
                        profile,
                        defaultBusinessProfile.profile_id,
                      ),
                      options:
                        MerchantAccountUtils.businessProfileNameDropDownOption(
                          businessProfiles,
                        ),
                      label: "Profile",
                      routingType: routingType,
                    },
                  ),
                }),
                React.createElement(FormRenderer.FieldRenderer.make, {
                  field: configurationNameInput,
                }),
                React.createElement(FormRenderer.FieldRenderer.make, {
                  field: descriptionInput,
                }),
              ),
            ),
          ),
        }),
  );
}

var make = BasicDetailsForm;

export { configurationNameInput, descriptionInput, BusinessProfileInp, make };
/* configurationNameInput Not a pure module */
