// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as RefundEntity from "./RefundEntity.bs.js";
import * as FilterSelectBox from "../../components/FilterSelectBox.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";

function getFilterTypeFromString(filterType) {
  switch (filterType) {
    case "connector":
      return "connector";
    case "connector_label":
      return "connector_label";
    case "currency":
      return "currency";
    case "refund_status":
      return "status";
    default:
      return "unknown";
  }
}

async function getRefundsList(
  filterValueJson,
  updateDetails,
  setRefundsData,
  setScreenState,
  offset,
  setTotalCount,
  setOffset,
  getURL,
) {
  setScreenState(function (param) {
    return "Loading";
  });
  try {
    var refundsUrl = getURL(
      "REFUNDS",
      "Post",
      "refund-post",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    var res = await updateDetails(
      refundsUrl,
      filterValueJson,
      "Post",
      undefined,
      undefined,
      undefined,
      undefined,
    );
    var data = LogicUtils.getArrayFromDict(
      LogicUtils.getDictFromJsonObject(res),
      "data",
      [],
    );
    var total = LogicUtils.getInt(
      LogicUtils.getDictFromJsonObject(res),
      "total_count",
      0,
    );
    var arr = Core__Array.make(offset, {});
    if (total <= offset) {
      setOffset(function (param) {
        return 0;
      });
    }
    if (total <= 0) {
      return setScreenState(function (param) {
        return "Custom";
      });
    }
    var refundDataDictArr = Belt_Array.keepMap(data, Core__JSON.Decode.object);
    var refundData = arr
      .concat(refundDataDictArr)
      .map(RefundEntity.itemToObjMapper);
    var list = refundData.map(function (prim) {
      return prim;
    });
    setRefundsData(function (param) {
      return list;
    });
    setTotalCount(function (param) {
      return total;
    });
    return setScreenState(function (param) {
      return "Success";
    });
  } catch (exn) {
    return setScreenState(function (param) {
      return {
        TAG: "Error",
        _0: "Failed to fetch",
      };
    });
  }
}

var customUI = React.createElement(HelperComponents.BluredTableComponent.make, {
  infoText:
    "No refund records as of now. Try initiating a refund for a successful payment.",
  buttonText: "Take me to payments",
  onClickUrl: "payments",
  moduleName: "",
});

var startTimeFilterKey = "start_time";

var endTimeFilterKey = "end_time";

function filterByData(txnArr, value) {
  var searchText = LogicUtils.getStringFromJson(value, "");
  return Belt_Array.keepMap(
    Belt_Array.keepMap(txnArr, function (prim) {
      if (prim == null) {
        return;
      } else {
        return Caml_option.some(prim);
      }
    }),
    function (data) {
      var valueArr = Core__Array.reduce(
        Object.entries(data).map(function (item) {
          return LogicUtils.getStringFromJson(item[1], "")
            .toLowerCase()
            .includes(searchText);
        }),
        false,
        function (acc, item) {
          if (item) {
            return true;
          } else {
            return acc;
          }
        },
      );
      if (valueArr) {
        return Caml_option.some(data);
      }
    },
  );
}

function initialFixedFilter() {
  return [
    {
      field: FormRenderer.makeMultiInputFieldInfo(
        "",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        false,
        InputFields.filterDateRangeField(
          startTimeFilterKey,
          endTimeFilterKey,
          "YYYY-MM-DDTHH:mm:ss[Z]",
          false,
          true,
          false,
          [
            {
              TAG: "Hour",
              _0: 0.5,
            },
            {
              TAG: "Hour",
              _0: 1.0,
            },
            {
              TAG: "Hour",
              _0: 2.0,
            },
            "Today",
            "Yesterday",
            {
              TAG: "Day",
              _0: 2.0,
            },
            {
              TAG: "Day",
              _0: 7.0,
            },
            {
              TAG: "Day",
              _0: 30.0,
            },
            "ThisMonth",
            "LastMonth",
          ],
          false,
          2,
          180,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ),
        undefined,
        [],
        undefined,
      ),
      localFilter: undefined,
    },
  ];
}

function getConditionalFilter(key, dict, filterValues) {
  var match = getFilterTypeFromString(key);
  if (match !== "connector_label") {
    return [];
  }
  var arr = LogicUtils.getStrArrayFromJsonArray(
    LogicUtils.getArrayFromDict(filterValues, "connector", []),
  );
  return arr.flatMap(function (connector) {
    var connectorLabelArr = LogicUtils.getArrayFromDict(
      LogicUtils.getDictfromDict(dict, "connector"),
      connector,
      [],
    );
    return connectorLabelArr.map(function (item) {
      return LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(item),
        "connector_label",
        "",
      );
    });
  });
}

function getOptionsForRefundFilters(dict, filterValues) {
  var arr = LogicUtils.getStrArrayFromJsonArray(
    LogicUtils.getArrayFromDict(filterValues, "connector", []),
  );
  return arr.flatMap(function (connector) {
    var connectorLabelArr = LogicUtils.getArrayFromDict(
      LogicUtils.getDictfromDict(dict, "connector"),
      connector,
      [],
    );
    return connectorLabelArr.map(function (item) {
      var label = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(item),
        "connector_label",
        "",
      );
      var value = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(item),
        "merchant_connector_id",
        "",
      );
      return {
        label: label,
        value: value,
      };
    });
  });
}

function itemToObjMapper(dict) {
  return {
    connector: Object.keys(LogicUtils.getDictfromDict(dict, "connector")),
    currency: LogicUtils.getStrArrayFromJsonArray(
      LogicUtils.getArrayFromDict(dict, "currency", []),
    ),
    status: LogicUtils.getStrArrayFromJsonArray(
      LogicUtils.getArrayFromDict(dict, "refund_status", []),
    ),
    connector_label: [],
  };
}

function initialFilters(json, filtervalues) {
  var connectorFilter = LogicUtils.getStrArrayFromJsonArray(
    LogicUtils.getArrayFromDict(filtervalues, "connector", []),
  );
  var filterDict = LogicUtils.getDictFromJsonObject(json);
  var arr = Object.keys(filterDict).filter(function (_item, index) {
    return index <= 2;
  });
  if (connectorFilter.length !== 0) {
    arr.push("connector_label");
  }
  var filterArr = itemToObjMapper(filterDict);
  return arr.map(function (key) {
    var title = "Select " + LogicUtils.snakeToTitle(key);
    var match = getFilterTypeFromString(key);
    var values =
      match === "connector_label"
        ? getConditionalFilter(key, filterDict, filtervalues)
        : match === "status"
          ? filterArr.status
          : match === "currency"
            ? filterArr.currency
            : match === "connector"
              ? filterArr.connector
              : [];
    var match$1 = getFilterTypeFromString(key);
    var options =
      match$1 === "connector_label"
        ? getOptionsForRefundFilters(filterDict, filtervalues)
        : FilterSelectBox.makeOptions(values);
    var match$2 = getFilterTypeFromString(key);
    var name = match$2 === "connector_label" ? "merchant_connector_id" : key;
    return {
      field: FormRenderer.makeFieldInfo(
        key,
        undefined,
        name,
        InputFields.filterMultiSelectInput(
          options,
          undefined,
          title,
          undefined,
          undefined,
          false,
          undefined,
          undefined,
          true,
          undefined,
          undefined,
          undefined,
          undefined,
          "bg-none",
          undefined,
          undefined,
          true,
          true,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      localFilter: filterByData,
    };
  });
}

export {
  getFilterTypeFromString,
  getRefundsList,
  customUI,
  startTimeFilterKey,
  endTimeFilterKey,
  filterByData,
  initialFixedFilter,
  getConditionalFilter,
  getOptionsForRefundFilters,
  itemToObjMapper,
  initialFilters,
};
/* customUI Not a pure module */
