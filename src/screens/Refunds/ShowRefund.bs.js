// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as ACLButton from "../../components/ACLButton.bs.js";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as OrderUtils from "../../components/OrderUtils.bs.js";
import * as RefundLogs from "../Analytics/Logs/RefundLogs/RefundLogs.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "../../components/LoadedTable.bs.js";
import * as LogsWrapper from "../Analytics/Logs/LogUtils/LogsWrapper.bs.js";
import * as OrderEntity from "../Order/OrderEntity.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as OrderUIUtils from "../Order/OrderUIUtils.bs.js";
import * as RefundEntity from "./RefundEntity.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as HSwitchOrderUtils from "../Order/HSwitchOrderUtils.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as DefaultLandingPage from "../Helpers/DefaultLandingPage.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as BreadCrumbNavigation from "../../utils/BreadCrumbNavigation.bs.js";

function ShowRefund$RefundInfo$Details(props) {
  var children = props.children;
  var __bgColor = props.bgColor;
  var __widthClass = props.widthClass;
  var __justifyClassName = props.justifyClassName;
  var __excludeColKeys = props.excludeColKeys;
  var getCell = props.getCell;
  var getHeading = props.getHeading;
  var data = props.data;
  var excludeColKeys = __excludeColKeys !== undefined ? __excludeColKeys : [];
  var justifyClassName =
    __justifyClassName !== undefined ? __justifyClassName : "justify-start";
  var widthClass = __widthClass !== undefined ? __widthClass : "w-1/4";
  var bgColor =
    __bgColor !== undefined
      ? __bgColor
      : "bg-white dark:bg-jp-gray-lightgray_background";
  return React.createElement(
    OrderUtils.Section.make,
    {
      children: null,
      customCssClass:
        "border border-jp-gray-940 border-opacity-75 dark:border-jp-gray-960 " +
        bgColor +
        " rounded-md p-5",
    },
    React.createElement(
      "div",
      {
        className: "flex items-center",
      },
      React.createElement(
        "div",
        {
          className: "font-bold text-4xl m-3",
        },
        (data.amount / 100.0).toString() + " " + data.currency + " ",
      ),
      RefundEntity.useGetStatus(data),
    ),
    React.createElement(FormRenderer.DesktopRow.make, {
      children: React.createElement(
        "div",
        {
          className:
            "flex flex-wrap " +
            justifyClassName +
            " dark:bg-jp-gray-lightgray_background dark:border-jp-gray-no_data_border",
        },
        props.detailsFields.map(function (colType, i) {
          if (excludeColKeys.includes(colType)) {
            return null;
          } else {
            return React.createElement(
              "div",
              {
                key: i.toString(),
                className: "flex " + widthClass + " items-center",
              },
              React.createElement(OrderUtils.DisplayKeyValueParams.make, {
                heading: getHeading(colType),
                value: getCell(data, colType),
                customMoneyStyle: "!font-normal !text-sm",
                labelMargin: "!py-0 mt-2",
                textColor: "!font-normal !text-jp-gray-700",
                overiddingHeadingStyles: "text-black text-sm font-medium",
              }),
            );
          }
        }),
      ),
    }),
    children !== undefined ? Caml_option.valFromOption(children) : null,
  );
}

var Details = {
  make: ShowRefund$RefundInfo$Details,
};

function ShowRefund$RefundInfo(props) {
  var refundData = RefundEntity.itemToObjMapper(props.orderDict);
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(
      "div",
      {
        className:
          "font-bold text-fs-16 dark:text-white dark:text-opacity-75 mt-4 mb-4",
      },
      "Summary",
    ),
    React.createElement(ShowRefund$RefundInfo$Details, {
      data: refundData,
      getHeading: RefundEntity.getHeading,
      getCell: RefundEntity.getCell,
      excludeColKeys: ["RefundStatus", "Amount"],
      detailsFields: RefundEntity.allColumns,
    }),
  );
}

var RefundInfo = {
  Details: Details,
  make: ShowRefund$RefundInfo,
};

function ShowRefund(props) {
  var id = props.id;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var getURL = APIUtils.useGetURL();
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var match = React.useState(function () {
    return "Loading";
  });
  var setScreenStateForRefund = match[1];
  var match$1 = React.useState(function () {
    return {};
  });
  var setRefundData = match$1[1];
  var refundData = match$1[0];
  var match$2 = React.useState(function () {
    return 0;
  });
  var match$3 = React.useState(function () {
    return [];
  });
  var setOrdersData = match$3[1];
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var showToast = ToastState.useShowToast();
  var paymentId = LogicUtils.getString(
    LogicUtils.getDictFromJsonObject(refundData),
    "payment_id",
    "",
  );
  var fetchRefundData = async function () {
    try {
      var refundUrl = getURL(
        "REFUNDS",
        "Get",
        Caml_option.some(id),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var refundData = await fetchDetails(refundUrl);
      var paymentId = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(refundData),
        "payment_id",
        "",
      );
      var orderUrl = getURL(
        "ORDERS",
        "Get",
        Caml_option.some(paymentId),
        undefined,
        undefined,
        undefined,
        undefined,
        "expand_attempts=true",
        undefined,
      );
      var orderData = await fetchDetails(orderUrl);
      var paymentArray = LogicUtils.getArrayDataFromJson(
        [orderData],
        OrderEntity.itemToObjMapper,
      );
      setOrdersData(function (param) {
        return paymentArray.map(function (prim) {
          return prim;
        });
      });
      setRefundData(function (param) {
        return refundData;
      });
      return setScreenStateForRefund(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var message = e._1.message;
        if (message !== undefined) {
          if (message.includes("HE_02")) {
            return setScreenStateForRefund(function (param) {
              return "Custom";
            });
          } else {
            showToast(
              "Failed to Fetch!",
              "ToastError",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            return setScreenStateForRefund(function (param) {
              return {
                TAG: "Error",
                _0: "Failed to Fetch!",
              };
            });
          }
        } else {
          return setScreenStateForRefund(function (param) {
            return {
              TAG: "Error",
              _0: "Failed to Fetch!",
            };
          });
        }
      }
      throw e;
    }
  };
  React.useEffect(
    function () {
      fetchRefundData();
    },
    [url],
  );
  var showSyncButton = React.useCallback(
    function () {
      var refundDict = LogicUtils.getDictFromJsonObject(refundData);
      var status = HSwitchOrderUtils.statusVariantMapper(
        LogicUtils.getString(refundDict, "status", ""),
      );
      if (
        !HSwitchOrderUtils.isTestData(id) &&
        status !== "Succeeded" &&
        status !== "Failed"
      ) {
        return Object.keys(refundDict).length > 0;
      } else {
        return false;
      }
    },
    [refundData],
  );
  var syncData = function () {
    fetchRefundData();
    showToast(
      "Details Updated",
      "ToastSuccess",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-col overflow-scroll",
    },
    React.createElement(
      "div",
      {
        className: "flex justify-between w-full",
      },
      React.createElement(
        "div",
        {
          className: "flex items-center justify-between w-full",
        },
        React.createElement(
          "div",
          undefined,
          React.createElement(PageUtils.PageHeading.make, {
            title: "Refunds",
          }),
          React.createElement(BreadCrumbNavigation.make, {
            path: [
              {
                title: "Refunds",
                link: "/refunds",
              },
            ],
            currentPageTitle: id,
            cursorStyle: "cursor-pointer",
          }),
        ),
        React.createElement(RenderIf.make, {
          condition: showSyncButton(),
          children: React.createElement(ACLButton.make, {
            text: "Sync",
            buttonType: "Primary",
            leftIcon: {
              TAG: "CustomIcon",
              _0: React.createElement(Icon.make, {
                name: "sync",
                className:
                  "jp-gray-900 fill-opacity-50 dark:jp-gray-text_darktheme",
              }),
            },
            onClick: function (param) {
              syncData();
            },
            customButtonStyle: "!w-fit !px-4",
            access: userPermissionJson.operationsView,
          }),
        }),
      ),
    ),
    React.createElement(
      PageLoaderWrapper.make,
      {
        children: Caml_option.some(null),
        screenState: match[0],
        customUI: Caml_option.some(
          React.createElement(DefaultLandingPage.make, {
            height: "90vh",
            title: "Something Went Wrong!",
            overriddingStylesTitle: "text-3xl font-semibold",
          }),
        ),
      },
      React.createElement(ShowRefund$RefundInfo, {
        orderDict: LogicUtils.getDictFromJsonObject(refundData),
      }),
      React.createElement("div", {
        className: "mt-5",
      }),
      React.createElement(RenderIf.make, {
        condition: featureFlagDetails.auditTrail,
        children: React.createElement(OrderUIUtils.RenderAccordian.make, {
          initialExpandedArray: [0],
          accordion: [
            {
              title: "Events and logs",
              renderContent: function () {
                return React.createElement(LogsWrapper.make, {
                  wrapperFor: "REFUND",
                  children: React.createElement(RefundLogs.make, {
                    refundId: id,
                    paymentId: paymentId,
                  }),
                });
              },
              renderContentOnTop: undefined,
            },
          ],
        }),
      }),
      React.createElement(RenderIf.make, {
        condition: userPermissionJson.operationsView !== "NoAccess",
        children: React.createElement(LoadedTable.make, {
          title: "Payment",
          showSerialNumber: true,
          actualData: match$3[0],
          totalResults: 1,
          resultsPerPage: 1,
          offset: match$2[0],
          setOffset: match$2[1],
          entity: OrderEntity.orderEntity,
          currrentFetchCount: 1,
        }),
      }),
    ),
  );
}

var make = ShowRefund;

export { RefundInfo, make };
/* Icon Not a pure module */
