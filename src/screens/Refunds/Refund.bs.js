// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as TableAtoms from "../../Recoils/TableAtoms.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "../../components/LoadedTable.bs.js";
import * as RefundUtils from "./RefundUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as OrderUIUtils from "../Order/OrderUIUtils.bs.js";
import * as RefundEntity from "./RefundEntity.bs.js";
import * as ErrorBoundary from "../../components/ErrorBoundary.bs.js";
import * as PortalCapture from "../../components/portal/PortalCapture.bs.js";
import * as GenerateReport from "../GenerateReports/GenerateReport.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as HSwitchRemoteFilter from "../HSwitchRemoteFilter.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as LoadedTableWithCustomColumns from "../../components/LoadedTableWithCustomColumns.bs.js";

function Refund(props) {
  var getURL = APIUtils.useGetURL();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return [];
  });
  var setRefundsData = match$1[1];
  var refundData = match$1[0];
  var match$2 = React.useState(function () {
    return 0;
  });
  var setTotalCount = match$2[1];
  var match$3 = React.useState(function () {
    return "";
  });
  var searchText = match$3[0];
  var match$4 = React.useState(function () {});
  var filters = match$4[0];
  var pageDetailDict = Recoil.useRecoilValue(LoadedTable.table_pageDetails);
  var pageDetail = Core__Option.getOr(pageDetailDict["Refunds"], {
    offset: 0,
    resultsPerPage: 20,
  });
  var match$5 = React.useState(function () {
    return pageDetail.offset;
  });
  var setOffset = match$5[1];
  var offset = match$5[0];
  var fetchRefunds = function () {
    if (filters === undefined) {
      return;
    }
    var filters$1 = {};
    filters$1["offset"] = offset;
    filters$1["limit"] = 50;
    if (!LogicUtils.isEmptyString(searchText)) {
      filters$1["payment_id"] = searchText.trim();
      filters$1["refund_id"] = searchText.trim();
    }
    Object.entries(filters).forEach(function (item) {
      filters$1[item[0]] = item[1];
    });
    RefundUtils.getRefundsList(
      filters$1,
      updateDetails,
      setRefundsData,
      setScreenState,
      offset,
      setTotalCount,
      setOffset,
      getURL,
    );
  };
  React.useEffect(
    function () {
      if (OrderUIUtils.isNonEmptyValue(filters)) {
        fetchRefunds();
      }
    },
    [offset, filters, searchText],
  );
  var match$6 = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var filterUrl = getURL(
    "REFUNDS",
    "Get",
    "v2/filter",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
  return React.createElement(ErrorBoundary.make, {
    children: React.createElement(
      "div",
      {
        className: "min-h-[50vh]",
      },
      React.createElement(PageUtils.PageHeading.make, {
        title: "Refunds",
        subTitle: "View and manage all refunds",
      }),
      React.createElement(
        "div",
        {
          className: "flex justify-between gap-3",
        },
        React.createElement(
          "div",
          {
            className: "flex-1",
          },
          React.createElement(HSwitchRemoteFilter.RemoteTableFilters.make, {
            filterUrl: filterUrl,
            setFilters: match$4[1],
            endTimeFilterKey: RefundUtils.endTimeFilterKey,
            startTimeFilterKey: RefundUtils.startTimeFilterKey,
            initialFilters: RefundUtils.initialFilters,
            initialFixedFilter: RefundUtils.initialFixedFilter,
            setOffset: setOffset,
            customLeftView: React.createElement(
              HSwitchRemoteFilter.SearchBarFilter.make,
              {
                placeholder: "Search payment id or refund id",
                setSearchVal: match$3[1],
                searchVal: searchText,
              },
            ),
          }),
        ),
        React.createElement(RenderIf.make, {
          condition: match$6.generateReport && refundData.length > 0,
          children: React.createElement(GenerateReport.make, {
            entityName: "REFUND_REPORT",
          }),
        }),
        JsxPPXReactSupportU.createElementWithKey(
          "RefundsCustomizeColumn",
          PortalCapture.make,
          {
            name: "RefundsCustomizeColumn",
          },
        ),
      ),
      React.createElement(PageLoaderWrapper.make, {
        children: Caml_option.some(
          React.createElement(LoadedTableWithCustomColumns.make, {
            title: "Refunds",
            showSerialNumber: true,
            actualData: refundData,
            totalResults: match$2[0],
            resultsPerPage: 20,
            offset: offset,
            setOffset: setOffset,
            entity: RefundEntity.refundEntity,
            currrentFetchCount: refundData.length,
            hideTitle: true,
            customColumnMapper: TableAtoms.refundsMapDefaultCols,
            defaultColumns: RefundEntity.defaultColumns,
            sortingBasedOnDisabled: false,
            showSerialNumberInCustomizeColumns: false,
          }),
        ),
        screenState: match[0],
        customUI: Caml_option.some(RefundUtils.customUI),
      }),
    ),
  });
}

var make = Refund;

export { make };
/* react Not a pure module */
