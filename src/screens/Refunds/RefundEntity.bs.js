// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../../components/Table.bs.js";
import * as React from "react";
import * as EntityType from "../../entities/EntityType.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as OrderEntity from "../Order/OrderEntity.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";
import * as HSwitchOrderUtils from "../Order/HSwitchOrderUtils.bs.js";

var defaultColumns = [
  "RefundId",
  "ConnectorName",
  "Amount",
  "RefundStatus",
  "PaymentId",
  "Created",
];

var allColumns = [
  "Amount",
  "ConnectorName",
  "Created",
  "Currency",
  "ErrorCode",
  "ErrorMessage",
  "LastUpdated",
  "MetaData",
  "PaymentId",
  "RefundId",
  "RefundReason",
  "RefundStatus",
];

function useGetStatus(order) {
  var match = React.useContext(ThemeProvider.themeContext);
  var backgroundColor = match.globalUIConfig.backgroundColor;
  var orderStatusLabel = order.status.toUpperCase();
  var fixedCss = "text-sm text-white font-bold p-1.5 rounded-lg";
  var match$1 = HSwitchOrderUtils.statusVariantMapper(order.status);
  var exit = 0;
  switch (match$1) {
    case "Succeeded":
      return React.createElement(
        "div",
        {
          className: fixedCss + " bg-hyperswitch_green dark:bg-opacity-50",
        },
        orderStatusLabel,
      );
    case "Failed":
    case "Cancelled":
      exit = 1;
      break;
    case "Processing":
    case "RequiresCustomerAction":
    case "RequiresPaymentMethod":
      exit = 2;
      break;
    default:
      return React.createElement(
        "div",
        {
          className: fixedCss + " " + backgroundColor + " bg-opacity-50",
        },
        orderStatusLabel,
      );
  }
  switch (exit) {
    case 1:
      return React.createElement(
        "div",
        {
          className: fixedCss + " bg-red-960 dark:bg-opacity-50",
        },
        orderStatusLabel,
      );
    case 2:
      return React.createElement(
        "div",
        {
          className: fixedCss + " " + backgroundColor + " bg-opacity-50",
        },
        orderStatusLabel,
      );
  }
}

function getHeading(colType) {
  switch (colType) {
    case "Amount":
      return Table.makeHeaderInfo(
        "amount",
        "Amount",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Created":
      return Table.makeHeaderInfo(
        "created",
        "Created",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Currency":
      return Table.makeHeaderInfo(
        "currency",
        "Currency",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ErrorCode":
      return Table.makeHeaderInfo(
        "error_code",
        "Error Code",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ErrorMessage":
      return Table.makeHeaderInfo(
        "error_message",
        "Error Message",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentId":
      return Table.makeHeaderInfo(
        "payment_id",
        "Payment ID",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "RefundReason":
      return Table.makeHeaderInfo(
        "reason",
        "Refund Reason",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "RefundId":
      return Table.makeHeaderInfo(
        "refund_id",
        "Refund ID",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "RefundStatus":
      return Table.makeHeaderInfo(
        "status",
        "Refund Status",
        "DropDown",
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "LastUpdated":
      return Table.makeHeaderInfo(
        "last_updated",
        "Last Updated",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "MetaData":
      return Table.makeHeaderInfo(
        "metaData",
        "MetaData",
        "DropDown",
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ConnectorName":
      return Table.makeHeaderInfo(
        "connector",
        "Connector",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getCell(refundData, colType) {
  switch (colType) {
    case "Amount":
      return {
        TAG: "CustomCell",
        _0: React.createElement(OrderEntity.CurrencyCell.make, {
          amount: (refundData.amount / 100.0).toString(),
          currency: refundData.currency,
        }),
        _1: "",
      };
    case "Created":
      return {
        TAG: "Date",
        _0: refundData.created_at,
      };
    case "Currency":
      return {
        TAG: "Text",
        _0: refundData.currency,
      };
    case "ErrorCode":
      return {
        TAG: "Text",
        _0: refundData.error_code,
      };
    case "ErrorMessage":
      return {
        TAG: "Text",
        _0: refundData.error_message,
      };
    case "PaymentId":
      return {
        TAG: "DisplayCopyCell",
        _0: refundData.payment_id,
      };
    case "RefundReason":
      return {
        TAG: "Text",
        _0: refundData.reason,
      };
    case "RefundId":
      return {
        TAG: "DisplayCopyCell",
        _0: refundData.refund_id,
      };
    case "RefundStatus":
      var match = HSwitchOrderUtils.statusVariantMapper(refundData.status);
      var tmp;
      switch (match) {
        case "Succeeded":
          tmp = "LabelGreen";
          break;
        case "Failed":
        case "Cancelled":
          tmp = "LabelRed";
          break;
        case "Processing":
          tmp = "LabelOrange";
          break;
        case "PartiallyCaptured":
        case "None":
          tmp = "LabelLightBlue";
          break;
        default:
          tmp = "LabelWhite";
      }
      return {
        TAG: "Label",
        _0: {
          title: refundData.status.toUpperCase(),
          color: tmp,
        },
      };
    case "LastUpdated":
      return {
        TAG: "Date",
        _0: refundData.updated_at,
      };
    case "MetaData":
      return {
        TAG: "Text",
        _0: refundData.metadata,
      };
    case "ConnectorName":
      return {
        TAG: "CustomCell",
        _0: React.createElement(HelperComponents.ConnectorCustomCell.make, {
          connectorName: refundData.connector,
        }),
        _1: "",
      };
  }
}

function itemToObjMapper(dict) {
  return {
    refund_id: LogicUtils.getString(dict, "refund_id", ""),
    payment_id: LogicUtils.getString(dict, "payment_id", ""),
    amount: LogicUtils.getFloat(dict, "amount", 0.0),
    currency: LogicUtils.getString(dict, "currency", ""),
    reason: LogicUtils.getString(dict, "reason", ""),
    status: LogicUtils.getString(dict, "status", ""),
    metadata: LogicUtils.getString(dict, "metadata", ""),
    updated_at: LogicUtils.getString(dict, "updated_at", ""),
    created_at: LogicUtils.getString(dict, "created_at", ""),
    error_message: LogicUtils.getString(dict, "error_message", ""),
    error_code: LogicUtils.getString(dict, "error_code", ""),
    connector: LogicUtils.getString(dict, "connector", ""),
  };
}

function getRefunds(json) {
  return LogicUtils.getArrayDataFromJson(json, itemToObjMapper);
}

var refundEntity = EntityType.makeEntity(
  "",
  getRefunds,
  defaultColumns,
  allColumns,
  getHeading,
  getCell,
  "",
  undefined,
  undefined,
  undefined,
  undefined,
  function (refundData) {
    return GlobalVars.appendDashboardPath("/refunds/" + refundData.refund_id);
  },
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

export {
  defaultColumns,
  allColumns,
  useGetStatus,
  getHeading,
  getCell,
  itemToObjMapper,
  getRefunds,
  refundEntity,
};
/* refundEntity Not a pure module */
