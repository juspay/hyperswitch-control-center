// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as AuthHooks from "../../hooks/AuthHooks.bs.js";
import * as AuthUtils from "../../entryPoints/AuthModule/AuthUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../HSwitchUtils.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as HSLocalStorage from "../HSLocalStorage.bs.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as CommonAuthHooks from "../../entryPoints/AuthModule/Common/CommonAuthHooks.bs.js";
import * as SidebarProvider from "../Sidebar/SidebarProvider.bs.js";
import * as AuthInfoProvider from "../../context/AuthInfoProvider.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as ClearRecoilValueHook from "../Hooks/ClearRecoilValueHook.bs.js";

var JsonException = /* @__PURE__ */ Caml_exceptions.create(
  "APIUtils.JsonException",
);

function useGetURL() {
  var match = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  var merchantId = match.merchant_id;
  return function (
    entityName,
    methodType,
    idOpt,
    connectorOpt,
    userTypeOpt,
    userRoleTypesOpt,
    reconTypeOpt,
    queryParamertersOpt,
    param,
  ) {
    var id = idOpt !== undefined ? Caml_option.valFromOption(idOpt) : undefined;
    var connector =
      connectorOpt !== undefined
        ? Caml_option.valFromOption(connectorOpt)
        : undefined;
    var userType = userTypeOpt !== undefined ? userTypeOpt : "NONE";
    var userRoleTypes =
      userRoleTypesOpt !== undefined ? userRoleTypesOpt : "NONE";
    var reconType = reconTypeOpt !== undefined ? reconTypeOpt : "NONE";
    var queryParamerters =
      queryParamertersOpt !== undefined
        ? Caml_option.valFromOption(queryParamertersOpt)
        : undefined;
    var connectorBaseURL = "account/" + merchantId + "/connectors";
    var endpoint;
    var exit = 0;
    switch (entityName) {
      case "ROUTING":
        if (typeof methodType !== "object") {
          switch (methodType) {
            case "Get":
              endpoint = id !== undefined ? "routing/" + id : "routing";
              break;
            case "Post":
              endpoint =
                id !== undefined ? "routing/" + id + "/activate" : "routing";
              break;
            default:
              endpoint = "";
          }
        } else {
          endpoint = "";
        }
        break;
      case "MERCHANT_ACCOUNT":
        endpoint = "accounts/" + merchantId;
        break;
      case "REFUNDS":
        if (typeof methodType !== "object") {
          switch (methodType) {
            case "Get":
              endpoint =
                id !== undefined
                  ? queryParamerters !== undefined
                    ? "refunds/" + id + "?" + queryParamerters
                    : "refunds/" + id
                  : queryParamerters !== undefined
                    ? "refunds/list?" + queryParamerters
                    : "refunds/list?limit=100";
              break;
            case "Post":
              endpoint = id !== undefined ? "refunds/list" : "refunds";
              break;
            default:
              endpoint = "";
          }
        } else {
          endpoint = "";
        }
        break;
      case "DISPUTES":
        endpoint =
          typeof methodType !== "object" && methodType === "Get"
            ? id !== undefined
              ? "disputes/" + id
              : "disputes/list?limit=10000"
            : "";
        break;
      case "PAYOUTS":
        if (typeof methodType !== "object") {
          switch (methodType) {
            case "Get":
              endpoint =
                id !== undefined ? "payouts/" + id : "payouts/list?limit=100";
              break;
            case "Post":
              endpoint = "payouts/list";
              break;
            default:
              endpoint = "";
          }
        } else {
          endpoint = "";
        }
        break;
      case "API_KEYS":
        if (typeof methodType !== "object") {
          switch (methodType) {
            case "Get":
              endpoint = "api_keys/" + merchantId + "/list";
              break;
            case "Post":
              endpoint =
                id !== undefined
                  ? "api_keys/" + merchantId + "/" + id
                  : "api_keys/" + merchantId;
              break;
            case "Delete":
              endpoint =
                "api_keys/" + merchantId + "/" + Core__Option.getOr(id, "");
              break;
            default:
              endpoint = "";
          }
        } else {
          endpoint = "";
        }
        break;
      case "ORDERS":
        if (typeof methodType !== "object") {
          switch (methodType) {
            case "Get":
              endpoint =
                id !== undefined
                  ? queryParamerters !== undefined
                    ? "payments/" + id + "?" + queryParamerters
                    : "payments/" + id
                  : queryParamerters !== undefined
                    ? "payments/list?" + queryParamerters
                    : "payments/list?limit=100";
              break;
            case "Post":
              endpoint = "payments/list";
              break;
            default:
              endpoint = "";
          }
        } else {
          endpoint = "";
        }
        break;
      case "DEFAULT_FALLBACK":
        endpoint = "routing/default";
        break;
      case "PAYMENT_LOGS":
        endpoint =
          typeof methodType !== "object" && methodType === "Get"
            ? id !== undefined
              ? "analytics/v1/api_event_logs?type=Payment&payment_id=" + id
              : "analytics/v1/event-logs"
            : "";
        break;
      case "SDK_EVENT_LOGS":
        endpoint = "analytics/v1/sdk_event_logs";
        break;
      case "WEBHOOKS_EVENT_LOGS":
        endpoint =
          id !== undefined
            ? "analytics/v1/outgoing_webhook_event_logs?payment_id=" + id
            : "";
        break;
      case "CONNECTOR_EVENT_LOGS":
        endpoint =
          id !== undefined
            ? "analytics/v1/connector_event_logs?type=Payment&payment_id=" + id
            : "";
        break;
      case "GENERATE_SAMPLE_DATA":
        endpoint = "user/sample_data";
        break;
      case "USERS":
        var userUrl = "user";
        if (
          userType === "VERIFY_EMAIL_REQUEST" ||
          userType === "RESET_PASSWORD" ||
          userType === "FORGOT_PASSWORD" ||
          userType === "ROTATE_PASSWORD" ||
          userType === "SIGNUP" ||
          userType === "SIGNOUT"
        ) {
          endpoint =
            queryParamerters !== undefined
              ? userUrl + "/" + userType.toLowerCase() + "?" + queryParamerters
              : userUrl + "/" + userType.toLowerCase();
        } else if (userType === "BEGIN_TOTP") {
          endpoint = userUrl + "/2fa/totp/begin";
        } else if (userType === "VERIFY_EMAILV2") {
          endpoint = userUrl + "/v2/verify_email";
        } else if (userType === "ACCEPT_INVITE_FROM_EMAIL") {
          endpoint =
            queryParamerters !== undefined
              ? userUrl + "/" + userType.toLowerCase() + "?" + queryParamerters
              : userUrl + "/" + userType.toLowerCase();
        } else if (userType === "MERCHANTS_SELECT") {
          endpoint = userUrl + "/merchants_select/list";
        } else if (userType === "MERCHANT_DATA") {
          endpoint = userUrl + "/data";
        } else if (userType === "ACCEPT_INVITE_TOKEN_ONLY") {
          endpoint = userUrl + "/user/invite/accept?token_only=true";
        } else if (
          userType === "RESEND_INVITE" ||
          userType === "INVITE_MULTIPLE"
        ) {
          endpoint =
            queryParamerters !== undefined
              ? userUrl +
                "/user/" +
                userType.toLowerCase() +
                "?" +
                queryParamerters
              : userUrl + "/user/" + userType.toLowerCase();
        } else if (userType === "PERMISSION_INFO") {
          endpoint =
            queryParamerters !== undefined
              ? userUrl + "/" + userType.toLowerCase() + "?" + queryParamerters
              : userUrl + "/" + userType.toLowerCase();
        } else if (userType === "USER_DELETE") {
          endpoint = userUrl + "/user/delete";
        } else if (userType === "VERIFY_TOTP") {
          endpoint = userUrl + "/2fa/totp/verify";
        } else if (userType === "TERMINATE_TWO_FACTOR_AUTH") {
          endpoint =
            queryParamerters !== undefined
              ? userUrl + "/2fa/terminate?" + queryParamerters
              : userUrl + "/2fa/terminate";
        } else if (userType === "SIGNINV2") {
          endpoint = userUrl + "/v2/signin";
        } else if (userType === "SIGN_IN_WITH_SSO") {
          endpoint = userUrl + "/oidc";
        } else if (userType === "ACCEPT_INVITE_FROM_EMAIL_TOKEN_ONLY") {
          endpoint = userUrl + "/accept_invite_from_email?token_only=true";
        } else if (userType === "AUTH_SELECT") {
          endpoint = userUrl + "/auth/select";
        } else if (userType === "ACCEPT_INVITE") {
          endpoint = userUrl + "/user/invite/accept";
        } else if (userType === "USER_DATA") {
          endpoint =
            queryParamerters !== undefined
              ? userUrl + "/data?" + queryParamerters
              : userUrl + "/data";
        } else if (userType === "RESET_PASSWORD_TOKEN_ONLY") {
          endpoint = userUrl + "/reset_password?token_only=true";
        } else if (userType === "USER_UPDATE") {
          endpoint = userUrl + "/update";
        } else if (userType === "USER_INFO") {
          endpoint = userUrl;
        } else if (userType === "CHANGE_PASSWORD") {
          endpoint = userUrl + "/change_password";
        } else if (userType === "GET_PERMISSIONS") {
          endpoint =
            queryParamerters !== undefined
              ? userUrl + "/role?" + queryParamerters
              : userUrl + "/role";
        } else if (userType === "SWITCH_MERCHANT") {
          var exit$1 = 0;
          if (typeof methodType !== "object" && methodType === "Get") {
            endpoint = userUrl + "/switch/list";
          } else {
            exit$1 = 2;
          }
          if (exit$1 === 2) {
            endpoint = userUrl + "/" + userType.toLowerCase();
          }
        } else {
          endpoint =
            userType === "CONNECT_ACCOUNT"
              ? queryParamerters !== undefined
                ? userUrl + "/connect_account?" + queryParamerters
                : userUrl + "/connect_account"
              : userType === "SET_METADATA"
                ? queryParamerters !== undefined
                  ? userUrl +
                    "/" +
                    userType.toLowerCase() +
                    "?" +
                    queryParamerters
                  : userUrl + "/" + userType.toLowerCase()
                : userType === "SIGNINV2_TOKEN_ONLY"
                  ? userUrl + "/v2/signin?token_only=true"
                  : userType === "GENERATE_RECOVERY_CODES"
                    ? userUrl + "/2fa/recovery_code/generate"
                    : userType === "UPDATE_ROLE"
                      ? userUrl + "/user/" + userType.toLowerCase()
                      : userType === "GET_AUTH_LIST"
                        ? queryParamerters !== undefined
                          ? userUrl + "/auth/list?" + queryParamerters
                          : userUrl + "/auth/list"
                        : userType === "VERIFY_EMAILV2_TOKEN_ONLY"
                          ? userUrl + "/v2/verify_email?token_only=true"
                          : userType === "CREATE_CUSTOM_ROLE"
                            ? userUrl + "/role"
                            : userType === "CHECK_TWO_FACTOR_AUTH_STATUS"
                              ? userUrl + "/2fa"
                              : userType === "SIGNUP_TOKEN_ONLY"
                                ? userUrl + "/signup?token_only=true"
                                : userType === "VERIFY_RECOVERY_CODE"
                                  ? userUrl + "/2fa/recovery_code/verify"
                                  : userType === "CREATE_MERCHANT"
                                    ? queryParamerters !== undefined
                                      ? userUrl +
                                        "/" +
                                        userType.toLowerCase() +
                                        "?" +
                                        queryParamerters
                                      : userUrl + "/" + userType.toLowerCase()
                                    : userType === "NONE"
                                      ? ""
                                      : userType === "RESET_TOTP"
                                        ? userUrl + "/2fa/totp/reset"
                                        : userType === "FROM_EMAIL"
                                          ? userUrl + "/from_email"
                                          : queryParamerters !== undefined
                                            ? userUrl +
                                              "/user/invite_multiple?" +
                                              queryParamerters +
                                              "&token_only=true"
                                            : userUrl +
                                              "/user/invite_multiple?token_only=true";
        }
        break;
      case "RECON":
        endpoint = "recon/" + reconType.toLowerCase();
        break;
      case "INTEGRATION_DETAILS":
        endpoint = "user/get_sandbox_integration_details";
        break;
      case "CONNECTOR":
      case "FRAUD_RISK_MANAGEMENT":
        exit = 1;
        break;
      case "USER_MANAGEMENT":
        var userUrl$1 = "user";
        switch (userRoleTypes) {
          case "USER_LIST":
            endpoint = userUrl$1 + "/user/list";
            break;
          case "ROLE_LIST":
            endpoint = userUrl$1 + "/role/list";
            break;
          case "ROLE_ID":
            endpoint = id !== undefined ? userUrl$1 + "/role/" + id : "";
            break;
          case "NONE":
            endpoint = "";
            break;
        }
        break;
      case "THREE_DS":
        endpoint = "routing/decision";
        break;
      case "BUSINESS_PROFILE":
        endpoint =
          id !== undefined
            ? "account/" + merchantId + "/business_profile/" + id
            : "account/" + merchantId + "/business_profile";
        break;
      case "VERIFY_APPLE_PAY":
        endpoint =
          id !== undefined ? "verify/apple_pay/" + id : "verify/apple_pay";
        break;
      case "PAYMENT_REPORT":
        endpoint = "analytics/v1/report/payments";
        break;
      case "REFUND_REPORT":
        endpoint = "analytics/v1/report/refunds";
        break;
      case "DISPUTE_REPORT":
        endpoint = "analytics/v1/report/dispute";
        break;
      case "PAYPAL_ONBOARDING":
        endpoint = "connector_onboarding";
        break;
      case "PAYPAL_ONBOARDING_SYNC":
        endpoint = "connector_onboarding/sync";
        break;
      case "ACTION_URL":
        endpoint = "connector_onboarding/action_url";
        break;
      case "RESET_TRACKING_ID":
        endpoint = "connector_onboarding/reset_tracking_id";
        break;
      case "SURCHARGE":
        endpoint = "routing/decision/surcharge";
        break;
      case "CUSTOMERS":
        endpoint =
          typeof methodType !== "object" && methodType === "Get"
            ? id !== undefined
              ? "customers/" + id
              : "customers/list?limit=10000"
            : "";
        break;
      case "ACCEPT_DISPUTE":
        endpoint = id !== undefined ? "disputes/accept/" + id : "disputes";
        break;
      case "DISPUTES_ATTACH_EVIDENCE":
        endpoint =
          id !== undefined ? "disputes/evidence/" + id : "disputes/evidence";
        break;
      case "PAYOUT_DEFAULT_FALLBACK":
        endpoint = "routing/payouts/default";
        break;
      case "PAYOUT_ROUTING":
        var exit$2 = 0;
        if (typeof methodType !== "object") {
          switch (methodType) {
            case "Post":
              endpoint =
                id !== undefined
                  ? "routing/payouts/" + id + "/activate"
                  : "routing/payouts";
              break;
            case "Get":
            case "Put":
              exit$2 = 2;
              break;
            default:
              endpoint = "";
          }
        } else {
          endpoint = "";
        }
        if (exit$2 === 2) {
          endpoint = id !== undefined ? "routing/" + id : "routing/payouts";
        }
        break;
      case "ACTIVE_PAYOUT_ROUTING":
        endpoint = "routing/payouts/active";
        break;
      case "ACTIVE_ROUTING":
        endpoint = "routing/active";
        break;
      case "GLOBAL_SEARCH":
        endpoint =
          typeof methodType !== "object" && methodType === "Post"
            ? id !== undefined
              ? "analytics/v1/search/" + id
              : "analytics/v1/search"
            : "";
        break;
      case "PAYMENT_METHOD_CONFIG":
        endpoint = "payment_methods/filter";
        break;
      default:
        if (typeof methodType !== "object") {
          switch (methodType) {
            case "Get":
              endpoint = id !== undefined ? "analytics/v1/" + id + "/info" : "";
              break;
            case "Post":
              endpoint = id !== undefined ? "analytics/v1/metrics/" + id : "";
              break;
            default:
              endpoint = "";
          }
        } else {
          endpoint = "";
        }
    }
    if (exit === 1) {
      var exit$3 = 0;
      if (typeof methodType !== "object") {
        switch (methodType) {
          case "Get":
            endpoint =
              id !== undefined ? connectorBaseURL + "/" + id : connectorBaseURL;
            break;
          case "Post":
          case "Delete":
            exit$3 = 2;
            break;
          default:
            endpoint = "";
        }
      } else {
        endpoint = "";
      }
      if (exit$3 === 2) {
        endpoint =
          connector !== undefined
            ? "account/connectors/verify"
            : id !== undefined
              ? connectorBaseURL + "/" + id
              : connectorBaseURL;
      }
    }
    return window._env_.apiBaseUrl + "/" + endpoint;
  };
}

function useHandleLogout() {
  var getURL = useGetURL();
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStateToLogout = match.setAuthStateToLogout;
  var match$1 = React.useContext(SidebarProvider.defaultContext);
  var setIsSidebarExpanded = match$1.setIsSidebarExpanded;
  var clearRecoilValue = ClearRecoilValueHook.useClearRecoilValue();
  var fetchApi = AuthHooks.useApiFetcher();
  return function () {
    try {
      var logoutUrl = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "SIGNOUT",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Core__Promise.$$catch(
        fetchApi(
          logoutUrl,
          undefined,
          undefined,
          undefined,
          "Post",
          undefined,
          undefined,
          undefined,
        )
          .then(function (prim) {
            return prim.json();
          })
          .then(function (json) {
            return Promise.resolve(json);
          }),
        function (_err) {
          return Promise.resolve(null);
        },
      );
      setAuthStateToLogout();
      setIsSidebarExpanded(function (param) {
        return false;
      });
      clearRecoilValue();
      AuthUtils.redirectToLogin();
      localStorage.clear();
      return;
    } catch (exn) {
      localStorage.clear();
      return;
    }
  };
}

var sessionExpired = {
  contents: false,
};

async function responseHandler(
  res,
  showToast,
  showErrorToast,
  showPopUp,
  isPlayground,
  popUpCallBack,
  handleLogout,
) {
  var json;
  try {
    json = await res.json();
  } catch (exn) {
    json = null;
  }
  var responseStatus = res.status;
  if (responseStatus === 200) {
    return json;
  }
  var errorDict = LogicUtils.getObj(
    LogicUtils.getDictFromJsonObject(json),
    "error",
    {},
  );
  var errorStringifiedJson = JSON.stringify(errorDict);
  if (isPlayground && responseStatus === 403) {
    popUpCallBack();
  } else if (showErrorToast) {
    var exit = 0;
    switch (responseStatus) {
      case 401:
        if (!sessionExpired.contents) {
          showToast(
            "Session Expired",
            "ToastWarning",
            undefined,
            false,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          handleLogout();
          AuthUtils.redirectToLogin();
          sessionExpired.contents = true;
        }
        break;
      case 403:
        showPopUp({
          heading: "Access Forbidden",
          description: HSwitchUtils.noAccessControlText,
          popUpType: ["Warning", "WithIcon"],
          handleConfirm: {
            text: "Close",
            onClick: function (param) {},
          },
        });
        break;
      default:
        exit = 1;
    }
    if (exit === 1) {
      showToast(
        LogicUtils.getString(errorDict, "message", "Error Occured"),
        "ToastError",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
  }
  return Js_exn.raiseError(errorStringifiedJson);
}

function catchHandler(
  err,
  showErrorToast,
  showToast,
  isPlayground,
  popUpCallBack,
) {
  var msg = err.message;
  if (msg !== undefined) {
    return Js_exn.raiseError(msg);
  } else {
    if (isPlayground) {
      popUpCallBack();
    } else if (showErrorToast) {
      showToast(
        "Something Went Wrong",
        "ToastError",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return Js_exn.raiseError("Failed to Fetch");
  }
}

function useGetMethod(showErrorToastOpt, param) {
  var showErrorToast =
    showErrorToastOpt !== undefined ? showErrorToastOpt : true;
  var fetchApi = AuthHooks.useApiFetcher();
  var showToast = ToastState.useShowToast();
  var showPopUp = PopUpState.useShowPopUp();
  var handleLogout = useHandleLogout();
  var isPlayground = HSLocalStorage.getIsPlaygroundFromLocalStorage();
  var popUpCallBack = function () {
    showPopUp({
      heading: "Sign Up to Access All Features!",
      description:
        "To unlock the potential and experience the full range of capabilities, simply sign up today. Join our community of explorers and gain access to an enhanced world of possibilities",
      popUpType: ["Warning", "WithIcon"],
      handleConfirm: {
        text: "Sign up Now",
        onClick: function (param) {
          handleLogout();
        },
      },
    });
  };
  return async function (url) {
    try {
      var res = await fetchApi(
        url,
        undefined,
        undefined,
        undefined,
        "Get",
        undefined,
        undefined,
        undefined,
      );
      return await responseHandler(
        res,
        showToast,
        showErrorToast,
        showPopUp,
        isPlayground,
        popUpCallBack,
        handleLogout,
      );
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return catchHandler(
          e._1,
          showErrorToast,
          showToast,
          isPlayground,
          popUpCallBack,
        );
      } else {
        return Js_exn.raiseError("Something went wrong");
      }
    }
  };
}

function useUpdateMethod(showErrorToastOpt, param) {
  var showErrorToast =
    showErrorToastOpt !== undefined ? showErrorToastOpt : true;
  var fetchApi = AuthHooks.useApiFetcher();
  var showToast = ToastState.useShowToast();
  var showPopUp = PopUpState.useShowPopUp();
  var handleLogout = useHandleLogout();
  var isPlayground = HSLocalStorage.getIsPlaygroundFromLocalStorage();
  var popUpCallBack = function () {
    showPopUp({
      heading: "Sign Up to Access All Features!",
      description:
        "To unlock the potential and experience the full range of capabilities, simply sign up today. Join our community of explorers and gain access to an enhanced world of possibilities",
      popUpType: ["Warning", "WithIcon"],
      handleConfirm: {
        text: "Sign up Now",
        onClick: function (param) {
          handleLogout();
        },
      },
    });
  };
  return async function (
    url,
    body,
    method,
    bodyFormData,
    headersOpt,
    contentTypeOpt,
    param,
  ) {
    var headers = headersOpt !== undefined ? headersOpt : {};
    var contentType =
      contentTypeOpt !== undefined
        ? contentTypeOpt
        : {
            TAG: "Headers",
            _0: "application/json",
          };
    try {
      var res = await fetchApi(
        url,
        JSON.stringify(body),
        Caml_option.some(bodyFormData),
        headers,
        method,
        undefined,
        contentType,
        undefined,
      );
      return await responseHandler(
        res,
        showToast,
        showErrorToast,
        showPopUp,
        isPlayground,
        popUpCallBack,
        handleLogout,
      );
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return catchHandler(
          e._1,
          showErrorToast,
          showToast,
          isPlayground,
          popUpCallBack,
        );
      } else {
        return Js_exn.raiseError("Something went wrong");
      }
    }
  };
}

export {
  JsonException,
  useGetURL,
  useHandleLogout,
  sessionExpired,
  responseHandler,
  catchHandler,
  useGetMethod,
  useUpdateMethod,
};
/* react Not a pure module */
