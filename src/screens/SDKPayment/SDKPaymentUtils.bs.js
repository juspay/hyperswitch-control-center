// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

function initialValueForForm(defaultBusinessProfile) {
  return {
    amount: 10000.0,
    currency: "USD",
    profile_id: defaultBusinessProfile.profile_id,
    customer_id: "hyperswitch_sdk_demo_id",
    description: "Default value",
    capture_method: "automatic",
    amount_to_capture: 10000.0,
    email: "guest@example.com",
    name: "John Doe",
    phone: "999999999",
    phone_country_code: "+65",
    authentication_type: "no_three_ds",
    shipping: {
      address: {
        line1: "1467",
        line2: "Harrison Street",
        line3: "Harrison Street",
        city: "San Fransico",
        state: "California",
        zip: "94122",
        country: "US",
        first_name: "John",
        last_name: "Doe",
      },
      phone: {
        number: "1234567890",
        country_code: "+1",
      },
    },
    billing: {
      address: {
        line1: "1467",
        line2: "Harrison Street",
        line3: "Harrison Street",
        city: "San Fransico",
        state: "California",
        zip: "94122",
        country: "US",
        first_name: "John",
        last_name: "Doe",
      },
      phone: {
        number: "1234567890",
        country_code: "+1",
      },
      email: "billing_email@gmail.com",
    },
    metadata: {
      order_details: {
        product_name: "Apple iphone 15",
        quantity: 1,
        amount: 10000.0,
      },
    },
    return_url: window.location.origin + window.location.pathname,
    country_currency: "US-USD",
    frm_metadata: {
      order_channel: "web",
    },
  };
}

function getTypedValueForPayment(values) {
  var dictOfValues = LogicUtils.getDictFromJsonObject(values);
  var shippingAddress = LogicUtils.getDictfromDict(
    LogicUtils.getDictfromDict(dictOfValues, "shipping"),
    "address",
  );
  var shippingPhone = LogicUtils.getDictfromDict(
    LogicUtils.getDictfromDict(dictOfValues, "shipping"),
    "phone",
  );
  var billingAddress = LogicUtils.getDictfromDict(
    LogicUtils.getDictfromDict(dictOfValues, "billing"),
    "address",
  );
  var billingPhone = LogicUtils.getDictfromDict(
    LogicUtils.getDictfromDict(dictOfValues, "shipping"),
    "phone",
  );
  var billingEmail = LogicUtils.getString(
    LogicUtils.getDictfromDict(dictOfValues, "billing"),
    "email",
    "",
  );
  var metaData = LogicUtils.getDictfromDict(
    LogicUtils.getDictfromDict(dictOfValues, "metadata"),
    "order_details",
  );
  var amount = LogicUtils.getFloat(dictOfValues, "amount", 10000.0);
  var countryCurrency = LogicUtils.getString(
    dictOfValues,
    "country_currency",
    "US-USD",
  ).split("-");
  var order_channel = LogicUtils.getString(
    LogicUtils.getDictfromDict(dictOfValues, "frm_metadata"),
    "order_channel",
    "",
  );
  var mandateData_customer_acceptance = {
    acceptance_type: "offline",
    accepted_at: "1963-05-03T04:07:52.723Z",
    online: {
      ip_address: "in sit",
      user_agent: "amet irure esse",
    },
  };
  var mandateData_mandate_type = {
    multi_use: {
      amount: 10000,
      currency: Core__Option.getOr(countryCurrency.at(1), "USD"),
    },
  };
  var mandateData = {
    customer_acceptance: mandateData_customer_acceptance,
    mandate_type: mandateData_mandate_type,
  };
  var frm_metadata = {
    order_channel: order_channel,
  };
  return {
    amount: amount,
    currency: Core__Option.getOr(countryCurrency.at(1), "USD"),
    profile_id: LogicUtils.getString(dictOfValues, "profile_id", ""),
    customer_id: LogicUtils.getString(dictOfValues, "customer_id", ""),
    description: LogicUtils.getString(
      dictOfValues,
      "description",
      "Default value",
    ),
    capture_method: "automatic",
    amount_to_capture: amount === 0.0 ? null : amount,
    email: LogicUtils.getString(dictOfValues, "email", ""),
    name: LogicUtils.getString(dictOfValues, "name", ""),
    phone: LogicUtils.getString(dictOfValues, "phone", ""),
    phone_country_code: LogicUtils.getString(
      dictOfValues,
      "phone_country_code",
      "",
    ),
    authentication_type: LogicUtils.getString(
      dictOfValues,
      "authentication_type",
      "",
    ),
    shipping: {
      address: {
        line1: LogicUtils.getString(shippingAddress, "line1", ""),
        line2: LogicUtils.getString(shippingAddress, "line2", ""),
        line3: LogicUtils.getString(shippingAddress, "line3", ""),
        city: LogicUtils.getString(shippingAddress, "city", ""),
        state: LogicUtils.getString(shippingAddress, "state", ""),
        zip: LogicUtils.getString(shippingAddress, "zip", ""),
        country: LogicUtils.getString(shippingAddress, "country", ""),
        first_name: LogicUtils.getString(shippingAddress, "first_name", ""),
        last_name: LogicUtils.getString(shippingAddress, "last_name", ""),
      },
      phone: {
        number: LogicUtils.getString(shippingPhone, "number", ""),
        country_code: LogicUtils.getString(shippingPhone, "country_code", ""),
      },
    },
    billing: {
      address: {
        line1: LogicUtils.getString(billingAddress, "line1", ""),
        line2: LogicUtils.getString(billingAddress, "line2", ""),
        line3: LogicUtils.getString(billingAddress, "line3", ""),
        city: LogicUtils.getString(billingAddress, "city", ""),
        state: LogicUtils.getString(billingAddress, "state", ""),
        zip: LogicUtils.getString(billingAddress, "zip", ""),
        country: Core__Option.getOr(countryCurrency.at(0), "US"),
        first_name: LogicUtils.getString(billingAddress, "first_name", ""),
        last_name: LogicUtils.getString(billingAddress, "last_name", ""),
      },
      phone: {
        number: LogicUtils.getString(billingPhone, "number", ""),
        country_code: LogicUtils.getString(billingPhone, "country_code", ""),
      },
      email: billingEmail,
    },
    metadata: {
      order_details: {
        product_name: LogicUtils.getString(metaData, "product_name", ""),
        quantity: 1,
        amount: amount,
      },
    },
    return_url: LogicUtils.getString(dictOfValues, "return_url", ""),
    payment_type: Caml_option.some(amount === 0.0 ? "setup_mandate" : null),
    setup_future_usage: Caml_option.some(amount === 0.0 ? "off_session" : null),
    mandate_data: Caml_option.some(amount === 0.0 ? mandateData : null),
    country_currency: LogicUtils.getString(
      dictOfValues,
      "country_currency",
      "US-USD",
    ),
    frm_metadata: frm_metadata,
  };
}

export { initialValueForForm, getTypedValueForPayment };
/* LogicUtils Not a pure module */
