// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as WebSDK from "./WebSDK.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as Core__Dict from "@rescript/core/src/Core__Dict.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../HSwitchUtils.bs.js";
import * as CheckoutHelper from "../SelfServe/HSwitchProdOnboarding/CheckoutHelper.bs.js";
import * as TestCredentials from "./TestCredentials.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as ProdOnboardingUIUtils from "../SelfServe/HSwitchProdOnboarding/ProdOnboardingUIUtils.bs.js";

function TestPayment(props) {
  var initialValues = props.initialValues;
  var keyValue = props.keyValue;
  var __successButtonText = props.successButtonText;
  var __paymentStatusStyles = props.paymentStatusStyles;
  var __customWidth = props.customWidth;
  var __isTestCredsNeeded = props.isTestCredsNeeded;
  var __sdkWidth = props.sdkWidth;
  var onProceed = props.onProceed;
  var returnUrl = props.returnUrl;
  var sdkWidth = __sdkWidth !== undefined ? __sdkWidth : "w-[60%]";
  var isTestCredsNeeded =
    __isTestCredsNeeded !== undefined ? __isTestCredsNeeded : true;
  var customWidth =
    __customWidth !== undefined ? __customWidth : "w-full md:w-1/2";
  var paymentStatusStyles =
    __paymentStatusStyles !== undefined ? __paymentStatusStyles : "p-11";
  var successButtonText =
    __successButtonText !== undefined ? __successButtonText : "Proceed";
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var match = React.useState(function () {});
  var setClientSecret = match[1];
  var clientSecret = match[0];
  var match$1 = React.useState(function () {
    return "INCOMPLETE";
  });
  var setPaymentStatus = match$1[1];
  var paymentStatus = match$1[0];
  var match$2 = React.useState(function () {});
  var setPaymentId = match$2[1];
  var paymentId = match$2[0];
  var match$3 = React.useState(function () {
    return "";
  });
  var setErrorMessage = match$3[1];
  var merchantDetailsValue = HSwitchUtils.useMerchantDetailsValue();
  var publishableKey = merchantDetailsValue.publishable_key;
  var paymentElementOptions = CheckoutHelper.getOptionReturnUrl(returnUrl);
  var elementOptions = CheckoutHelper.getOption(clientSecret);
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var searchParams = url.search;
  var filtersFromUrl = LogicUtils.getDictFromUrlSearchParams(searchParams);
  var getClientSecretFromPaymentId = function (paymentIntentClientSecret) {
    if (paymentIntentClientSecret === undefined) {
      return;
    }
    var paymentClientSecretSplitArray = paymentIntentClientSecret.split("_");
    return (
      LogicUtils.getValueFromArray(paymentClientSecretSplitArray, 0, "") +
      "_" +
      LogicUtils.getValueFromArray(paymentClientSecretSplitArray, 1, "")
    );
  };
  var getClientSecret = async function () {
    try {
      var url = window._env_.apiBaseUrl + "/payments";
      var paymentData = LogicUtils.safeParse(JSON.stringify(initialValues));
      Core__Dict.$$delete(
        LogicUtils.getDictFromJsonObject(paymentData),
        "country_currency",
      );
      var response = await updateDetails(
        url,
        paymentData,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var clientSecret = LogicUtils.getOptionString(
        LogicUtils.getDictFromJsonObject(response),
        "client_secret",
      );
      setPaymentId(function (param) {
        return LogicUtils.getOptionString(
          LogicUtils.getDictFromJsonObject(response),
          "payment_id",
        );
      });
      setClientSecret(function (param) {
        return clientSecret;
      });
      return setPaymentStatus(function (param) {
        return "INCOMPLETE";
      });
    } catch (exn) {
      return setPaymentStatus(function (param) {
        return {
          TAG: "FAILED",
          _0: "",
        };
      });
    }
  };
  React.useEffect(
    function () {
      var status = Core__Option.getOr(
        filtersFromUrl["status"],
        "",
      ).toLowerCase();
      var paymentIdFromPaymemtIntentClientSecret = getClientSecretFromPaymentId(
        LogicUtils.getDictFromUrlSearchParams(url.search)[
          "payment_intent_client_secret"
        ],
      );
      if (status === "succeeded") {
        setPaymentStatus(function (param) {
          return "SUCCESS";
        });
      } else if (status === "failed") {
        setPaymentStatus(function (param) {
          return {
            TAG: "FAILED",
            _0: "",
          };
        });
      } else if (status === "processing") {
        setPaymentStatus(function (param) {
          return "PROCESSING";
        });
      } else {
        setPaymentStatus(function (param) {
          return "INCOMPLETE";
        });
      }
      setPaymentId(function (param) {
        return paymentIdFromPaymemtIntentClientSecret;
      });
      if (status.length <= 0 && LogicUtils.isNonEmptyString(keyValue)) {
        getClientSecret();
      }
    },
    [keyValue],
  );
  var tmp;
  if (typeof paymentStatus !== "object") {
    switch (paymentStatus) {
      case "SUCCESS":
        tmp = React.createElement(
          ProdOnboardingUIUtils.BasicAccountSetupSuccessfulPage.make,
          {
            iconName: "account-setup-completed",
            statusText: "Payment Successful",
            buttonText: successButtonText,
            buttonOnClick: function () {
              onProceed(paymentId);
            },
            customWidth: customWidth,
            bgColor: "bg-green-success_page_bg",
            isButtonVisible: Core__Option.isSome(paymentId),
          },
        );
        break;
      case "PROCESSING":
        tmp = React.createElement(
          ProdOnboardingUIUtils.BasicAccountSetupSuccessfulPage.make,
          {
            iconName: "processing",
            statusText: "Payment Pending",
            buttonText: successButtonText,
            buttonOnClick: function () {
              onProceed(paymentId);
            },
            customWidth: customWidth,
            bgColor: "bg-yellow-pending_page_bg",
            isButtonVisible: Core__Option.isSome(paymentId),
          },
        );
        break;
      case "CHECKCONFIGURATION":
        tmp = React.createElement(
          ProdOnboardingUIUtils.BasicAccountSetupSuccessfulPage.make,
          {
            iconName: "processing",
            statusText: "Check your Configurations",
            buttonText: successButtonText,
            buttonOnClick: function () {
              onProceed(paymentId);
            },
            customWidth: customWidth,
            bgColor: "bg-yellow-pending_page_bg",
            isButtonVisible: Core__Option.isSome(paymentId),
          },
        );
        break;
      default:
        tmp = null;
    }
  } else {
    tmp = React.createElement(
      ProdOnboardingUIUtils.BasicAccountSetupSuccessfulPage.make,
      {
        iconName: "account-setup-failed",
        statusText: "Payment Failed",
        buttonText: successButtonText,
        buttonOnClick: function () {
          onProceed(paymentId);
        },
        errorMessage: match$3[0],
        customWidth: customWidth,
        bgColor: "bg-red-failed_page_bg",
        isButtonVisible: Core__Option.isSome(paymentId),
      },
    );
  }
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-12 h-full " + paymentStatusStyles,
    },
    tmp,
    clientSecret !== undefined
      ? isTestCredsNeeded
        ? React.createElement(
            "div",
            {
              className: "flex gap-8",
            },
            React.createElement(
              "div",
              {
                className: sdkWidth,
              },
              React.createElement(WebSDK.make, {
                clientSecret: clientSecret,
                publishableKey: publishableKey,
                sdkType: "ELEMENT",
                paymentStatus: paymentStatus,
                currency: initialValues.currency,
                setPaymentStatus: setPaymentStatus,
                setErrorMessage: setErrorMessage,
                elementOptions: elementOptions,
                paymentElementOptions: paymentElementOptions,
                returnUrl: returnUrl,
                amount: initialValues.amount,
                setClientSecret: setClientSecret,
              }),
            ),
            React.createElement(TestCredentials.make, {}),
          )
        : React.createElement(WebSDK.make, {
            clientSecret: clientSecret,
            publishableKey: publishableKey,
            sdkType: "ELEMENT",
            paymentStatus: paymentStatus,
            currency: initialValues.currency,
            setPaymentStatus: setPaymentStatus,
            setErrorMessage: setErrorMessage,
            elementOptions: elementOptions,
            paymentElementOptions: paymentElementOptions,
            returnUrl: returnUrl,
            amount: initialValues.amount,
            setClientSecret: setClientSecret,
          })
      : null,
  );
}

var make = TestPayment;

export { make };
/* react Not a pure module */
