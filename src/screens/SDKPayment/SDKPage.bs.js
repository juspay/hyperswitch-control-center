// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as HomeUtils from "../Home/HomeUtils.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as TestPayment from "./TestPayment.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../HSwitchUtils.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as SDKPaymentUtils from "./SDKPaymentUtils.bs.js";
import * as TestCredentials from "./TestCredentials.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as BreadCrumbNavigation from "../../utils/BreadCrumbNavigation.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";

var h3Leading2Style = HSwitchUtils.getTextClass(["H3", "Leading_2"]);

function SDKPage$SDKConfiguarationFields(props) {
  var initialValues = props.initialValues;
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var disableSelectionForProfile =
    HomeUtils.isDefaultBusinessProfile(businessProfiles);
  var connectorList = Recoil.useRecoilValue(HyperswitchAtom.connectorListAtom);
  var dropDownOptions = HomeUtils.countries.map(function (item) {
    return {
      label: item.countryName + " (" + item.currency + ")",
      value: item.isoAlpha2 + "-" + item.currency,
    };
  });
  var selectProfileField = FormRenderer.makeFieldInfo(
    "Profile",
    undefined,
    "profile_id",
    InputFields.selectInput(
      MerchantAccountUtils.businessProfileNameDropDownOption(businessProfiles),
      "Select Profile",
      true,
      undefined,
      disableSelectionForProfile,
      true,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    ),
    undefined,
    undefined,
    undefined,
    undefined,
    "",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
  var selectCurrencyField = FormRenderer.makeFieldInfo(
    "Currency",
    undefined,
    "country_currency",
    InputFields.selectInput(
      dropDownOptions,
      "Select Currency",
      true,
      undefined,
      undefined,
      true,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    ),
    undefined,
    undefined,
    undefined,
    undefined,
    "",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
  var enterAmountField = FormRenderer.makeFieldInfo(
    "Enter amount",
    undefined,
    "amount",
    function (input, param) {
      return InputFields.numericTextInput(
        false,
        "w-full",
        undefined,
        2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      )(
        {
          name: input.name,
          onBlur: input.onBlur,
          onChange: function (ev) {
            var eventValueToFloat = LogicUtils.getFloatFromString(ev, 0.0);
            var valInCents = (eventValueToFloat * 100.0).toString();
            input.onChange(valInCents);
          },
          onFocus: input.onFocus,
          value: (initialValues.amount / 100.0).toString(),
          checked: input.checked,
        },
        "Enter amount",
      );
    },
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
  return React.createElement(
    "div",
    {
      className: "w-full",
    },
    React.createElement(FormRenderer.FieldRenderer.make, {
      field: selectProfileField,
      fieldWrapperClass: "!w-full",
    }),
    React.createElement(FormRenderer.FieldRenderer.make, {
      field: selectCurrencyField,
      fieldWrapperClass: "!w-full",
    }),
    React.createElement(FormRenderer.FieldRenderer.make, {
      field: enterAmountField,
      fieldWrapperClass: "!w-full",
    }),
    React.createElement(FormRenderer.SubmitButton.make, {
      text: "Show preview",
      disabledParamter:
        LogicUtils.isEmptyString(initialValues.profile_id) ||
        connectorList.length <= 0,
      customSumbitButtonStyle: "!mt-5",
    }),
  );
}

var SDKConfiguarationFields = {
  make: SDKPage$SDKConfiguarationFields,
};

function SDKPage(props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var filtersFromUrl = LogicUtils.getDictFromUrlSearchParams(url.search);
  var match = React.useState(function () {
    return false;
  });
  var setIsSDKOpen = match[1];
  var match$1 = React.useState(function () {
    return "";
  });
  var setKey = match$1[1];
  var key = match$1[0];
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var defaultBusinessProfile =
    MerchantAccountUtils.getValueFromBusinessProfile(businessProfiles);
  var match$2 = React.useState(function () {
    return SDKPaymentUtils.initialValueForForm(defaultBusinessProfile);
  });
  var setInitialValues = match$2[1];
  var initialValues = match$2[0];
  var connectorList = Recoil.useRecoilValue(HyperswitchAtom.connectorListAtom);
  React.useEffect(
    function () {
      var paymentIntentOptional =
        filtersFromUrl["payment_intent_client_secret"];
      if (Core__Option.isSome(paymentIntentOptional)) {
        setIsSDKOpen(function (param) {
          return true;
        });
      }
    },
    [filtersFromUrl],
  );
  React.useEffect(
    function () {
      setInitialValues(function (param) {
        return SDKPaymentUtils.initialValueForForm(defaultBusinessProfile);
      });
    },
    [defaultBusinessProfile.profile_id.length],
  );
  var onProceed = async function (paymentId) {
    if (paymentId !== undefined) {
      return RescriptReactRouter.replace(
        GlobalVars.appendDashboardPath("/payments/" + paymentId),
      );
    }
  };
  var onSubmit = function (values, param) {
    setKey(function (param) {
      return Date.now().toString();
    });
    setInitialValues(function (param) {
      return SDKPaymentUtils.getTypedValueForPayment(values);
    });
    setIsSDKOpen(function (param) {
      return true;
    });
    RescriptReactRouter.push(GlobalVars.appendDashboardPath("/sdk"));
    return Promise.resolve(null);
  };
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(BreadCrumbNavigation.make, {
      path: [
        {
          title: "Home",
          link: "/home",
        },
      ],
      currentPageTitle: "Explore Demo Checkout Experience",
    }),
    React.createElement(
      "div",
      {
        className: "w-full flex border rounded-md bg-white",
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col w-1/2 border",
        },
        React.createElement(
          "div",
          {
            className: "p-6 border-b-1 border-[#E6E6E6]",
          },
          React.createElement(
            "p",
            {
              className: h3Leading2Style,
            },
            "Setup test checkout",
          ),
        ),
        React.createElement(
          "div",
          {
            className: "p-7 flex flex-col gap-16",
          },
          React.createElement(Form.make, {
            children: React.createElement(SDKPage$SDKConfiguarationFields, {
              initialValues: initialValues,
            }),
            onSubmit: onSubmit,
            initialValues: initialValues,
            formClass: "grid grid-cols-2 gap-x-8 gap-y-4",
          }),
          React.createElement(TestCredentials.make, {}),
        ),
      ),
      React.createElement(
        "div",
        {
          className: "flex flex-col flex-1",
        },
        React.createElement(
          "div",
          {
            className: "p-6 border-l-1 border-b-1 border-[#E6E6E6]",
          },
          React.createElement(
            "p",
            {
              className: h3Leading2Style,
            },
            "Preview",
          ),
        ),
        match[0]
          ? React.createElement(
              "div",
              {
                className: "p-7 h-full bg-sidebar-blue",
              },
              JsxPPXReactSupportU.createElementWithKey(key, TestPayment.make, {
                returnUrl: GlobalVars.getHostUrlWithBasePath + "/sdk",
                onProceed: onProceed,
                sdkWidth: "!w-[100%]",
                isTestCredsNeeded: false,
                customWidth: "!w-full !h-full",
                paymentStatusStyles: "",
                successButtonText: "Go to Payment",
                keyValue: key,
                initialValues: initialValues,
              }),
            )
          : connectorList.length <= 0
            ? React.createElement(HelperComponents.BluredTableComponent.make, {
                infoText:
                  "Connect to a payment processor to make your first payment",
                buttonText: "Connect a connector",
                onClickUrl: "/connectors",
                moduleName: "",
              })
            : React.createElement(
                "div",
                {
                  className:
                    "bg-sidebar-blue flex items-center justify-center h-full",
                },
                React.createElement("img", {
                  alt: "blurry-sdk",
                  src: "/assets/BlurrySDK.svg",
                }),
              ),
      ),
    ),
  );
}

var make = SDKPage;

export { h3Leading2Style, SDKConfiguarationFields, make };
/* h3Leading2Style Not a pure module */
