// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as Clipboard from "../../libraries/Clipboard.bs.js";
import * as PageUtils from "./PageUtils.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as GatewayIcon from "../../components/custom-icons/GatewayIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";
import * as BusinessProfileHook from "../Hooks/BusinessProfileHook.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function HelperComponents$CopyTextCustomComp(props) {
  var __customOnCopyClick = props.customOnCopyClick;
  var __customParentClass = props.customParentClass;
  var __customTextCss = props.customTextCss;
  var __copyValue = props.copyValue;
  var displayValue = props.displayValue;
  var copyValue =
    __copyValue !== undefined
      ? Caml_option.valFromOption(__copyValue)
      : undefined;
  var customTextCss = __customTextCss !== undefined ? __customTextCss : "";
  var customParentClass =
    __customParentClass !== undefined
      ? __customParentClass
      : "flex items-center";
  var customOnCopyClick =
    __customOnCopyClick !== undefined ? __customOnCopyClick : function () {};
  var showToast = ToastState.useShowToast();
  var copyVal = copyValue !== undefined ? copyValue : displayValue;
  if (LogicUtils.isNonEmptyString(displayValue)) {
    return React.createElement(
      "div",
      {
        className: customParentClass,
      },
      React.createElement(
        "div",
        {
          className: customTextCss,
        },
        displayValue,
      ),
      React.createElement("img", {
        className: "cursor-pointer",
        alt: "cursor",
        src: "/assets/CopyToClipboard.svg",
        onClick: function (ev) {
          ev.stopPropagation();
          Clipboard.writeText(copyVal);
          customOnCopyClick();
          showToast(
            "Copied to Clipboard!",
            "ToastSuccess",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
        },
      }),
    );
  } else {
    return "NA";
  }
}

var CopyTextCustomComp = {
  make: HelperComponents$CopyTextCustomComp,
};

function HelperComponents$BluredTableComponent(props) {
  var __headerRightButton = props.headerRightButton;
  var __showRedirectCTA = props.showRedirectCTA;
  var moduleSubtitle = props.moduleSubtitle;
  var __setPaymentModal = props.setPaymentModal;
  var __paymentModal = props.paymentModal;
  var __onClickUrl = props.onClickUrl;
  var __onClickElement = props.onClickElement;
  var __buttonText = props.buttonText;
  var buttonText = __buttonText !== undefined ? __buttonText : "";
  var onClickElement =
    __onClickElement !== undefined
      ? Caml_option.valFromOption(__onClickElement)
      : null;
  var onClickUrl = __onClickUrl !== undefined ? __onClickUrl : "";
  var paymentModal = __paymentModal !== undefined ? __paymentModal : false;
  var setPaymentModal =
    __setPaymentModal !== undefined ? __setPaymentModal : function (param) {};
  var showRedirectCTA =
    __showRedirectCTA !== undefined ? __showRedirectCTA : true;
  var headerRightButton =
    __headerRightButton !== undefined
      ? Caml_option.valFromOption(__headerRightButton)
      : null;
  var dummyTableValueDict = Object.fromEntries([
    ["payment_id", "##############"],
    ["merchant_id", "####"],
    ["status", "####"],
    ["amount", "####"],
    ["amount_capturable", "####"],
  ]);
  var dummyTableValue = Core__Array.make(5, dummyTableValueDict);
  var subTitle = Core__Option.isSome(moduleSubtitle)
    ? Core__Option.getOr(moduleSubtitle, "")
    : "";
  return React.createElement(
    "div",
    {
      className: "relative flex flex-col gap-8",
    },
    React.createElement(
      "div",
      {
        className: "flex items-center justify-between ",
      },
      React.createElement(PageUtils.PageHeading.make, {
        title: props.moduleName,
        subTitle: subTitle,
      }),
      React.createElement("div", undefined, headerRightButton),
    ),
    React.createElement(
      "div",
      {
        className: "blur bg-white p-8",
      },
      dummyTableValue.map(function (value, index) {
        return React.createElement(
          "div",
          {
            key: index.toString(),
            className: "flex gap-8 my-10 justify-between",
          },
          Object.keys(value).map(function (tableVal, ind) {
            return React.createElement(
              "div",
              {
                key: ind.toString(),
                className: "flex justify-center text-grey-700 opacity-50",
              },
              LogicUtils.getString(value, tableVal, ""),
            );
          }),
        );
      }),
    ),
    React.createElement(
      "div",
      {
        className:
          "absolute top-0 right-0 left-0 bottom-0 h-fit w-1/5 m-auto flex flex-col gap-6 items-center",
      },
      React.createElement(
        "p",
        {
          className: "text-center text-grey-700 font-medium opacity-50",
        },
        props.infoText,
      ),
      React.createElement(RenderIf.make, {
        condition: showRedirectCTA,
        children: React.createElement(Button.make, {
          text: buttonText,
          buttonType: "Primary",
          onClick: function (param) {
            if (LogicUtils.isNonEmptyString(onClickUrl)) {
              return RescriptReactRouter.push(
                GlobalVars.appendDashboardPath(onClickUrl),
              );
            } else {
              return setPaymentModal(function (param) {
                return true;
              });
            }
          },
        }),
      }),
    ),
    React.createElement(RenderIf.make, {
      condition: paymentModal,
      children: onClickElement,
    }),
  );
}

var BluredTableComponent = {
  make: HelperComponents$BluredTableComponent,
};

function HelperComponents$KeyAndCopyArea(props) {
  var __shadowClass = props.shadowClass;
  var copyValue = props.copyValue;
  var shadowClass = __shadowClass !== undefined ? __shadowClass : "";
  var showToast = ToastState.useShowToast();
  return React.createElement(
    "div",
    {
      className:
        "flex gap-4 border rounded-md py-2 px-4 items-center bg-white " +
        shadowClass,
    },
    React.createElement(
      "p",
      {
        className: "text-base text-grey-700 opacity-70 col-span-2 truncate",
      },
      copyValue,
    ),
    React.createElement(
      "div",
      {
        className:
          "px-2 py-1 border rounded-md flex gap-2 items-center cursor-pointer",
        onClick: function (param) {
          Clipboard.writeText(copyValue);
          showToast(
            "Copied to Clipboard!",
            "ToastSuccess",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
        },
      },
      React.createElement(Icon.make, {
        name: "copy",
        customIconColor: "rgb(156 163 175)",
      }),
      React.createElement(
        "p",
        {
          className: "text-grey-700 opacity-50",
        },
        "Copy",
      ),
    ),
  );
}

var KeyAndCopyArea = {
  make: HelperComponents$KeyAndCopyArea,
};

function HelperComponents$ConnectorCustomCell(props) {
  var connectorType = props.connectorType;
  var connectorName = props.connectorName;
  var connector_Type =
    connectorType !== undefined ? connectorType : "Processor";
  if (LogicUtils.isNonEmptyString(connectorName)) {
    return React.createElement(
      "div",
      {
        className:
          "flex items-center flex-nowrap break-all whitespace-nowrap mr-6",
      },
      React.createElement(GatewayIcon.make, {
        gateway: connectorName.toUpperCase(),
        className: "w-6 h-6 mr-2",
      }),
      React.createElement(
        "div",
        {
          className: "capitalize",
        },
        ConnectorUtils.getDisplayNameForConnector(
          connector_Type,
          connectorName,
        ),
      ),
    );
  } else {
    return "NA";
  }
}

var ConnectorCustomCell = {
  make: HelperComponents$ConnectorCustomCell,
};

function HelperComponents$BusinessProfileComponent(props) {
  var __className = props.className;
  var className = __className !== undefined ? __className : "";
  var match = BusinessProfileHook.useGetBusinessProflile(props.profile_id);
  var profile_name = match.profile_name;
  return React.createElement(
    "div",
    {
      className: className,
    },
    LogicUtils.isNonEmptyString(profile_name) ? profile_name : "NA",
  );
}

var BusinessProfileComponent = {
  make: HelperComponents$BusinessProfileComponent,
};

export {
  CopyTextCustomComp,
  BluredTableComponent,
  KeyAndCopyArea,
  ConnectorCustomCell,
  BusinessProfileComponent,
};
/* Icon Not a pure module */
