// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as ToolTip from "../../components/tooltip/ToolTip.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as GlobalProvider from "../../entryPoints/Provider/GlobalProvider.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function HSSelfServeSidebar(props) {
  var __sidebarOptions = props.sidebarOptions;
  var sidebarOptions = __sidebarOptions !== undefined ? __sidebarOptions : [];
  var match = React.useContext(GlobalProvider.defaultContext);
  var setDashboardPageState = match.setDashboardPageState;
  var match$1 = React.useContext(ThemeProvider.themeContext);
  var match$2 = match$1.globalUIConfig;
  var backgroundColor = match$2.backgroundColor;
  var textColor = match$2.font.textColor;
  var handleBackButton = function (param) {
    setDashboardPageState(function (param) {
      return "HOME";
    });
    RescriptReactRouter.replace(GlobalVars.appendDashboardPath("/home"));
  };
  var completedSteps = sidebarOptions.filter(function (sidebarOption) {
    return sidebarOption.status === "COMPLETED";
  });
  var completedPercentage =
    ((completedSteps.length / sidebarOptions.length) * 100.0) | 0;
  return React.createElement(
    "div",
    {
      className: "w-[288px] xl:w-[364px] h-screen bg-white shadow-sm shrink-0",
    },
    React.createElement(
      "div",
      {
        className: "p-6 flex flex-col gap-3",
      },
      React.createElement(
        "div",
        {
          className: "text-xl font-semibold",
        },
        props.heading,
      ),
      React.createElement(
        "div",
        {
          className: textColor.primaryNormal + " flex gap-3 cursor-pointer",
          onClick: handleBackButton,
        },
        React.createElement(Icon.make, {
          name: "back-to-home-icon",
        }),
        "Exit to Homepage",
      ),
    ),
    React.createElement(
      "div",
      {
        className: "flex flex-col px-6 py-8 gap-2 border-y border-gray-200",
      },
      React.createElement(
        "span",
        undefined,
        completedPercentage.toString() + "% Completed",
      ),
      React.createElement(
        "div",
        {
          className: "h-2 bg-gray-200",
        },
        React.createElement("div", {
          className: "h-full " + backgroundColor,
          style: {
            width: completedPercentage.toString() + "%",
          },
        }),
      ),
    ),
    sidebarOptions.map(function (sidebarOption, i) {
      var match = sidebarOption.status;
      var match$1;
      switch (match) {
        case "COMPLETED":
          match$1 = ["green-check", backgroundColor, "text-white", "", ""];
          break;
        case "ONGOING":
          match$1 = [
            "",
            backgroundColor,
            "text-white",
            "",
            textColor.primaryNormal,
          ];
          break;
        case "PENDING":
          match$1 = [
            "lock-icon",
            "bg-blue-200",
            textColor.primaryNormal,
            "bg-jp-gray-light_gray_bg",
            "",
          ];
          break;
      }
      var onClick = function (param) {
        if (sidebarOption.status === "COMPLETED") {
          return RescriptReactRouter.replace(
            GlobalVars.appendDashboardPath(sidebarOption.link),
          );
        }
      };
      var subOptionsArray = Core__Option.getOr(sidebarOption.subOptions, []);
      return React.createElement(
        "div",
        {
          key: i.toString(),
          className:
            "p-6 border-y border-gray-200 cursor-pointer " + match$1[3],
          onClick: onClick,
        },
        React.createElement(
          "div",
          {
            key: i.toString(),
            className: "flex items-center " + match$1[4] + " font-medium gap-5",
          },
          React.createElement(
            "span",
            {
              className:
                match$1[1] +
                " " +
                match$1[2] +
                " rounded-sm w-1.1-rem h-1.1-rem flex justify-center items-center text-sm",
            },
            ((i + 1) | 0).toString(),
          ),
          React.createElement(
            "div",
            {
              className: "flex-1",
            },
            React.createElement(ToolTip.make, {
              description: sidebarOption.title,
              toolTipFor: Caml_option.some(
                React.createElement(
                  "div",
                  {
                    className:
                      "w-40 xl:w-60 text-ellipsis overflow-hidden whitespace-nowrap",
                  },
                  sidebarOption.title,
                ),
              ),
            }),
          ),
          React.createElement(Icon.make, {
            name: match$1[0],
            size: 20,
          }),
        ),
        React.createElement(RenderIf.make, {
          condition:
            sidebarOption.status === "ONGOING" && subOptionsArray.length > 0,
          children: React.createElement(
            "div",
            {
              className: "my-4",
            },
            subOptionsArray.map(function (subOption, i) {
              var match = subOption.status;
              var match$1;
              switch (match) {
                case "COMPLETED":
                  match$1 = ["check", "green", "", "text-gray-600"];
                  break;
                case "ONGOING":
                  match$1 = ["nonselected", "", "bg-gray-100", "font-semibold"];
                  break;
                case "PENDING":
                  match$1 = [
                    "nonselected",
                    "text-gray-100",
                    "",
                    "text-gray-400",
                  ];
                  break;
              }
              return React.createElement(
                "div",
                {
                  key: i.toString(),
                  className:
                    "flex gap-1 items-center pl-6 py-2 rounded-md my-1 " +
                    match$1[2] +
                    " " +
                    match$1[3],
                },
                React.createElement(Icon.make, {
                  name: match$1[0],
                  customIconColor: match$1[1],
                  customHeight: "14",
                }),
                React.createElement(
                  "span",
                  {
                    className: "flex-1",
                  },
                  subOption.title,
                ),
              );
            }),
          ),
        }),
      );
    }),
  );
}

var make = HSSelfServeSidebar;

export { make };
/* Icon Not a pure module */
