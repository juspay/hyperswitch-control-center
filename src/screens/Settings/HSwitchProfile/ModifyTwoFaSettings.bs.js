// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as Modal from "../../../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as Clipboard from "../../../libraries/Clipboard.bs.js";
import * as PageUtils from "../../Helpers/PageUtils.bs.js";
import * as TotpHooks from "../../Hooks/TotpHooks.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as TwoFaUtils from "../../../entryPoints/AuthModule/TwoFaAuth/TwoFaUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../../HSwitchUtils.bs.js";
import * as TwoFaElements from "../../../entryPoints/AuthModule/TwoFaAuth/TwoFaElements.bs.js";
import * as CommonAuthUtils from "../../../entryPoints/AuthModule/Common/CommonAuthUtils.bs.js";
import * as PageLoaderWrapper from "../../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as HSwitchProfileUtils from "./HSwitchProfileUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as BreadCrumbNavigation from "../../../utils/BreadCrumbNavigation.bs.js";

var h2TextStyle = HSwitchUtils.getTextClass(["H2", "Optional"]);

var p2Regular = HSwitchUtils.getTextClass(["P2", "Regular"]);

var p3Regular = HSwitchUtils.getTextClass(["P3", "Regular"]);

function ModifyTwoFaSettings$Verify2FAModalComponent(props) {
  var __showOnlyTotp = props.showOnlyTotp;
  var __setRecoveryCode = props.setRecoveryCode;
  var __recoveryCode = props.recoveryCode;
  var __setOtp = props.setOtp;
  var __otp = props.otp;
  var setErrorMessage = props.setErrorMessage;
  var errorMessage = props.errorMessage;
  var setTwoFaState = props.setTwoFaState;
  var otp = __otp !== undefined ? __otp : "";
  var setOtp = __setOtp !== undefined ? __setOtp : function (param) {};
  var recoveryCode = __recoveryCode !== undefined ? __recoveryCode : "";
  var setRecoveryCode =
    __setRecoveryCode !== undefined ? __setRecoveryCode : function (param) {};
  var showOnlyTotp = __showOnlyTotp !== undefined ? __showOnlyTotp : false;
  var tmp;
  tmp =
    props.twoFaState === "RecoveryCode"
      ? React.createElement(
          React.Fragment,
          {},
          React.createElement(TwoFaElements.RecoveryCodesInput.make, {
            recoveryCode: recoveryCode,
            setRecoveryCode: setRecoveryCode,
          }),
          React.createElement(
            "p",
            {
              className: p2Regular + " text-jp-gray-700",
            },
            "Didn't get a code? ",
            React.createElement(
              "span",
              {
                className:
                  "cursor-pointer underline underline-offset-2 text-blue-600",
                onClick: function (param) {
                  setRecoveryCode(function (param) {
                    return "";
                  });
                  setErrorMessage(function (param) {
                    return "";
                  });
                  setTwoFaState(function (param) {
                    return "Totp";
                  });
                },
              },
              "Use totp instead",
            ),
          ),
        )
      : React.createElement(
          React.Fragment,
          {},
          React.createElement(TwoFaElements.TotpInput.make, {
            otp: otp,
            setOtp: setOtp,
          }),
          React.createElement(RenderIf.make, {
            condition: !showOnlyTotp,
            children: React.createElement(
              "p",
              {
                className: p2Regular + " text-jp-gray-700",
              },
              "Didn't get a code? ",
              React.createElement(
                "span",
                {
                  className:
                    "cursor-pointer underline underline-offset-2 text-blue-600",
                  onClick: function (param) {
                    setOtp(function (param) {
                      return "";
                    });
                    setErrorMessage(function (param) {
                      return "";
                    });
                    setTwoFaState(function (param) {
                      return "RecoveryCode";
                    });
                  },
                },
                "Use recovery-code",
              ),
            ),
          }),
        );
  return React.createElement(
    "div",
    {
      className: "flex flex-col items-center gap-2 ",
    },
    tmp,
    React.createElement(RenderIf.make, {
      condition: errorMessage.length > 0,
      children: React.createElement(
        "div",
        {
          className: "text-sm text-red-600",
        },
        "Error: " + errorMessage,
      ),
    }),
  );
}

var Verify2FAModalComponent = {
  make: ModifyTwoFaSettings$Verify2FAModalComponent,
};

function ModifyTwoFaSettings$ResetTotp(props) {
  var checkStatusResponse = props.checkStatusResponse;
  var getURL = APIUtils.useGetURL();
  var showToast = ToastState.useShowToast();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var verifyTotpLogic = TotpHooks.useVerifyTotp();
  var verifyRecoveryCodeLogic = TotpHooks.useVerifyRecoveryCode();
  var match = React.useState(function () {
    return false;
  });
  var setShowVerifyModal = match[1];
  var match$1 = React.useState(function () {
    return "";
  });
  var setOtpInModal = match$1[1];
  var otpInModal = match$1[0];
  var match$2 = React.useState(function () {
    return "";
  });
  var setOtp = match$2[1];
  var otp = match$2[0];
  var match$3 = React.useState(function () {
    return "";
  });
  var setRecoveryCode = match$3[1];
  var recoveryCode = match$3[0];
  var match$4 = React.useState(function () {
    return "Normal";
  });
  var setButtonState = match$4[1];
  var buttonState = match$4[0];
  var match$5 = React.useState(function () {
    return "RegenerateQR";
  });
  var setTotpSecret = match$5[1];
  var totpSecret = match$5[0];
  var match$6 = React.useState(function () {
    return "Totp";
  });
  var twoFaState = match$6[0];
  var match$7 = React.useState(function () {
    return "";
  });
  var setErrorMessage = match$7[1];
  var generateNewSecret = async function () {
    try {
      setButtonState(function (param) {
        return "Loading";
      });
      var url = getURL(
        "USERS",
        "Get",
        undefined,
        undefined,
        "RESET_TOTP",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await fetchDetails(url);
      setTotpSecret(function (param) {
        return {
          TAG: "ShowNewTotp",
          _0: LogicUtils.getString(
            LogicUtils.getDictfromDict(
              LogicUtils.getDictFromJsonObject(res),
              "secret",
            ),
            "totp_url",
            "",
          ),
        };
      });
      setOtp(function (param) {
        return "";
      });
      return setButtonState(function (param) {
        return "Normal";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Verification Failed");
        var errorCode = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "code",
          "",
        );
        if (CommonAuthUtils.errorSubCodeMapper(errorCode) === "UR_40") {
          setShowVerifyModal(function (param) {
            return true;
          });
        }
        setOtp(function (param) {
          return "";
        });
        setButtonState(function (param) {
          return "Normal";
        });
        return RescriptReactRouter.push(
          GlobalVars.appendDashboardPath("/account-settings/profile"),
        );
      }
      throw e;
    }
  };
  var verifyTOTP = async function (fromModal, methodType, otp) {
    try {
      setButtonState(function (param) {
        return "Loading";
      });
      if (otpInModal.length > 0 || otp.length > 0) {
        var body = LogicUtils.getJsonFromArrayOfJson([["totp", otp]]);
        await verifyTotpLogic(body, methodType);
        if (fromModal) {
          setShowVerifyModal(function (param) {
            return false;
          });
          generateNewSecret();
        } else {
          showToast(
            "Successfully reset the totp !",
            "ToastSuccess",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          RescriptReactRouter.push(
            GlobalVars.appendDashboardPath("/account-settings/profile"),
          );
        }
        setOtp(function (param) {
          return "";
        });
        setOtpInModal(function (param) {
          return "";
        });
      } else {
        showToast(
          "OTP field cannot be empty!",
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      }
      return setButtonState(function (param) {
        return "Normal";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Verification Failed");
        var errorMessage = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "message",
          "",
        );
        var errorCode = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "code",
          "",
        );
        if (CommonAuthUtils.errorSubCodeMapper(errorCode) === "UR_42") {
          setTotpSecret(function (param) {
            return "RegenerateQR";
          });
        }
        setOtpInModal(function (param) {
          return "";
        });
        setOtp(function (param) {
          return "";
        });
        setErrorMessage(function (param) {
          return errorMessage;
        });
        return setButtonState(function (param) {
          return "Normal";
        });
      }
      throw e;
    }
  };
  var verifyRecoveryCode = async function () {
    try {
      setButtonState(function (param) {
        return "Loading";
      });
      if (recoveryCode.length > 0) {
        var body = LogicUtils.getJsonFromArrayOfJson([
          ["recovery_code", recoveryCode],
        ]);
        await verifyRecoveryCodeLogic(body);
        setShowVerifyModal(function (param) {
          return false;
        });
      } else {
        showToast(
          "Recovery code cannot be empty!",
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      }
      setRecoveryCode(function (param) {
        return "";
      });
      return setButtonState(function (param) {
        return "Normal";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Verification Failed");
        var errorMessage = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "message",
          "",
        );
        setRecoveryCode(function (param) {
          return "";
        });
        setErrorMessage(function (param) {
          return errorMessage;
        });
        return setButtonState(function (param) {
          return "Normal";
        });
      }
      throw e;
    }
  };
  var handle2FaVerify = function () {
    if (twoFaState === "RecoveryCode") {
      return verifyRecoveryCode();
    } else {
      return verifyTOTP(true, "Post", otpInModal);
    }
  };
  React.useEffect(function () {
    if (checkStatusResponse.totp || checkStatusResponse.recovery_code) {
      generateNewSecret();
    } else {
      setShowVerifyModal(function (param) {
        return true;
      });
    }
  }, []);
  var handleKeyUp = function (ev) {
    var key = ev.key;
    var keyCode = ev.keyCode;
    if (key === "Enter" || keyCode === 13) {
      handle2FaVerify();
      return;
    }
  };
  React.useEffect(
    function () {
      if (otpInModal.length === 6 || recoveryCode.length === 9) {
        window.addEventListener("keyup", handleKeyUp);
      } else {
        window.removeEventListener("keyup", handleKeyUp);
      }
      return function () {
        window.removeEventListener("keyup", handleKeyUp);
      };
    },
    [otpInModal, recoveryCode],
  );
  var handleModalClose = function () {
    RescriptReactRouter.push(
      GlobalVars.appendDashboardPath("/account-settings/profile"),
    );
  };
  var tmp;
  tmp =
    typeof totpSecret !== "object"
      ? React.createElement(TwoFaElements.TotpScanQR.make, {
          totpUrl: "",
          isQrVisible: true,
        })
      : React.createElement(
          React.Fragment,
          {},
          React.createElement(TwoFaElements.TotpScanQR.make, {
            totpUrl: totpSecret._0,
            isQrVisible: true,
          }),
          React.createElement(
            "div",
            {
              className: "flex flex-col justify-center items-center gap-4",
            },
            React.createElement(TwoFaElements.TotpInput.make, {
              otp: otp,
              setOtp: setOtp,
            }),
          ),
        );
  var tmp$1;
  tmp$1 =
    typeof totpSecret !== "object"
      ? React.createElement(Button.make, {
          buttonState: buttonState,
          text: "Regenerate QR",
          buttonType: "Primary",
          buttonSize: "Small",
          rightIcon: {
            TAG: "CustomIcon",
            _0: React.createElement(Icon.make, {
              name: "thin-right-arrow",
              size: 20,
              className: "group-hover:scale-125 cursor-pointer",
            }),
          },
          onClick: function (param) {
            generateNewSecret();
          },
          customButtonStyle: "group",
        })
      : React.createElement(Button.make, {
          buttonState: otp.length === 6 ? buttonState : "Disabled",
          text: "Verify new OTP",
          buttonType: "Primary",
          buttonSize: "Small",
          rightIcon: {
            TAG: "CustomIcon",
            _0: React.createElement(Icon.make, {
              name: "thin-right-arrow",
              size: 20,
              className: "group-hover:scale-125 cursor-pointer",
            }),
          },
          onClick: function (param) {
            verifyTOTP(false, "Put", otp);
          },
          customButtonStyle: "group",
        });
  return React.createElement(
    "div",
    undefined,
    React.createElement(Modal.make, {
      showModal: match[0],
      setShowModal: setShowVerifyModal,
      children: React.createElement(
        "div",
        {
          className: "flex flex-col gap-12",
        },
        React.createElement(ModifyTwoFaSettings$Verify2FAModalComponent, {
          twoFaState: twoFaState,
          setTwoFaState: match$6[1],
          errorMessage: match$7[0],
          setErrorMessage: setErrorMessage,
          otp: otpInModal,
          setOtp: setOtpInModal,
          recoveryCode: recoveryCode,
          setRecoveryCode: setRecoveryCode,
        }),
        React.createElement(
          "div",
          {
            className: "flex flex-1 justify-end",
          },
          React.createElement(Button.make, {
            buttonState:
              otpInModal.length < 6 && recoveryCode.length < 9
                ? "Disabled"
                : buttonState,
            text: twoFaState === "Totp" ? "Verify OTP" : "Verify recovery code",
            buttonType: "Primary",
            buttonSize: "Small",
            rightIcon: {
              TAG: "CustomIcon",
              _0: React.createElement(Icon.make, {
                name: "thin-right-arrow",
                size: 20,
                className: "group-hover:scale-125 cursor-pointer",
              }),
            },
            onClick: function (param) {
              handle2FaVerify();
            },
          }),
        ),
      ),
      modalHeading:
        twoFaState === "Totp" ? "Verify OTP" : "Verify recovery code",
      modalClass: "w-fit m-auto",
      onCloseClickCustomFun: handleModalClose,
    }),
    React.createElement(
      "div",
      {
        className: "bg-white h-40-rem w-200 rounded-2xl flex flex-col border",
      },
      React.createElement(
        "div",
        {
          className: "p-6 border-b-2 flex justify-between items-center",
        },
        React.createElement(
          "p",
          {
            className: h2TextStyle + " text-grey-900",
          },
          "Enable new 2FA",
        ),
      ),
      React.createElement(
        "div",
        {
          className: "px-12 py-8 flex flex-col gap-12 justify-between flex-1",
        },
        tmp,
        React.createElement(
          "div",
          {
            className: "flex justify-end gap-4",
          },
          tmp$1,
        ),
      ),
    ),
  );
}

var ResetTotp = {
  make: ModifyTwoFaSettings$ResetTotp,
};

function ModifyTwoFaSettings$RegenerateRecoveryCodes(props) {
  var checkStatusResponse = props.checkStatusResponse;
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var showToast = ToastState.useShowToast();
  var verifyTotpLogic = TotpHooks.useVerifyTotp();
  var match = React.useState(function () {
    return false;
  });
  var setShowVerifyModal = match[1];
  var match$1 = React.useState(function () {
    return "";
  });
  var setOtpInModal = match$1[1];
  var otpInModal = match$1[0];
  var match$2 = React.useState(function () {
    return "Normal";
  });
  var setButtonState = match$2[1];
  var match$3 = React.useState(function () {
    return [];
  });
  var setRecoveryCodes = match$3[1];
  var recoveryCodes = match$3[0];
  var match$4 = React.useState(function () {
    return "";
  });
  var setErrorMessage = match$4[1];
  var match$5 = React.useState(function () {
    return "Success";
  });
  var setScreenState = match$5[1];
  var generateRecoveryCodes = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var url = getURL(
        "USERS",
        "Get",
        undefined,
        undefined,
        "GENERATE_RECOVERY_CODES",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await fetchDetails(url);
      var recoveryCodesValue = LogicUtils.getStrArray(
        LogicUtils.getDictFromJsonObject(response),
        "recovery_codes",
      );
      setRecoveryCodes(function (param) {
        return recoveryCodesValue;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      setButtonState(function (param) {
        return "Normal";
      });
      showToast(
        "Failed to generate recovery codes!",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      RescriptReactRouter.push(
        GlobalVars.appendDashboardPath("/account-settings/profile"),
      );
      return setScreenState(function (param) {
        return "Success";
      });
    }
  };
  var handleModalClose = function () {
    RescriptReactRouter.push(
      GlobalVars.appendDashboardPath("/account-settings/profile"),
    );
  };
  var verifyTOTP = async function () {
    try {
      setButtonState(function (param) {
        return "Loading";
      });
      if (otpInModal.length > 0) {
        var body = LogicUtils.getJsonFromArrayOfJson([["totp", otpInModal]]);
        await verifyTotpLogic(body, "Post");
        setShowVerifyModal(function (param) {
          return false;
        });
        generateRecoveryCodes();
      } else {
        showToast(
          "OTP field cannot be empty!",
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      }
      setOtpInModal(function (param) {
        return "";
      });
      return setButtonState(function (param) {
        return "Normal";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Verification Failed");
        var errorMessage = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(LogicUtils.safeParse(err)),
          "message",
          "",
        );
        setOtpInModal(function (param) {
          return "";
        });
        setErrorMessage(function (param) {
          return errorMessage;
        });
        return setButtonState(function (param) {
          return "Normal";
        });
      }
      throw e;
    }
  };
  React.useEffect(function () {
    if (checkStatusResponse.totp) {
      generateRecoveryCodes();
    } else {
      setShowVerifyModal(function (param) {
        return true;
      });
    }
  }, []);
  var handleKeyUp = function (ev) {
    var key = ev.key;
    var keyCode = ev.keyCode;
    if (key === "Enter" || keyCode === 13) {
      verifyTOTP();
      return;
    }
  };
  React.useEffect(
    function () {
      if (otpInModal.length === 6) {
        window.addEventListener("keyup", handleKeyUp);
      } else {
        window.removeEventListener("keyup", handleKeyUp);
      }
      return function () {
        window.removeEventListener("keyup", handleKeyUp);
      };
    },
    [otpInModal],
  );
  var copyRecoveryCodes = function (ev) {
    ev.stopPropagation();
    Clipboard.writeText(
      JSON.stringify(
        LogicUtils.getJsonFromArrayOfString(recoveryCodes),
        null,
        3,
      ),
    );
    showToast(
      "Copied to Clipboard!",
      "ToastSuccess",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
  };
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        undefined,
        React.createElement(Modal.make, {
          showModal: match[0],
          setShowModal: setShowVerifyModal,
          children: React.createElement(
            "div",
            {
              className: "flex flex-col gap-12",
            },
            React.createElement(ModifyTwoFaSettings$Verify2FAModalComponent, {
              twoFaState: "Totp",
              setTwoFaState: function (param) {},
              errorMessage: match$4[0],
              setErrorMessage: setErrorMessage,
              otp: otpInModal,
              setOtp: setOtpInModal,
              showOnlyTotp: true,
            }),
            React.createElement(
              "div",
              {
                className: "flex flex-1 justify-end",
              },
              React.createElement(Button.make, {
                buttonState: otpInModal.length < 6 ? "Disabled" : match$2[0],
                text: "Verify OTP",
                buttonType: "Primary",
                buttonSize: "Small",
                rightIcon: {
                  TAG: "CustomIcon",
                  _0: React.createElement(Icon.make, {
                    name: "thin-right-arrow",
                    size: 20,
                    className: "group-hover:scale-125 cursor-pointer",
                  }),
                },
                onClick: function (param) {
                  verifyTOTP();
                },
              }),
            ),
          ),
          modalHeading: "Verify OTP",
          modalClass: "w-fit m-auto",
          onCloseClickCustomFun: handleModalClose,
        }),
        React.createElement(
          "div",
          {
            className:
              "bg-white border h-40-rem w-133 rounded-2xl flex flex-col",
          },
          React.createElement(
            "div",
            {
              className: "p-6 border-b-2 flex justify-between items-center",
            },
            React.createElement(
              "p",
              {
                className: h2TextStyle + " text-grey-900",
              },
              "Two factor recovery codes",
            ),
          ),
          React.createElement(
            "div",
            {
              className: "px-8 py-8 flex flex-col flex-1 justify-between",
            },
            React.createElement(
              "div",
              {
                className: "flex flex-col  gap-6",
              },
              React.createElement(
                "p",
                {
                  className: "text-jp-gray-700",
                },
                "Recovery codes provide a way to access your account if you lose your device and can't receive two-factor authentication codes.",
              ),
              React.createElement(HSwitchUtils.WarningArea.make, {
                warningText:
                  "These codes are the last resort for accessing your account in case you lose your password and second factors. If you cannot find these codes, you will lose access to your account.",
              }),
              React.createElement(TwoFaElements.ShowRecoveryCodes.make, {
                recoveryCodes: recoveryCodes,
              }),
            ),
            React.createElement(
              "div",
              {
                className: "flex gap-4 justify-end",
              },
              React.createElement(Button.make, {
                text: "Copy",
                buttonType: "Secondary",
                buttonSize: "Small",
                leftIcon: {
                  TAG: "CustomIcon",
                  _0: React.createElement("img", {
                    alt: "image",
                    src: "/assets/CopyToClipboard.svg",
                  }),
                },
                onClick: copyRecoveryCodes,
              }),
              React.createElement(Button.make, {
                text: "Download",
                buttonType: "Primary",
                buttonSize: "Small",
                leftIcon: {
                  TAG: "FontAwesome",
                  _0: "download-api-key",
                },
                onClick: function (param) {
                  TwoFaUtils.downloadRecoveryCodes(recoveryCodes);
                  showToast(
                    "Successfully regenerated new recovery codes !",
                    "ToastSuccess",
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                  );
                  RescriptReactRouter.push(
                    GlobalVars.appendDashboardPath("/account-settings/profile"),
                  );
                },
              }),
            ),
          ),
        ),
      ),
    ),
    screenState: match$5[0],
  });
}

var RegenerateRecoveryCodes = {
  make: ModifyTwoFaSettings$RegenerateRecoveryCodes,
};

function ModifyTwoFaSettings(props) {
  var showToast = ToastState.useShowToast();
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var twofactorAuthType = LogicUtils.getDictFromUrlSearchParams(url.search)[
    "type"
  ];
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match = React.useState(function () {
    return HSwitchProfileUtils.typedValueForCheckStatus({});
  });
  var setCheckStatusResponse = match[1];
  var checkStatusResponse = match[0];
  var match$1 = React.useState(function () {
    return "Success";
  });
  var setScreenState = match$1[1];
  var checkTwoFaStatus = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var url = getURL(
        "USERS",
        "Get",
        undefined,
        undefined,
        "CHECK_TWO_FACTOR_AUTH_STATUS",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await fetchDetails(url);
      setCheckStatusResponse(function (param) {
        return HSwitchProfileUtils.typedValueForCheckStatus(
          LogicUtils.getDictFromJsonObject(res),
        );
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      showToast(
        "Failed to fetch 2FA status!",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return RescriptReactRouter.push(
        GlobalVars.appendDashboardPath("/account-settings/profile"),
      );
    }
  };
  React.useEffect(function () {
    checkTwoFaStatus();
  }, []);
  var match$2 = HSwitchProfileUtils.getTwoFaEnumFromString(twofactorAuthType);
  var pageTitle;
  pageTitle =
    match$2 === "ResetTotp" ? "Reset totp" : "Regenerate recovery codes";
  var match$3 = HSwitchProfileUtils.getTwoFaEnumFromString(twofactorAuthType);
  var tmp;
  tmp =
    match$3 === "ResetTotp"
      ? React.createElement(ModifyTwoFaSettings$ResetTotp, {
          checkStatusResponse: checkStatusResponse,
        })
      : React.createElement(ModifyTwoFaSettings$RegenerateRecoveryCodes, {
          checkStatusResponse: checkStatusResponse,
        });
  return React.createElement(
    PageLoaderWrapper.make,
    {
      children: Caml_option.some(null),
      screenState: match$1[0],
    },
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-2",
      },
      React.createElement(PageUtils.PageHeading.make, {
        title: pageTitle,
      }),
      React.createElement(BreadCrumbNavigation.make, {
        path: [
          {
            title: "Profile",
            link: "/account-settings/profile",
          },
        ],
        currentPageTitle: pageTitle,
        cursorStyle: "cursor-pointer",
      }),
    ),
    tmp,
  );
}

var make = ModifyTwoFaSettings;

export {
  h2TextStyle,
  p2Regular,
  p3Regular,
  Verify2FAModalComponent,
  ResetTotp,
  RegenerateRecoveryCodes,
  make,
};
/* h2TextStyle Not a pure module */
