// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as PageUtils from "../../Helpers/PageUtils.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "../../../components/LoadedTable.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../../HSwitchUtils.bs.js";
import * as HSLocalStorage from "../../HSLocalStorage.bs.js";
import * as CommonAuthHooks from "../../../entryPoints/AuthModule/Common/CommonAuthHooks.bs.js";
import * as CommonAuthUtils from "../../../entryPoints/AuthModule/Common/CommonAuthUtils.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as AuthInfoProvider from "../../../context/AuthInfoProvider.bs.js";
import * as PageLoaderWrapper from "../../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as HyperSwitchEntryUtils from "../../../entryPoints/HyperSwitchEntryUtils.bs.js";
import * as SwitchMerchantListHook from "../../SwitchMerchant/SwitchMerchantListHook.bs.js";
import * as HSwitchProfileSettingsEntity from "./HSwitchProfileSettingsEntity.bs.js";

var titleClass = "text-hyperswitch_black text-base w-1/5";

var subTitleClass =
  "text-hyperswitch_black opacity-50 text-base font-semibold break-all";

var sectionHeadingClass = "font-semibold text-fs-18";

var p1Leading1TextClass = HSwitchUtils.getTextClass(["P1", "Regular"]);

var p3RegularTextClass =
  HSwitchUtils.getTextClass(["P3", "Regular"]) + " text-gray-700 opacity-50";

function HSwitchProfileSettings$MerchantDetailsSection(props) {
  var match = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return 0;
  });
  var fetchSwitchMerchantList =
    SwitchMerchantListHook.useFetchSwitchMerchantList();
  var switchMerchantListValue = Recoil.useRecoilValue(
    HyperswitchAtom.switchMerchantListAtom,
  );
  React.useEffect(function () {
    try {
      fetchSwitchMerchantList();
      setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_exn) {
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === Js_exn.$$Error) {
        setScreenState(function (param) {
          return "Custom";
        });
      } else {
        throw exn;
      }
    }
  }, []);
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        undefined,
        React.createElement(
          "div",
          {
            className:
              "border bg-gray-50 rounded-t-lg border-b-0 w-full px-10 py-6",
          },
          React.createElement(
            "p",
            {
              className: sectionHeadingClass,
            },
            "Merchant Info",
          ),
        ),
        React.createElement(LoadedTable.make, {
          visibleColumns: HSwitchProfileSettingsEntity.visibleColumns,
          title: "Merchant Info",
          actualData: switchMerchantListValue.map(function (prim) {
            return prim;
          }),
          totalResults: switchMerchantListValue.length,
          resultsPerPage: 7,
          offset: match$1[0],
          setOffset: match$1[1],
          entity: HSwitchProfileSettingsEntity.merchantTableEntity,
          currrentFetchCount: switchMerchantListValue.length,
          hideTitle: true,
        }),
      ),
    ),
    screenState: match[0],
    sectionHeight: "h-40-vh",
  });
}

var MerchantDetailsSection = {
  make: HSwitchProfileSettings$MerchantDetailsSection,
};

function HSwitchProfileSettings$ResetPassword(props) {
  var getURL = APIUtils.useGetURL();
  var match = React.useState(function () {
    return false;
  });
  var setIsLoading = match[1];
  var match$1 = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  var email = match$1.email;
  var isPlayground = HSLocalStorage.getIsPlaygroundFromLocalStorage();
  var authId = HyperSwitchEntryUtils.getSessionData(
    "auth_id",
    undefined,
    undefined,
  );
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var showToast = ToastState.useShowToast();
  var resetPassword = async function (body) {
    setIsLoading(function (param) {
      return true;
    });
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "FORGOT_PASSWORD",
        undefined,
        undefined,
        Caml_option.some("auth_id=" + authId),
        undefined,
      );
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      showToast(
        "Please check your registered e-mail",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setIsLoading(function (param) {
        return false;
      });
    } catch (exn) {
      showToast(
        "Reset Password Failed, Try again",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setIsLoading(function (param) {
        return false;
      });
    }
  };
  var setPassword = function () {
    var body = CommonAuthUtils.getEmailBody(email, undefined, undefined);
    resetPassword(body);
  };
  return React.createElement(
    "div",
    {
      className: "flex gap-10 items-center",
    },
    React.createElement(
      "p",
      {
        className: "text-hyperswitch_black text-base  w-1/5",
      },
      "Password:",
    ),
    React.createElement(
      "div",
      {
        className:
          "flex flex-col gap-5 items-start md:flex-row md:items-center flex-wrap",
      },
      React.createElement(
        "p",
        {
          className:
            "text-hyperswitch_black opacity-50 text-base font-semibold break-all",
        },
        "********",
      ),
      React.createElement(RenderIf.make, {
        condition: !isPlayground,
        children: React.createElement(Button.make, {
          loadingText: "Sending mail...",
          buttonState: match[0] ? "Loading" : "Normal",
          text: "Reset Password",
          buttonType: "Secondary",
          buttonSize: "Small",
          onClick: function (param) {
            setPassword();
          },
        }),
      }),
    ),
  );
}

var ResetPassword = {
  make: HSwitchProfileSettings$ResetPassword,
};

function HSwitchProfileSettings$TwoFactorAuthenticationDetails(props) {
  return React.createElement(
    "div",
    undefined,
    React.createElement(
      "div",
      {
        className: "border bg-gray-50 rounded-t-lg w-full px-10 py-6",
      },
      React.createElement(
        "p",
        {
          className: sectionHeadingClass,
        },
        "Two factor authentication",
      ),
    ),
    React.createElement(
      "div",
      {
        className:
          "flex flex-col gap-5 bg-white border border-t-0 rounded-b-lg w-full px-10 pt-6 pb-10",
      },
      React.createElement(
        "div",
        {
          className: "flex gap-10 items-center justify-between",
        },
        React.createElement(
          "p",
          {
            className: p1Leading1TextClass + " flex flex-col gap-1",
          },
          "Change app / device",
          React.createElement(
            "span",
            {
              className: p3RegularTextClass,
            },
            "Reset TOTP to regain access if you've changed or lost your device.",
          ),
        ),
        React.createElement(Button.make, {
          text: "Edit",
          buttonSize: "XSmall",
          onClick: function (param) {
            RescriptReactRouter.push(
              GlobalVars.appendDashboardPath(
                "/account-settings/profile/2fa?type=reset_totp",
              ),
            );
          },
        }),
      ),
      React.createElement("hr", undefined),
      React.createElement(
        "div",
        {
          className: "flex gap-10 items-center justify-between",
        },
        React.createElement(
          "p",
          {
            className: p1Leading1TextClass + " flex flex-col gap-1",
          },
          "Regenerate recovery codes",
          React.createElement(
            "span",
            {
              className: p3RegularTextClass,
            },
            "Regenerate your access code to ensure continued access and security for your account.",
          ),
        ),
        React.createElement(Button.make, {
          text: "Edit",
          buttonSize: "XSmall",
          onClick: function (param) {
            RescriptReactRouter.push(
              GlobalVars.appendDashboardPath(
                "/account-settings/profile/2fa?type=regenerate_recovery_code",
              ),
            );
          },
        }),
      ),
    ),
  );
}

var TwoFactorAuthenticationDetails = {
  make: HSwitchProfileSettings$TwoFactorAuthenticationDetails,
};

function HSwitchProfileSettings$BasicDetailsSection(props) {
  var match = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  var userName = match.name;
  var userTitle = LogicUtils.userNameToTitle(userName);
  var isPlayground = HSLocalStorage.getIsPlaygroundFromLocalStorage();
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  return React.createElement(
    "div",
    undefined,
    React.createElement(
      "div",
      {
        className: "border bg-gray-50 rounded-t-lg w-full px-10 py-6",
      },
      React.createElement(
        "p",
        {
          className: sectionHeadingClass,
        },
        "User Info",
      ),
    ),
    React.createElement(
      "div",
      {
        className:
          "flex flex-col gap-5 bg-white border border-t-0 rounded-b-lg w-full px-10 pt-6 pb-10",
      },
      React.createElement(
        "div",
        {
          className: "flex gap-10 items-center",
        },
        React.createElement(
          "p",
          {
            className: titleClass,
          },
          "Name:",
        ),
        React.createElement(
          "p",
          {
            className: subTitleClass,
          },
          LogicUtils.isNonEmptyString(userName) ? userTitle : "--",
        ),
      ),
      React.createElement("hr", undefined),
      React.createElement(
        "div",
        {
          className: "flex gap-10 items-center",
        },
        React.createElement(
          "p",
          {
            className: titleClass,
          },
          "Email:",
        ),
        React.createElement(
          "p",
          {
            className: subTitleClass,
          },
          match.email,
        ),
      ),
      React.createElement("hr", undefined),
      React.createElement(RenderIf.make, {
        condition: !isPlayground && featureFlagDetails.email,
        children: React.createElement(HSwitchProfileSettings$ResetPassword, {}),
      }),
    ),
  );
}

var BasicDetailsSection = {
  make: HSwitchProfileSettings$BasicDetailsSection,
};

function HSwitchProfileSettings(props) {
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var authStatus = match.authStatus;
  var showTwoFaSettings;
  if (typeof authStatus !== "object" || authStatus.TAG !== "LoggedIn") {
    showTwoFaSettings = false;
  } else {
    var authInfo = authStatus._0;
    showTwoFaSettings =
      authInfo.TAG === "BasicAuth"
        ? false
        : authInfo._0.is_two_factor_auth_setup;
  }
  return React.createElement(
    "div",
    {
      className: "flex flex-col overflow-scroll gap-8",
    },
    React.createElement(PageUtils.PageHeading.make, {
      title: "Profile",
      subTitle: "Manage your profile settings here",
    }),
    React.createElement(
      "div",
      {
        className: "flex flex-col flex-wrap  gap-12",
      },
      React.createElement(HSwitchProfileSettings$BasicDetailsSection, {}),
      React.createElement(HSwitchProfileSettings$MerchantDetailsSection, {}),
      React.createElement(RenderIf.make, {
        condition: featureFlagDetails.totp && showTwoFaSettings,
        children: React.createElement(
          HSwitchProfileSettings$TwoFactorAuthenticationDetails,
          {},
        ),
      }),
    ),
  );
}

var make = HSwitchProfileSettings;

export {
  titleClass,
  subTitleClass,
  sectionHeadingClass,
  p1Leading1TextClass,
  p3RegularTextClass,
  MerchantDetailsSection,
  ResetPassword,
  TwoFactorAuthenticationDetails,
  BasicDetailsSection,
  make,
};
/* p1Leading1TextClass Not a pure module */
