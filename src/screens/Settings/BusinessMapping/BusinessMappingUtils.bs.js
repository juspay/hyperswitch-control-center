// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as InputFields from "../../../components/InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";

function getStringFromVariant(key) {
  return "profile_name";
}

var labelField = FormRenderer.makeFieldInfo(
  "Profile Name",
  undefined,
  "profile_name",
  InputFields.textInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter profile name",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

function validateEmptyValue(key, errors) {
  errors["profile_name"] = "Please enter a profile name";
}

function validateCustom(key, errors, value) {
  if (!/^[a-zA-Z][a-zA-Z0-9]*$/.test(value)) {
    errors["profile_name"] = "Please enter a profile name";
    return;
  }
}

function getUserEnteredProfileDetails(valueDict) {
  return LogicUtils.getString(valueDict, "profile_name", "");
}

function validateForm(values, fieldsToValidate, list) {
  var errors = {};
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  fieldsToValidate.forEach(function (key) {
    var value = LogicUtils.getString(valuesDict, "profile_name", "");
    if (value.length <= 0) {
      return validateEmptyValue(key, errors);
    } else {
      return validateCustom(key, errors, value);
    }
  });
  if (
    Core__Option.isSome(
      list.find(function (item) {
        var profileName = getUserEnteredProfileDetails(valuesDict);
        return item.profile_name === profileName;
      }),
    )
  ) {
    errors["profile_name"] = "The entry you are trying to add already exists.";
  }
  return errors;
}

export {
  getStringFromVariant,
  labelField,
  validateEmptyValue,
  validateCustom,
  getUserEnteredProfileDetails,
  validateForm,
};
/* labelField Not a pure module */
