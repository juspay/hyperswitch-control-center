// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../../utils/Form.bs.js";
import * as Modal from "../../../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Loader from "../../../components/Loader.bs.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as ACLButton from "../../../components/ACLButton.bs.js";
import * as PageUtils from "../../Helpers/PageUtils.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "../../../components/LoadedTable.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../../HSwitchUtils.bs.js";
import * as MixpanelHook from "../../MixpanelHook.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as PageLoaderWrapper from "../../Helpers/PageLoaderWrapper.bs.js";
import * as BusinessProfileHook from "../../Hooks/BusinessProfileHook.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as BusinessMappingUtils from "./BusinessMappingUtils.bs.js";
import * as BusinessMappingEntity from "./BusinessMappingEntity.bs.js";
import * as LabelVisibilityContext from "../../../components/form/LabelVisibilityContext.bs.js";

function BusinessProfile$AddEntryBtn(props) {
  var setModalState = props.setModalState;
  var updatedProfileId = props.updatedProfileId;
  var __isFromSettings = props.isFromSettings;
  var list = props.list;
  var setShowModal = props.setShowModal;
  var modalState = props.modalState;
  var isFromSettings = __isFromSettings !== undefined ? __isFromSettings : true;
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var initialValues = Object.fromEntries([
    ["profile_name", "default" + list.length.toString()],
  ]);
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var tmp;
  switch (modalState) {
    case "Loading":
      tmp = React.createElement(Loader.make, {});
      break;
    case "Edit":
      tmp = JsxPPXReactSupportU.createElementWithKey(
        "country-currency",
        Form.make,
        {
          children: React.createElement(LabelVisibilityContext.make, {
            children: React.createElement(
              "div",
              {
                className: "flex flex-col gap-3 h-full w-full",
              },
              React.createElement(FormRenderer.DesktopRow.make, {
                children: React.createElement(HSwitchUtils.TextFieldRow.make, {
                  label: BusinessMappingUtils.labelField.label,
                  children: React.createElement(
                    FormRenderer.FieldRenderer.make,
                    {
                      field: BusinessMappingUtils.labelField,
                      fieldWrapperClass: "w-96",
                      errorClass: HSwitchUtils.errorClass,
                    },
                  ),
                  isRequired: false,
                  labelWidth: "w-32",
                }),
              }),
              React.createElement(FormRenderer.DesktopRow.make, {
                children: React.createElement(
                  "div",
                  {
                    className: "flex justify-end gap-5 mt-5 mb-1 -mr-2",
                  },
                  React.createElement(Button.make, {
                    text: "Cancel",
                    buttonType: "Secondary",
                    buttonSize: "Small",
                    onClick: function (param) {
                      setShowModal(function (param) {
                        return false;
                      });
                    },
                  }),
                  React.createElement(FormRenderer.SubmitButton.make, {
                    text: "Add",
                    buttonSize: "Small",
                  }),
                ),
              }),
            ),
            showLabel: false,
          }),
          onSubmit: props.onSubmit,
          initialValues: initialValues,
          validate: function (values) {
            return BusinessMappingUtils.validateForm(
              values,
              ["ProfileName"],
              list,
            );
          },
        },
      );
      break;
    case "Successful":
      tmp = React.createElement(
        "div",
        {
          className: "flex flex-col gap-6 justify-center items-end mx-4",
        },
        React.createElement(HSwitchUtils.WarningArea.make, {
          warningText:
            "Warning! Now that you've configured more than one profile, you must mandatorily pass 'profile_id' in payments API request every time",
        }),
        React.createElement(
          "p",
          {
            className: "text-grey-700",
          },
          "Business Profile successfully created! Set up your payments settings like webhooks, return url for your new profile before trying a payment.",
        ),
        React.createElement(Button.make, {
          text: "Configure payment settings",
          buttonType: "Primary",
          onClick: function (param) {
            if (LogicUtils.isNonEmptyString(updatedProfileId)) {
              mixpanelEvent(
                "business_profiles_configure_payment_settings",
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
              );
              RescriptReactRouter.replace(
                GlobalVars.appendDashboardPath(
                  "/payment-settings/" + updatedProfileId,
                ),
              );
              return setModalState(function (param) {
                return "Edit";
              });
            }
          },
          customButtonStyle: "!w-1/3 mt-6",
        }),
      );
      break;
  }
  var modalBody = React.createElement("div", undefined, tmp);
  var modalHeaderText;
  switch (modalState) {
    case "Loading":
    case "Edit":
      modalHeaderText = "Add Business Profile Name";
      break;
    case "Successful":
      modalHeaderText = "Configure payment settings";
      break;
  }
  return React.createElement(
    "div",
    undefined,
    React.createElement(RenderIf.make, {
      condition: isFromSettings,
      children: React.createElement(ACLButton.make, {
        text: "Add",
        buttonType: "Primary",
        buttonSize: "Small",
        onClick: function (param) {
          setModalState(function (param) {
            return "Edit";
          });
          setShowModal(function (param) {
            return true;
          });
        },
        access: userPermissionJson.merchantDetailsManage,
      }),
    }),
    React.createElement(Modal.make, {
      showModal: props.showModal,
      setShowModal: setShowModal,
      children: modalBody,
      modalHeading: modalHeaderText,
      modalClass:
        "w-full max-w-2xl m-auto !bg-white dark:!bg-jp-gray-lightgray_background",
      closeOnOutsideClick: true,
    }),
  );
}

var AddEntryBtn = {
  make: BusinessProfile$AddEntryBtn,
};

function BusinessProfile(props) {
  var __setShowModalFromOtherScreen = props.setShowModalFromOtherScreen;
  var __showModalFromOtherScreen = props.showModalFromOtherScreen;
  var __isFromSettings = props.isFromSettings;
  var isFromSettings = __isFromSettings !== undefined ? __isFromSettings : true;
  var showModalFromOtherScreen =
    __showModalFromOtherScreen !== undefined
      ? __showModalFromOtherScreen
      : false;
  var setShowModalFromOtherScreen =
    __setShowModalFromOtherScreen !== undefined
      ? __setShowModalFromOtherScreen
      : function (_bool) {};
  var getURL = APIUtils.useGetURL();
  var showToast = ToastState.useShowToast();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var match = React.useState(function () {
    return 0;
  });
  var match$1 = React.useState(function () {
    return false;
  });
  var match$2 = React.useState(function () {
    return "Edit";
  });
  var setModalState = match$2[1];
  var modalState = match$2[0];
  var match$3 = React.useState(function () {
    return "Success";
  });
  var setScreenState = match$3[1];
  var match$4 = React.useState(function () {
    return "";
  });
  var setUpdatedProfileId = match$4[1];
  var updatedProfileId = match$4[0];
  var businessProfileValues = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var fetchBusinessProfiles = BusinessProfileHook.useFetchBusinessProfiles();
  var updateMerchantDetails = async function (body) {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var url = getURL(
        "BUSINESS_PROFILE",
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setUpdatedProfileId(function (param) {
        return LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(response),
          "profile_id",
          "",
        );
      });
      fetchBusinessProfiles();
      showToast(
        "Your Entry added successfully",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      setScreenState(function (param) {
        return {
          TAG: "Error",
          _0: "",
        };
      });
    }
    if (!isFromSettings) {
      setShowModalFromOtherScreen(function (param) {
        return false;
      });
    }
    setModalState(function (param) {
      return "Successful";
    });
    return null;
  };
  var onSubmit = async function (values, param) {
    mixpanelEvent(
      "business_profiles_add",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    updateMerchantDetails(values);
    return null;
  };
  return React.createElement(
    PageLoaderWrapper.make,
    {
      children: Caml_option.some(null),
      screenState: match$3[0],
    },
    React.createElement(RenderIf.make, {
      condition: isFromSettings,
      children: React.createElement(
        "div",
        {
          className: "relative h-full",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-col-reverse md:flex-col gap-2",
          },
          React.createElement(PageUtils.PageHeading.make, {
            title: "Business Profiles",
            subTitle:
              "Add and manage profiles to represent different businesses across countries.",
          }),
          React.createElement(RenderIf.make, {
            condition: businessProfileValues.length > 1,
            children: React.createElement(HSwitchUtils.WarningArea.make, {
              warningText:
                "Warning! Now that you've configured more than one profile, you must mandatorily pass 'profile_id' in payments API request every time",
            }),
          }),
          React.createElement(LoadedTable.make, {
            visibleColumns: BusinessMappingEntity.visibleColumns,
            title: "Business profiles",
            showSerialNumber: true,
            actualData: businessProfileValues.map(function (prim) {
              return prim;
            }),
            totalResults: businessProfileValues.length,
            resultsPerPage: 7,
            offset: match[0],
            setOffset: match[1],
            entity: BusinessMappingEntity.businessProfileTableEntity,
            currrentFetchCount: businessProfileValues.length,
            hideTitle: true,
          }),
          React.createElement(
            "div",
            {
              className: "absolute right-0 -top-3",
            },
            React.createElement(BusinessProfile$AddEntryBtn, {
              onSubmit: onSubmit,
              modalState: modalState,
              showModal: match$1[0],
              setShowModal: match$1[1],
              list: businessProfileValues,
              updatedProfileId: updatedProfileId,
              setModalState: setModalState,
            }),
          ),
        ),
      ),
    }),
    React.createElement(RenderIf.make, {
      condition: !isFromSettings,
      children: React.createElement(BusinessProfile$AddEntryBtn, {
        onSubmit: onSubmit,
        modalState: modalState,
        showModal: showModalFromOtherScreen,
        setShowModal: setShowModalFromOtherScreen,
        list: businessProfileValues,
        isFromSettings: isFromSettings,
        updatedProfileId: updatedProfileId,
        setModalState: setModalState,
      }),
    }),
  );
}

var make = BusinessProfile;

export { AddEntryBtn, make };
/* Form Not a pure module */
