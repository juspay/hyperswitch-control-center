// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as AuthHooks from "../../../hooks/AuthHooks.bs.js";
import * as PageUtils from "../../Helpers/PageUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as TimeZoneHook from "../../../hooks/TimeZoneHook.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as DownloadUtils from "../../../utils/DownloadUtils.bs.js";

function Compliance$DownloadCertificateTile(props) {
  return React.createElement(
    "div",
    {
      className:
        "flex flex-col bg-white pt-6 pl-6 pr-8 pb-8 justify-between gap-10 border border-jp-gray-border_gray rounded",
    },
    React.createElement(
      "div",
      undefined,
      React.createElement(
        "p",
        {
          className: "text-fs-16 font-semibold m-2",
        },
        props.header,
      ),
    ),
    React.createElement(Button.make, {
      buttonState: props.buttonState,
      text: "Download",
      buttonType: "Primary",
      buttonSize: "Medium",
      rightIcon: {
        TAG: "FontAwesome",
        _0: "download-api-key",
      },
      onClick: props.onClick,
    }),
  );
}

var DownloadCertificateTile = {
  make: Compliance$DownloadCertificateTile,
};

function Compliance(props) {
  var showToast = ToastState.useShowToast();
  var fetchApi = AuthHooks.useApiFetcher();
  var match = React.useState(function () {
    return "Normal";
  });
  var setButtonState = match[1];
  var downloadPDF = function (param) {
    setButtonState(function (param) {
      return "Loading";
    });
    var currentDate = TimeZoneHook.formattedISOString(
      new Date(Date.now()).toISOString(),
      "YYYY-MM-DD HH:mm:ss",
    );
    var downloadURL = Core__Option.getOr(window._env_.dssCertificateUrl, "");
    if (LogicUtils.isNonEmptyString(downloadURL)) {
      Core__Promise.$$catch(
        fetchApi(
          downloadURL,
          undefined,
          undefined,
          undefined,
          "Get",
          undefined,
          undefined,
          undefined,
        )
          .then(function (resp) {
            return resp.blob();
          })
          .then(function (content) {
            DownloadUtils.download(
              "HyperswitchPCICertificate-" + currentDate + ".pdf",
              content,
              "application/pdf",
            );
            showToast(
              "PCI Attestation of Compliance certificate download complete",
              "ToastSuccess",
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            return Promise.resolve();
          }),
        function (param) {
          showToast(
            "Oops, something went wrong with the download. Please try again.",
            "ToastError",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          return Promise.resolve();
        },
      );
      return setButtonState(function (param) {
        return "Normal";
      });
    } else {
      showToast(
        "Oops, something went wrong with the download ",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setButtonState(function (param) {
        return "Normal";
      });
    }
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-12",
    },
    React.createElement(PageUtils.PageHeading.make, {
      title: "Compliance",
      subTitle: "Achieve and Maintain Industry Compliance Standards",
    }),
    React.createElement(
      "div",
      {
        className: "grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-8",
      },
      React.createElement(Compliance$DownloadCertificateTile, {
        header: "Hyperswitch's PCI Attestation of Compliance",
        onClick: downloadPDF,
        buttonState: match[0],
      }),
    ),
  );
}

var make = Compliance;

export { DownloadCertificateTile, make };
/* react Not a pure module */
