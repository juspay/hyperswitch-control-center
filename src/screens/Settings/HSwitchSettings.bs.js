// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as ACLButton from "../../components/ACLButton.bs.js";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

var deleteSampleData = {
  heading: "Delete Sample Data",
  subHeading: "Delete all the generated sample data.",
  cardName: "DELETE_SAMPLE_DATA",
  buttonText: "Delete All",
  isApiCall: true,
};

function HSwitchSettings$TileComponent(props) {
  var cardName = props.cardName;
  var __isApiCall = props.isApiCall;
  var redirectUrl = props.redirectUrl;
  var __buttonText = props.buttonText;
  var __isComingSoon = props.isComingSoon;
  var redirect = props.redirect;
  var isComingSoon = __isComingSoon !== undefined ? __isComingSoon : false;
  var buttonText = __buttonText !== undefined ? __buttonText : "Add Details";
  var isApiCall = __isApiCall !== undefined ? __isApiCall : true;
  var getURL = APIUtils.useGetURL();
  var showPopUp = PopUpState.useShowPopUp();
  var showToast = ToastState.useShowToast();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var deleteSampleData = async function () {
    try {
      var generateSampleDataUrl = getURL(
        "GENERATE_SAMPLE_DATA",
        "Delete",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        generateSampleDataUrl,
        {},
        "Delete",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return showToast(
        "Sample data deleted successfully",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {
      return;
    }
  };
  var onClickHandler = function (param) {
    if (isApiCall) {
      if (cardName === "DELETE_SAMPLE_DATA") {
        return showPopUp({
          heading: "Are you sure?",
          description:
            "This action cannot be undone. This will permanently delete all the sample payments and refunds data. To confirm, click the 'Delete All' button below.",
          popUpType: ["Warning", "WithIcon"],
          handleCancel: {
            text: "Cancel",
            onClick: function (param) {},
          },
          handleConfirm: {
            text: "Delete All",
            onClick: function (param) {
              deleteSampleData();
            },
          },
        });
      } else {
        return;
      }
    } else if (redirectUrl !== undefined) {
      return RescriptReactRouter.push(
        GlobalVars.appendDashboardPath("/" + redirectUrl),
      );
    } else if (redirect !== undefined) {
      return RescriptReactRouter.push(
        GlobalVars.appendDashboardPath("/settings?type=" + redirect),
      );
    } else {
      return RescriptReactRouter.push(
        GlobalVars.appendDashboardPath("/settings"),
      );
    }
  };
  var accessBasedOnCardName =
    cardName === "DELETE_SAMPLE_DATA"
      ? userPermissionJson.operationsManage
      : "Access";
  return React.createElement(
    "div",
    {
      className:
        "flex flex-col bg-white pt-6 pl-6 pr-8 pb-8 justify-between gap-10 border border-jp-gray-border_gray rounded ",
    },
    React.createElement(
      "div",
      undefined,
      React.createElement(
        "div",
        {
          className: "flex justify-between",
        },
        React.createElement(
          "p",
          {
            className: "text-fs-16 font-semibold m-2",
          },
          props.heading,
        ),
        isComingSoon
          ? React.createElement(Icon.make, {
              name: "comingSoon",
              size: 25,
              className: "w-36",
            })
          : null,
      ),
      React.createElement(
        "p",
        {
          className: "text-fs-14 font-medium m-2 text-black opacity-50",
        },
        props.subHeading,
      ),
    ),
    React.createElement(ACLButton.make, {
      text: buttonText,
      buttonState: isComingSoon ? "Disabled" : "Normal",
      buttonType: "Secondary",
      buttonSize: "Small",
      onClick: onClickHandler,
      customButtonStyle: "w-2/3",
      access: accessBasedOnCardName,
    }),
  );
}

var TileComponent = {
  make: HSwitchSettings$TileComponent,
};

function HSwitchSettings$PersonalSettings(props) {
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var personalSettings = featureFlagDetails.sampleData
    ? [deleteSampleData]
    : [];
  return React.createElement(
    "div",
    {
      className:
        "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 md:gap-8",
    },
    personalSettings.map(function (sections, index) {
      return JsxPPXReactSupportU.createElementWithKey(
        index.toString(),
        HSwitchSettings$TileComponent,
        {
          heading: sections.heading,
          subHeading: sections.subHeading,
          redirect: Core__Option.getOr(sections.redirect, ""),
          isComingSoon: Core__Option.getOr(sections.isComingSoon, false),
          buttonText: Core__Option.getOr(sections.buttonText, "Add Details"),
          redirectUrl: sections.redirectUrl,
          isApiCall: Core__Option.getOr(sections.isApiCall, false),
          cardName: sections.cardName,
        },
      );
    }),
  );
}

var PersonalSettings = {
  make: HSwitchSettings$PersonalSettings,
};

function HSwitchSettings(props) {
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(PageUtils.PageHeading.make, {
      title: "Account Settings",
      subTitle: "Manage payment account configuration and dashboard settings",
    }),
    React.createElement(HSwitchSettings$PersonalSettings, {}),
  );
}

var make = HSwitchSettings;

export { deleteSampleData, TileComponent, PersonalSettings, make };
/* Icon Not a pure module */
