// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../HSwitchUtils.bs.js";

function parseKey(api_key) {
  return api_key.slice(0, 6).concat("*".repeat(20));
}

function parseBussinessProfileJson(profileRecord) {
  var authentication_connector_details =
    profileRecord.authentication_connector_details;
  var webhook_details = profileRecord.webhook_details;
  var profileInfo = Object.fromEntries([
    ["merchant_id", profileRecord.merchant_id],
    ["profile_id", profileRecord.profile_id],
    ["profile_name", profileRecord.profile_name],
  ]);
  LogicUtils.setDictNull(profileInfo, "return_url", profileRecord.return_url);
  LogicUtils.setOptionBool(
    profileInfo,
    "collect_shipping_details_from_wallet_connector",
    profileRecord.collect_shipping_details_from_wallet_connector,
  );
  LogicUtils.setDictNull(
    profileInfo,
    "webhook_url",
    webhook_details.webhook_url,
  );
  LogicUtils.setOptionString(
    profileInfo,
    "webhook_version",
    webhook_details.webhook_version,
  );
  LogicUtils.setOptionString(
    profileInfo,
    "webhook_username",
    webhook_details.webhook_username,
  );
  LogicUtils.setOptionString(
    profileInfo,
    "webhook_password",
    webhook_details.webhook_password,
  );
  LogicUtils.setOptionBool(
    profileInfo,
    "payment_created_enabled",
    webhook_details.payment_created_enabled,
  );
  LogicUtils.setOptionBool(
    profileInfo,
    "payment_succeeded_enabled",
    webhook_details.payment_succeeded_enabled,
  );
  LogicUtils.setOptionBool(
    profileInfo,
    "payment_failed_enabled",
    webhook_details.payment_failed_enabled,
  );
  LogicUtils.setOptionString(
    profileInfo,
    "payment_response_hash_key",
    profileRecord.payment_response_hash_key,
  );
  LogicUtils.setOptionArray(
    profileInfo,
    "authentication_connectors",
    authentication_connector_details.authentication_connectors,
  );
  LogicUtils.setOptionString(
    profileInfo,
    "three_ds_requestor_url",
    authentication_connector_details.three_ds_requestor_url,
  );
  LogicUtils.setOptionBool(
    profileInfo,
    "is_connector_agnostic_mit_enabled",
    profileRecord.is_connector_agnostic_mit_enabled,
  );
  LogicUtils.setOptionDict(
    profileInfo,
    "outgoing_webhook_custom_http_headers",
    profileRecord.outgoing_webhook_custom_http_headers,
  );
  return profileInfo;
}

function parseMerchantJson(merchantDict) {
  var publishable_key = merchantDict.publishable_key;
  var merchant_details = merchantDict.merchant_details;
  var primary_business_details = merchantDict.primary_business_details.map(
    function (detail) {
      return Object.fromEntries([
        ["country", detail.country],
        ["business", detail.business],
      ]);
    },
  );
  var merchantInfo = Object.fromEntries([
    ["primary_business_details", primary_business_details],
    ["publishable_key", publishable_key],
    ["publishable_key_hide", parseKey(publishable_key)],
  ]);
  LogicUtils.setOptionString(
    merchantInfo,
    "merchant_name",
    merchantDict.merchant_name,
  );
  LogicUtils.setOptionString(
    merchantInfo,
    "about_business",
    merchant_details.about_business,
  );
  LogicUtils.setOptionString(
    merchantInfo,
    "primary_email",
    merchant_details.primary_email,
  );
  LogicUtils.setOptionString(
    merchantInfo,
    "primary_phone",
    merchant_details.primary_phone,
  );
  LogicUtils.setOptionString(
    merchantInfo,
    "primary_contact_person",
    merchant_details.primary_contact_person,
  );
  LogicUtils.setOptionString(merchantInfo, "website", merchant_details.website);
  LogicUtils.setOptionString(
    merchantInfo,
    "secondary_phone",
    merchant_details.secondary_phone,
  );
  LogicUtils.setOptionString(
    merchantInfo,
    "secondary_email",
    merchant_details.secondary_email,
  );
  LogicUtils.setOptionString(
    merchantInfo,
    "secondary_contact_person",
    merchant_details.secondary_contact_person,
  );
  LogicUtils.setOptionString(
    merchantInfo,
    "primary_phone",
    merchant_details.primary_phone,
  );
  LogicUtils.setOptionString(
    merchantInfo,
    "line1",
    merchant_details.address.line1,
  );
  LogicUtils.setOptionString(
    merchantInfo,
    "line2",
    merchant_details.address.line2,
  );
  LogicUtils.setOptionString(
    merchantInfo,
    "line3",
    merchant_details.address.line3,
  );
  LogicUtils.setOptionString(
    merchantInfo,
    "city",
    merchant_details.address.city,
  );
  LogicUtils.setOptionString(
    merchantInfo,
    "state",
    merchant_details.address.state,
  );
  LogicUtils.setOptionString(merchantInfo, "zip", merchant_details.address.zip);
  return merchantInfo;
}

function getBusinessProfilePayload(values) {
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  var webhookSettingsValue = {};
  LogicUtils.setOptionString(
    webhookSettingsValue,
    "webhook_version",
    LogicUtils.getOptionString(valuesDict, "webhook_version"),
  );
  LogicUtils.setOptionString(
    webhookSettingsValue,
    "webhook_username",
    LogicUtils.getOptionString(valuesDict, "webhook_username"),
  );
  LogicUtils.setOptionString(
    webhookSettingsValue,
    "webhook_password",
    LogicUtils.getOptionString(valuesDict, "webhook_password"),
  );
  LogicUtils.setDictNull(
    webhookSettingsValue,
    "webhook_url",
    LogicUtils.getNonEmptyString(
      LogicUtils.getString(valuesDict, "webhook_url", ""),
    ),
  );
  LogicUtils.setOptionBool(
    webhookSettingsValue,
    "payment_created_enabled",
    LogicUtils.getOptionBool(valuesDict, "payment_created_enabled"),
  );
  LogicUtils.setOptionBool(
    webhookSettingsValue,
    "payment_succeeded_enabled",
    LogicUtils.getOptionBool(valuesDict, "payment_succeeded_enabled"),
  );
  LogicUtils.setOptionBool(
    webhookSettingsValue,
    "payment_failed_enabled",
    LogicUtils.getOptionBool(valuesDict, "payment_failed_enabled"),
  );
  var authenticationConnectorDetails = {};
  LogicUtils.setOptionArray(
    authenticationConnectorDetails,
    "authentication_connectors",
    LogicUtils.getNonEmptyArray(
      LogicUtils.getArrayFromDict(valuesDict, "authentication_connectors", []),
    ),
  );
  LogicUtils.setOptionString(
    authenticationConnectorDetails,
    "three_ds_requestor_url",
    LogicUtils.getNonEmptyString(
      LogicUtils.getString(valuesDict, "three_ds_requestor_url", ""),
    ),
  );
  var outGoingWebHookCustomHttpHeaders = {};
  var formValues = LogicUtils.getDictfromDict(
    valuesDict,
    "outgoing_webhook_custom_http_headers",
  );
  Object.keys(
    LogicUtils.getDictfromDict(
      valuesDict,
      "outgoing_webhook_custom_http_headers",
    ),
  ).forEach(function (val) {
    LogicUtils.setOptionString(
      outGoingWebHookCustomHttpHeaders,
      val,
      LogicUtils.getNonEmptyString(LogicUtils.getString(formValues, val, "")),
    );
  });
  var profileDetailsDict = {};
  LogicUtils.setDictNull(
    profileDetailsDict,
    "return_url",
    LogicUtils.getNonEmptyString(
      LogicUtils.getString(valuesDict, "return_url", ""),
    ),
  );
  LogicUtils.setOptionBool(
    profileDetailsDict,
    "collect_shipping_details_from_wallet_connector",
    LogicUtils.getOptionBool(
      valuesDict,
      "collect_shipping_details_from_wallet_connector",
    ),
  );
  LogicUtils.setOptionBool(
    profileDetailsDict,
    "is_connector_agnostic_mit_enabled",
    LogicUtils.getOptionBool(valuesDict, "is_connector_agnostic_mit_enabled"),
  );
  LogicUtils.setOptionDict(
    profileDetailsDict,
    "webhook_details",
    !LogicUtils.isEmptyDict(webhookSettingsValue)
      ? webhookSettingsValue
      : undefined,
  );
  LogicUtils.setOptionDict(
    profileDetailsDict,
    "authentication_connector_details",
    !LogicUtils.isEmptyDict(authenticationConnectorDetails)
      ? authenticationConnectorDetails
      : undefined,
  );
  LogicUtils.setOptionDict(
    profileDetailsDict,
    "outgoing_webhook_custom_http_headers",
    outGoingWebHookCustomHttpHeaders,
  );
  return profileDetailsDict;
}

function getSettingsPayload(values, merchantId) {
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  var addressDetailsValue = {};
  LogicUtils.setOptionString(
    addressDetailsValue,
    "line1",
    LogicUtils.getOptionString(valuesDict, "line1"),
  );
  LogicUtils.setOptionString(
    addressDetailsValue,
    "line2",
    LogicUtils.getOptionString(valuesDict, "line2"),
  );
  LogicUtils.setOptionString(
    addressDetailsValue,
    "line3",
    LogicUtils.getOptionString(valuesDict, "line3"),
  );
  LogicUtils.setOptionString(
    addressDetailsValue,
    "city",
    LogicUtils.getOptionString(valuesDict, "city"),
  );
  LogicUtils.setOptionString(
    addressDetailsValue,
    "state",
    LogicUtils.getOptionString(valuesDict, "state"),
  );
  LogicUtils.setOptionString(
    addressDetailsValue,
    "zip",
    LogicUtils.getOptionString(valuesDict, "zip"),
  );
  var merchantDetailsValue = {};
  LogicUtils.setOptionString(
    merchantDetailsValue,
    "primary_contact_person",
    LogicUtils.getOptionString(valuesDict, "primary_contact_person"),
  );
  var primaryEmail = LogicUtils.getOptionString(valuesDict, "primary_email");
  if (LogicUtils.isNonEmptyString(Core__Option.getOr(primaryEmail, ""))) {
    LogicUtils.setOptionString(
      merchantDetailsValue,
      "primary_email",
      primaryEmail,
    );
  }
  LogicUtils.setOptionString(
    merchantDetailsValue,
    "primary_phone",
    LogicUtils.getOptionString(valuesDict, "primary_phone"),
  );
  LogicUtils.setOptionString(
    merchantDetailsValue,
    "secondary_contact_person",
    LogicUtils.getOptionString(valuesDict, "secondary_contact_person"),
  );
  var secondaryEmail = LogicUtils.getOptionString(
    valuesDict,
    "secondary_email",
  );
  if (LogicUtils.isNonEmptyString(Core__Option.getOr(secondaryEmail, ""))) {
    LogicUtils.setOptionString(
      merchantDetailsValue,
      "secondary_email",
      LogicUtils.getOptionString(valuesDict, "secondary_email"),
    );
  }
  LogicUtils.setOptionString(
    merchantDetailsValue,
    "secondary_phone",
    LogicUtils.getOptionString(valuesDict, "secondary_phone"),
  );
  LogicUtils.setOptionString(
    merchantDetailsValue,
    "website",
    LogicUtils.getOptionString(valuesDict, "website"),
  );
  LogicUtils.setOptionString(
    merchantDetailsValue,
    "about_business",
    LogicUtils.getOptionString(valuesDict, "about_business"),
  );
  LogicUtils.setOptionString(
    merchantDetailsValue,
    "about_business",
    LogicUtils.getOptionString(valuesDict, "about_business"),
  );
  if (!LogicUtils.isEmptyDict(addressDetailsValue)) {
    merchantDetailsValue["address"] = addressDetailsValue;
  }
  var primary_business_details = LogicUtils.getArrayFromDict(
    valuesDict,
    "primary_business_details",
    [],
  ).map(function (detail) {
    var detailDict = LogicUtils.getDictFromJsonObject(detail);
    return Object.fromEntries([
      ["business", LogicUtils.getString(detailDict, "business", "")],
      ["country", LogicUtils.getString(detailDict, "country", "")],
    ]);
  });
  var settingsPayload = Object.fromEntries([
    ["merchant_id", merchantId],
    ["locker_id", "m0010"],
  ]);
  LogicUtils.setOptionDict(
    settingsPayload,
    "merchant_details",
    !LogicUtils.isEmptyDict(merchantDetailsValue)
      ? merchantDetailsValue
      : undefined,
  );
  LogicUtils.setOptionString(
    settingsPayload,
    "merchant_name",
    LogicUtils.getOptionString(valuesDict, "merchant_name"),
  );
  LogicUtils.setOptionArray(
    settingsPayload,
    "primary_business_details",
    LogicUtils.getNonEmptyArray(primary_business_details),
  );
  return settingsPayload;
}

function validationFieldsMapper(key) {
  if (typeof key === "object") {
    if (key.TAG === "AuthetnticationConnectors") {
      return "authentication_connectors";
    } else {
      return key._0;
    }
  }
  switch (key) {
    case "PrimaryEmail":
      return "primary_email";
    case "SecondaryEmail":
      return "secondary_email";
    case "PrimaryPhone":
      return "primary_phone";
    case "SecondaryPhone":
      return "secondary_phone";
    case "Website":
      return "website";
    case "WebhookUrl":
      return "webhook_url";
    case "ReturnUrl":
      return "return_url";
    case "ThreeDsRequestorUrl":
      return "three_ds_requestor_url";
  }
}

function checkValueChange(initialDict, valuesDict) {
  var initialKeys = Object.keys(initialDict);
  var updatedKeys = Object.keys(valuesDict);
  var key = Object.keys(initialDict).find(function (key) {
    switch (key) {
      case "collect_shipping_details_from_wallet_connector":
        var initialValue = LogicUtils.getBool(initialDict, key, false);
        var updatedValue = LogicUtils.getBool(valuesDict, key, false);
        return initialValue !== updatedValue;
      case "outgoing_webhook_custom_http_headers":
        var initialDictLength = Object.keys(
          LogicUtils.getDictfromDict(
            initialDict,
            "outgoing_webhook_custom_http_headers",
          ),
        );
        var updatedDictLength = Object.keys(
          LogicUtils.getDictfromDict(
            valuesDict,
            "outgoing_webhook_custom_http_headers",
          ),
        );
        return Caml_obj.notequal(initialDictLength, updatedDictLength);
      default:
        var initialValue$1 = LogicUtils.getString(initialDict, key, "");
        var updatedValue$1 = LogicUtils.getString(valuesDict, key, "");
        return initialValue$1 !== updatedValue$1;
    }
  });
  if (Core__Option.isSome(key)) {
    return true;
  } else {
    return Caml_obj.greaterthan(updatedKeys, initialKeys);
  }
}

function validateEmptyValue(key, errors) {
  if (typeof key === "object") {
    return;
  }
  if (key !== "ReturnUrl") {
    return;
  }
  errors[validationFieldsMapper(key)] = "Please enter a return url";
}

function validateEmptyArray(key, errors, arrayValue) {
  if (
    typeof key !== "object" ||
    !(key.TAG === "AuthetnticationConnectors" && arrayValue.length === 0)
  ) {
    return;
  } else {
    errors[validationFieldsMapper(key)] =
      "Please select authentication connector";
    return;
  }
}

function validateCustom(key, errors, value, isLiveMode) {
  var exit = 0;
  if (typeof key === "object") {
    return;
  }
  switch (key) {
    case "PrimaryEmail":
    case "SecondaryEmail":
      exit = 1;
      break;
    case "PrimaryPhone":
    case "SecondaryPhone":
      exit = 2;
      break;
    default:
      var regexUrl = isLiveMode
        ? /^https:\/\//i.test(value) || value.includes("localhost")
        : /^(http|https):\/\//i.test(value);
      if (!regexUrl) {
        errors[validationFieldsMapper(key)] = "Please Enter Valid URL";
        return;
      } else {
        return;
      }
  }
  switch (exit) {
    case 1:
      if (HSwitchUtils.isValidEmail(value)) {
        errors[validationFieldsMapper(key)] = "Please enter valid email id";
        return;
      } else {
        return;
      }
    case 2:
      if (!/^(?:\+\d{1,15}?[.-])??\d{3}?[.-]?\d{3}[.-]?\d{3,9}$/.test(value)) {
        errors[validationFieldsMapper(key)] = "Please enter valid phone number";
        return;
      } else {
        return;
      }
  }
}

function validateMerchantAccountForm(values, fieldsToValidate, isLiveMode) {
  var errors = {};
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  fieldsToValidate.forEach(function (key) {
    var value = LogicUtils.getNonEmptyString(
      LogicUtils.getString(valuesDict, validationFieldsMapper(key), ""),
    );
    if (value !== undefined) {
      return validateCustom(key, errors, value, isLiveMode);
    }
  });
  var threedsArray = LogicUtils.getNonEmptyArray(
    LogicUtils.getArrayFromDict(valuesDict, "authentication_connectors", []),
  );
  var threedsUrl = LogicUtils.getNonEmptyString(
    LogicUtils.getString(valuesDict, "three_ds_requestor_url", ""),
  );
  if (threedsArray !== undefined) {
    var url = LogicUtils.getString(valuesDict, "three_ds_requestor_url", "");
    validateEmptyArray(
      {
        TAG: "AuthetnticationConnectors",
        _0: threedsArray,
      },
      errors,
      threedsArray,
    );
    validateCustom("ThreeDsRequestorUrl", errors, url, isLiveMode);
  }
  if (threedsUrl !== undefined) {
    var arr = LogicUtils.getArrayFromDict(
      valuesDict,
      "authentication_connectors",
      [],
    );
    validateEmptyArray(
      {
        TAG: "AuthetnticationConnectors",
        _0: arr,
      },
      errors,
      arr,
    );
    validateCustom("ThreeDsRequestorUrl", errors, threedsUrl, isLiveMode);
  }
  return errors;
}

var defaultValueForBusinessProfile = {
  merchant_id: "",
  profile_id: "",
  profile_name: "",
  return_url: undefined,
  payment_response_hash_key: undefined,
  webhook_details: {
    webhook_version: undefined,
    webhook_username: undefined,
    webhook_password: undefined,
    webhook_url: undefined,
    payment_created_enabled: undefined,
    payment_succeeded_enabled: undefined,
    payment_failed_enabled: undefined,
  },
  authentication_connector_details: {
    authentication_connectors: undefined,
    three_ds_requestor_url: undefined,
  },
  collect_shipping_details_from_wallet_connector: undefined,
  is_connector_agnostic_mit_enabled: undefined,
  outgoing_webhook_custom_http_headers: undefined,
};

function getValueFromBusinessProfile(businessProfileValue) {
  return Core__Option.getOr(
    businessProfileValue[0],
    defaultValueForBusinessProfile,
  );
}

function businessProfileNameDropDownOption(arrBusinessProfile) {
  return arrBusinessProfile.map(function (ele) {
    return {
      label: ele.profile_name + " (" + ele.profile_id + ")",
      value: ele.profile_id,
    };
  });
}

export {
  parseKey,
  parseBussinessProfileJson,
  parseMerchantJson,
  getBusinessProfilePayload,
  getSettingsPayload,
  validationFieldsMapper,
  checkValueChange,
  validateEmptyValue,
  validateEmptyArray,
  validateCustom,
  validateMerchantAccountForm,
  defaultValueForBusinessProfile,
  getValueFromBusinessProfile,
  businessProfileNameDropDownOption,
};
/* LogicUtils Not a pure module */
