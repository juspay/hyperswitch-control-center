// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../../components/Table.bs.js";
import * as React from "react";
import * as EntityType from "../../entities/EntityType.bs.js";
import * as GlobalVars from "../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as OrderEntity from "../Order/OrderEntity.bs.js";
import * as ThemeProvider from "../../context/ThemeProvider.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";

var attemptsColumns = [
  "AttemptId",
  "Status",
  "Amount",
  "Currency",
  "Connector",
  "ErrorCode",
  "Error_message",
  "PaymentMethod",
  "PayoutMethodType",
  "ConnectorTransactionId",
  "CancellationReason",
  "UnifiedCode",
  "UnifiedMessage",
];

function statusVariantMapper(statusLabel) {
  switch (statusLabel) {
    case "failed":
      return "Failed";
    case "pending":
      return "Processing";
    case "success":
      return "Succeeded";
    default:
      return "None";
  }
}

function priorityVariantMapper(priorityLabel) {
  switch (priorityLabel) {
    case "crossBorder":
      return "CrossBorder";
    case "fast":
      return "Fast";
    case "instant":
      return "Instant";
    case "internal":
      return "Internal";
    case "regular":
      return "Regular";
    case "wire":
      return "Wire";
    default:
      return "None";
  }
}

function getAttemptHeading(colType) {
  switch (colType) {
    case "AttemptId":
      return Table.makeHeaderInfo(
        "AttemptId",
        "Attempt Id",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Status":
      return Table.makeHeaderInfo(
        "Status",
        "Status",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Amount":
      return Table.makeHeaderInfo(
        "Amount",
        "Amount",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Currency":
      return Table.makeHeaderInfo(
        "Currency",
        "Currency",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Connector":
      return Table.makeHeaderInfo(
        "Connector",
        "Connector",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ErrorCode":
      return Table.makeHeaderInfo(
        "ErrorCode",
        "Error Code",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Error_message":
      return Table.makeHeaderInfo(
        "Error_message",
        "Error Message",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PaymentMethod":
      return Table.makeHeaderInfo(
        "PaymentMethod",
        "Payment Method",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PayoutMethodType":
      return Table.makeHeaderInfo(
        "PayoutMethodType",
        "Payout Method Type",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ConnectorTransactionId":
      return Table.makeHeaderInfo(
        "ConnectorTransactionId",
        "Connector Transaction Id",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CancellationReason":
      return Table.makeHeaderInfo(
        "CancellationReason",
        "Cancellation Reason",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "UnifiedCode":
      return Table.makeHeaderInfo(
        "UnifiedCode",
        "Unified Code",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "UnifiedMessage":
      return Table.makeHeaderInfo(
        "UnifiedMessage",
        "UnifiedM essage",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getAttemptCell(attemptData, colType) {
  switch (colType) {
    case "AttemptId":
      return {
        TAG: "DisplayCopyCell",
        _0: attemptData.attempt_id,
      };
    case "Status":
      var match = statusVariantMapper(attemptData.status);
      var tmp;
      switch (match) {
        case "Succeeded":
          tmp = "LabelGreen";
          break;
        case "Failed":
        case "Cancelled":
          tmp = "LabelRed";
          break;
        case "Processing":
          tmp = "LabelOrange";
          break;
        case "PartiallyCaptured":
        case "None":
          tmp = "LabelLightBlue";
          break;
        default:
          tmp = "LabelWhite";
      }
      return {
        TAG: "Label",
        _0: {
          title: attemptData.status.toUpperCase(),
          color: tmp,
        },
      };
    case "Amount":
      return {
        TAG: "CustomCell",
        _0: React.createElement(OrderEntity.CurrencyCell.make, {
          amount: (attemptData.amount / 100.0).toString(),
          currency: attemptData.currency,
        }),
        _1: "",
      };
    case "Currency":
      return {
        TAG: "Text",
        _0: attemptData.currency,
      };
    case "Connector":
      return {
        TAG: "CustomCell",
        _0: React.createElement(HelperComponents.ConnectorCustomCell.make, {
          connectorName: attemptData.connector,
        }),
        _1: "",
      };
    case "ErrorCode":
      return {
        TAG: "Text",
        _0: attemptData.error_code,
      };
    case "Error_message":
      return {
        TAG: "Text",
        _0: attemptData.error_message,
      };
    case "PaymentMethod":
      return {
        TAG: "Text",
        _0: attemptData.payment_method,
      };
    case "PayoutMethodType":
      return {
        TAG: "Text",
        _0: attemptData.payout_method_type,
      };
    case "ConnectorTransactionId":
      return {
        TAG: "DisplayCopyCell",
        _0: attemptData.connector_transaction_id,
      };
    case "CancellationReason":
      return {
        TAG: "Text",
        _0: attemptData.cancellation_reason,
      };
    case "UnifiedCode":
      return {
        TAG: "Text",
        _0: attemptData.unified_code,
      };
    case "UnifiedMessage":
      return {
        TAG: "Text",
        _0: attemptData.unified_message,
      };
  }
}

var defaultColumns = [
  "PayoutId",
  "Connector",
  "Amount",
  "Status",
  "ConnectorTransactionId",
  "Created",
];

var allColumns = [
  "PayoutId",
  "MerchantId",
  "Amount",
  "Currency",
  "Connector",
  "PayoutType",
  "SendPriority",
  "Billing",
  "CustomerId",
  "AutoFulfill",
  "Email",
  "Name",
  "Phone",
  "PhoneCountryCode",
  "ClientSecret",
  "ReturnUrl",
  "BusinessCountry",
  "BusinessLabel",
  "Description",
  "Entity_type",
  "Recurring",
  "Status",
  "ErrorMessage",
  "ErrorCode",
  "ProfileId",
  "Created",
  "ConnectorTransactionId",
];

function useGetStatus(order) {
  var match = React.useContext(ThemeProvider.themeContext);
  var backgroundColor = match.globalUIConfig.backgroundColor;
  var orderStatusLabel = order.status.toUpperCase();
  var fixedCss = "text-sm text-white font-bold p-1.5 rounded-lg";
  var match$1 = statusVariantMapper(order.status);
  var exit = 0;
  switch (match$1) {
    case "Succeeded":
      return React.createElement(
        "div",
        {
          className: fixedCss + " bg-hyperswitch_green dark:bg-opacity-50",
        },
        orderStatusLabel,
      );
    case "Failed":
    case "Cancelled":
      exit = 2;
      break;
    case "RequiresConfirmation":
    case "PartiallyCaptured":
    case "None":
      exit = 1;
      break;
    default:
      return React.createElement(
        "div",
        {
          className: fixedCss + " " + backgroundColor + " bg-opacity-50",
        },
        orderStatusLabel,
      );
  }
  switch (exit) {
    case 1:
      return React.createElement(
        "div",
        {
          className: fixedCss + " " + backgroundColor + " bg-opacity-50",
        },
        orderStatusLabel,
      );
    case 2:
      return React.createElement(
        "div",
        {
          className: fixedCss + " bg-red-960 dark:bg-opacity-50",
        },
        orderStatusLabel,
      );
  }
}

function getHeading(colType) {
  switch (colType) {
    case "PayoutId":
      return Table.makeHeaderInfo(
        "PayoutId",
        "Payout Id",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "MerchantId":
      return Table.makeHeaderInfo(
        "MerchantId",
        "Merchant Id",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Amount":
      return Table.makeHeaderInfo(
        "Amount",
        "Amount",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Currency":
      return Table.makeHeaderInfo(
        "Currency",
        "Currency",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Connector":
      return Table.makeHeaderInfo(
        "Connector",
        "Connector",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PayoutType":
      return Table.makeHeaderInfo(
        "PayoutType",
        "Payout Type",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Billing":
      return Table.makeHeaderInfo(
        "Billing",
        "Billing",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "CustomerId":
      return Table.makeHeaderInfo(
        "CustomerId",
        "Customer Id",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "AutoFulfill":
      return Table.makeHeaderInfo(
        "AutoFulfill",
        "Auto Full fill",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Email":
      return Table.makeHeaderInfo(
        "Email",
        "Email",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Name":
      return Table.makeHeaderInfo(
        "Name",
        "Name",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Phone":
      return Table.makeHeaderInfo(
        "Phone",
        "Phone",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "PhoneCountryCode":
      return Table.makeHeaderInfo(
        "PhoneCountryCode",
        "Phone Country Code",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ClientSecret":
      return Table.makeHeaderInfo(
        "ClientSecret",
        "Client Secret",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ReturnUrl":
      return Table.makeHeaderInfo(
        "ReturnUrl",
        "Return Url",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "BusinessCountry":
      return Table.makeHeaderInfo(
        "BusinessCountry",
        "Business Country",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "BusinessLabel":
      return Table.makeHeaderInfo(
        "BusinessLabel",
        "Business Label",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Description":
      return Table.makeHeaderInfo(
        "Description",
        "Description",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Entity_type":
      return Table.makeHeaderInfo(
        "Entity_type",
        "Entity Type",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Recurring":
      return Table.makeHeaderInfo(
        "Recurring",
        "Recurring",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Status":
      return Table.makeHeaderInfo(
        "status",
        "Payout Status",
        "DropDown",
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ErrorMessage":
      return Table.makeHeaderInfo(
        "ErrorMessage",
        "Error Message",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ErrorCode":
      return Table.makeHeaderInfo(
        "ErrorCode",
        "ErrorCode",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ProfileId":
      return Table.makeHeaderInfo(
        "ProfileId",
        "Profile Id",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "Created":
      return Table.makeHeaderInfo(
        "Created",
        "Created At",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "ConnectorTransactionId":
      return Table.makeHeaderInfo(
        "ConnectorTransactionId",
        "Connector Transaction ID",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case "SendPriority":
      return Table.makeHeaderInfo(
        "SendPriority",
        "Send Priority",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getCell(payoutData, colType) {
  switch (colType) {
    case "PayoutId":
      return {
        TAG: "DisplayCopyCell",
        _0: payoutData.payout_id,
      };
    case "MerchantId":
      return {
        TAG: "DisplayCopyCell",
        _0: payoutData.merchant_id,
      };
    case "Amount":
      return {
        TAG: "CustomCell",
        _0: React.createElement(OrderEntity.CurrencyCell.make, {
          amount: (payoutData.amount / 100.0).toString(),
          currency: payoutData.currency,
        }),
        _1: "",
      };
    case "Currency":
      return {
        TAG: "Text",
        _0: payoutData.currency,
      };
    case "Connector":
      return {
        TAG: "CustomCell",
        _0: React.createElement(HelperComponents.ConnectorCustomCell.make, {
          connectorName: payoutData.connector,
        }),
        _1: "",
      };
    case "PayoutType":
      return {
        TAG: "Text",
        _0: payoutData.payout_type,
      };
    case "Billing":
      return {
        TAG: "Text",
        _0: payoutData.billing,
      };
    case "CustomerId":
      return {
        TAG: "DisplayCopyCell",
        _0: payoutData.customer_id,
      };
    case "AutoFulfill":
      return {
        TAG: "Text",
        _0: LogicUtils.getStringFromBool(payoutData.auto_fulfill),
      };
    case "Email":
      return {
        TAG: "Text",
        _0: payoutData.email,
      };
    case "Name":
      return {
        TAG: "Text",
        _0: payoutData.name,
      };
    case "Phone":
      return {
        TAG: "Text",
        _0: payoutData.phone,
      };
    case "PhoneCountryCode":
      return {
        TAG: "Text",
        _0: payoutData.phone_country_code,
      };
    case "ClientSecret":
      return {
        TAG: "Text",
        _0: payoutData.client_secret,
      };
    case "ReturnUrl":
      return {
        TAG: "Text",
        _0: payoutData.return_url,
      };
    case "BusinessCountry":
      return {
        TAG: "Text",
        _0: payoutData.business_country,
      };
    case "BusinessLabel":
      return {
        TAG: "Text",
        _0: payoutData.business_label,
      };
    case "Description":
      return {
        TAG: "Text",
        _0: payoutData.description,
      };
    case "Entity_type":
      return {
        TAG: "Text",
        _0: payoutData.entity_type,
      };
    case "Recurring":
      return {
        TAG: "Text",
        _0: LogicUtils.getStringFromBool(payoutData.recurring),
      };
    case "Status":
      var match = statusVariantMapper(payoutData.status);
      var tmp;
      switch (match) {
        case "Succeeded":
          tmp = "LabelGreen";
          break;
        case "Failed":
        case "Cancelled":
          tmp = "LabelRed";
          break;
        case "Processing":
          tmp = "LabelOrange";
          break;
        case "PartiallyCaptured":
        case "None":
          tmp = "LabelLightBlue";
          break;
        default:
          tmp = "LabelWhite";
      }
      return {
        TAG: "Label",
        _0: {
          title: payoutData.status.toUpperCase(),
          color: tmp,
        },
      };
    case "ErrorMessage":
      return {
        TAG: "Text",
        _0: payoutData.error_message,
      };
    case "ErrorCode":
      return {
        TAG: "Text",
        _0: payoutData.error_code,
      };
    case "ProfileId":
      return {
        TAG: "DisplayCopyCell",
        _0: payoutData.profile_id,
      };
    case "Created":
      return {
        TAG: "Date",
        _0: payoutData.created,
      };
    case "ConnectorTransactionId":
      return {
        TAG: "DisplayCopyCell",
        _0: payoutData.connector_transaction_id,
      };
    case "SendPriority":
      var priorityVariants = priorityVariantMapper(payoutData.priority);
      if (priorityVariants === "None") {
        return {
          TAG: "Text",
          _0: payoutData.priority,
        };
      }
      var tmp$1;
      tmp$1 = priorityVariants === "Instant" ? "LabelBlue" : "LabelOrange";
      return {
        TAG: "Label",
        _0: {
          title: payoutData.priority.toUpperCase(),
          color: tmp$1,
        },
      };
  }
}

function itemToObjMapperAttempts(json) {
  var dict = LogicUtils.getDictFromJsonObject(json);
  return {
    attempt_id: LogicUtils.getString(dict, "attempt_id", ""),
    status: LogicUtils.getString(dict, "status", ""),
    amount: LogicUtils.getFloat(dict, "amount", 0.0),
    currency: LogicUtils.getString(dict, "currency", ""),
    connector: LogicUtils.getString(dict, "connector", ""),
    error_code: LogicUtils.getString(dict, "error_code", ""),
    error_message: LogicUtils.getString(dict, "error_message", ""),
    payment_method: LogicUtils.getString(dict, "payment_method", ""),
    payout_method_type: LogicUtils.getString(dict, "payout_method_type", ""),
    connector_transaction_id: LogicUtils.getString(
      dict,
      "connector_transaction_id",
      "",
    ),
    cancellation_reason: LogicUtils.getString(dict, "cancellation_reason", ""),
    unified_code: LogicUtils.getString(dict, "unified_code", ""),
    unified_message: LogicUtils.getString(dict, "unified_message", ""),
  };
}

function itemToObjMapper(dict) {
  return {
    payout_id: LogicUtils.getString(dict, "payout_id", ""),
    merchant_id: LogicUtils.getString(dict, "merchant_id", ""),
    amount: LogicUtils.getFloat(dict, "amount", 0.0),
    currency: LogicUtils.getString(dict, "currency", ""),
    connector: LogicUtils.getString(dict, "connector", ""),
    payout_type: LogicUtils.getString(dict, "payout_type", ""),
    billing: LogicUtils.getString(dict, "billing", ""),
    customer_id: LogicUtils.getString(dict, "customer_id", ""),
    auto_fulfill: LogicUtils.getBool(dict, "auto_fulfill", false),
    email: LogicUtils.getString(dict, "email", ""),
    name: LogicUtils.getString(dict, "name", ""),
    phone: LogicUtils.getString(dict, "phone", ""),
    phone_country_code: LogicUtils.getString(dict, "phone_country_code", ""),
    client_secret: LogicUtils.getString(dict, "client_secret", ""),
    return_url: LogicUtils.getString(dict, "return_url", ""),
    business_country: LogicUtils.getString(dict, "business_country", ""),
    business_label: LogicUtils.getString(dict, "business_label", ""),
    description: LogicUtils.getString(dict, "description", ""),
    entity_type: LogicUtils.getString(dict, "entity_type", ""),
    recurring: LogicUtils.getBool(dict, "recurring", false),
    status: LogicUtils.getString(dict, "status", ""),
    error_message: LogicUtils.getString(dict, "error_message", ""),
    error_code: LogicUtils.getString(dict, "error_code", ""),
    profile_id: LogicUtils.getString(dict, "profile_id", ""),
    created: LogicUtils.getString(dict, "created", ""),
    connector_transaction_id: LogicUtils.getString(
      dict,
      "connector_transaction_id",
      "",
    ),
    priority: LogicUtils.getString(dict, "priority", ""),
    attempts: LogicUtils.getArrayFromDict(dict, "attempts", []).map(
      itemToObjMapperAttempts,
    ),
  };
}

function getPayouts(json) {
  return LogicUtils.getArrayDataFromJson(json, itemToObjMapper);
}

var payoutEntity = EntityType.makeEntity(
  "",
  getPayouts,
  defaultColumns,
  allColumns,
  getHeading,
  getCell,
  "",
  undefined,
  undefined,
  undefined,
  undefined,
  function (payoutData) {
    return GlobalVars.appendDashboardPath("/payouts/" + payoutData.payout_id);
  },
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

export {
  attemptsColumns,
  statusVariantMapper,
  priorityVariantMapper,
  getAttemptHeading,
  getAttemptCell,
  defaultColumns,
  allColumns,
  useGetStatus,
  getHeading,
  getCell,
  itemToObjMapperAttempts,
  itemToObjMapper,
  getPayouts,
  payoutEntity,
};
/* payoutEntity Not a pure module */
