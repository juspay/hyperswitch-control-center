// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as OrderUtils from "../../components/OrderUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as PayoutsEntity from "./PayoutsEntity.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as BreadCrumbNavigation from "../../utils/BreadCrumbNavigation.bs.js";
import * as CustomExpandableTable from "../../components/CustomExpandableTable.bs.js";

function ShowPayout$AttemptsSection(props) {
  return React.createElement(
    "div",
    {
      className: "flex flex-row flex-wrap",
    },
    React.createElement(
      "div",
      {
        className: "w-full p-2",
      },
      React.createElement(OrderUtils.Details.make, {
        heading: {
          TAG: "String",
          _0: "Attempt Details",
        },
        data: props.data,
        getHeading: PayoutsEntity.getAttemptHeading,
        getCell: PayoutsEntity.getAttemptCell,
        detailsFields: PayoutsEntity.attemptsColumns,
        widthClass: "w-1/3",
      }),
    ),
  );
}

var AttemptsSection = {
  make: ShowPayout$AttemptsSection,
};

function ShowPayout$Attempts(props) {
  var payoutObj = PayoutsEntity.itemToObjMapper(
    LogicUtils.getDictFromJsonObject(props.data),
  );
  var attemptsData = payoutObj.attempts;
  var match = React.useState(function () {
    return [-1];
  });
  var setExpandedRowIndexArray = match[1];
  var expandedRowIndexArray = match[0];
  React.useEffect(function () {}, [-1]);
  var onExpandIconClick = function (isCurrentRowExpanded, rowIndex) {
    if (isCurrentRowExpanded) {
      var indexOfRemovalItem = expandedRowIndexArray.findIndex(function (item) {
        return item === rowIndex;
      });
      return setExpandedRowIndexArray(function (param) {
        var array = expandedRowIndexArray.map(function (item) {
          return item;
        });
        array.splice(indexOfRemovalItem, 1);
        return array;
      });
    } else {
      return setExpandedRowIndexArray(function (param) {
        return [rowIndex];
      });
    }
  };
  var heading = PayoutsEntity.attemptsColumns.map(
    PayoutsEntity.getAttemptHeading,
  );
  var rows = attemptsData.map(function (item) {
    return PayoutsEntity.attemptsColumns.map(function (colType) {
      return PayoutsEntity.getAttemptCell(item, colType);
    });
  });
  var getRowDetails = function (rowIndex) {
    var data = attemptsData[rowIndex];
    if (data !== undefined) {
      return React.createElement(ShowPayout$AttemptsSection, {
        data: data,
      });
    } else {
      return null;
    }
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-4",
    },
    React.createElement(
      "p",
      {
        className: "font-bold text-fs-16 text-jp-gray-900",
      },
      "Payout Attempts",
    ),
    React.createElement(CustomExpandableTable.make, {
      title: "Attempts",
      heading: heading,
      rows: rows,
      onExpandIconClick: onExpandIconClick,
      expandedRowIndexArray: expandedRowIndexArray,
      getRowDetails: getRowDetails,
      showSerial: true,
    }),
  );
}

var Attempts = {
  make: ShowPayout$Attempts,
};

function ShowPayout$PayoutInfo$Details(props) {
  var children = props.children;
  var __bgColor = props.bgColor;
  var __widthClass = props.widthClass;
  var __justifyClassName = props.justifyClassName;
  var __excludeColKeys = props.excludeColKeys;
  var getCell = props.getCell;
  var getHeading = props.getHeading;
  var data = props.data;
  var excludeColKeys = __excludeColKeys !== undefined ? __excludeColKeys : [];
  var justifyClassName =
    __justifyClassName !== undefined ? __justifyClassName : "justify-start";
  var widthClass = __widthClass !== undefined ? __widthClass : "w-1/4";
  var bgColor =
    __bgColor !== undefined
      ? __bgColor
      : "bg-white dark:bg-jp-gray-lightgray_background";
  return React.createElement(
    OrderUtils.Section.make,
    {
      children: null,
      customCssClass:
        "border border-jp-gray-940 border-opacity-75 dark:border-jp-gray-960 " +
        bgColor +
        " rounded-md p-5",
    },
    React.createElement(FormRenderer.DesktopRow.make, {
      children: React.createElement(
        "div",
        {
          className:
            "flex flex-wrap " +
            justifyClassName +
            " dark:bg-jp-gray-lightgray_background dark:border-jp-gray-no_data_border",
        },
        props.detailsFields.map(function (colType, i) {
          return JsxPPXReactSupportU.createElementWithKey(
            i.toString(),
            RenderIf.make,
            {
              condition: !excludeColKeys.includes(colType),
              children: React.createElement(
                "div",
                {
                  className: "flex " + widthClass + " items-center",
                },
                React.createElement(OrderUtils.DisplayKeyValueParams.make, {
                  heading: getHeading(colType),
                  value: getCell(data, colType),
                  customMoneyStyle: "!font-normal !text-sm",
                  labelMargin: "!py-0 mt-2",
                  textColor: "!font-normal !text-jp-gray-700",
                  overiddingHeadingStyles: "text-black text-sm font-medium",
                }),
              ),
            },
          );
        }),
      ),
    }),
    React.createElement(RenderIf.make, {
      condition: Core__Option.isSome(children),
      children: Core__Option.getOr(children, null),
    }),
  );
}

var Details = {
  make: ShowPayout$PayoutInfo$Details,
};

function ShowPayout$PayoutInfo(props) {
  var payoutData = PayoutsEntity.itemToObjMapper(props.dict);
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(
      "div",
      {
        className:
          "font-bold text-fs-16 dark:text-white dark:text-opacity-75 mt-4 mb-4",
      },
      "Summary",
    ),
    React.createElement(ShowPayout$PayoutInfo$Details, {
      data: payoutData,
      getHeading: PayoutsEntity.getHeading,
      getCell: PayoutsEntity.getCell,
      detailsFields: PayoutsEntity.allColumns,
    }),
  );
}

var PayoutInfo = {
  Details: Details,
  make: ShowPayout$PayoutInfo,
};

function ShowPayout(props) {
  var id = props.id;
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return null;
  });
  var setPayoutsData = match$1[1];
  var fetchPayoutsData = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var payoutsUrl = getURL(
        "PAYOUTS",
        "Get",
        Caml_option.some(id),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await fetchDetails(payoutsUrl);
      setPayoutsData(function (param) {
        return response;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return setScreenState(function (param) {
          return {
            TAG: "Error",
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  React.useEffect(function () {
    fetchPayoutsData();
  }, []);
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "flex flex-col overflow-scroll",
        },
        React.createElement(
          "div",
          {
            className: "mb-4 flex justify-between",
          },
          React.createElement(
            "div",
            {
              className: "flex items-center",
            },
            React.createElement(
              "div",
              undefined,
              React.createElement(PageUtils.PageHeading.make, {
                title: "Payouts",
              }),
              React.createElement(BreadCrumbNavigation.make, {
                path: [
                  {
                    title: "Payouts",
                    link: "/payouts",
                  },
                ],
                currentPageTitle: id,
                cursorStyle: "cursor-pointer",
              }),
            ),
            React.createElement("div", undefined),
          ),
        ),
        React.createElement(ShowPayout$PayoutInfo, {
          dict: LogicUtils.getDictFromJsonObject(match$1[0]),
        }),
      ),
    ),
    screenState: match[0],
  });
}

var make = ShowPayout;

export { AttemptsSection, Attempts, PayoutInfo, make };
/* react Not a pure module */
