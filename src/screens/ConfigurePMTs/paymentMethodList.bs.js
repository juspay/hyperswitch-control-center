// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Filter from "../../components/Filter.bs.js";
import * as Recoil from "recoil";
import * as PageUtils from "../Helpers/PageUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "../../components/LoadedTable.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FilterContext from "../../context/FilterContext.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as HyperSwitchUtils from "../../utils/HyperSwitchUtils.bs.js";
import * as ConnectorListHook from "../Hooks/ConnectorListHook.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as PaymentMethodEntity from "./PaymentMethodEntity.bs.js";
import * as PaymentMethodConfigUtils from "./PaymentMethodConfigUtils.bs.js";

function PaymentMethodList(props) {
  var __isPayoutFlow = props.isPayoutFlow;
  var isPayoutFlow = __isPayoutFlow !== undefined ? __isPayoutFlow : false;
  var fetchConnectorListResponse = ConnectorListHook.useFetchConnectorList();
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var match = React.useState(function () {
    return "Loading";
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return {};
  });
  var setConnectorResponse = match$1[1];
  var connectorResponse = match$1[0];
  var match$2 = React.useState(function () {
    return PaymentMethodEntity.getConnectedList({});
  });
  var setFiltersConnectors = match$2[1];
  var filteredConnectors = match$2[0];
  var match$3 = React.useState(function () {
    return PaymentMethodEntity.getConnectedList({});
  });
  var setConfiguredConnectors = match$3[1];
  var configuredConnectors = match$3[0];
  var match$4 = React.useContext(FilterContext.filterContext);
  var reset = match$4.reset;
  var filterValueJson = match$4.filterValueJson;
  var match$5 = React.useState(function () {
    return 0;
  });
  var allFilters = React.useMemo(
    function () {
      return PaymentMethodConfigUtils.pmtConfigFilter(filterValueJson);
    },
    [filterValueJson],
  );
  var getConnectorListAndUpdateState = async function () {
    try {
      setScreenState(function (param) {
        return "Loading";
      });
      var response = await fetchConnectorListResponse();
      var configuredConnectors = PaymentMethodEntity.getConnectedList(response);
      var filterdValue = PaymentMethodEntity.getFilterdConnectorList(
        response,
        allFilters,
      );
      setFiltersConnectors(function (param) {
        return filterdValue;
      });
      setConnectorResponse(function (param) {
        return response;
      });
      setConfiguredConnectors(function (param) {
        return configuredConnectors;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      return setScreenState(function (param) {
        return {
          TAG: "Error",
          _0: "Failed to fetch",
        };
      });
    }
  };
  React.useEffect(
    function () {
      getConnectorListAndUpdateState();
    },
    [isPayoutFlow, filterValueJson],
  );
  var applyFilter = async function () {
    var res = PaymentMethodEntity.getFilterdConnectorList(
      connectorResponse,
      allFilters,
    );
    return setFiltersConnectors(function (param) {
      return res;
    });
  };
  React.useEffect(
    function () {
      if (
        Core__Option.isSome(allFilters.connectorId) ||
        Core__Option.isSome(allFilters.profileId) ||
        Core__Option.isSome(allFilters.paymentMethod) ||
        Core__Option.isSome(allFilters.paymentMethodType)
      ) {
        applyFilter();
      }
    },
    [allFilters],
  );
  var handleClearFilter = async function () {
    await HyperSwitchUtils.delay(500);
    var dict = PaymentMethodConfigUtils.pmtConfigFilter({});
    var res = PaymentMethodEntity.getFilterdConnectorList(
      connectorResponse,
      dict,
    );
    setFiltersConnectors(function (param) {
      return res;
    });
    return reset();
  };
  return React.createElement(
    "div",
    undefined,
    React.createElement(PageUtils.PageHeading.make, {
      title: "Configure PMTs at Checkout",
      subTitle:
        "Control the visibility of your payment methods at the checkout",
    }),
    React.createElement(
      PageLoaderWrapper.make,
      {
        children: Caml_option.some(null),
        screenState: match[0],
      },
      JsxPPXReactSupportU.createElementWithKey("0", Filter.make, {
        defaultFilters: {},
        fixedFilters: [],
        requiredSearchFieldsList: [],
        remoteFilters: PaymentMethodConfigUtils.initialFilters(
          configuredConnectors,
          businessProfiles,
        ),
        remoteOptions: [],
        localOptions: [],
        localFilters: PaymentMethodConfigUtils.initialFilters(
          configuredConnectors,
          businessProfiles,
        ),
        defaultFilterKeys: [],
        updateUrlWith: match$4.updateExistingKeys,
        clearFilters: function () {
          handleClearFilter();
        },
      }),
      React.createElement(LoadedTable.make, {
        title: " ",
        showSerialNumber: true,
        actualData: filteredConnectors.map(function (prim) {
          return prim;
        }),
        totalResults: filteredConnectors.length,
        resultsPerPage: 20,
        offset: match$5[0],
        setOffset: match$5[1],
        entity: PaymentMethodEntity.paymentMethodEntity(
          getConnectorListAndUpdateState,
        ),
        currrentFetchCount: filteredConnectors.length,
        collapseTableRow: false,
      }),
    ),
  );
}

var make = PaymentMethodList;

export { make };
/* react Not a pure module */
