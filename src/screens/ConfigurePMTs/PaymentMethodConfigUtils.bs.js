// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";
import * as FilterSelectBox from "../../components/FilterSelectBox.bs.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";

function dropdownClassName(options) {
  if (options.length > 5) {
    return "h-80";
  } else {
    return "h-full";
  }
}

function getAdvanceConfiguration(advanceConfiguration) {
  if (advanceConfiguration === undefined) {
    return "Default";
  }
  var firstThree = advanceConfiguration.list.slice(0, 3).toString();
  var restCount = (advanceConfiguration.list.length - 3) | 0;
  if (advanceConfiguration.list.length > 3) {
    return React.createElement(
      "div",
      undefined,
      firstThree + ",",
      React.createElement(
        "span",
        {
          className: "text-blue-811",
        },
        "+" + restCount.toString() + " more",
      ),
    );
  } else {
    return React.createElement("div", undefined, firstThree);
  }
}

function encodeAdvanceConfig(advanceConfig) {
  if (advanceConfig !== undefined) {
    return Object.fromEntries([
      ["type", advanceConfig.type],
      [
        "list",
        advanceConfig.list.map(function (prim) {
          return prim;
        }),
      ],
    ]);
  } else {
    return Core__Option.getOr(
      Core__Option.map(undefined, function (prim) {
        return prim;
      }),
      null,
    );
  }
}

function encodePaymentMethodConfig(paymentMethodConfig) {
  return LogicUtils.getJsonFromArrayOfJson([
    ["payment_method_type", paymentMethodConfig.payment_method_type],
    [
      "card_networks",
      paymentMethodConfig.card_networks.map(function (prim) {
        return prim;
      }),
    ],
    [
      "accepted_currencies",
      encodeAdvanceConfig(paymentMethodConfig.accepted_currencies),
    ],
    [
      "accepted_countries",
      encodeAdvanceConfig(paymentMethodConfig.accepted_countries),
    ],
    [
      "maximum_amount",
      Core__Option.getOr(
        Core__Option.map(paymentMethodConfig.maximum_amount, function (prim) {
          return prim;
        }),
        null,
      ),
    ],
    [
      "minimum_amount",
      Core__Option.getOr(
        Core__Option.map(paymentMethodConfig.minimum_amount, function (prim) {
          return prim;
        }),
        null,
      ),
    ],
    [
      "recurring_enabled",
      Core__Option.getOr(
        Core__Option.map(
          paymentMethodConfig.recurring_enabled,
          function (prim) {
            return prim;
          },
        ),
        null,
      ),
    ],
    [
      "installment_payment_enabled",
      Core__Option.getOr(
        Core__Option.map(
          paymentMethodConfig.installment_payment_enabled,
          function (prim) {
            return prim;
          },
        ),
        null,
      ),
    ],
    [
      "payment_experience",
      Core__Option.getOr(
        Core__Option.map(
          paymentMethodConfig.payment_experience,
          function (prim) {
            return prim;
          },
        ),
        null,
      ),
    ],
  ]);
}

function encodePaymentMethodEnabled(paymentMethodRecord) {
  var paymentMethodConfig = paymentMethodRecord.payment_method_types.map(
    encodePaymentMethodConfig,
  );
  return LogicUtils.getJsonFromArrayOfJson([
    ["payment_method", paymentMethodRecord.payment_method],
    ["payment_method_types", paymentMethodConfig],
  ]);
}

function encodeConnectorPayload(typedValue) {
  var paymentMethodEnabled = typedValue.payment_methods_enabled.map(
    encodePaymentMethodEnabled,
  );
  return LogicUtils.getJsonFromArrayOfJson([
    ["connector_type", typedValue.connector_type],
    ["payment_methods_enabled", paymentMethodEnabled],
  ]);
}

function pmtConfigFilter(dict) {
  return {
    profileId: LogicUtils.getOptionStrArrayFromDict(dict, "profileId"),
    connectorId: LogicUtils.getOptionStrArrayFromDict(dict, "connectorId"),
    paymentMethod: LogicUtils.getOptionStrArrayFromDict(dict, "paymentMethod"),
    paymentMethodType: LogicUtils.getOptionStrArrayFromDict(
      dict,
      "paymentMethodType",
    ),
  };
}

function mapPaymentMethodTypeValues(
  paymentMethodType,
  connectorPayload,
  pmIndex,
  pmtIndex,
  paymentMethod,
) {
  return {
    payment_method_index: pmIndex,
    payment_method_types_index: pmtIndex,
    merchant_connector_id: connectorPayload.merchant_connector_id,
    connector_name: connectorPayload.connector_name,
    profile_id: connectorPayload.profile_id,
    payment_method: paymentMethod,
    payment_method_type: paymentMethodType.payment_method_type,
    card_networks: paymentMethodType.card_networks,
    accepted_currencies: paymentMethodType.accepted_currencies,
    accepted_countries: paymentMethodType.accepted_countries,
    minimum_amount: paymentMethodType.minimum_amount,
    maximum_amount: paymentMethodType.maximum_amount,
    recurring_enabled: paymentMethodType.recurring_enabled,
    installment_payment_enabled: paymentMethodType.installment_payment_enabled,
    payment_experience: paymentMethodType.payment_experience,
  };
}

function mapPaymentMethodValues(
  connectorPayload,
  mappedArr,
  pmIndex,
  filtersOpt,
  param,
) {
  var filters = filtersOpt !== undefined ? filtersOpt : pmtConfigFilter({});
  var pm = Core__Option.getOr(
    connectorPayload.payment_methods_enabled[pmIndex],
    ConnectorListMapper.getPaymentMethodsEnabled({}),
  );
  pm.payment_method_types.forEach(function (data, pmtIndex) {
    var paymentMethod = pm.payment_method;
    var pmtsType = filters.paymentMethodType;
    if (
      pmtsType !== undefined &&
      !pmtsType.includes(data.payment_method_type)
    ) {
      return;
    } else {
      mappedArr.push(
        mapPaymentMethodTypeValues(
          data,
          connectorPayload,
          pmIndex,
          pmtIndex,
          paymentMethod,
        ),
      );
      return;
    }
  });
}

function paymentMethodFilter(filters, connectorPayload, mappedArr) {
  connectorPayload.payment_methods_enabled.forEach(function (item, pmIndex) {
    var methods = filters.paymentMethod;
    if (methods !== undefined && !methods.includes(item.payment_method)) {
      return;
    } else {
      return mapPaymentMethodValues(
        connectorPayload,
        mappedArr,
        pmIndex,
        filters,
        undefined,
      );
    }
  });
}

function connectorIdFilter(filters, connectorPayload, mappedArr) {
  var ids = filters.connectorId;
  if (ids !== undefined && !ids.includes(connectorPayload.connector_name)) {
    return;
  } else {
    return paymentMethodFilter(filters, connectorPayload, mappedArr);
  }
}

function filterItemObjMapper(dict, mappedArr, filters) {
  var connectorPayload = ConnectorListMapper.getProcessorPayloadType(dict);
  if (
    ConnectorUtils.connectorTypeStringToTypeMapper(
      connectorPayload.connector_type,
    ) !== "PaymentProcessor"
  ) {
    return;
  }
  var profileIds = filters.profileId;
  if (
    profileIds !== undefined &&
    !profileIds.includes(connectorPayload.profile_id)
  ) {
    return;
  } else {
    return connectorIdFilter(filters, connectorPayload, mappedArr);
  }
}

function initialFilters(configuredConnectors, businessProfiles) {
  var businessProfileNameDropDownOption = function (arrBusinessProfile) {
    return arrBusinessProfile.map(function (ele) {
      return {
        label: ele.profile_name + " (" + ele.profile_id + ")",
        value: ele.profile_id,
      };
    });
  };
  return [
    {
      field: FormRenderer.makeFieldInfo(
        undefined,
        undefined,
        "profileId",
        InputFields.filterMultiSelectInput(
          businessProfileNameDropDownOption(businessProfiles),
          undefined,
          "Select Profile",
          undefined,
          undefined,
          false,
          undefined,
          undefined,
          true,
          undefined,
          undefined,
          undefined,
          undefined,
          "bg-none",
          undefined,
          undefined,
          true,
          true,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      localFilter: undefined,
    },
    {
      field: FormRenderer.makeFieldInfo(
        undefined,
        undefined,
        "connectorId",
        InputFields.filterMultiSelectInput(
          FilterSelectBox.makeOptions(
            LogicUtils.getUniqueArray(
              configuredConnectors.map(function (ele) {
                return ele.connector_name;
              }),
            ),
          ),
          undefined,
          "Select Connector",
          undefined,
          undefined,
          false,
          undefined,
          undefined,
          true,
          undefined,
          undefined,
          undefined,
          undefined,
          "bg-none",
          undefined,
          undefined,
          true,
          true,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      localFilter: undefined,
    },
    {
      field: FormRenderer.makeFieldInfo(
        undefined,
        undefined,
        "paymentMethod",
        InputFields.filterMultiSelectInput(
          FilterSelectBox.makeOptions(
            LogicUtils.getUniqueArray(
              configuredConnectors.map(function (ele) {
                return ele.payment_method;
              }),
            ),
          ),
          undefined,
          "Select Payment Method",
          undefined,
          undefined,
          false,
          undefined,
          undefined,
          true,
          undefined,
          undefined,
          undefined,
          undefined,
          "bg-none",
          undefined,
          undefined,
          true,
          true,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      localFilter: undefined,
    },
    {
      field: FormRenderer.makeFieldInfo(
        undefined,
        undefined,
        "paymentMethodType",
        InputFields.filterMultiSelectInput(
          FilterSelectBox.makeOptions(
            LogicUtils.getUniqueArray(
              configuredConnectors.map(function (ele) {
                return ele.payment_method_type;
              }),
            ),
          ),
          undefined,
          "Select Payment Method Type",
          undefined,
          undefined,
          false,
          undefined,
          undefined,
          true,
          undefined,
          undefined,
          undefined,
          undefined,
          "bg-none",
          undefined,
          undefined,
          true,
          true,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      localFilter: undefined,
    },
  ];
}

export {
  dropdownClassName,
  getAdvanceConfiguration,
  encodeAdvanceConfig,
  encodePaymentMethodConfig,
  encodePaymentMethodEnabled,
  encodeConnectorPayload,
  pmtConfigFilter,
  mapPaymentMethodTypeValues,
  mapPaymentMethodValues,
  paymentMethodFilter,
  connectorIdFilter,
  filterItemObjMapper,
  initialFilters,
};
/* react Not a pure module */
