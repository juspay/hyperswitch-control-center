// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../utils/Form.bs.js";
import * as Modal from "../../utils/Modal.bs.js";
import * as React from "react";
import * as ACLDiv from "../../components/ACLDiv.bs.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../utils/RenderIf.bs.js";
import * as SelectBox from "../../components/SelectBox.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as ReactFinalForm from "../../libraries/ReactFinalForm.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as PageLoaderWrapper from "../Helpers/PageLoaderWrapper.bs.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as PaymentMethodConfigUtils from "./PaymentMethodConfigUtils.bs.js";

function PaymentMethodConfig$PmtConfigInp(props) {
  var fieldsArray = props.fieldsArray;
  var options = props.options;
  var enabledList = Core__Option.getOr(
    fieldsArray[0],
    ReactFinalForm.fakeFieldRenderProps,
  ).input;
  var valueField = Core__Option.getOr(
    fieldsArray[1],
    ReactFinalForm.fakeFieldRenderProps,
  ).input;
  var enableType = Core__Option.getOr(
    fieldsArray[2],
    ReactFinalForm.fakeFieldRenderProps,
  ).input;
  var input_onBlur = function (_ev) {};
  var input_onChange = function (ev) {
    if (ev.length <= 0) {
      return valueField.onChange(
        Core__Option.getOr(
          Core__Option.map(undefined, function (prim) {
            return prim;
          }),
          null,
        ),
      );
    } else {
      enabledList.onChange(ev);
      return enableType.onChange("enable_only");
    }
  };
  var input_onFocus = function (_ev) {};
  var input_value = enabledList.value;
  var input = {
    name: "string",
    onBlur: input_onBlur,
    onChange: input_onChange,
    onFocus: input_onFocus,
    value: input_value,
    checked: true,
  };
  return React.createElement(SelectBox.BaseDropdown.make, {
    buttonText: "Select Value",
    allowMultiSelect: true,
    input: input,
    options: options,
    hideMultiSelectButtons: true,
    fullLength: true,
    customButtonStyle: "w-full",
    showSelectionAsChips: false,
    dropdownClassName: PaymentMethodConfigUtils.dropdownClassName(options),
  });
}

var PmtConfigInp = {
  make: PaymentMethodConfig$PmtConfigInp,
};

function renderValueInp(options) {
  return function (fieldsArray) {
    return React.createElement(PaymentMethodConfig$PmtConfigInp, {
      options: options,
      fieldsArray: fieldsArray,
    });
  };
}

function valueInput(inputArg) {
  return FormRenderer.makeMultiInputFieldInfoOld(
    inputArg.label,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    renderValueInp(inputArg.options),
    [
      FormRenderer.makeInputFieldInfo(
        undefined,
        inputArg.name1,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        inputArg.name2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        inputArg.name2 + ".type",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    ],
    undefined,
  );
}

function PaymentMethodConfig(props) {
  var element = props.element;
  var setReferesh = props.setReferesh;
  var __config = props.config;
  var paymentMethodConfig = props.paymentMethodConfig;
  var config = __config !== undefined ? __config : "";
  var permissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var match = React.useState(function () {
    return false;
  });
  var setShowPaymentMthdConfigModal = match[1];
  var showPaymentMthdConfigModal = match[0];
  var match$1 = React.useState(function () {
    return {};
  });
  var setInitialValues = match$1[1];
  var match$2 = React.useState(function () {
    return [];
  });
  var setCurrencies = match$2[1];
  var match$3 = React.useState(function () {
    return [];
  });
  var setCountries = match$3[1];
  var match$4 = React.useState(function () {
    return "Success";
  });
  var payment_method_type = paymentMethodConfig.payment_method_type;
  var connector_name = paymentMethodConfig.connector_name;
  var merchant_connector_id = paymentMethodConfig.merchant_connector_id;
  var setScreenState = match$4[1];
  var getURL = APIUtils.useGetURL();
  var connectorList = Recoil.useRecoilValue(HyperswitchAtom.connectorListAtom);
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var getProcessorDetails = async function () {
    try {
      setShowPaymentMthdConfigModal(function (param) {
        return true;
      });
      setScreenState(function (param) {
        return "Loading";
      });
      var paymentMethoConfigUrl = getURL(
        "PAYMENT_METHOD_CONFIG",
        "Get",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var data = LogicUtils.getValueFromArray(
        connectorList.filter(function (item) {
          return (
            item.merchant_connector_id ===
            paymentMethodConfig.merchant_connector_id
          );
        }),
        0,
        ConnectorListMapper.getProcessorPayloadType({}),
      );
      var encodeConnectorPayload =
        PaymentMethodConfigUtils.encodeConnectorPayload(data);
      var res = await fetchDetails(
        paymentMethoConfigUrl +
          "?connector=" +
          connector_name +
          "&paymentMethodType=" +
          payment_method_type,
      );
      var countries = LogicUtils.getArrayFromDict(
        LogicUtils.getDictFromJsonObject(res),
        "countries",
        [],
      ).map(function (item) {
        var dict = LogicUtils.getDictFromJsonObject(item);
        return {
          label: LogicUtils.getString(dict, "name", ""),
          value: LogicUtils.getString(dict, "code", ""),
        };
      });
      var currencies = LogicUtils.getArrayFromDict(
        LogicUtils.getDictFromJsonObject(res),
        "currencies",
        [],
      ).map(function (item) {
        return {
          label: LogicUtils.getStringFromJson(item, ""),
          value: LogicUtils.getStringFromJson(item, ""),
        };
      });
      setCountries(function (param) {
        return countries;
      });
      setCurrencies(function (param) {
        return currencies;
      });
      setInitialValues(function (param) {
        return encodeConnectorPayload;
      });
      return setScreenState(function (param) {
        return "Success";
      });
    } catch (exn) {
      return setScreenState(function (param) {
        return {
          TAG: "Error",
          _0: "Something went wrong",
        };
      });
    }
  };
  var onSubmit = async function (values, param) {
    try {
      var url = getURL(
        "CONNECTOR",
        "Post",
        Caml_option.some(merchant_connector_id),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateDetails(
        url,
        values,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await setReferesh();
      setShowPaymentMthdConfigModal(function (param) {
        return false;
      });
    } catch (exn) {
      setShowPaymentMthdConfigModal(function (param) {
        return false;
      });
    }
    return null;
  };
  var id =
    "payment_methods_enabled[" +
    paymentMethodConfig.payment_method_index.toString() +
    "].payment_method_types[" +
    paymentMethodConfig.payment_method_types_index.toString() +
    "]";
  return React.createElement(
    React.Fragment,
    {},
    React.createElement(RenderIf.make, {
      condition: showPaymentMthdConfigModal,
      children: React.createElement(Modal.make, {
        showModal: showPaymentMthdConfigModal,
        setShowModal: setShowPaymentMthdConfigModal,
        children: React.createElement(PageLoaderWrapper.make, {
          children: Caml_option.some(
            JsxPPXReactSupportU.createElementVariadicWithKey(
              "pmts-configuration",
              Form.make,
              {
                children: null,
                onSubmit: onSubmit,
                initialValues: match$1[0],
              },
              [
                React.createElement(
                  "div",
                  {
                    className: "p-5",
                  },
                  React.createElement(FormRenderer.FieldRenderer.make, {
                    field: valueInput({
                      label: "Countries",
                      name1: id + ".accepted_countries.list",
                      name2: id + ".accepted_countries",
                      options: match$3[0],
                    }),
                  }),
                  React.createElement(FormRenderer.FieldRenderer.make, {
                    field: valueInput({
                      label: "Currencies",
                      name1: id + ".accepted_currencies.list",
                      name2: id + ".accepted_currencies",
                      options: match$2[0],
                    }),
                  }),
                ),
                React.createElement("hr", {
                  className: "w-full",
                }),
                React.createElement(
                  "div",
                  {
                    className: "flex justify-end w-full pr-5 pb-3 mt-5",
                  },
                  React.createElement(FormRenderer.SubmitButton.make, {
                    text: "Submit",
                    loadingText: "Processing...",
                  }),
                ),
              ],
            ),
          ),
          screenState: match$4[0],
          sectionHeight: "h-30-vh",
        }),
        modalHeading: paymentMethodConfig.payment_method_type.toUpperCase(),
        modalClass: "w-full max-w-lg m-auto !bg-white",
        childClass: "p-0",
        paddingClass: "",
        modalHeadingDescriptionElement: Caml_option.some(
          React.createElement(
            "div",
            {
              className: "text-md font-medium leading-7 opacity-50 mt-1 w-full",
            },
            "Configure PMTs",
          ),
        ),
      }),
    }),
    React.createElement(ACLDiv.make, {
      permission: permissionJson.connectorsManage,
      onClick: function (param) {
        getProcessorDetails();
      },
      children:
        element !== undefined
          ? Caml_option.valFromOption(element)
          : LogicUtils.isNonEmptyString(config)
            ? config
            : "NA",
      className: "cursor-pointer w-150",
    }),
  );
}

var make = PaymentMethodConfig;

export { PmtConfigInp, renderValueInp, valueInput, make };
/* Form Not a pure module */
