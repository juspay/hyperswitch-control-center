// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Recoil from "recoil";
import * as AuthHooks from "../hooks/AuthHooks.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as GlobalVars from "../utils/GlobalVars.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as CountryUtils from "../utils/CountryUtils.bs.js";
import * as HSwitchUtils from "./HSwitchUtils.bs.js";
import * as CommonAuthHooks from "../entryPoints/AuthModule/Common/CommonAuthHooks.bs.js";
import * as HyperswitchAtom from "../Recoils/HyperswitchAtom.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function useSendEvent() {
  var fetchApi = AuthHooks.useApiFetcher();
  var match = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  var authInfoEmail = match.email;
  var name = match.name;
  var merchant_id = match.merchant_id;
  var id = localStorage.getItem("deviceid");
  var deviceId = id == null ? authInfoEmail : id;
  var parseEmail = function (email) {
    if (email.length === 0) {
      return authInfoEmail;
    } else {
      return email;
    }
  };
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var match$1 = HSwitchUtils.getBrowswerDetails();
  var country = CountryUtils.getCountryCodeStringFromVarient(
    match$1.clientCountry.isoAlpha2,
  );
  var environment;
  switch (GlobalVars.hostType) {
    case "Live":
      environment = "production";
      break;
    case "Sandbox":
      environment = "sandbox";
      break;
    case "Local":
      environment = "localhost";
      break;
    case "Netlify":
      environment = "netlify";
      break;
  }
  var mixpanel_token = window._env_.mixpanelToken;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var getUrlEndpoint = function () {
    if (GlobalVars.dashboardBasePath !== undefined) {
      return Core__Option.getOr(Core__List.toArray(url.path)[1], "");
    } else {
      return Core__Option.getOr(Core__List.toArray(url.path)[0], "");
    }
  };
  var trackApi = async function (
    email,
    merchantId,
    description,
    $$event,
    section,
    metadataOpt,
  ) {
    var metadata = metadataOpt !== undefined ? metadataOpt : {};
    var body = {
      section: section,
      event: $$event,
      metadata: metadata,
      properties: {
        token: mixpanel_token,
        distinct_id: deviceId,
        $device_id: deviceId.split(":")[1],
        $screen_height: window.screen.height,
        $screen_width: window.screen.width,
        name: email,
        merchantName: name,
        email: email,
        mp_lib: "restapi",
        merchantId: merchantId,
        environment: environment,
        description: description,
        lang: window.navigator.language,
        $os: window.navigator.platform,
        $browser: window.navigator.appName,
        mp_country_code: country,
      },
    };
    try {
      await fetchApi(
        GlobalVars.getHostUrl + "/mixpanel/track",
        "data=" + encodeURI(Core__Option.getOr(JSON.stringify(body), "")),
        undefined,
        undefined,
        "Post",
        undefined,
        undefined,
        undefined,
      );
      return;
    } catch (exn) {
      return;
    }
  };
  return function (
    eventName,
    emailOpt,
    descriptionOpt,
    sectionOpt,
    metadataOpt,
    param,
  ) {
    var email = emailOpt !== undefined ? emailOpt : "";
    var description =
      descriptionOpt !== undefined
        ? Caml_option.valFromOption(descriptionOpt)
        : undefined;
    var section = sectionOpt !== undefined ? sectionOpt : "";
    var metadata = metadataOpt !== undefined ? metadataOpt : {};
    var section$1 = LogicUtils.isNonEmptyString(section)
      ? section
      : getUrlEndpoint();
    var eventName$1 = eventName.toLowerCase();
    if (featureFlagDetails.mixpanel) {
      trackApi(
        parseEmail(email),
        merchant_id,
        description,
        eventName$1,
        section$1,
        metadata,
      );
      return;
    }
  };
}

export { useSendEvent };
/* recoil Not a pure module */
