// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as InputFields from "../../../components/InputFields.bs.js";
import * as CountryUtils from "../../../utils/CountryUtils.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../../HSwitchUtils.bs.js";

function getStringFromVariant(key) {
  switch (key) {
    case "POCemail":
      return "poc_email";
    case "IsCompleted":
      return "is_completed";
    case "BusinessName":
      return "legal_business_name";
    case "Country":
      return "business_location";
    case "Website":
      return "business_website";
    case "POCName":
      return "poc_name";
    case "BusinessTAN":
      return "comments";
  }
}

var businessName = FormRenderer.makeFieldInfo(
  "Legal Business Name",
  undefined,
  "legal_business_name",
  InputFields.textInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  "Eg: HyperSwitch Pvt Ltd",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var website = FormRenderer.makeFieldInfo(
  "Business Website",
  undefined,
  "business_website",
  InputFields.textInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter a website",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var pocName = FormRenderer.makeFieldInfo(
  "Contact Name",
  undefined,
  "poc_name",
  InputFields.textInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  "Eg: Jack Ryan",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var pocEmail = FormRenderer.makeFieldInfo(
  "Contact Email",
  undefined,
  "poc_email",
  InputFields.textInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  "Eg: jackryan@hyperswitch.io",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var businessTAN = FormRenderer.makeFieldInfo(
  "Tax Identification Number",
  undefined,
  "comments",
  InputFields.textInput(
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  "Eg. Enter EIN No. for US, VAT No. for EU, etc",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var countryField = FormRenderer.makeFieldInfo(
  "Business Country",
  undefined,
  "business_location",
  InputFields.selectInput(
    CountryUtils.countriesList.map(CountryUtils.getCountryOption),
    "Select Country",
    true,
    undefined,
    undefined,
    true,
    "pr-3",
    undefined,
    undefined,
    "max-h-48",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  ),
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

function validateEmptyValue(key, errors) {
  switch (key) {
    case "POCemail":
      errors[getStringFromVariant(key)] =
        "Please enter a Point of Contact Email";
      return;
    case "IsCompleted":
      return;
    case "BusinessName":
      errors[getStringFromVariant(key)] = "Please enter a Business Name";
      return;
    case "Country":
      errors[getStringFromVariant(key)] = "Please select a Country";
      return;
    case "Website":
      errors[getStringFromVariant(key)] = "Please enter a Website";
      return;
    case "POCName":
      errors[getStringFromVariant(key)] =
        "Please enter a Point of Contact Name";
      return;
    case "BusinessTAN":
      errors[getStringFromVariant(key)] = "Please enter a Business TAN";
      return;
  }
}

function getFormField(columnType) {
  switch (columnType) {
    case "POCemail":
      return pocEmail;
    case "BusinessName":
      return businessName;
    case "IsCompleted":
    case "Country":
      return countryField;
    case "Website":
      return website;
    case "POCName":
      return pocName;
    case "BusinessTAN":
      return businessTAN;
  }
}

var formFields = [
  "BusinessName",
  "Country",
  "Website",
  "POCName",
  "POCemail",
  "BusinessTAN",
];

var formFieldsForQuickStart = [
  "BusinessName",
  "Country",
  "Website",
  "POCName",
  "POCemail",
  "BusinessTAN",
];

function validateCustom(key, errors, value) {
  switch (key) {
    case "POCemail":
      if (HSwitchUtils.isValidEmail(value)) {
        errors[getStringFromVariant(key)] = "Please enter valid email id";
        return;
      } else {
        return;
      }
    case "Website":
      if (!/^https:\/\//i.test(value) || value.includes("localhost")) {
        errors[getStringFromVariant(key)] = "Please Enter Valid URL";
        return;
      } else {
        return;
      }
    default:
      return;
  }
}

function validateForm(values, fieldsToValidate, setIsDisabled) {
  var errors = {};
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  fieldsToValidate.forEach(function (key) {
    var value = LogicUtils.getString(valuesDict, getStringFromVariant(key), "");
    if (value.length < 1) {
      return validateEmptyValue(key, errors);
    } else {
      return validateCustom(key, errors, value);
    }
  });
  if (Object.keys(errors).length > 0) {
    setIsDisabled(function (param) {
      return true;
    });
  } else {
    setIsDisabled(function (param) {
      return false;
    });
  }
  return errors;
}

function getJsonString(valueDict, key) {
  return LogicUtils.getString(valueDict, getStringFromVariant(key), "");
}

function getBody(values) {
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  var prodOnboardingpayload = {};
  LogicUtils.setOptionString(
    prodOnboardingpayload,
    "poc_email",
    LogicUtils.getOptionString(valuesDict, "poc_email"),
  );
  LogicUtils.setOptionBool(prodOnboardingpayload, "is_completed", true);
  LogicUtils.setOptionString(
    prodOnboardingpayload,
    "legal_business_name",
    LogicUtils.getOptionString(valuesDict, "legal_business_name"),
  );
  LogicUtils.setOptionString(
    prodOnboardingpayload,
    "business_location",
    LogicUtils.getOptionString(valuesDict, "business_location"),
  );
  LogicUtils.setOptionString(
    prodOnboardingpayload,
    "business_website",
    LogicUtils.getOptionString(valuesDict, "business_website"),
  );
  LogicUtils.setOptionString(
    prodOnboardingpayload,
    "poc_name",
    LogicUtils.getOptionString(valuesDict, "poc_name"),
  );
  LogicUtils.setOptionString(
    prodOnboardingpayload,
    "comments",
    LogicUtils.getOptionString(valuesDict, "comments"),
  );
  return prodOnboardingpayload;
}

var errorClass = "text-sm leading-4 font-medium text-start ml-1 mt-2";

export {
  errorClass,
  getStringFromVariant,
  businessName,
  website,
  pocName,
  pocEmail,
  businessTAN,
  countryField,
  validateEmptyValue,
  getFormField,
  formFields,
  formFieldsForQuickStart,
  validateCustom,
  validateForm,
  getJsonString,
  getBody,
};
/* businessName Not a pure module */
