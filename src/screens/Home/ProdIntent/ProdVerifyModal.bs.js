// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../../utils/Form.bs.js";
import * as Icon from "../../../components/Icon.bs.js";
import * as Modal from "../../../utils/Modal.bs.js";
import * as React from "react";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as CardUtils from "../../Helpers/CardUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as GlobalProvider from "../../../entryPoints/Provider/GlobalProvider.bs.js";
import * as PageLoaderWrapper from "../../Helpers/PageLoaderWrapper.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as ProdVerifyModalUtils from "./ProdVerifyModalUtils.bs.js";

function ProdVerifyModal(props) {
  var getProdVerifyDetails = props.getProdVerifyDetails;
  var __initialValues = props.initialValues;
  var setShowModal = props.setShowModal;
  var initialValues = __initialValues !== undefined ? __initialValues : {};
  var getURL = APIUtils.useGetURL();
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast();
  var match = React.useState(function () {
    return "Success";
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return false;
  });
  var setIsSubmitBtnDisabled = match$1[1];
  var match$2 = React.useContext(GlobalProvider.defaultContext);
  var setShowProdIntentForm = match$2.setShowProdIntentForm;
  var updateProdDetails = async function (values) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "USER_DATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var bodyValues = ProdVerifyModalUtils.getBody(values);
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["ProdIntent", bodyValues],
      ]);
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      showToast(
        "Successfully sent for verification!",
        "ToastSuccess",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setScreenState(function (param) {
        return "Success";
      });
      getProdVerifyDetails();
      setShowProdIntentForm(function (param) {
        return false;
      });
    } catch (exn) {
      setShowModal(function (param) {
        return false;
      });
    }
    return null;
  };
  var onSubmit = function (values, param) {
    setScreenState(function (param) {
      return "Loading";
    });
    window.open("https://calendar.app.google/U2xpGxE8zigYjeft5");
    return updateProdDetails(values);
  };
  var modalBody = React.createElement(React.Fragment, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "p-2 m-2",
        },
        React.createElement(
          "div",
          {
            className: "py-5 px-3 flex justify-between align-top",
          },
          React.createElement(CardUtils.CardHeader.make, {
            heading: "Get access to Live environment",
            subHeading:
              "We require some details for business verification. Once verified, our team will reach out and provide live credentials within a business day ",
            customSubHeadingStyle: "w-full !max-w-none pr-10",
          }),
          React.createElement(
            "div",
            {
              className: "h-fit",
              onClick: function (param) {
                setShowModal(function (param) {
                  return false;
                });
              },
            },
            React.createElement(Icon.make, {
              name: "close",
              size: 30,
              className: "border-2 p-2 rounded-2xl bg-gray-100 cursor-pointer",
            }),
          ),
        ),
        React.createElement(
          "div",
          {
            className: "min-h-96",
          },
          React.createElement(PageLoaderWrapper.make, {
            children: Caml_option.some(
              JsxPPXReactSupportU.createElementWithKey(
                "prod-request-form",
                Form.make,
                {
                  children: React.createElement(
                    "div",
                    {
                      className: "flex flex-col gap-12 h-full w-full",
                    },
                    React.createElement(FormRenderer.DesktopRow.make, {
                      children: React.createElement(
                        "div",
                        {
                          className: "flex flex-col gap-5",
                        },
                        ProdVerifyModalUtils.formFields.map(
                          function (column, index) {
                            return JsxPPXReactSupportU.createElementWithKey(
                              index.toString(),
                              FormRenderer.FieldRenderer.make,
                              {
                                field:
                                  ProdVerifyModalUtils.getFormField(column),
                                fieldWrapperClass: "w-full",
                                labelClass:
                                  "!text-black font-medium !-ml-[0.5px]",
                                errorClass: ProdVerifyModalUtils.errorClass,
                              },
                            );
                          },
                        ),
                      ),
                    }),
                    React.createElement(
                      "div",
                      {
                        className: "flex justify-end w-full pr-5 pb-3",
                      },
                      React.createElement(FormRenderer.SubmitButton.make, {
                        text: "Book a call",
                        disabledParamter: match$1[0],
                        buttonSize: "Small",
                      }),
                    ),
                  ),
                  onSubmit: onSubmit,
                  initialValues: initialValues,
                  validate: function (values) {
                    return ProdVerifyModalUtils.validateForm(
                      values,
                      ProdVerifyModalUtils.formFields,
                      setIsSubmitBtnDisabled,
                    );
                  },
                },
              ),
            ),
            screenState: match[0],
            sectionHeight: "h-30-vh",
          }),
        ),
      ),
    ),
  });
  return React.createElement(Modal.make, {
    showModal: props.showModal,
    setShowModal: setShowModal,
    children: modalBody,
    modalClass:
      "w-full max-w-2xl mx-auto my-auto dark:!bg-jp-gray-lightgray_background",
    childClass: "p-0",
    closeOnOutsideClick: true,
    borderBottom: true,
  });
}

var make = ProdVerifyModal;

export { make };
/* Form Not a pure module */
