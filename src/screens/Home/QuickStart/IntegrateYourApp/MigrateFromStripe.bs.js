// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../../../components/Button.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as MixpanelHook from "../../../MixpanelHook.bs.js";
import * as ThemeProvider from "../../../../context/ThemeProvider.bs.js";
import * as GlobalProvider from "../../../../entryPoints/Provider/GlobalProvider.bs.js";
import * as EnumVariantHook from "../../../Hooks/EnumVariantHook.bs.js";
import * as QuickStartUIUtils from "../QuickStartUIUtils.bs.js";
import * as UserOnboardingUtils from "../../../SelfServe/HSwitchSandboxOnboarding/UserOnboardingUtils.bs.js";
import * as IntegrateYourAppUtils from "./IntegrateYourAppUtils.bs.js";
import * as UserOnboardingUIUtils from "../../../SelfServe/HSwitchSandboxOnboarding/UserOnboardingUIUtils.bs.js";

function MigrateFromStripe(props) {
  var markAsDone = props.markAsDone;
  var setPlatform = props.setPlatform;
  var platform = props.platform;
  var setBackEndLang = props.setBackEndLang;
  var backEndLang = props.backEndLang;
  var setFrontEndLang = props.setFrontEndLang;
  var frontEndLang = props.frontEndLang;
  var currentRoute = props.currentRoute;
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var match = React.useState(function () {
    return "DownloadAPIKey";
  });
  var setCurrentStep = match[1];
  var currentStep = match[0];
  var match$1 = React.useContext(GlobalProvider.defaultContext);
  var setQuickStartPageState = match$1.setQuickStartPageState;
  var isLastStep = currentStep === "LoadCheckout";
  var updateEnumInRecoil = EnumVariantHook.useUpdateEnumInRecoil();
  var match$2 = ThemeProvider.useTheme();
  var theme;
  theme = match$2 === "Light" ? "light" : "vs-dark";
  var backButton = React.createElement(Button.make, {
    buttonState: "Normal",
    text: "Back",
    buttonType: "PrimaryOutline",
    buttonSize: "Small",
    onClick: function (param) {
      var prevStep =
        IntegrateYourAppUtils.getNavigationStepForMigrateFromStripe(
          currentStep,
          undefined,
          undefined,
        );
      if (currentStep === "DownloadAPIKey") {
        return setQuickStartPageState(function (param) {
          return {
            TAG: "IntegrateApp",
            _0: "CHOOSE_INTEGRATION",
          };
        });
      } else {
        updateEnumInRecoil([
          [
            {
              TAG: "String",
              _0: "pending",
            },
            IntegrateYourAppUtils.getPolyMorphicVariantOfMigrateFromStripe(
              currentStep,
            ),
          ],
          [
            {
              TAG: "String",
              _0: "ongoing",
            },
            IntegrateYourAppUtils.getPolyMorphicVariantOfMigrateFromStripe(
              prevStep,
            ),
          ],
        ]);
        return setCurrentStep(function (param) {
          return prevStep;
        });
      }
    },
  });
  var nextButton = React.createElement(Button.make, {
    text: isLastStep ? "Complete" : "Proceed",
    buttonType: "Primary",
    buttonSize: "Small",
    onClick: function (param) {
      if (isLastStep) {
        mixpanelEvent(
          "quickstart_integration_completed",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
        markAsDone();
        return;
      }
      var nextStep =
        IntegrateYourAppUtils.getNavigationStepForMigrateFromStripe(
          currentStep,
          true,
          undefined,
        );
      updateEnumInRecoil([
        [
          {
            TAG: "String",
            _0: "completed",
          },
          IntegrateYourAppUtils.getPolyMorphicVariantOfMigrateFromStripe(
            currentStep,
          ),
        ],
        [
          {
            TAG: "String",
            _0: "ongoing",
          },
          IntegrateYourAppUtils.getPolyMorphicVariantOfMigrateFromStripe(
            nextStep,
          ),
        ],
      ]);
      setCurrentStep(function (param) {
        return nextStep;
      });
    },
  });
  var tmp;
  switch (currentStep) {
    case "DownloadAPIKey":
      tmp = React.createElement(UserOnboardingUIUtils.DownloadAPIKey.make, {
        currentRoute: currentRoute,
        currentTabName: "downloadApiKey",
      });
      break;
    case "InstallDeps":
      tmp = React.createElement(
        "div",
        {
          className: "p-10 bg-gray-50 border rounded flex flex-col gap-4",
        },
        React.createElement(
          UserOnboardingUIUtils.BackendFrontendPlatformLangDropDown.make,
          {
            frontEndLang: frontEndLang,
            setFrontEndLang: setFrontEndLang,
            backEndLang: backEndLang,
            setBackEndLang: setBackEndLang,
            currentRoute: currentRoute,
            platform: platform,
            setPlatform: setPlatform,
          },
        ),
        React.createElement(
          "div",
          {
            className: "bg-white border rounded",
          },
          React.createElement(UserOnboardingUIUtils.ShowCodeEditor.make, {
            value: UserOnboardingUtils.getMigrateFromStripeDX(
              frontEndLang,
              backEndLang,
            ),
            theme: theme,
            headerText: "Installation",
            langauge: backEndLang,
          }),
        ),
      );
      break;
    case "ReplaceAPIKeys":
      tmp = React.createElement(
        "div",
        {
          className: "flex flex-col gap-10",
        },
        React.createElement(
          "div",
          {
            className: "text-grey-50",
          },
          "Call loadHyper() with your Hyperswitch publishable key to configure the SDK library, from your website.This will load and invoke the Hyperswitch Checkout experience instead of the Stripe UI Elements.",
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-2",
          },
          React.createElement(
            "div",
            {
              className: "text-grey-900 font-medium",
            },
            "Publishable Key",
          ),
          React.createElement(
            UserOnboardingUIUtils.PublishableKeyArea.make,
            {},
          ),
        ),
        React.createElement(
          "div",
          {
            className: "p-10 bg-gray-50 border rounded flex flex-col gap-4",
          },
          React.createElement(
            UserOnboardingUIUtils.BackendFrontendPlatformLangDropDown.make,
            {
              frontEndLang: frontEndLang,
              setFrontEndLang: setFrontEndLang,
              backEndLang: backEndLang,
              setBackEndLang: setBackEndLang,
              currentRoute: currentRoute,
              platform: platform,
              setPlatform: setPlatform,
            },
          ),
          React.createElement(UserOnboardingUIUtils.DiffCodeEditor.make, {
            valueToShow: UserOnboardingUtils.getReplaceAPIkeys(backEndLang),
            langauge: backEndLang,
          }),
        ),
      );
      break;
    case "ReconfigureCheckout":
      tmp = React.createElement(
        "div",
        {
          className: "flex flex-col gap-10",
        },
        React.createElement(
          "div",
          {
            className: "text-grey-50",
          },
          "Reconfigure checkout form to import from Hyperswitch. This will import the Hyperswitch unified checkout dependencies.",
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-2",
          },
          React.createElement(
            "div",
            {
              className: "text-grey-900 font-medium",
            },
            "Publishable Key",
          ),
          React.createElement(
            UserOnboardingUIUtils.PublishableKeyArea.make,
            {},
          ),
        ),
        React.createElement(
          "div",
          {
            className: "p-10 bg-gray-50 border rounded flex flex-col gap-4",
          },
          React.createElement(
            UserOnboardingUIUtils.BackendFrontendPlatformLangDropDown.make,
            {
              frontEndLang: frontEndLang,
              setFrontEndLang: setFrontEndLang,
              backEndLang: backEndLang,
              setBackEndLang: setBackEndLang,
              currentRoute: currentRoute,
              platform: platform,
              setPlatform: setPlatform,
            },
          ),
          React.createElement(UserOnboardingUIUtils.DiffCodeEditor.make, {
            valueToShow: UserOnboardingUtils.getCheckoutForm(frontEndLang),
            langauge: frontEndLang,
          }),
        ),
      );
      break;
    case "LoadCheckout":
      tmp = React.createElement(
        "div",
        {
          className: "flex flex-col gap-10",
        },
        React.createElement(
          "div",
          {
            className: "text-grey-50",
          },
          "Call loadHyper() with your Hyperswitch publishable key to configure the SDK library, from your website.This will load and invoke the Hyperswitch Checkout experience instead of the Stripe UI Elements.",
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-2",
          },
          React.createElement(
            "div",
            {
              className: "text-grey-900 font-medium",
            },
            "Publishable Key",
          ),
          React.createElement(
            UserOnboardingUIUtils.PublishableKeyArea.make,
            {},
          ),
        ),
        React.createElement(
          "div",
          {
            className: "p-10 bg-gray-50 border rounded flex flex-col gap-4",
          },
          React.createElement(
            UserOnboardingUIUtils.BackendFrontendPlatformLangDropDown.make,
            {
              frontEndLang: frontEndLang,
              setFrontEndLang: setFrontEndLang,
              backEndLang: backEndLang,
              setBackEndLang: setBackEndLang,
              currentRoute: currentRoute,
              platform: platform,
              setPlatform: setPlatform,
            },
          ),
          React.createElement(UserOnboardingUIUtils.DiffCodeEditor.make, {
            valueToShow:
              UserOnboardingUtils.getHyperswitchCheckout(frontEndLang),
            langauge: frontEndLang,
          }),
        ),
      );
      break;
  }
  return React.createElement(QuickStartUIUtils.BaseComponent.make, {
    children: tmp,
    headerText:
      IntegrateYourAppUtils.getCurrentMigrateFromStripeStepHeading(currentStep),
    nextButton: Caml_option.some(nextButton),
    backButton: Caml_option.some(backButton),
    customCss: "show-scrollbar",
  });
}

var make = MigrateFromStripe;

export { make };
/* react Not a pure module */
