// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../../../components/Button.bs.js";
import * as RenderIf from "../../../../utils/RenderIf.bs.js";
import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ThemeProvider from "../../../../context/ThemeProvider.bs.js";
import * as GlobalProvider from "../../../../entryPoints/Provider/GlobalProvider.bs.js";
import * as EnumVariantHook from "../../../Hooks/EnumVariantHook.bs.js";
import * as QuickStartUIUtils from "../QuickStartUIUtils.bs.js";
import * as UserOnboardingUtils from "../../../SelfServe/HSwitchSandboxOnboarding/UserOnboardingUtils.bs.js";
import * as IntegrateYourAppUtils from "./IntegrateYourAppUtils.bs.js";
import * as UserOnboardingUIUtils from "../../../SelfServe/HSwitchSandboxOnboarding/UserOnboardingUIUtils.bs.js";

function IntegrateFromScratch(props) {
  var markAsDone = props.markAsDone;
  var setPlatform = props.setPlatform;
  var platform = props.platform;
  var setBackEndLang = props.setBackEndLang;
  var backEndLang = props.backEndLang;
  var setFrontEndLang = props.setFrontEndLang;
  var frontEndLang = props.frontEndLang;
  var currentRoute = props.currentRoute;
  var match = React.useContext(ThemeProvider.themeContext);
  var match$1 = React.useState(function () {
    return "DownloadTestAPIKey";
  });
  var setCurrentStep = match$1[1];
  var currentStep = match$1[0];
  var match$2 = React.useContext(GlobalProvider.defaultContext);
  var setQuickStartPageState = match$2.setQuickStartPageState;
  var isLastStep = currentStep === "DisplayPaymentConfirmation";
  var updateEnumInRecoil = EnumVariantHook.useUpdateEnumInRecoil();
  var match$3 = ThemeProvider.useTheme();
  var theme;
  theme = match$3 === "Light" ? "light" : "vs-dark";
  var backButton = React.createElement(Button.make, {
    buttonState: "Normal",
    text: "Back",
    buttonType: "PrimaryOutline",
    buttonSize: "Small",
    onClick: function (param) {
      var prevStep =
        IntegrateYourAppUtils.getNavigationStepForStandardIntegration(
          currentStep,
          undefined,
          undefined,
        );
      if (currentStep === "DownloadTestAPIKey") {
        return setQuickStartPageState(function (param) {
          return {
            TAG: "IntegrateApp",
            _0: "CHOOSE_INTEGRATION",
          };
        });
      } else {
        updateEnumInRecoil([
          [
            {
              TAG: "String",
              _0: "pending",
            },
            IntegrateYourAppUtils.getPolyMorphicVariantOfIntegrationSubStep(
              currentStep,
            ),
          ],
          [
            {
              TAG: "String",
              _0: "ongoing",
            },
            IntegrateYourAppUtils.getPolyMorphicVariantOfIntegrationSubStep(
              prevStep,
            ),
          ],
        ]);
        return setCurrentStep(function (param) {
          return prevStep;
        });
      }
    },
  });
  var nextButton = React.createElement(Button.make, {
    text: isLastStep ? "Complete" : "Proceed",
    buttonType: "Primary",
    buttonSize: "Small",
    onClick: function (param) {
      if (isLastStep) {
        markAsDone();
        return;
      }
      var nextStep =
        IntegrateYourAppUtils.getNavigationStepForStandardIntegration(
          currentStep,
          true,
          undefined,
        );
      updateEnumInRecoil([
        [
          {
            TAG: "String",
            _0: "completed",
          },
          IntegrateYourAppUtils.getPolyMorphicVariantOfIntegrationSubStep(
            currentStep,
          ),
        ],
        [
          {
            TAG: "String",
            _0: "ongoing",
          },
          IntegrateYourAppUtils.getPolyMorphicVariantOfIntegrationSubStep(
            nextStep,
          ),
        ],
      ]);
      setCurrentStep(function (param) {
        return nextStep;
      });
    },
  });
  var tmp;
  switch (currentStep) {
    case "DownloadTestAPIKey":
      tmp = React.createElement(UserOnboardingUIUtils.DownloadAPIKey.make, {
        currentRoute: currentRoute,
        currentTabName: "downloadApiKey",
      });
      break;
    case "CreatePayment":
      tmp = React.createElement(
        "div",
        {
          className: "flex flex-col gap-10",
        },
        React.createElement(
          "div",
          {
            className: "text-grey-50",
          },
          React.createElement(
            "p",
            {
              className: "text-base font-normal py-2 ",
            },
            "Create a payment from your server to establish the intent of the customer to start payment.",
          ),
          React.createElement(
            "p",
            undefined,
            "For the complete API schema, refer ",
            React.createElement(
              "span",
              {
                className:
                  match.globalUIConfig.font.textColor.primaryNormal +
                  " underline cursor-pointer",
                onClick: function (param) {
                  window.open(
                    "https://api-reference.hyperswitch.io/docs/hyperswitch-api-reference/60bae82472db8-payments-create",
                  );
                },
              },
              "API docs",
            ),
          ),
        ),
        React.createElement(
          "div",
          {
            className: "p-10 bg-gray-50 border rounded flex flex-col gap-4",
          },
          React.createElement(
            UserOnboardingUIUtils.BackendFrontendPlatformLangDropDown.make,
            {
              frontEndLang: frontEndLang,
              setFrontEndLang: setFrontEndLang,
              backEndLang: backEndLang,
              setBackEndLang: setBackEndLang,
              currentRoute: currentRoute,
              platform: platform,
              setPlatform: setPlatform,
            },
          ),
          React.createElement(
            "div",
            {
              className: "bg-white border rounded",
            },
            React.createElement(RenderIf.make, {
              condition: LogicUtils.isNonEmptyString(
                UserOnboardingUtils.getInstallDependencies(backEndLang),
              ),
              children: React.createElement(
                UserOnboardingUIUtils.ShowCodeEditor.make,
                {
                  value: UserOnboardingUtils.getMigrateFromStripeDX(
                    frontEndLang,
                    backEndLang,
                  ),
                  theme: theme,
                  headerText: "Installation",
                  langauge: backEndLang,
                },
              ),
            }),
          ),
          React.createElement(
            "div",
            {
              className: "bg-white border rounded",
            },
            React.createElement(UserOnboardingUIUtils.ShowCodeEditor.make, {
              value: UserOnboardingUtils.getCreateAPayment(backEndLang),
              theme: theme,
              headerText: "Request",
              customHeight: "25vh",
              langauge: backEndLang,
            }),
          ),
        ),
      );
      break;
    case "DisplayCheckout":
      tmp = React.createElement(
        "div",
        {
          className: "flex flex-col gap-10",
        },
        React.createElement(
          "div",
          {
            className: "text-grey-50",
          },
          "Open the Hyperswitch checkout for your user inside an iFrame to display the payment methods.",
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-2",
          },
          React.createElement(
            "div",
            {
              className: "text-grey-900 font-medium",
            },
            "Publishable Key",
          ),
          React.createElement(
            UserOnboardingUIUtils.PublishableKeyArea.make,
            {},
          ),
        ),
        React.createElement(
          "div",
          {
            className: "p-10 bg-gray-50 border rounded flex flex-col gap-4",
          },
          React.createElement(
            UserOnboardingUIUtils.BackendFrontendPlatformLangDropDown.make,
            {
              frontEndLang: frontEndLang,
              setFrontEndLang: setFrontEndLang,
              backEndLang: backEndLang,
              setBackEndLang: setBackEndLang,
              currentRoute: currentRoute,
              platform: platform,
              setPlatform: setPlatform,
            },
          ),
          React.createElement(RenderIf.make, {
            condition: LogicUtils.isNonEmptyString(
              UserOnboardingUtils.getInstallDependencies(frontEndLang),
            ),
            children: React.createElement(
              "div",
              {
                className: "bg-white border rounded",
              },
              React.createElement(UserOnboardingUIUtils.ShowCodeEditor.make, {
                value: UserOnboardingUtils.getInstallDependencies(frontEndLang),
                theme: theme,
                headerText: "Installation",
                langauge: frontEndLang,
              }),
            ),
          }),
          React.createElement(RenderIf.make, {
            condition: LogicUtils.isNonEmptyString(
              UserOnboardingUtils.getInstallDependencies(frontEndLang),
            ),
            children: React.createElement(
              "div",
              {
                className: "bg-white border rounded",
              },
              React.createElement(UserOnboardingUIUtils.ShowCodeEditor.make, {
                value: UserOnboardingUtils.getImports(frontEndLang),
                theme: theme,
                headerText: "Imports",
                langauge: frontEndLang,
              }),
            ),
          }),
          React.createElement(RenderIf.make, {
            condition: LogicUtils.isNonEmptyString(
              UserOnboardingUtils.getLoad(frontEndLang),
            ),
            children: React.createElement(
              "div",
              {
                className: "bg-white border rounded",
              },
              React.createElement(UserOnboardingUIUtils.ShowCodeEditor.make, {
                value: UserOnboardingUtils.getLoad(frontEndLang),
                theme: theme,
                headerText: "Load",
                langauge: frontEndLang,
              }),
            ),
          }),
          React.createElement(RenderIf.make, {
            condition: LogicUtils.isNonEmptyString(
              UserOnboardingUtils.getInitialize(frontEndLang),
            ),
            children: React.createElement(
              "div",
              {
                className: "bg-white border rounded",
              },
              React.createElement(UserOnboardingUIUtils.ShowCodeEditor.make, {
                value: UserOnboardingUtils.getInitialize(frontEndLang),
                theme: theme,
                headerText: "Initialize",
                langauge: frontEndLang,
              }),
            ),
          }),
          React.createElement(RenderIf.make, {
            condition: LogicUtils.isNonEmptyString(
              UserOnboardingUtils.getCheckoutFormForDisplayCheckoutPage(
                frontEndLang,
              ),
            ),
            children: React.createElement(
              "div",
              {
                className: "bg-white border rounded",
              },
              React.createElement(UserOnboardingUIUtils.ShowCodeEditor.make, {
                value:
                  UserOnboardingUtils.getCheckoutFormForDisplayCheckoutPage(
                    frontEndLang,
                  ),
                theme: theme,
                headerText: "Checkout Form",
                langauge: frontEndLang,
              }),
            ),
          }),
        ),
      );
      break;
    case "DisplayPaymentConfirmation":
      tmp = React.createElement(
        "div",
        {
          className: "flex flex-col gap-10",
        },
        React.createElement(
          "div",
          {
            className: "text-grey-50",
          },
          "Handle the response and display the thank you page to the user.",
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-2",
          },
          React.createElement(
            "div",
            {
              className: "text-grey-900 font-medium",
            },
            "Publishable Key",
          ),
          React.createElement(
            UserOnboardingUIUtils.PublishableKeyArea.make,
            {},
          ),
        ),
        React.createElement(
          "div",
          {
            className: "p-10 bg-gray-50 border rounded flex flex-col gap-4",
          },
          React.createElement(
            UserOnboardingUIUtils.BackendFrontendPlatformLangDropDown.make,
            {
              frontEndLang: frontEndLang,
              setFrontEndLang: setFrontEndLang,
              backEndLang: backEndLang,
              setBackEndLang: setBackEndLang,
              currentRoute: currentRoute,
              platform: platform,
              setPlatform: setPlatform,
            },
          ),
          React.createElement(RenderIf.make, {
            condition: LogicUtils.isNonEmptyString(
              UserOnboardingUtils.getHandleEvents(frontEndLang),
            ),
            children: React.createElement(
              "div",
              {
                className: "bg-white border rounded",
              },
              React.createElement(UserOnboardingUIUtils.ShowCodeEditor.make, {
                value: UserOnboardingUtils.getHandleEvents(frontEndLang),
                theme: theme,
                headerText: "Handle Events",
                customHeight: "20vh",
                langauge: frontEndLang,
              }),
            ),
          }),
          React.createElement(RenderIf.make, {
            condition: LogicUtils.isNonEmptyString(
              UserOnboardingUtils.getDisplayConformation(frontEndLang),
            ),
            children: React.createElement(
              "div",
              {
                className: "bg-white border rounded",
              },
              React.createElement(UserOnboardingUIUtils.ShowCodeEditor.make, {
                value: UserOnboardingUtils.getDisplayConformation(frontEndLang),
                theme: theme,
                headerText: "Display Payment Confirmation",
                customHeight: "20vh",
                langauge: frontEndLang,
              }),
            ),
          }),
        ),
      );
      break;
  }
  return React.createElement(QuickStartUIUtils.BaseComponent.make, {
    children: tmp,
    headerText:
      IntegrateYourAppUtils.getCurrentStandardIntegrationStepHeading(
        currentStep,
      ),
    nextButton: Caml_option.some(nextButton),
    backButton: Caml_option.some(backButton),
    customCss: "show-scrollbar",
  });
}

var make = IntegrateFromScratch;

export { make };
/* react Not a pure module */
