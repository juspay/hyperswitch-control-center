// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../../utils/Form.bs.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as MixpanelHook from "../../MixpanelHook.bs.js";
import * as GlobalProvider from "../../../entryPoints/Provider/GlobalProvider.bs.js";
import * as CommonAuthHooks from "../../../entryPoints/AuthModule/Common/CommonAuthHooks.bs.js";
import * as QuickStartUIUtils from "./QuickStartUIUtils.bs.js";
import * as JsxPPXReactSupportU from "rescript/lib/es6/jsxPPXReactSupportU.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as ProdVerifyModalUtils from "../ProdIntent/ProdVerifyModalUtils.bs.js";

function GoLive$ProdIntentForm(props) {
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-12 h-full w-full",
    },
    React.createElement(FormRenderer.DesktopRow.make, {
      children: React.createElement(
        "div",
        {
          className: "grid grid-cols-2 gap-5",
        },
        ProdVerifyModalUtils.formFieldsForQuickStart.map(
          function (column, index) {
            return JsxPPXReactSupportU.createElementWithKey(
              index.toString(),
              FormRenderer.FieldRenderer.make,
              {
                field: ProdVerifyModalUtils.getFormField(column),
                fieldWrapperClass: "w-full",
                labelClass: "!text-black font-medium !-ml-[0.5px]",
                errorClass: ProdVerifyModalUtils.errorClass,
              },
            );
          },
        ),
      ),
    }),
  );
}

var ProdIntentForm = {
  make: GoLive$ProdIntentForm,
};

function GoLive(props) {
  var getURL = APIUtils.useGetURL();
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var match = Core__Option.getOr(
    CommonAuthHooks.useCommonAuthInfo(),
    CommonAuthHooks.defaultAuthInfo,
  );
  var email = match.email;
  var match$1 = React.useState(function () {
    return {};
  });
  var setInitialValues = match$1[1];
  var match$2 = React.useContext(GlobalProvider.defaultContext);
  var match$3 = React.useState(function () {
    return false;
  });
  var setIsSubmitBtnDisabled = match$3[1];
  var match$4 = React.useContext(GlobalProvider.defaultContext);
  var setQuickStartPageState = match$4.setQuickStartPageState;
  var setIsProdIntentCompleted = match$4.setIsProdIntentCompleted;
  var setDashboardPageState = match$4.setDashboardPageState;
  var getProdVerifyDetails = async function () {
    try {
      var url = getURL(
        "USERS",
        "Get",
        undefined,
        undefined,
        "USER_DATA",
        undefined,
        undefined,
        "keys=ProdIntent",
        undefined,
      );
      var res = await fetchDetails(url);
      var firstValueFromArray = LogicUtils.getValueFromArray(
        LogicUtils.getArrayFromJson(res, []),
        0,
        null,
      );
      var valueForProdIntent = LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(firstValueFromArray),
        "ProdIntent",
      );
      var hideHeader = LogicUtils.getOptionBool(
        valueForProdIntent,
        ProdVerifyModalUtils.getStringFromVariant("IsCompleted"),
      );
      if (!Core__Option.getOr(hideHeader, false)) {
        valueForProdIntent[
          ProdVerifyModalUtils.getStringFromVariant("POCemail")
        ] = email;
      }
      setIsProdIntentCompleted(function (param) {
        return hideHeader;
      });
      setQuickStartPageState(function (param) {
        return "FinalLandingPage";
      });
      return setInitialValues(function (param) {
        return valueForProdIntent;
      });
    } catch (exn) {
      return;
    }
  };
  var updateProdDetails = async function (values) {
    try {
      var url = getURL(
        "USERS",
        "Post",
        undefined,
        undefined,
        "USER_DATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var bodyValues = ProdVerifyModalUtils.getBody(values);
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["ProdIntent", bodyValues],
      ]);
      await updateDetails(
        url,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      getProdVerifyDetails();
    } catch (exn) {}
    return null;
  };
  var onSubmit = function (values, param) {
    mixpanelEvent(
      "quickstart_get_production_access_completed",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    return updateProdDetails(values);
  };
  var landingButtonGroup = React.createElement(
    "div",
    {
      className: "flex flex-col gap-4 w-full",
    },
    React.createElement(RenderIf.make, {
      condition: !Core__Option.getOr(match$2.isProdIntentCompleted, false),
      children: React.createElement(Button.make, {
        text: "Get Production Access",
        buttonType: "Primary",
        onClick: function (param) {
          mixpanelEvent(
            "quickstart_get_production_access_landing",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          setQuickStartPageState(function (param) {
            return {
              TAG: "GoLive",
              _0: "GO_LIVE",
            };
          });
        },
      }),
    }),
    React.createElement(Button.make, {
      text: "Go to Home",
      buttonType: "Secondary",
      onClick: function (param) {
        setDashboardPageState(function (param) {
          return "HOME";
        });
        RescriptReactRouter.replace(GlobalVars.appendDashboardPath("/home"));
      },
    }),
  );
  var tmp;
  tmp =
    props.goLive === "LANDING"
      ? React.createElement(QuickStartUIUtils.StepCompletedPage.make, {
          buttonGroup: Caml_option.some(landingButtonGroup),
          headerText: "You have successfully completed Integration (Test Mode)",
        })
      : JsxPPXReactSupportU.createElementWithKey(
          "go-live-prod-intent-form",
          Form.make,
          {
            children: React.createElement(
              QuickStartUIUtils.BaseComponent.make,
              {
                children: React.createElement(
                  "div",
                  {
                    className: "flex flex-col justify-center gap-8",
                  },
                  React.createElement(
                    "div",
                    {
                      className: "mx-4 text-grey-50 w-2/3 leading-6",
                    },
                    "We require some information to verify your business. Once verified, you'll be able to access production environment and go live!",
                  ),
                  React.createElement(GoLive$ProdIntentForm, {}),
                ),
                headerText: "Provide Business Details",
                headerLeftIcon: "hyperswitch-logo-short",
                nextButton: Caml_option.some(
                  React.createElement(FormRenderer.SubmitButton.make, {
                    text: "Submit",
                    disabledParamter: match$3[0],
                    buttonSize: "Small",
                  }),
                ),
                backButton: Caml_option.some(
                  React.createElement(Button.make, {
                    text: "Exit to Homepage",
                    buttonType: "PrimaryOutline",
                    buttonSize: "Small",
                    onClick: function (param) {
                      setDashboardPageState(function (param) {
                        return "HOME";
                      });
                      RescriptReactRouter.replace(
                        GlobalVars.appendDashboardPath("/home"),
                      );
                    },
                  }),
                ),
              },
            ),
            onSubmit: onSubmit,
            initialValues: match$1[0],
            validate: function (values) {
              return ProdVerifyModalUtils.validateForm(
                values,
                ProdVerifyModalUtils.formFields,
                setIsSubmitBtnDisabled,
              );
            },
          },
        );
  return React.createElement(
    "div",
    {
      className: "w-full h-full flex ",
    },
    React.createElement(
      "div",
      {
        className: "w-full h-full flex items-center justify-center",
      },
      tmp,
    ),
  );
}

var make = GoLive;

export { ProdIntentForm, make };
/* Form Not a pure module */
