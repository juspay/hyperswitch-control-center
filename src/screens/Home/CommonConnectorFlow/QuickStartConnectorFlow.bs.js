// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../../components/custom-icons/GatewayIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as MixpanelHook from "../../MixpanelHook.bs.js";
import * as ConnectorUtils from "../../Connectors/ConnectorUtils.bs.js";
import * as GlobalProvider from "../../../entryPoints/Provider/GlobalProvider.bs.js";
import * as SetupConnector from "./SetupConnector.bs.js";
import * as EnumVariantHook from "../../Hooks/EnumVariantHook.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as QuickStartUtils from "../QuickStart/QuickStartUtils.bs.js";
import * as ConnectorPreview from "../../Connectors/ConnectorPreview.bs.js";
import * as QuickStartUIUtils from "../QuickStart/QuickStartUIUtils.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as ConnectorListMapper from "../../../utils/Mappers/ConnectorListMapper.bs.js";
import * as MerchantAccountUtils from "../../Settings/MerchantAccountUtils.bs.js";
import * as HSwitchSetupAccountUtils from "../../SetupAccount/HSwitchSetupAccountUtils.bs.js";

function QuickStartConnectorFlow(props) {
  var setChoiceStateForTestConnector = props.setChoiceStateForTestConnector;
  var choiceStateForTestConnector = props.choiceStateForTestConnector;
  var setConnectorArray = props.setConnectorArray;
  var connectorArray = props.connectorArray;
  var initialValues = props.initialValues;
  var setInitialValues = props.setInitialValues;
  var setConnectorConfigureState = props.setConnectorConfigureState;
  var setSelectedConnector = props.setSelectedConnector;
  var selectedConnector = props.selectedConnector;
  var getURL = APIUtils.useGetURL();
  var showToast = ToastState.useShowToast();
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var match = React.useState(function () {
    return "Normal";
  });
  var setButtonState = match[1];
  var buttonState = match[0];
  var postEnumDetails = EnumVariantHook.usePostEnumDetails();
  var enumDetails = Recoil.useRecoilValue(HyperswitchAtom.enumVariantAtom);
  var typedEnumValue = QuickStartUtils.getTypedValueFromDict(
    LogicUtils.safeParse(enumDetails),
  );
  var match$1 = React.useContext(GlobalProvider.defaultContext);
  var setQuickStartPageState = match$1.setQuickStartPageState;
  var quickStartPageState = match$1.quickStartPageState;
  var activeBusinessProfile = MerchantAccountUtils.getValueFromBusinessProfile(
    Recoil.useRecoilValue(HyperswitchAtom.businessProfilesAtom),
  );
  var connectorName = ConnectorUtils.getConnectorNameString(selectedConnector);
  var handleSummaryProceed = function () {
    mixpanelEvent(
      "quickstart_connector_summary",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    if (
      connectorArray.length === 2 &&
      QuickStartUtils.connectorChoiceStringVariantMapper(
        typedEnumValue.configurationType,
      ) === "MultipleProcessorWithSmartRouting"
    ) {
      setQuickStartPageState(function (param) {
        return {
          TAG: "ConnectProcessor",
          _0: "CONFIGURE_SMART_ROUTING",
        };
      });
    } else if (
      QuickStartUtils.connectorChoiceStringVariantMapper(
        typedEnumValue.configurationType,
      ) === "SinglePaymentProcessor"
    ) {
      setQuickStartPageState(function (param) {
        return {
          TAG: "ConnectProcessor",
          _0: "CHECKOUT",
        };
      });
    } else {
      setSelectedConnector(function (param) {
        return {
          TAG: "UnknownConnector",
          _0: "",
        };
      });
      setInitialValues(function (param) {
        return {};
      });
      setConnectorConfigureState(function (param) {
        return "Select_processor";
      });
      setQuickStartPageState(function (param) {
        return {
          TAG: "ConnectProcessor",
          _0: "CONFIGURE_SECONDARY",
        };
      });
    }
    setChoiceStateForTestConnector(function (param) {
      return "TestApiKeys";
    });
  };
  var updateEnumForTestConnector = async function (connectorResponse) {
    try {
      var processorVal_processorID = LogicUtils.getString(
        connectorResponse,
        "merchant_connector_id",
        "",
      );
      var processorVal_processorName = LogicUtils.getString(
        connectorResponse,
        "connector_name",
        "",
      );
      var processorVal = {
        processorID: processorVal_processorID,
        processorName: processorVal_processorName,
      };
      var enumVariant =
        QuickStartUtils.variantToEnumMapper(quickStartPageState);
      await postEnumDetails(
        {
          TAG: "ProcesorType",
          _0: processorVal,
        },
        enumVariant,
      );
      return setButtonState(function (param) {
        return "Normal";
      });
    } catch (exn) {
      showToast(
        "Step already set",
        "ToastError",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return setButtonState(function (param) {
        return "Normal";
      });
    }
  };
  var handleTestConnector = async function (param) {
    try {
      setButtonState(function (param) {
        return "Loading";
      });
      var url = getURL(
        "CONNECTOR",
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var connectorName = QuickStartUtils.getTestConnectorName(
        selectedConnector,
        quickStartPageState,
      );
      var testConnectorBody = HSwitchSetupAccountUtils.constructBody(
        connectorName,
        window.getConnectorConfig(connectorName),
        activeBusinessProfile.profile_id,
      );
      var res = await updateDetails(
        url,
        testConnectorBody,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      connectorArray.push(connectorName);
      setConnectorArray(function (param) {
        return connectorArray;
      });
      setInitialValues(function (param) {
        return res;
      });
      setSelectedConnector(function (param) {
        return ConnectorUtils.getConnectorNameTypeFromString(
          connectorName,
          undefined,
          undefined,
        );
      });
      setConnectorConfigureState(function (param) {
        return "Summary";
      });
      updateEnumForTestConnector(LogicUtils.getDictFromJsonObject(res));
      return showToast(
        LogicUtils.getFirstLetterCaps(connectorName, undefined, undefined) +
          " connected successfully!",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        showToast(
          err,
          "ToastError",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
        return setButtonState(function (param) {
          return "Normal";
        });
      }
      throw e;
    }
  };
  var handleConnectorSubmit = function () {
    if (choiceStateForTestConnector === "TestApiKeys") {
      mixpanelEvent(
        "quickstart_select_configuration_type_test",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      handleTestConnector();
      return;
    } else {
      setConnectorConfigureState(function (param) {
        return "Configure_keys";
      });
      return mixpanelEvent(
        "quickstart_select_configuration_type_keys",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
  };
  React.useEffect(
    function () {
      if (choiceStateForTestConnector === "NotSelected") {
        setButtonState(function (param) {
          return "Disabled";
        });
      } else {
        setButtonState(function (param) {
          return "Normal";
        });
      }
    },
    [choiceStateForTestConnector],
  );
  React.useEffect(
    function () {
      var defaultJsonOnNewConnector = Object.fromEntries([
        ["profile_id", activeBusinessProfile.profile_id],
      ]);
      setInitialValues(function (param) {
        return defaultJsonOnNewConnector;
      });
    },
    [activeBusinessProfile.profile_id, connectorName],
  );
  var tmp;
  switch (props.connectorConfigureState) {
    case "Select_processor":
      tmp = React.createElement(SetupConnector.SelectProcessor.make, {
        setSelectedConnector: setSelectedConnector,
        selectedConnector: selectedConnector,
        setConnectorConfigureState: setConnectorConfigureState,
        connectorArray: connectorArray,
      });
      break;
    case "Select_configuration_type":
      tmp = React.createElement(QuickStartUIUtils.LandingPageChoice.make, {
        choiceState: choiceStateForTestConnector,
        setChoiceState: setChoiceStateForTestConnector,
        listChoices:
          QuickStartUtils.getTypeOfConfigurationArray(selectedConnector),
        nextButton: React.createElement(Button.make, {
          buttonState: buttonState,
          text: "Proceed",
          buttonType: "Primary",
          buttonSize: "Small",
          onClick: function (param) {
            handleConnectorSubmit();
          },
          showBtnTextToolTip: buttonState === "Disabled",
          tooltipText: "Please select one of the choices",
        }),
        headerText:
          "Connect " +
          ConnectorUtils.getDisplayNameForConnector(undefined, connectorName),
        backButton: Caml_option.some(
          React.createElement(Button.make, {
            text: "Back",
            buttonType: "PrimaryOutline",
            buttonSize: "Small",
            onClick: function (param) {
              setConnectorConfigureState(function (param) {
                return "Select_processor";
              });
            },
          }),
        ),
        isHeaderLeftIcon: false,
        customIcon: Caml_option.some(
          React.createElement(GatewayIcon.make, {
            gateway: connectorName.toUpperCase(),
            className: "w-6 h-6 rounded-md",
          }),
        ),
      });
      break;
    case "Configure_keys":
      tmp = React.createElement(SetupConnector.ConfigureProcessor.make, {
        selectedConnector: selectedConnector,
        initialValues: initialValues,
        setInitialValues: setInitialValues,
        setConnectorConfigureState: setConnectorConfigureState,
      });
      break;
    case "Setup_payment_methods":
      tmp = React.createElement(SetupConnector.SelectPaymentMethods.make, {
        selectedConnector: selectedConnector,
        initialValues: initialValues,
        setInitialValues: setInitialValues,
        setConnectorConfigureState: setConnectorConfigureState,
        setConnectorArray: setConnectorArray,
        connectorArray: connectorArray,
        setButtonState: setButtonState,
        buttonState: buttonState,
      });
      break;
    case "Summary":
      tmp = React.createElement(QuickStartUIUtils.BaseComponent.make, {
        children: React.createElement(
          ConnectorPreview.ConnectorSummaryGrid.make,
          {
            connectorInfo: ConnectorListMapper.getProcessorPayloadType(
              LogicUtils.getDictFromJsonObject(initialValues),
            ),
            connector: connectorName,
            isPayoutFlow: false,
            setScreenState: function (param) {},
          },
        ),
        headerText: ConnectorUtils.getDisplayNameForConnector(
          undefined,
          connectorName,
        ),
        nextButton: Caml_option.some(
          React.createElement(Button.make, {
            buttonState: buttonState,
            text: "Proceed",
            buttonType: "Primary",
            buttonSize: "Small",
            onClick: function (param) {
              handleSummaryProceed();
            },
            customButtonStyle: "rounded-md",
          }),
        ),
        customIcon: Caml_option.some(
          React.createElement(GatewayIcon.make, {
            gateway: connectorName.toUpperCase(),
            className: "w-6 h-6 rounded-md",
          }),
        ),
        customCss: "show-scrollbar",
      });
      break;
  }
  return React.createElement(
    "div",
    {
      className: "w-full h-full flex items-center justify-center",
    },
    tmp,
  );
}

var make = QuickStartConnectorFlow;

export { make };
/* react Not a pure module */
