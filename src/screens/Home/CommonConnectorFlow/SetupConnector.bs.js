// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../../utils/Form.bs.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as RenderIf from "../../../utils/RenderIf.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../../components/custom-icons/GatewayIcon.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as MixpanelHook from "../../MixpanelHook.bs.js";
import * as FormValuesSpy from "../../../components/form/FormValuesSpy.bs.js";
import * as PaymentMethod from "../../Connectors/ConnectorUIUtils/PaymentMethod.bs.js";
import * as ConnectorUtils from "../../Connectors/ConnectorUtils.bs.js";
import * as GlobalProvider from "../../../entryPoints/Provider/GlobalProvider.bs.js";
import * as EnumVariantHook from "../../Hooks/EnumVariantHook.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as QuickStartUtils from "../QuickStart/QuickStartUtils.bs.js";
import * as JsonFlattenUtils from "../../../utils/JsonFlattenUtils.bs.js";
import * as QuickStartUIUtils from "../QuickStart/QuickStartUIUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as SetupConnectorCredentials from "../../SelfServe/HSwitchProdOnboarding/SetupConnectorCredentials.bs.js";

function SetupConnector$SelectProcessor(props) {
  var connectorArray = props.connectorArray;
  var setConnectorConfigureState = props.setConnectorConfigureState;
  var selectedConnector = props.selectedConnector;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var basePath = Core__List.toArray(url.path).join("/");
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var connectorName = ConnectorUtils.getConnectorNameString(selectedConnector);
  var match = React.useContext(GlobalProvider.defaultContext);
  var setQuickStartPageState = match.setQuickStartPageState;
  var tmp;
  tmp = selectedConnector.TAG === "UnknownConnector" ? "Disabled" : "Normal";
  var tmp$1;
  tmp$1 = selectedConnector.TAG === "UnknownConnector" ? true : false;
  var tmp$2;
  tmp$2 =
    selectedConnector.TAG === "UnknownConnector"
      ? "Please select one of the processor"
      : "";
  return React.createElement(QuickStartUIUtils.BaseComponent.make, {
    children: React.createElement(QuickStartUIUtils.SelectConnectorGrid.make, {
      selectedConnector: selectedConnector,
      setSelectedConnector: props.setSelectedConnector,
      connectorList: ConnectorUtils.connectorList.filter(function (value) {
        return !connectorArray.includes(
          ConnectorUtils.getConnectorNameString(value),
        );
      }),
    }),
    headerText: "Select Processor",
    nextButton: Caml_option.some(
      React.createElement(Button.make, {
        buttonState: tmp,
        text: "Proceed",
        buttonType: "Primary",
        buttonSize: "Small",
        onClick: function (param) {
          setConnectorConfigureState(function (param) {
            return "Select_configuration_type";
          });
          mixpanelEvent(
            "quickstart_select_processor",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          RescriptReactRouter.replace(
            "/" + basePath + "?name=" + connectorName,
          );
        },
        showBtnTextToolTip: tmp$1,
        tooltipText: tmp$2,
      }),
    ),
    backButton: Caml_option.some(
      React.createElement(Button.make, {
        buttonState: "Normal",
        text: "Back",
        buttonType: "PrimaryOutline",
        buttonSize: "Small",
        onClick: function (param) {
          setQuickStartPageState(function (param) {
            return {
              TAG: "ConnectProcessor",
              _0: "LANDING",
            };
          });
        },
      }),
    ),
    customCss: "show-scrollbar",
  });
}

var SelectProcessor = {
  make: SetupConnector$SelectProcessor,
};

function SetupConnector$ConfigureProcessor(props) {
  var __isBackButtonVisible = props.isBackButtonVisible;
  var setConnectorConfigureState = props.setConnectorConfigureState;
  var setInitialValues = props.setInitialValues;
  var selectedConnector = props.selectedConnector;
  var isBackButtonVisible =
    __isBackButtonVisible !== undefined ? __isBackButtonVisible : true;
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var connectorName = ConnectorUtils.getConnectorNameString(selectedConnector);
  var connectorDetails = React.useMemo(
    function () {
      try {
        if (LogicUtils.isNonEmptyString(connectorName)) {
          return window.getConnectorConfig(connectorName);
        } else {
          return {};
        }
      } catch (exn) {
        return {};
      }
    },
    [[connectorName, selectedConnector]],
  );
  var match = ConnectorUtils.getConnectorFields(connectorDetails);
  var connectorLabelDetailField = match[5];
  var connectorWebHookDetails = match[4];
  var connectorMetaDataFields = match[2];
  var connectorAccountFields = match[1];
  var bodyType = match[0];
  var onSubmit = async function (values, param) {
    var body = ConnectorUtils.generateInitialValuesDict(
      values,
      connectorName,
      bodyType,
      false,
      featureFlagDetails.isLiveMode,
      undefined,
      undefined,
    );
    setInitialValues(function (param) {
      return body;
    });
    mixpanelEvent(
      "quickstart_connector_configuration",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    setConnectorConfigureState(function (param) {
      return "Setup_payment_methods";
    });
    return null;
  };
  var validateMandatoryField = function (values) {
    var errors = {};
    var valuesFlattenJson = JsonFlattenUtils.flattenObject(values, true);
    var profileId = LogicUtils.getString(valuesFlattenJson, "profile_id", "");
    if (profileId.length === 0) {
      errors["Profile Id"] = "Please select your business profile";
    }
    return ConnectorUtils.validateConnectorRequiredFields(
      ConnectorUtils.getConnectorNameTypeFromString(
        connectorName,
        undefined,
        undefined,
      ),
      valuesFlattenJson,
      connectorAccountFields,
      connectorMetaDataFields,
      connectorWebHookDetails,
      connectorLabelDetailField,
      errors,
    );
  };
  var backButton = React.createElement(RenderIf.make, {
    condition: isBackButtonVisible,
    children: React.createElement(Button.make, {
      text: "Back",
      buttonType: "PrimaryOutline",
      buttonSize: "Small",
      onClick: function (param) {
        setConnectorConfigureState(function (param) {
          return "Select_configuration_type";
        });
      },
    }),
  });
  return React.createElement(Form.make, {
    children: React.createElement(QuickStartUIUtils.BaseComponent.make, {
      children: React.createElement(
        SetupConnectorCredentials.ConnectorDetailsForm.make,
        {
          connectorName: connectorName,
          connectorDetails: connectorDetails,
          isCheckboxSelected: false,
          setIsCheckboxSelected: function (param) {},
          setVerifyDone: function (param) {},
          verifyErrorMessage: undefined,
          checkboxText: "",
        },
      ),
      headerText:
        "Connect " +
        ConnectorUtils.getDisplayNameForConnector(undefined, connectorName),
      nextButton: Caml_option.some(
        React.createElement(FormRenderer.SubmitButton.make, {
          text: "Proceed",
          loadingText: "Processing...",
          buttonSize: "Small",
        }),
      ),
      backButton: Caml_option.some(backButton),
      customIcon: Caml_option.some(
        React.createElement(GatewayIcon.make, {
          gateway: connectorName.toUpperCase(),
          className: "w-6 h-6 rounded-md",
        }),
      ),
    }),
    onSubmit: onSubmit,
    initialValues: props.initialValues,
    validate: validateMandatoryField,
  });
}

var ConfigureProcessor = {
  make: SetupConnector$ConfigureProcessor,
};

function SetupConnector$SelectPaymentMethods(props) {
  var setButtonState = props.setButtonState;
  var connectorArray = props.connectorArray;
  var setConnectorArray = props.setConnectorArray;
  var setConnectorConfigureState = props.setConnectorConfigureState;
  var setInitialValues = props.setInitialValues;
  var initialValues = props.initialValues;
  var match = React.useContext(GlobalProvider.defaultContext);
  var quickStartPageState = match.quickStartPageState;
  var updateAPIHook = APIUtils.useUpdateMethod(undefined, undefined);
  var getURL = APIUtils.useGetURL();
  var showToast = ToastState.useShowToast();
  var mixpanelEvent = MixpanelHook.useSendEvent();
  var postEnumDetails = EnumVariantHook.usePostEnumDetails();
  var connectorName = ConnectorUtils.getConnectorNameString(
    props.selectedConnector,
  );
  var match$1 = React.useState(function () {
    return ConnectorUtils.getPaymentMethodEnabled({});
  });
  var setPaymentMethods = match$1[1];
  var paymentMethodsEnabled = match$1[0];
  var match$2 = React.useState(function () {
    return {};
  });
  var setMetaData = match$2[1];
  var metaData = match$2[0];
  var updateDetails = function (value) {
    setPaymentMethods(function (param) {
      return value.slice();
    });
  };
  var updateEnumForConnector = async function (connectorResponse) {
    try {
      var processorVal_processorID = LogicUtils.getString(
        connectorResponse,
        "merchant_connector_id",
        "",
      );
      var processorVal_processorName = LogicUtils.getString(
        connectorResponse,
        "connector_name",
        "",
      );
      var processorVal = {
        processorID: processorVal_processorID,
        processorName: processorVal_processorName,
      };
      var enumVariant =
        QuickStartUtils.variantToEnumMapper(quickStartPageState);
      await postEnumDetails(
        {
          TAG: "ProcesorType",
          _0: processorVal,
        },
        enumVariant,
      );
      return;
    } catch (exn) {
      return setButtonState(function (param) {
        return "Normal";
      });
    }
  };
  var onSubmitMain = async function () {
    setButtonState(function (param) {
      return "Loading";
    });
    try {
      var obj = {
        payment_methods_enabled: paymentMethodsEnabled,
        connector: connectorName,
        metadata: metaData,
      };
      var body = ConnectorUtils.constructConnectorRequestBody(
        obj,
        initialValues,
      );
      var metaData$1 = LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(body),
        "metadata",
      );
      ConnectorUtils.updateMetaData(metaData$1);
      var connectorUrl = getURL(
        "CONNECTOR",
        "Post",
        Caml_option.some(undefined),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await updateAPIHook(
        connectorUrl,
        body,
        "Post",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setInitialValues(function (param) {
        return response;
      });
      connectorArray.push(connectorName);
      setConnectorArray(function (param) {
        return connectorArray;
      });
      updateEnumForConnector(LogicUtils.getDictFromJsonObject(response));
      setConnectorConfigureState(function (param) {
        return "Summary";
      });
      showToast(
        LogicUtils.getFirstLetterCaps(connectorName, undefined, undefined) +
          " connected successfully!",
        "ToastSuccess",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setButtonState(function (param) {
        return "Normal";
      });
      return mixpanelEvent(
        "quickstart_connector_payment_methods",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {
      return setButtonState(function (param) {
        return "Normal";
      });
    }
  };
  React.useEffect(
    function () {
      ConnectorUtils.getConnectorPaymentMethodDetails(
        initialValues,
        setPaymentMethods,
        setMetaData,
        false,
        false,
        connectorName,
        updateDetails,
      );
    },
    [connectorName],
  );
  return React.createElement(QuickStartUIUtils.BaseComponent.make, {
    children: React.createElement(
      Form.make,
      {
        children: null,
        initialValues: initialValues,
      },
      React.createElement(PaymentMethod.PaymentMethodsRender.make, {
        _showAdvancedConfiguration: false,
        connector: connectorName,
        paymentMethodsEnabled: paymentMethodsEnabled,
        updateDetails: updateDetails,
        setMetaData: setMetaData,
        isPayoutFlow: false,
      }),
      React.createElement(FormValuesSpy.make, {}),
    ),
    headerText: "Connect payment methods",
    nextButton: Caml_option.some(
      React.createElement(Button.make, {
        buttonState: props.buttonState,
        text: "Proceed",
        buttonType: "Primary",
        buttonSize: "Small",
        onClick: function (param) {
          onSubmitMain();
        },
        customButtonStyle: "rounded-md",
      }),
    ),
    backButton: Caml_option.some(
      React.createElement(Button.make, {
        text: "Back",
        buttonType: "PrimaryOutline",
        buttonSize: "Small",
        onClick: function (param) {
          setConnectorConfigureState(function (param) {
            return "Configure_keys";
          });
        },
      }),
    ),
    customIcon: Caml_option.some(
      React.createElement(GatewayIcon.make, {
        gateway: connectorName.toUpperCase(),
        className: "w-6 h-6 rounded-md",
      }),
    ),
    customCss: "show-scrollbar",
  });
}

var SelectPaymentMethods = {
  make: SetupConnector$SelectPaymentMethods,
};

export { SelectProcessor, ConfigureProcessor, SelectPaymentMethods };
/* Form Not a pure module */
