// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as RoutingUtils from "../Routing/RoutingUtils.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";

var listOfStepCounter = [
  "INITIALIZE",
  "CONNECTORS_CONFIGURED",
  "ROUTING_ENABLED",
  "GENERATE_SAMPLE_DATA",
  "COMPLETED",
];

function constructBody(connectorName, json, profileId) {
  var connectorAccountDict = LogicUtils.getDictfromDict(
    LogicUtils.getDictFromJsonObject(json),
    "connector_auth",
  );
  var bodyType = Core__Option.getOr(Object.keys(connectorAccountDict)[0], "");
  var connectorAccountDetails = LogicUtils.getJsonFromArrayOfJson([
    ["auth_type", bodyType],
    ["api_key", "test"],
  ]);
  var initialValueForPayload = ConnectorUtils.generateInitialValuesDict(
    LogicUtils.getJsonFromArrayOfJson([
      ["profile_id", profileId],
      ["connector_account_details", connectorAccountDetails],
      ["connector_label", connectorName + "_default"],
    ]),
    connectorName,
    bodyType,
    undefined,
    undefined,
    undefined,
    undefined,
  );
  var creditCardNetworkArray = ConnectorUtils.getPaymentMethodMapper(
    LogicUtils.getArrayFromDict(
      LogicUtils.getDictFromJsonObject(json),
      "credit",
      [],
    ),
  );
  var debitCardNetworkArray = ConnectorUtils.getPaymentMethodMapper(
    LogicUtils.getArrayFromDict(
      LogicUtils.getDictFromJsonObject(json),
      "debit",
      [],
    ),
  );
  var payLaterArray = ConnectorUtils.getPaymentMethodMapper(
    LogicUtils.getArrayFromDict(
      LogicUtils.getDictFromJsonObject(json),
      "pay_later",
      [],
    ),
  );
  var walletArray = ConnectorUtils.getPaymentMethodMapper(
    LogicUtils.getArrayFromDict(
      LogicUtils.getDictFromJsonObject(json),
      "wallet",
      [],
    ),
  );
  var paymentMethodsEnabledArray = [
    {
      payment_method: "card",
      payment_method_type: "credit",
      provider: [],
      card_provider: creditCardNetworkArray,
    },
    {
      payment_method: "card",
      payment_method_type: "debit",
      provider: [],
      card_provider: debitCardNetworkArray,
    },
    {
      payment_method: "pay_later",
      payment_method_type: "pay_later",
      provider: payLaterArray,
      card_provider: [],
    },
    {
      payment_method: "wallet",
      payment_method_type: "wallet",
      provider: walletArray,
      card_provider: [],
    },
  ];
  var requestPayload_metadata = {};
  var requestPayload = {
    payment_methods_enabled: paymentMethodsEnabledArray,
    connector: connectorName,
    metadata: requestPayload_metadata,
  };
  return ConnectorUtils.constructConnectorRequestBody(
    requestPayload,
    initialValueForPayload,
  );
}

function constructRoutingPayload(routingData) {
  var innerRoutingDict = LogicUtils.getJsonFromArrayOfJson([
    ["connector", routingData.connector_name],
    ["merchant_connector_id", routingData.merchant_connector_id],
  ]);
  return Object.fromEntries([
    ["split", 50.0],
    ["connector", innerRoutingDict],
  ]);
}

function routingPayload(profileId, routingData1, routingData2) {
  var payload = [
    constructRoutingPayload(routingData1),
    constructRoutingPayload(routingData2),
  ];
  return RoutingUtils.getRoutingPayload(
    payload,
    "volume_split",
    "Initial volume based routing setup",
    "Volume based routing pre-configured by Hyperswitch",
    profileId,
  );
}

var delayTime = 2000;

export {
  delayTime,
  listOfStepCounter,
  constructBody,
  constructRoutingPayload,
  routingPayload,
};
/* LogicUtils Not a pure module */
